{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/3_11.png","path":"images/3_11.png","modified":1,"renderable":0},{"_id":"source/images/3_10.png","path":"images/3_10.png","modified":1,"renderable":0},{"_id":"source/images/3_18.png","path":"images/3_18.png","modified":1,"renderable":0},{"_id":"source/images/3_2.png","path":"images/3_2.png","modified":1,"renderable":0},{"_id":"source/images/3_20.png","path":"images/3_20.png","modified":1,"renderable":0},{"_id":"source/images/3_21.png","path":"images/3_21.png","modified":1,"renderable":0},{"_id":"source/images/3_23.png","path":"images/3_23.png","modified":1,"renderable":0},{"_id":"source/images/3_28.png","path":"images/3_28.png","modified":1,"renderable":0},{"_id":"source/images/3_27.png","path":"images/3_27.png","modified":1,"renderable":0},{"_id":"source/images/3_3.png","path":"images/3_3.png","modified":1,"renderable":0},{"_id":"source/images/3_30.png","path":"images/3_30.png","modified":1,"renderable":0},{"_id":"source/images/3_31.png","path":"images/3_31.png","modified":1,"renderable":0},{"_id":"source/images/3_32.png","path":"images/3_32.png","modified":1,"renderable":0},{"_id":"source/images/3_36.png","path":"images/3_36.png","modified":1,"renderable":0},{"_id":"source/images/3_4.png","path":"images/3_4.png","modified":1,"renderable":0},{"_id":"source/images/3_5.png","path":"images/3_5.png","modified":1,"renderable":0},{"_id":"source/images/3_6.png","path":"images/3_6.png","modified":1,"renderable":0},{"_id":"source/images/3_7.png","path":"images/3_7.png","modified":1,"renderable":0},{"_id":"source/images/3_8.png","path":"images/3_8.png","modified":1,"renderable":0},{"_id":"source/images/3_9.png","path":"images/3_9.png","modified":1,"renderable":0},{"_id":"source/images/GitHub-Mark.png","path":"images/GitHub-Mark.png","modified":1,"renderable":0},{"_id":"source/images/angular1.png","path":"images/angular1.png","modified":1,"renderable":0},{"_id":"source/images/angular10.jpg","path":"images/angular10.jpg","modified":1,"renderable":0},{"_id":"source/images/angular11.jpg","path":"images/angular11.jpg","modified":1,"renderable":0},{"_id":"source/images/angular12.png","path":"images/angular12.png","modified":1,"renderable":0},{"_id":"source/images/angular13.png","path":"images/angular13.png","modified":1,"renderable":0},{"_id":"source/images/angular14.png","path":"images/angular14.png","modified":1,"renderable":0},{"_id":"source/images/angular15.png","path":"images/angular15.png","modified":1,"renderable":0},{"_id":"source/images/angular16.png","path":"images/angular16.png","modified":1,"renderable":0},{"_id":"source/images/angular17.jpg","path":"images/angular17.jpg","modified":1,"renderable":0},{"_id":"source/images/angular2.jpg","path":"images/angular2.jpg","modified":1,"renderable":0},{"_id":"source/images/angular19.png","path":"images/angular19.png","modified":1,"renderable":0},{"_id":"source/images/angular20.jpg","path":"images/angular20.jpg","modified":1,"renderable":0},{"_id":"source/images/angular21.png","path":"images/angular21.png","modified":1,"renderable":0},{"_id":"source/images/angular22.jpg","path":"images/angular22.jpg","modified":1,"renderable":0},{"_id":"source/images/angular23.jpg","path":"images/angular23.jpg","modified":1,"renderable":0},{"_id":"source/images/angular24.png","path":"images/angular24.png","modified":1,"renderable":0},{"_id":"source/images/angular27.png","path":"images/angular27.png","modified":1,"renderable":0},{"_id":"source/images/angular28.png","path":"images/angular28.png","modified":1,"renderable":0},{"_id":"source/images/angular29.png","path":"images/angular29.png","modified":1,"renderable":0},{"_id":"source/images/angular3.jpg","path":"images/angular3.jpg","modified":1,"renderable":0},{"_id":"source/images/angular30.png","path":"images/angular30.png","modified":1,"renderable":0},{"_id":"source/images/angular31.png","path":"images/angular31.png","modified":1,"renderable":0},{"_id":"source/images/angular32.png","path":"images/angular32.png","modified":1,"renderable":0},{"_id":"source/images/angular33.png","path":"images/angular33.png","modified":1,"renderable":0},{"_id":"source/images/angular34.jpg","path":"images/angular34.jpg","modified":1,"renderable":0},{"_id":"source/images/angular35.png","path":"images/angular35.png","modified":1,"renderable":0},{"_id":"source/images/angular36.jpg","path":"images/angular36.jpg","modified":1,"renderable":0},{"_id":"source/images/angular37.png","path":"images/angular37.png","modified":1,"renderable":0},{"_id":"source/images/angular38.jpg","path":"images/angular38.jpg","modified":1,"renderable":0},{"_id":"source/images/angular39.png","path":"images/angular39.png","modified":1,"renderable":0},{"_id":"source/images/angular4.jpg","path":"images/angular4.jpg","modified":1,"renderable":0},{"_id":"source/images/angular40.jpg","path":"images/angular40.jpg","modified":1,"renderable":0},{"_id":"source/images/angular41.png","path":"images/angular41.png","modified":1,"renderable":0},{"_id":"source/images/angular42.jpg","path":"images/angular42.jpg","modified":1,"renderable":0},{"_id":"source/images/angular43.jpg","path":"images/angular43.jpg","modified":1,"renderable":0},{"_id":"source/images/angular44.png","path":"images/angular44.png","modified":1,"renderable":0},{"_id":"source/images/angular45.jpg","path":"images/angular45.jpg","modified":1,"renderable":0},{"_id":"source/images/angular46.png","path":"images/angular46.png","modified":1,"renderable":0},{"_id":"source/images/angular47.png","path":"images/angular47.png","modified":1,"renderable":0},{"_id":"source/images/angular5.jpg","path":"images/angular5.jpg","modified":1,"renderable":0},{"_id":"source/images/angular6.jpg","path":"images/angular6.jpg","modified":1,"renderable":0},{"_id":"source/images/angular7.png","path":"images/angular7.png","modified":1,"renderable":0},{"_id":"source/images/angular8.jpg","path":"images/angular8.jpg","modified":1,"renderable":0},{"_id":"source/images/angular9.png","path":"images/angular9.png","modified":1,"renderable":0},{"_id":"source/images/diff_sass.png","path":"images/diff_sass.png","modified":1,"renderable":0},{"_id":"source/images/3_1.png","path":"images/3_1.png","modified":1,"renderable":0},{"_id":"source/images/3_22.png","path":"images/3_22.png","modified":1,"renderable":0},{"_id":"source/images/3_24.png","path":"images/3_24.png","modified":1,"renderable":0},{"_id":"source/images/3_25.png","path":"images/3_25.png","modified":1,"renderable":0},{"_id":"source/images/3_26.png","path":"images/3_26.png","modified":1,"renderable":0},{"_id":"source/images/3_38.png","path":"images/3_38.png","modified":1,"renderable":0},{"_id":"source/images/3_37.png","path":"images/3_37.png","modified":1,"renderable":0},{"_id":"source/images/3_39.png","path":"images/3_39.png","modified":1,"renderable":0},{"_id":"source/images/angular18.png","path":"images/angular18.png","modified":1,"renderable":0},{"_id":"source/images/angular25.png","path":"images/angular25.png","modified":1,"renderable":0},{"_id":"source/images/angular26.png","path":"images/angular26.png","modified":1,"renderable":0},{"_id":"source/images/httprequest1.png","path":"images/httprequest1.png","modified":1,"renderable":0},{"_id":"source/images/BFC_1.png","path":"images/BFC_1.png","modified":1,"renderable":0},{"_id":"source/images/css1.png","path":"images/css1.png","modified":1,"renderable":0},{"_id":"source/images/statuscode.png","path":"images/statuscode.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"source/images/modal-attr.png","path":"images/modal-attr.png","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"32385058ca76a76efc2ea1637927c191c108df1b","modified":1477925344000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1477886111000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1477886111000},{"_id":"themes/next/.gitignore","hash":"efec790f5b7a0256763e1cc08f12c4f0aff509f6","modified":1477886111000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1477886111000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1477886111000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1477886111000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1477886111000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1477886111000},{"_id":"themes/next/_config - 副本.yml","hash":"e1031c72d20f53defc0ac4748a8024e9d055d9d4","modified":1477886111000},{"_id":"themes/next/_config.yml","hash":"e290e0894dcbb1d66ce9d29cdaef95d3f4d05ced","modified":1477886111000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1477886111000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1477886111000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1477886111000},{"_id":"source/_posts/Git学习笔记-二.md","hash":"28ec707c6cece993c31824a33ae5ae7523a0eb03","modified":1477886110000},{"_id":"source/_posts/Node-js-学习.md","hash":"1c2b376f7c4995abdae07acf0ac9cb677ac673f3","modified":1477886110000},{"_id":"source/_posts/angular.md","hash":"c439e9f102226d98980fbf8a2dfe266770309c04","modified":1477886110000},{"_id":"source/_posts/git-学习笔记-三.md","hash":"f186d89aea5c8943580448bc65fc394b8ec8a7b3","modified":1477886110000},{"_id":"source/_posts/grunt学习.md","hash":"fdb66669d256c331f2844588927d45d93c1a83b7","modified":1477886110000},{"_id":"source/_posts/git学习笔记.md","hash":"041756349bb862cbac7137c6eac795febdf9c300","modified":1477886110000},{"_id":"source/_posts/js学习笔记.md","hash":"f8beab471caa81fac3f1a27e71db0162e53dc55b","modified":1477886110000},{"_id":"source/_posts/js小工具.md","hash":"193bba996a0f58a9b3371da2586dc1ea4c7341fc","modified":1477886110000},{"_id":"source/_posts/markdown语法.md","hash":"c85cc44709ced84f3bf876203fd0cf2dee6bf88b","modified":1477886111000},{"_id":"source/_posts/npm常用命令.md","hash":"4771f50499a9106640fa6236f8f87b32a46114fc","modified":1477925366000},{"_id":"source/_posts/sublime.md","hash":"b36b7fcaeec179364405b4fe5b641f15749d7fcb","modified":1477886111000},{"_id":"source/_posts/sass学习.md","hash":"d3d2a465b1b6498163ebdae7d0188a914c774b2c","modified":1477886111000},{"_id":"source/_posts/制作hexo静态网页详细步骤.md","hash":"0aaacd18433f6ab46bba599a2bf214e41b73cae6","modified":1477886111000},{"_id":"source/_posts/学习随笔.md","hash":"c0b307bf441255c1bb491a22bcd7f46e1df950f5","modified":1477909618000},{"_id":"source/_posts/慕课学习.md","hash":"8eaf62710810b2a001007213959f25919f4b9319","modified":1477886111000},{"_id":"source/_posts/遇到的问题集合.md","hash":"70c7ae1129a588758169c1f5b1b8f02b8e927cbb","modified":1477886111000},{"_id":"source/images/3_11.png","hash":"d9cd22950bdf8dd2601a5e6136c68e8eedc8cf56","modified":1477886111000},{"_id":"source/images/3_10.png","hash":"cee407028d3edb11221994addde911bbadafdf77","modified":1477886111000},{"_id":"source/images/3_18.png","hash":"a536525aafc0c6373fa2daa07a830ca9de268a94","modified":1477886111000},{"_id":"source/images/3_2.png","hash":"a8daf81d83f72eb6dc10ffb18b3829feb5964239","modified":1477886111000},{"_id":"source/images/3_20.png","hash":"f38bd44dbe4982a1cdad4b1914fcdbd70004bc3a","modified":1477886111000},{"_id":"source/images/3_21.png","hash":"f0488d25df89a2ca5db4ddfcd225e211ad29b8bd","modified":1477886111000},{"_id":"source/images/3_23.png","hash":"dc0c8a2dff87bf5d7df3c9b74f8127b685137450","modified":1477886111000},{"_id":"source/images/3_28.png","hash":"1cf3e4732156757158893aa4c813acd6a5ed840d","modified":1477886111000},{"_id":"source/images/3_27.png","hash":"87a30c271622c937707ecf1c67c51f2335994aba","modified":1477886111000},{"_id":"source/images/3_3.png","hash":"896c07bf599e10943797c5afc05883c560ea4dff","modified":1477886111000},{"_id":"source/images/3_30.png","hash":"420acc89f09c1ab04ccb87c38f44743a9a140331","modified":1477886111000},{"_id":"source/images/3_31.png","hash":"71361a6b4e7dea78478fc044ba831cffaad0d12f","modified":1477886111000},{"_id":"source/images/3_32.png","hash":"f6bc3a8e8e865c5f772dd85e0357537814ea0b53","modified":1477886111000},{"_id":"source/images/3_36.png","hash":"54a932d925aaa7a480856b4b12560202ea1e4296","modified":1477886111000},{"_id":"source/images/3_4.png","hash":"36912ca52154dd76d03f725efb57df3b2fc5d45c","modified":1477886111000},{"_id":"source/images/3_5.png","hash":"a1e693029447ddcbe4e6a2af952549b32dfb8ede","modified":1477886111000},{"_id":"source/images/3_6.png","hash":"17f89ae5e635ce5ddc0847416ccd079f478a59e5","modified":1477886111000},{"_id":"source/images/3_7.png","hash":"06236a6301b1db7d6435f3a681cbb16b22e0839e","modified":1477886111000},{"_id":"source/images/3_8.png","hash":"6bfb0244586f05eb4a24ff67656e20cfc9a5d8d8","modified":1477886111000},{"_id":"source/images/3_9.png","hash":"3ea05484007d4bb05f56137d91a37db232cb4650","modified":1477886111000},{"_id":"source/images/GitHub-Mark.png","hash":"0f4b8ec7206eea1e2582e79ab3e236c89ad81c43","modified":1477886111000},{"_id":"source/images/angular1.png","hash":"a507ac1320261aca791b6f892d91649b70c89615","modified":1477886111000},{"_id":"source/images/angular10.jpg","hash":"112a7a2ef6a83e4782168bc73a0ad81c81d4396f","modified":1477886111000},{"_id":"source/images/angular11.jpg","hash":"8dba80666aec7b4935d49f8430faf7d81fa14935","modified":1477886111000},{"_id":"source/images/angular12.png","hash":"2f9d0897e7aa78fd60ffed0ff021c567ad2c89a8","modified":1477886111000},{"_id":"source/images/angular13.png","hash":"fd78cf57d9f276664a6eedd305bfc991fe961b55","modified":1477886111000},{"_id":"source/images/angular14.png","hash":"f8456b4a878f277032d4d5d6417b6d9479e1cfb8","modified":1477886111000},{"_id":"source/images/angular15.png","hash":"e58b9c124747f9b4bc1f11794de0facc9d1986cc","modified":1477886111000},{"_id":"source/images/angular16.png","hash":"deeb995e1870b4f9df5ceb2beec4cb82847b4354","modified":1477886111000},{"_id":"source/images/angular17.jpg","hash":"8a6cecec3dbcccf2836c6aa5052bd417e1095640","modified":1477886111000},{"_id":"source/images/angular2.jpg","hash":"72eb044db4259a5da15bbbc8caaa7e83ca571da6","modified":1477886111000},{"_id":"source/images/angular19.png","hash":"028c9a3f6218599bc21abccf04ff9cb17a1505f3","modified":1477886111000},{"_id":"source/images/angular20.jpg","hash":"cb73c7b3bf8ce3ba671ab3bfe2a4408cdc7b12f3","modified":1477886111000},{"_id":"source/images/angular21.png","hash":"2418687f3d66e6ba4bb4e0808b5e5ff1492325ec","modified":1477886111000},{"_id":"source/images/angular22.jpg","hash":"a1f541114de667d73e421294cddb4b2c04314cf8","modified":1477886111000},{"_id":"source/images/angular23.jpg","hash":"971e81ddd056544de9c0a4310cf36137555cbd41","modified":1477886111000},{"_id":"source/images/angular24.png","hash":"54265768ed8140a97d79cba2d33d39258c8a17b9","modified":1477886111000},{"_id":"source/images/angular27.png","hash":"bdd15efda5a894054f20539a85b9733a087d92bc","modified":1477886111000},{"_id":"source/images/angular28.png","hash":"03795a06a71eaa2ef174180b3a7475df4f9a47e7","modified":1477886111000},{"_id":"source/images/angular29.png","hash":"f2e6fc3acb2755acbf2041505ffaf456da654321","modified":1477886111000},{"_id":"source/images/angular3.jpg","hash":"a1177cd41ce59b5f63c57c23701507e00fcf07e5","modified":1477886111000},{"_id":"source/images/angular30.png","hash":"8de3c79ffb088712ee214a12a56282c44bb9bffe","modified":1477886111000},{"_id":"source/images/angular31.png","hash":"be3096ab820fa59ec71fc4e8c483e170a26a420a","modified":1477886111000},{"_id":"source/images/angular32.png","hash":"436df4569c191c4c8e6fb6db9ad75fb2441f74ae","modified":1477886111000},{"_id":"source/images/angular33.png","hash":"3d26edc20cb8cad9e8411f1670e53194b54bce96","modified":1477886111000},{"_id":"source/images/angular34.jpg","hash":"f2149868d35995652c9e54f7b53fd23886990c16","modified":1477886111000},{"_id":"source/images/angular35.png","hash":"afe8664467c7b3b692a8009f66227c5756008b51","modified":1477886111000},{"_id":"source/images/angular36.jpg","hash":"498caf0e83805e65aee954a9dc055790d77e3ec2","modified":1477886111000},{"_id":"source/images/angular37.png","hash":"f0116808341810a72c68946bc505bc3e5f790917","modified":1477886111000},{"_id":"source/images/angular38.jpg","hash":"5c13252fa03c15b7660ae9c7ec928c004b6fc340","modified":1477886111000},{"_id":"source/images/angular39.png","hash":"9e6193ce774486264fe8a4784f10855625468817","modified":1477886111000},{"_id":"source/images/angular4.jpg","hash":"01ee5359a6d96d46c9e6b4a271aae0a646f88098","modified":1477886111000},{"_id":"source/images/angular40.jpg","hash":"df739070e085eaf2217f8af8acac17a2e7831e6b","modified":1477886111000},{"_id":"source/images/angular41.png","hash":"8c9cb6b827654184f7ef9217de4487ecc1b877f8","modified":1477886111000},{"_id":"source/images/angular42.jpg","hash":"08ab0fa351aff8a627291c33960c73385efe5b6e","modified":1477886111000},{"_id":"source/images/angular43.jpg","hash":"aafdc411d0ca237be49e406ad9582953dc754bca","modified":1477886111000},{"_id":"source/images/angular44.png","hash":"893437b13fa118d130140b8bb06f610505c943d2","modified":1477886111000},{"_id":"source/images/angular45.jpg","hash":"a6fa669e3dfd7f9dab12a1ae70d1100cdb0a8a40","modified":1477886111000},{"_id":"source/images/angular46.png","hash":"0ea46521a9e8964b7d9b55664ca2d6cc1b945b51","modified":1477886111000},{"_id":"source/images/angular47.png","hash":"1a709440d23d261cb17e11318963fad1536f7c9a","modified":1477886111000},{"_id":"source/images/angular5.jpg","hash":"c5c7da375e2692994fc6b0232ff99c577596a850","modified":1477886111000},{"_id":"source/images/angular6.jpg","hash":"4350ba097f4c4be78764b0756f2f3844babeef89","modified":1477886111000},{"_id":"source/images/angular7.png","hash":"0053f781bceb99567ce50f18d454382e86f7ab02","modified":1477886111000},{"_id":"source/images/angular8.jpg","hash":"4b9f157431bba997291814ac41770a6a9b58675f","modified":1477886111000},{"_id":"source/images/angular9.png","hash":"24e9e6985657863da3af19d575ea8b1ecd926086","modified":1477886111000},{"_id":"source/images/diff_sass.png","hash":"66b2f8456430321b961c225d3781f014883fa811","modified":1477886111000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1477886111000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1477886111000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1477886111000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1477886111000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1477886111000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1477886111000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1477886111000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1477886111000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1477886111000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1477886111000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1477886111000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1477886111000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1477886111000},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1477886111000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1477886111000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1477886111000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1477886111000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1477886111000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1477886111000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1477886111000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1477886111000},{"_id":"themes/next/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1477886111000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1477886111000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1477886111000},{"_id":"source/_posts/bootsrap简单结构.md","hash":"021d446d76c596fac2e525d9dfc1c75804f565a5","modified":1477886110000},{"_id":"source/images/3_1.png","hash":"e3918fdd15b58ee5ed5bac5eb62181ce8e2d5177","modified":1477886111000},{"_id":"source/images/3_22.png","hash":"4f9346971bc9a3373b50808c8e425eb09f9f4eb6","modified":1477886111000},{"_id":"source/images/3_24.png","hash":"2db00b6fb610833cbbe4c91fdc9f6f70bb907b25","modified":1477886111000},{"_id":"source/images/3_25.png","hash":"fe8f568236ccc392b0c10745e1e88b67beca16af","modified":1477886111000},{"_id":"source/images/3_26.png","hash":"1d73e23c19c78470bfb49e0fa36d25cb7adf9417","modified":1477886111000},{"_id":"source/images/3_38.png","hash":"dd7406af73c6fa16addf5be5945370fd3850373f","modified":1477886111000},{"_id":"source/images/3_37.png","hash":"42b60564937e5a456c5b5e0b8c7bfe0c3ea75cae","modified":1477886111000},{"_id":"source/images/3_39.png","hash":"55969f7a7a03a6526fe3368bca7b2bf7f1ddbd4c","modified":1477886111000},{"_id":"source/images/angular18.png","hash":"2120b47546ef855652b5e2c86ae9d0d4f62ecdce","modified":1477886111000},{"_id":"source/images/angular25.png","hash":"16db26fec346067978fe27875009af5cf3261ee6","modified":1477886111000},{"_id":"source/images/angular26.png","hash":"babaf37e300b086f76908fff9680e4de91e30912","modified":1477886111000},{"_id":"source/images/httprequest1.png","hash":"f121a2a6f532253251f78ecb16f716cb5412141c","modified":1477886111000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477886111000},{"_id":"source/images/BFC_1.png","hash":"503ff46cbd6da506e1c8a112880de7638a1eec53","modified":1477886111000},{"_id":"source/images/css1.png","hash":"d615967d081216ba9249484b547bf2bef5faedcf","modified":1477886111000},{"_id":"source/images/statuscode.png","hash":"0cdd1285990e1aab88a49ff773b75159637a1c2d","modified":1477886111000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1477886111000},{"_id":"themes/next/layout/_macro/post.swig","hash":"1ca03011bed92614832b1343b65be92183957dc5","modified":1477886111000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1477886111000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b883289054ee54a374caad5d4883591beb94bd8b","modified":1477886111000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"85327c2174d09c6d69c9033592e6c8f7eb7ac3ba","modified":1477886111000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"82a9bc2ba60ce68419128ff60624bd74b15dfb78","modified":1477886111000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1477886111000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"0ce71d8322ea7dea82d9371fa2fe13949aa870e3","modified":1477886111000},{"_id":"themes/next/layout/_partials/head.swig","hash":"f83b1c55bedd2c1a3eb734c72c6997795a4e5f99","modified":1477886111000},{"_id":"themes/next/layout/_partials/header.swig","hash":"963a765dc00e6ac43cfc53ffaf5725eb854cf95e","modified":1477886111000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1477886111000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1477886111000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1477886111000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1477886111000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1477886111000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1477886111000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1477886111000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1477886111000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1477886111000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1477886111000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1477886111000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1477886111000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1477886111000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1477886111000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1477886111000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1477886111000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1477886111000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1477886111000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1477886111000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1477886111000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1477886111000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1477886111000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1477886111000},{"_id":"source/images/modal-attr.png","hash":"490137bfe5503966f19f443190e38cdae9be3c25","modified":1477886111000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477886111000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477886111000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477886111000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477886111000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477886111000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477886111000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1477886111000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1477886111000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1477886111000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1477886111000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1477886111000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1477886111000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1477886111000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1477886111000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1477886111000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1477886111000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1477886111000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1477886111000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1477886111000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"069bb17fb1db3bc7c85c88efa3ed94ab6becbe2c","modified":1477886111000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"1561bd0c107d725252c6d746e9ac177fc18f93bf","modified":1477886111000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1477886111000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1477886111000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1477886111000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1477886111000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1477886111000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1477886111000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1477886111000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1477886111000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1477886111000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1477886111000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1477886111000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1477886111000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1477886111000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1477886111000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1477886111000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1477886111000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1477886111000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1477886111000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1477886111000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1477886111000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1477886111000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1477886111000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1477886111000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1477886111000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1477886111000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1477886111000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1477886111000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1477886111000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1477886111000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1477886111000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1477886111000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1477886111000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1477886111000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1477886111000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1477886111000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1477886111000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1477886111000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1477886111000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1477886111000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"44e761721e8ad787ef571a3cc57bbc12d318a2a3","modified":1477886111000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1477886111000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1477886111000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1477886111000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1477886111000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"8c7af79407d223486fba72b8150fe045a553bf70","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1477886111000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1477886111000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1477886111000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1477886111000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1477886111000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1477886111000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1477886111000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1477886111000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1477886111000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1477886111000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1477886111000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1477886111000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1477886111000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1477886111000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1477886111000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1477886111000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1477886111000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1477886111000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1477886111000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1477886111000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1477886111000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1477886111000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1477886111000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1477886111000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1477886111000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1477886111000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1477886111000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1477886111000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1477886111000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1477886111000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1477886111000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1477886111000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1477886111000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1477886111000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1477886111000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1477886111000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1477886111000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1477886111000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1477886111000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1477886111000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1477886111000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1477886111000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1477886111000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1477886111000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1477886111000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1477886111000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1477886111000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1477886111000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1477886111000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1477886111000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1477886111000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1477886111000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1477886111000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1477886111000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1477886111000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1477886111000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1477886111000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1477886111000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1477886111000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1477886111000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Git学习笔记(二)","date":"2016-08-26T23:05:27.000Z","_content":"\n## Git 分支\n\n### 何谓分支\n\n为了理解 Git 分支的实现方式，我们需要回顾一下 Git 是如何储存数据的。或许你还记得第一章的内容，Git 保存的不是文件差异或者变化量，而只是一系列文件快照。\n\n在 Git 中提交时，会保存一个提交（commit）对象，该对象包含一个指向暂存内容快照的指针，包含本次提交的作者等相关附属信息，包含零个或多个指向该提交对象的父对象指针：首次提交是没有直接祖先的，普通提交有一个祖先，由两个或多个分支合并产生的提交则有多个祖先。\n\n为直观起见，我们假设在工作目录中有三个文件，准备将它们暂存后提交。暂存操作会对每一个文件计算校验和（即第一章中提到的 SHA-1 哈希字串），然后把当前版本的文件快照保存到 Git 仓库中（Git 使用 blob 类型的对象存储这些快照），并将校验和加入暂存区域：\n``` bash\n$ git add README test.rb LICENSE\n$ git commit -m 'initial commit of my project'\n```\n<!--more-->\n当使用 git commit 新建一个提交对象前，Git 会先计算每一个子目录（本例中就是项目根目录）的校验和，然后在 Git 仓库中将这些目录保存为树（tree）对象。之后 Git 创建的提交对象，除了包含相关提交信息以外，还包含着指向这个树对象（项目根目录）的指针，如此它就可以在将来需要的时候，重现此次快照的内容了。\n现在，Git 仓库中有五个对象：三个表示文件快照内容的 blob 对象；一个记录着目录树内容及其中各个文件对应 blob 对象索引的 tree 对象；以及一个包含指向 tree 对象（根目录）的索引和其他提交信息元数据的 commit 对象。概念上来说，仓库中的各个对象保存的数据和相互关系看起来如图 3-1 所示：\n![3_1](/images/3_1.png)\n作些修改后再次提交，那么这次的提交对象会包含一个指向上次提交对象的指针（译注：即下图中的 parent 对象）。两次提交后，仓库历史会变成图 3-2 的样子：\n![a](/images/3_2.png)\n\n现在来谈分支。Git 中的分支，其实本质上仅仅是个指向 commit 对象的可变指针。Git 会使用 master 作为分支的默认名字。在若干次提交后，你其实已经有了一个指向最后一次提交对象的 master 分支，它在每次提交的时候都会自动向前移动。\n![3_3](/images/3_3.png)\n\n那么，Git 又是如何创建一个新的分支的呢？答案很简单，创建一个新的分支指针。比如新建一个 testing 分支，可以使用 git branch 命令：\n``` bash\n$ git branch testing\n```\n这会在当前 **commit** 对象上新建一个分支指针（见图 3-4）。\n\n\n![3_4](/images/3_4.png)\n那么，Git 是如何知道你当前在哪个分支上工作的呢？其实答案也很简单，它保存着一个名为 HEAD 的特别指针。请注意它和你熟知的许多其他版本控制系统（比如 Subversion 或 CVS）里的 HEAD 概念大不相同。在 Git 中，它是一个指向你正在工作中的本地分支的指针（译注：将 HEAD 想象为当前分支的别名。）。运行 git branch 命令，仅仅是建立了一个新的分支，但不会自动切换到这个分支中去，所以在这个例子中，我们依然还在 master 分支里工作（参考图 3-5）。\n![3_5](/images/3_5.png)\n要切换到其他分支，可以执行 git checkout 命令。我们现在转换到新建的 testing 分支：\n``` bash\n$ git checkout testing\n```\n这样 HEAD 就指向了 testing 分支（见图3-6）。\n![3_6](/images/3_6.png)\n这样的实现方式会给我们带来什么好处呢？好吧，现在不妨再提交一次：\n``` bash\n$ vim test.rb\n$ git commit -a -m 'made a change'\n```\n图 3-7 展示了提交后的结果。\n![3_7](/images/3_7.png)\n非常有趣，现在 testing 分支向前移动了一格，而 master 分支仍然指向原先 git checkout 时所在的 commit 对象。现在我们回到 master 分支看看：\n``` bash\n$ git checkout master\n```\n![3_8](/images/3_8.png)\n\n这条命令做了两件事。它把 HEAD 指针移回到 master 分支，并把工作目录中的文件换成了 master 分支所指向的快照内容。也就是说，现在开始所做的改动，将始于本项目中一个较老的版本。它的主要作用是将 testing 分支里作出的修改暂时取消，这样你就可以向另一个方向进行开发。\n\n我们作些修改后再次提交：\n``` bash\n$ vim test.rb\n$ git commit -a -m 'made other changes'\n```\n现在我们的项目提交历史产生了分叉（如图 3-9 所示），因为刚才我们创建了一个分支，转换到其中进行了一些工作，然后又回到原来的主分支进行了另外一些工作。这些改变分别孤立在不同的分支里：我们可以在不同分支里反复切换，并在时机成熟时把它们合并到一起。而所有这些工作，仅仅需要 branch 和 checkout 这两条命令就可以完成。\n![3_9](/images/3_9.png)\n由于 Git 中的分支实际上仅是一个包含所指对象校验和（40 个字符长度 SHA-1 字串）的文件，所以创建和销毁一个分支就变得非常廉价。说白了，新建一个分支就是向一个文件写入 41 个字节（外加一个换行符）那么简单，当然也就很快了。\n\n这和大多数版本控制系统形成了鲜明对比，它们管理分支大多采取备份所有项目文件到特定目录的方式，所以根据项目文件数量和大小不同，可能花费的时间也会有相当大的差别，快则几秒，慢则数分钟。而 Git 的实现与项目复杂度无关，它永远可以在几毫秒的时间内完成分支的创建和切换。同时，因为每次提交时都记录了祖先信息（译注：即 parent 对象），将来要合并分支时，寻找恰当的合并基础（译注：即共同祖先）的工作其实已经自然而然地摆在那里了，所以实现起来非常容易。Git 鼓励开发者频繁使用分支，正是因为有着这些特性作保障。\n\n接下来看看，我们为什么应该频繁使用分支。\n\n### 分支的新建与合并\n现在让我们来看一个简单的分支与合并的例子，实际工作中大体也会用到这样的工作流程：\n\n1. 开发某个网站。\n2. 为实现某个新的需求，创建一个分支。\n3. 在这个分支上开展工作。\n假设此时，你突然接到一个电话说有个很严重的问题需要紧急修补，那么可以按照下面的方式处理：\n1. 返回到原先已经发布到生产服务器上的分支。\n2. 为这次紧急修补建立一个新分支，并在其中修复问题。\n3. 通过测试后，回到生产服务器所在的分支，将修补分支合并进来，然后再推送到生产服务器上。\n4. 切换到之前实现新需求的分支，继续工作。\n\n#### 分支的新建与切换\n首先，我们假设你正在项目中愉快地工作，并且已经提交了几次更新.\n现在，你决定要修补问题追踪系统上的 #53 问题。顺带说明下，Git 并不同任何特定的问题追踪系统打交道。这里为了说明要解决的问题，才把新建的分支取名为 iss53。要新建并切换到该分支，运行 git checkout 并加上 -b 参数：\n``` bash\n$ git checkout -b iss53\nSwitched to a new branch 'iss53'\n```\n这相当于执行下面这两条命令：\n``` bash\n$ git branch iss53\n$ git checkout iss53\n```\n接着你开始尝试修复问题，在提交了若干次更新后，iss53 分支的指针也会随着向前推进，因为它就是当前分支.\n``` bash\n$ vim index.html\n$ git commit -a -m 'added a new footer [issue 53]'\n```\n现在你就接到了那个网站问题的紧急电话，需要马上修补。有了 Git ，我们就不需要同时发布这个补丁和 iss53 里作出的修改，也不需要在创建和发布该补丁到服务器之前花费大力气来复原这些修改。唯一需要的仅仅是切换回 master 分支。\n\n不过在此之前，留心你的暂存区或者工作目录里，那些还没有提交的修改，它会和你即将检出的分支产生冲突从而阻止 Git 为你切换分支。切换分支的时候最好保持一个清洁的工作区域。稍后会介绍几个绕过这种问题的办法（分别叫做 stashing 和 commit amending）。目前已经提交了所有的修改，所以接下来可以正常转换到 master 分支：\n``` bash\n$ git checkout master\nSwitched to branch 'master'\n```\n此时工作目录中的内容和你在解决问题 #53 之前一模一样，你可以集中精力进行紧急修补。这一点值得牢记：Git 会把工作目录的内容恢复为检出某分支时它所指向的那个提交对象的快照。它会自动添加、删除和修改文件以确保目录的内容和你当时提交时完全一样。\n\n接下来，你得进行紧急修补。我们创建一个紧急修补分支 hotfix 来开展工作，直到搞定（见图 3-13）：\n``` bash\n$ git checkout -b hotfix\nSwitched to a new branch 'hotfix'\n$ vim index.html\n$ git commit -a -m 'fixed the broken email address'\n[hotfix 3a0874c] fixed the broken email address\n 1 files changed, 1 deletion(-)\n```\n有必要作些测试，确保修补是成功的，然后回到 master 分支并把它合并进来，然后发布到生产服务器。用 git merge 命令来进行合并：\n``` bash\n$ git checkout master\n$ git merge hotfix\nUpdating f42c576..3a0874c\nFast-forward\n README | 1 -\n 1 file changed, 1 deletion(-)\n```\n请注意，合并时出现了“Fast forward”的提示。由于当前 master 分支所在的提交对象是要并入的 hotfix 分支的直接上游，Git 只需把 master 分支指针直接右移。换句话说，如果顺着一个分支走下去可以到达另一个分支的话，那么 Git 在合并两者时，只会简单地把指针右移，因为这种单线的历史分支不存在任何需要解决的分歧，所以这种合并过程可以称为快进（Fast forward）。\n\n现在最新的修改已经在当前 master 分支所指向的提交对象中了，可以部署到生产服务器上去了.\n\n\n在那个超级重要的修补发布以后，你想要回到被打扰之前的工作。由于当前 hotfix 分支和 master 都指向相同的提交对象，所以 hotfix 已经完成了历史使命，可以删掉了。使用 git branch 的 -d 选项执行删除操作：\n``` bash\n$ git branch -d hotfix\nDeleted branch hotfix (was 3a0874c).\n```\n现在回到之前未完成的 #53 问题修复分支上继续工作\n``` bash\n$ git checkout iss53\nSwitched to branch 'iss53'\n$ vim index.html\n$ git commit -a -m 'finished the new footer [issue 53]'\n[iss53 ad82d7a] finished the new footer [issue 53]\n 1 file changed, 1 insertion(+)\n```\n值得注意的是之前 hotfix 分支的修改内容尚未包含到 iss53 中来。如果需要纳入此次修补，可以用 git merge master 把 master 分支合并到 iss53；或者等 iss53 完成之后，再将 iss53 分支中的更新并入 master。\n\n#### 分支的合并\n在问题 #53 相关的工作完成之后，可以合并回 master 分支。实际操作同前面合并 hotfix 分支差不多，只需回到 master 分支，运行 git merge 命令指定要合并进来的分支：\n``` bash\n$ git checkout master\n$ git merge iss53\nAuto-merging README\nMerge made by the 'recursive' strategy.\n README | 1 +\n 1 file changed, 1 insertion(+)\n```\n请注意，这次合并操作的底层实现，并不同于之前 hotfix 的并入方式。因为这次你的开发历史是从更早的地方开始分叉的。由于当前 master 分支所指向的提交对象（C4）并不是 iss53 分支的直接祖先，Git 不得不进行一些额外处理。就此例而言，Git 会用两个分支的末端（C4 和 C5）以及它们的共同祖先（C2）进行一次简单的三方合并计算。图 3-16 用红框标出了 Git 用于合并的三个提交对象：\n![3_10](/images/3_10.png)\n这次，Git 没有简单地把分支指针右移，而是对三方合并后的结果重新做一个新的快照，并自动创建一个指向它的提交对象（C6）（见图 3-17）。这个提交对象比较特殊，它有两个祖先（C4 和 C5）。\n\n值得一提的是 Git 可以自己裁决哪个共同祖先才是最佳合并基础；这和 CVS 或 Subversion（1.5 以后的版本）不同，它们需要开发者手工指定合并基础。所以此特性让 Git 的合并操作比其他系统都要简单不少。\n![3_11](/images/3_11.png)\n既然之前的工作成果已经合并到 master 了，那么 iss53 也就没用了。你可以就此删除它，并在问题追踪系统里关闭该问题。\n``` bash\n$ git branch -d iss53\n```\n\n#### 遇到冲突时的分支合并\n有时候合并操作并不会如此顺利。如果在不同的分支中都修改了同一个文件的同一部分，Git 就无法干净地把两者合到一起（译注：逻辑上说，这种问题只能由人来裁决。）。如果你在解决问题 #53 的过程中修改了 hotfix 中修改的部分，将得到类似下面的结果：\n``` bash\n$ git merge iss53\nAuto-merging index.html\nCONFLICT (content): Merge conflict in index.html\nAutomatic merge failed; fix conflicts and then commit the result.\n```\nGit 作了合并，但没有提交，它会停下来等你解决冲突。要看看哪些文件在合并时发生冲突，可以用 git status 查阅：\n``` bash\n$ git status\nOn branch master\nYou have unmerged paths.\n  (fix conflicts and run \"git commit\")\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\n        both modified:      index.html\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n任何包含未解决冲突的文件都会以未合并（unmerged）的状态列出。Git 会在有冲突的文件里加入标准的冲突解决标记，可以通过它们来手工定位并解决这些冲突。可以看到此文件包含类似下面这样的部分：\n``` bash\n<<<<<<< HEAD\n<div id=\"footer\">contact : email.support@github.com</div>\n=======\n<div id=\"footer\">\n  please contact us at support@github.com\n</div>\n>>>>>>> iss53\n```\n可以看到 ======= 隔开的上半部分，是 HEAD（即 master 分支，在运行 merge 命令时所切换到的分支）中的内容，下半部分是在 iss53 分支中的内容。解决冲突的办法无非是二者选其一或者由你亲自整合到一起。比如你可以通过把这段内容替换为下面这样来解决：\n``` bash\n<div id=\"footer\">\nplease contact us at email.support@github.com\n</div>\n```\n这个解决方案各采纳了两个分支中的一部分内容，而且我还删除了 <<<<<<<，======= 和 >>>>>>> 这些行。在解决了所有文件里的所有冲突后，运行 git add 将把它们标记为已解决状态（译注：实际上就是来一次快照保存到暂存区域。）。因为一旦暂存，就表示冲突已经解决。如果你想用一个有图形界面的工具来解决这些问题，不妨运行 git mergetool，它会调用一个可视化的合并工具并引导你解决所有冲突：\n``` bash\n$ git mergetool\n\nThis message is displayed because 'merge.tool' is not configured.\nSee 'git mergetool --tool-help' or 'git help config' for more details.\n'git mergetool' will now attempt to use one of the following tools:\nopendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc3 codecompare vimdiff emerge\nMerging:\nindex.html\n\nNormal merge conflict for 'index.html':\n  {local}: modified file\n  {remote}: modified file\nHit return to start merge resolution tool (opendiff):\n```\n如果不想用默认的合并工具（Git 为我默认选择了 opendiff，因为我在 Mac 上运行了该命令），你可以在上方\"merge tool candidates\"里找到可用的合并工具列表，输入你想用的工具名。我们将在第七章讨论怎样改变环境中的默认值。\n\n退出合并工具以后，Git 会询问你合并是否成功。如果回答是，它会为你把相关文件暂存起来，以表明状态为已解决。\n\n再运行一次 git status 来确认所有冲突都已解决：\n``` bash\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        modified:   index.html\n```\n如果觉得满意了，并且确认所有冲突都已解决，也就是进入了暂存区，就可以用 git commit 来完成这次合并提交。提交的记录差不多是这样：\n``` bash\nMerge branch 'iss53'\n\nConflicts:\n  index.html\n#\n# It looks like you may be committing a merge.\n# If this is not correct, please remove the file\n#       .git/MERGE_HEAD\n# and try again.\n#\n```\n如果想给将来看这次合并的人一些方便，可以修改该信息，提供更多合并细节。比如你都作了哪些改动，以及这么做的原因。有时候裁决冲突的理由并不直接或明显，有必要略加注解。\n\n### 分支的管理\n到目前为止，你已经学会了如何创建、合并和删除分支。除此之外，我们还需要学习如何管理分支，在日后的常规工作中会经常用到下面介绍的管理命令。\n\ngit branch 命令不仅仅能创建和删除分支，如果不加任何参数，它会给出当前所有分支的清单：\n``` bash\n$ git branch\n  iss53\n* master\n  testing\n```\n注意看 master 分支前的 * 字符：它表示当前所在的分支。也就是说，如果现在提交更新，master 分支将随着开发进度前移。若要查看各个分支最后一个提交对象的信息，运行 git branch -v：\n``` bash\n$ git branch -v\n  iss53   93b412c fix javascript issue\n* master  7a98805 Merge branch 'iss53'\n  testing 782fd34 add scott to the author list in the readmes\n```\n要从该清单中筛选出你已经（或尚未）与当前分支合并的分支，可以用 --merged 和 --no-merged 选项（Git 1.5.6 以上版本）。比如用 git branch --merged 查看哪些分支已被并入当前分支（译注：也就是说哪些分支是当前分支的直接上游。）：\n``` bash\n$ git branch --merged\n  iss53\n* master\n```\n之前我们已经合并了 iss53，所以在这里会看到它。一般来说，列表中没有 * 的分支通常都可以用 git branch -d 来删掉。原因很简单，既然已经把它们所包含的工作整合到了其他分支，删掉也不会损失什么。\n\n另外可以用 git branch --no-merged 查看尚未合并的工作：\n``` bash\n$ git branch --no-merged\n  testing\n```\n它会显示还未合并进来的分支。由于这些分支中还包含着尚未合并进来的工作成果，所以简单地用 git branch -d 删除该分支会提示错误，因为那样做会丢失数据：\n``` bash\n$ git branch -d testing\nerror: The branch 'testing' is not fully merged.\nIf you are sure you want to delete it, run 'git branch -D testing'.\n```\n不过，如果你确实想要删除该分支上的改动，可以用大写的删除选项 -D 强制执行，就像上面提示信息中给出的那样。\n\n### 利用分支进行开发的工作流程\n现在我们已经学会了新建分支和合并分支，可以（或应该）用它来做点什么呢？在本节，我们会介绍一些利用分支进行开发的工作流程。而正是由于分支管理的便捷，才衍生出了这类典型的工作模式，你可以根据项目的实际情况选择一种用用看。\n\n#### 长期分支\n由于 Git 使用简单的三方合并，所以就算在较长一段时间内，反复多次把某个分支合并到另一分支，也不是什么难事。也就是说，你可以同时拥有多个开放的分支，每个分支用于完成特定的任务，随着开发的推进，你可以随时把某个特性分支的成果并到其他分支中。\n\n许多使用 Git 的开发者都喜欢用这种方式来开展工作，比如仅在 master 分支中保留完全稳定的代码，即已经发布或即将发布的代码。与此同时，他们还有一个名为 develop 或 next 的平行分支，专门用于后续的开发，或仅用于稳定性测试 — 当然并不是说一定要绝对稳定，不过一旦进入某种稳定状态，便可以把它合并到 master 里。这样，在确保这些已完成的特性分支（短期分支，比如之前的 iss53 分支）能够通过所有测试，并且不会引入更多错误之后，就可以并到主干分支中，等待下一次的发布。\n\n本质上我们刚才谈论的，是随着提交对象不断右移的指针。稳定分支的指针总是在提交历史中落后一大截，而前沿分支总是比较靠前（见图 3-18）。\n![3_18](/images/3_18.png)\n你可以用这招维护不同层次的稳定性。某些大项目还会有个 proposed（建议）或 pu（proposed updates，建议更新）分支，它包含着那些可能还没有成熟到进入 next 或 master 的内容。这么做的目的是拥有不同层次的稳定性：当这些分支进入到更稳定的水平时，再把它们合并到更高层分支中去。再次说明下，使用多个长期分支的做法并非必需，不过一般来说，对于特大型项目或特复杂的项目，这么做确实更容易管理。\n\n#### 特性分支\n在任何规模的项目中都可以使用特性（Topic）分支。一个特性分支是指一个短期的，用来实现单一特性或与其相关工作的分支。可能你在以前的版本控制系统里从未做过类似这样的事情，因为通常创建与合并分支消耗太大。然而在 Git 中，一天之内建立、使用、合并再删除多个分支是常见的事。\n\n我们在上节的例子里已经见过这种用法了。我们创建了 iss53 和 hotfix 这两个特性分支，在提交了若干更新后，把它们合并到主干分支，然后删除。该技术允许你迅速且完全的进行语境切换 — 因为你的工作分散在不同的流水线里，每个分支里的改变都和它的目标特性相关，浏览代码之类的事情因而变得更简单了。你可以把作出的改变保持在特性分支中几分钟，几天甚至几个月，等它们成熟以后再合并，而不用在乎它们建立的顺序或者进度。\n\n现在我们来看一个实际的例子。请看图 3-20，由下往上，起先我们在 master 工作到 C1，然后开始一个新分支 iss91 尝试修复 91 号缺陷，提交到 C6 的时候，又冒出一个解决该问题的新办法，于是从之前 C4 的地方又分出一个分支 iss91v2，干到 C8 的时候，又回到主干 master 中提交了 C9 和 C10，再回到 iss91v2 继续工作，提交 C11，接着，又冒出个不太确定的想法，从 master 的最新提交 C10 处开了个新的分支 dumbidea 做些试验。\n![3_20](/images/3_20.png)\n现在，假定两件事情：我们最终决定使用第二个解决方案，即 iss91v2 中的办法；另外，我们把 dumbidea 分支拿给同事们看了以后，发现它竟然是个天才之作。所以接下来，我们准备抛弃原来的 iss91 分支（实际上会丢弃 C5 和 C6），直接在主干中并入另外两个分支。最终的提交历史将变成图 3-21 这样：\n![3_21](/images/3_21.png)\n请务必牢记这些分支全部都是本地分支，这一点很重要。当你在使用分支及合并的时候，一切都是在你自己的 Git 仓库中进行的 — 完全不涉及与服务器的交互。\n\n### 远程分支\n远程分支（remote branch）是对远程仓库中的分支的索引。它们是一些无法移动的本地分支；只有在 Git 进行网络交互时才会更新。远程分支就像是书签，提醒着你上次连接远程仓库时上面各分支的位置。\n\n我们用 (远程仓库名)/(分支名) 这样的形式表示远程分支。比如我们想看看上次同 origin 仓库通讯时 master 分支的样子，就应该查看 origin/master 分支。如果你和同伴一起修复某个问题，但他们先推送了一个 iss53 分支到远程仓库，虽然你可能也有一个本地的 iss53 分支，但指向服务器上最新更新的却应该是 origin/iss53 分支。\n\n可能有点乱，我们不妨举例说明。假设你们团队有个地址为 git.ourcompany.com 的 Git 服务器。如果你从这里克隆，Git 会自动为你将此远程仓库命名为 origin，并下载其中所有的数据，建立一个指向它的 master 分支的指针，在本地命名为 origin/master，但你无法在本地更改其数据。接着，Git 建立一个属于你自己的本地 master 分支，始于 origin 上 master 分支相同的位置，你可以就此开始工作（见图 3-22）：\n可能有点乱，我们不妨举例说明。假设你们团队有个地址为 git.ourcompany.com 的 Git 服务器。如果你从这里克隆，Git 会自动为你将此远程仓库命名为 origin，并下载其中所有的数据，建立一个指向它的 master 分支的指针，在本地命名为 origin/master，但你无法在本地更改其数据。接着，Git 建立一个属于你自己的本地 master 分支，始于 origin 上 master 分支相同的位置，你可以就此开始工作（见图 3-22）：\n![3_22](/images/3_22.png)\n如果你在本地 master 分支做了些改动，与此同时，其他人向 git.ourcompany.com 推送了他们的更新，那么服务器上的 master 分支就会向前推进，而与此同时，你在本地的提交历史正朝向不同方向发展。不过只要你不和服务器通讯，你的 origin/master 指针仍然保持原位不会移动（见图 3-23）。 \n![3_23](/images/3_23.png)\n图 3-23. 在本地工作的同时有人向远程仓库推送内容会让提交历史开始分流。\n可以运行 git fetch origin 来同步远程服务器上的数据到本地。该命令首先找到 origin 是哪个服务器（本例为 git.ourcompany.com），从上面获取你尚未拥有的数据，更新你本地的数据库，然后把 origin/master 的指针移到它最新的位置上（见图 3-24）。\n![3_24](/images/3_24.png)\n为了演示拥有多个远程分支（在不同的远程服务器上）的项目是如何工作的，我们假设你还有另一个仅供你的敏捷开发小组使用的内部服务器 git.team1.ourcompany.com。可以用第二章中提到的 git remote add 命令把它加为当前项目的远程分支之一。我们把它命名为 teamone，以便代替完整的 Git URL 以方便使用（见图 3-25）。\n![3_25](/images/3_25.png)\n现在你可以用 git fetch teamone 来获取小组服务器上你还没有的数据了。由于当前该服务器上的内容是你 origin 服务器上的子集，Git 不会下载任何数据，而只是简单地创建一个名为 teamone/master 的远程分支，指向 teamone 服务器上 master 分支所在的提交对象 31b8e（见图 3-26）。\n![3_26](/images/3_26.png)\n#### 推送本地分支\n要想和其他人分享某个本地分支，你需要把它推送到一个你拥有写权限的远程仓库。你创建的本地分支不会因为你的写入操作而被自动同步到你引入的远程服务器上，你需要明确地执行推送分支的操作。换句话说，对于无意分享的分支，你尽管保留为私人分支好了，而只推送那些协同工作要用到的特性分支。\n\n如果你有个叫 serverfix 的分支需要和他人一起开发，可以运行 git push (远程仓库名) (分支名)：\n``` bash\n$ git push origin serverfix\nCounting objects: 20, done.\nCompressing objects: 100% (14/14), done.\nWriting objects: 100% (15/15), 1.74 KiB, done.\nTotal 15 (delta 5), reused 0 (delta 0)\nTo git@github.com:schacon/simplegit.git\n * [new branch]      serverfix -> serverfix\n```\n这里其实走了一点捷径。Git 自动把 serverfix 分支名扩展为 refs/heads/serverfix:refs/heads/serverfix，意为“取出我在本地的 serverfix 分支，推送到远程仓库的 serverfix 分支中去”。我们将在第九章进一步介绍 refs/heads/ 部分的细节，不过一般使用的时候都可以省略它。也可以运行 git push origin serverfix:serverfix 来实现相同的效果，它的意思是“上传我本地的 serverfix 分支到远程仓库中去，仍旧称它为 serverfix 分支”。通过此语法，你可以把本地分支推送到某个命名不同的远程分支：若想把远程分支叫作 awesomebranch，可以用 git push origin serverfix:awesomebranch 来推送数据。\n\n接下来，当你的协作者再次从服务器上获取数据时，他们将得到一个新的远程分支 origin/serverfix，并指向服务器上 serverfix 所指向的版本：\n``` bash\n$ git fetch origin\nremote: Counting objects: 20, done.\nremote: Compressing objects: 100% (14/14), done.\nremote: Total 15 (delta 5), reused 0 (delta 0)\nUnpacking objects: 100% (15/15), done.\nFrom git@github.com:schacon/simplegit\n * [new branch]      serverfix    -> origin/serverfix\n```\n值得注意的是，在 fetch 操作下载好新的远程分支之后，你仍然无法在本地编辑该远程仓库中的分支。换句话说，在本例中，你不会有一个新的 serverfix 分支，有的只是一个你无法移动的 origin/serverfix 指针。\n\n如果要把该远程分支的内容合并到当前分支，可以运行 git merge origin/serverfix。如果想要一份自己的 serverfix 来开发，可以在远程分支的基础上分化出一个新的分支来：\n``` bash\n$ git checkout -b serverfix origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch 'serverfix'\n```\n这会切换到新建的 serverfix 本地分支，其内容同远程分支 origin/serverfix 一致，这样你就可以在里面继续开发了。\n#### 跟踪远程分支\n从远程分支 checkout 出来的本地分支，称为 跟踪分支 (tracking branch)。跟踪分支是一种和某个远程分支有直接联系的本地分支。在跟踪分支里输入 git push，Git 会自行推断应该向哪个服务器的哪个分支推送数据。同样，在这些分支里运行 git pull 会获取所有远程索引，并把它们的数据都合并到本地分支中来。\n\n在克隆仓库时，Git 通常会自动创建一个名为 master 的分支来跟踪 origin/master。这正是 git push 和 git pull 一开始就能正常工作的原因。当然，你可以随心所欲地设定为其它跟踪分支，比如 origin 上除了 master 之外的其它分支。刚才我们已经看到了这样的一个例子：git checkout -b [分支名] [远程名]/[分支名]。如果你有 1.6.2 以上版本的 Git，还可以用 --track 选项简化：\n``` bash\n$ git checkout --track origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch 'serverfix'\n```\n要为本地分支设定不同于远程分支的名字，只需在第一个版本的命令里换个名字：\n``` bash\n$ git checkout -b sf origin/serverfix\nBranch sf set up to track remote branch serverfix from origin.\nSwitched to a new branch 'sf'\n```\n现在你的本地分支 sf 会自动将推送和抓取数据的位置定位到 origin/serverfix 了。\n\n#### 删除远程分支\n如果不再需要某个远程分支了，比如搞定了某个特性并把它合并进了远程的 master 分支（或任何其他存放稳定代码的分支），可以用这个非常无厘头的语法来删除它：git push [远程名] :[分支名]。如果想在服务器上删除 serverfix 分支，运行下面的命令：\n``` bash\n$ git push origin :serverfix\nTo git@github.com:schacon/simplegit.git\n - [deleted]         serverfix\n```\n咚！服务器上的分支没了。你最好特别留心这一页，因为你一定会用到那个命令，而且你很可能会忘掉它的语法。有种方便记忆这条命令的方法：记住我们不久前见过的 git push [远程名] [本地分支]:[远程分支] 语法，如果省略 [本地分支]，那就等于是在说“在这里提取空白然后把它变成[远程分支]”。\n\n### 分支的衍合\n把一个分支中的修改整合到另一个分支的办法有两种：merge 和 rebase（译注：rebase 的翻译暂定为“衍合”，大家知道就可以了。）。在本章我们会学习什么是衍合，如何使用衍合，为什么衍合操作如此富有魅力，以及我们应该在什么情况下使用衍合。\n\n#### 基本的衍合操作\n![3_27](/images/3_27.png)\n![3_28](/images/3_28.png)\n在上面这个例子中，运行：\n``` bash\n$ git checkout experiment\n$ git rebase master\nFirst, rewinding head to replay your work on top of it...\nApplying: added staged command\n```\n它的原理是回到两个分支最近的共同祖先，根据当前分支（也就是要进行衍合的分支 experiment）后续的历次提交对象（这里只有一个 C3），生成一系列文件补丁，然后以基底分支（也就是主干分支 master）最后一个提交对象（C4）为新的出发点，逐个应用之前准备好的补丁文件，最后会生成一个新的合并提交对象（C3'），从而改写 experiment 的提交历史，使它成为 master 分支的直接下游，如图 3-29 所示：\n![3_30](/images/3_30.png)\n现在的 C3' 对应的快照，其实和普通的三方合并，即上个例子中的 C5 对应的快照内容一模一样了。虽然最后整合得到的结果没有任何区别，但衍合能产生一个更为整洁的提交历史。如果视察一个衍合过的分支的历史记录，看起来会更清楚：仿佛所有修改都是在一根线上先后进行的，尽管实际上它们原本是同时并行发生的。\n\n一般我们使用衍合的目的，是想要得到一个能在远程分支上干净应用的补丁 — 比如某些项目你不是维护者，但想帮点忙的话，最好用衍合：先在自己的一个分支里进行开发，当准备向主项目提交补丁的时候，根据最新的 origin/master 进行一次衍合操作然后再提交，这样维护者就不需要做任何整合工作（译注：实际上是把解决分支补丁同最新主干代码之间冲突的责任，化转为由提交补丁的人来解决。），只需根据你提供的仓库地址作一次快进合并，或者直接采纳你提交的补丁。\n\n请注意，合并结果中最后一次提交所指向的快照，无论是通过衍合，还是三方合并，都会得到相同的快照内容，只不过提交历史不同罢了。衍合是按照每行的修改次序重演一遍修改，而合并是把最终结果合在一起。\n\n#### 有趣的衍合\n衍合也可以放到其他分支进行，并不一定非得根据分化之前的分支。以图 3-31 的历史为例，我们为了给服务器端代码添加一些功能而创建了特性分支 server，然后提交 C3 和 C4。然后又从 C3 的地方再增加一个 client 分支来对客户端代码进行一些相应修改，所以提交了 C8 和 C9。最后，又回到 server 分支提交了 C10。\n![3_31](/images/3_31.png)\n假设在接下来的一次软件发布中，我们决定先把客户端的修改并到主线中，而暂缓并入服务端软件的修改（因为还需要进一步测试）。这个时候，我们就可以把基于 client 分支而非 server 分支的改变（即 C8 和 C9），跳过 server 直接放到 master 分支中重演一遍，但这需要用 git rebase 的 --onto 选项指定新的基底分支 master：\n``` bash\n$ git rebase --onto master server client\n```\n这好比在说：“取出 client 分支，找出 client 分支和 server 分支的共同祖先之后的变化，然后把它们在 master 上重演一遍”。是不是有点复杂？不过它的结果如图 3-32 所示，非常酷（译注：虽然 client 里的 C8, C9 在 C3 之后，但这仅表明时间上的先后，而非在 C3 修改的基础上进一步改动，因为 server 和 client 这两个分支对应的代码应该是两套文件，虽然这么说不是很严格，但应理解为在 C3 时间点之后，对另外的文件所做的 C8，C9 修改，放到主干重演。）：\n![3_32](/images/3_32.png)\n现在可以快进 master 分支了（见图 3-33）：\n``` bash\n$ git checkout master\n$ git merge client\n```\n现在我们决定把 server 分支的变化也包含进来。我们可以直接把 server 分支衍合到 master，而不用手工切换到 server 分支后再执行衍合操作 — git rebase [主分支] [特性分支] 命令会先取出特性分支 server，然后在主分支 master 上重演：\n``` bash\n$ git rebase master server\n```\n现在 client 和 server 分支的变化都已经集成到主干分支来了，可以删掉它们了。\n``` bash\n$ git branch -d client\n$ git branch -d server\n```\n#### 衍合的风险\n呃，奇妙的衍合也并非完美无缺，要用它得遵守一条准则：\n\n**一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行衍合操作。**\n\n如果你遵循这条金科玉律，就不会出差错。否则，人民群众会仇恨你，你的朋友和家人也会嘲笑你，唾弃你。\n\n在进行衍合的时候，实际上抛弃了一些现存的提交对象而创造了一些类似但不同的新的提交对象。如果你把原来分支中的提交对象发布出去，并且其他人更新下载后在其基础上开展工作，而稍后你又用 git rebase 抛弃这些提交对象，把新的重演后的提交对象发布出去的话，你的合作者就不得不重新合并他们的工作，这样当你再次从他们那里获取内容时，提交历史就会变得一团糟。\n\n下面我们用一个实际例子来说明为什么公开的衍合会带来问题。假设你从一个中央服务器克隆然后在它的基础上搞了一些开发，提交历史类似图 3-36 所示：\n![3_36](/images/3_36.png)\n![3_37](/images/3_37.png)\n![3_38](/images/3_38.png)\n![3_39](/images/3_39.png)\nC8 这一步的合并是迟早会发生的，因为只有这样你才能和其他协作者提交的内容保持同步。而在 C8 之后，你的提交历史里就会同时包含 C4 和 C4'，两者有着不同的 SHA-1 校验值，如果用 git log 查看历史，会看到两个提交拥有相同的作者日期与说明，令人费解。而更糟的是，当你把这样的历史推送到服务器后，会再次把这些衍合后的提交引入到中央服务器，进一步困扰其他人（译注：这个例子中，出问题的责任方是那个发布了 C6 后又用衍合发布 C4' 的人，其他人会因此反馈双重历史到共享主干，从而混淆大家的视听。）。\n\n如果把衍合当成一种在推送之前清理提交历史的手段，而且仅仅衍合那些尚未公开的提交对象，就没问题。如果衍合那些已经公开的提交对象，并且已经有人基于这些提交对象开展了后续开发工作的话，就会出现叫人沮丧的麻烦。\n\n\n## 服务器上的Git\n### 协议\nGit 可以使用四种主要的协议来传输数据：本地传输，SSH 协议，Git 协议和 HTTP 协议。下面分别介绍一下哪些情形应该使用（或避免使用）这些协议。\n\n值得注意的是，除了 HTTP 协议外，其他所有协议都要求在服务器端安装并运行 Git。\n\n#### 本地协议\n最基本的就是本地协议（Local protocol），所谓的远程仓库在该协议中的表示，就是硬盘上的另一个目录。这常见于团队每一个成员都对一个共享的文件系统（例如 NFS）拥有访问权，或者比较少见的多人共用同一台电脑的情况。后面一种情况并不安全，因为所有代码仓库实例都储存在同一台电脑里，增加了灾难性数据损失的可能性。\n\n如果你使用一个共享的文件系统，就可以在一个本地文件系统中克隆仓库，推送和获取。克隆的时候只需要将远程仓库的路径作为 URL 使用，比如下面这样：\n``` bash\n$ git clone /opt/git/project.git\n```\n或者这样：\n``` bash\n$ git clone file:///opt/git/project.git\n```\n如果在 URL 开头明确使用 file:// ，那么 Git 会以一种略微不同的方式运行。如果你只给出路径，Git 会尝试使用硬链接或直接复制它所需要的文件。如果使用了 file:// ，Git 会调用它平时通过网络来传输数据的工序，而这种方式的效率相对较低。使用 file:// 前缀的主要原因是当你需要一个不包含无关引用或对象的干净仓库副本的时候 — 一般指从其他版本控制系统导入的，或类似情形（参见第 9 章的维护任务）。我们这里仅仅使用普通路径，这样更快。\n\n要添加一个本地仓库作为现有 Git 项目的远程仓库，可以这样做：\n``` bash\n$ git remote add local_proj /opt/git/project.git\n```\n然后就可以像在网络上一样向这个远程仓库推送和获取数据了。\n__优点__\n\n基于文件仓库的优点在于它的简单，同时保留了现存文件的权限和网络访问权限。如果你的团队已经有一个全体共享的文件系统，建立仓库就十分容易了。你只需把一份裸仓库的副本放在大家都能访问的地方，然后像对其他共享目录一样设置读写权限就可以了。我们将在下一节“在服务器上部署 Git ”中讨论如何导出一个裸仓库的副本。\n\n这也是从别人工作目录中获取工作成果的快捷方法。假如你和你的同事在一个项目中合作，他们想让你检出一些东西的时候，运行类似 git pull /home/john/project 通常会比他们推送到服务器，而你再从服务器获取简单得多。\n\n__缺点__\n\n这种方法的缺点是，与基本的网络连接访问相比，难以控制从不同位置来的访问权限。如果你想从家里的笔记本电脑上推送，就要先挂载远程硬盘，这和基于网络连接的访问相比更加困难和缓慢。\n\n另一个很重要的问题是该方法不一定就是最快的，尤其是对于共享挂载的文件系统。本地仓库只有在你对数据访问速度快的时候才快。在同一个服务器上，如果二者同时允许 Git 访问本地硬盘，通过 NFS 访问仓库通常会比 SSH 慢。\n\n#### SSH 协议\nGit 使用的传输协议中最常见的可能就是 SSH 了。这是因为大多数环境已经支持通过 SSH 对服务器的访问 — 即便还没有，架设起来也很容易。SSH 也是唯一一个同时支持读写操作的网络协议。另外两个网络协议（HTTP 和 Git）通常都是只读的，所以虽然二者对大多数人都可用，但执行写操作时还是需要 SSH。SSH 同时也是一个验证授权的网络协议；而因为其普遍性，一般架设和使用都很容易。\n\n通过 SSH 克隆一个 Git 仓库，你可以像下面这样给出 ssh:// 的 URL：\n``` bash\n$ git clone ssh://user@server/project.git\n```\n或者不指明某个协议 — 这时 Git 会默认使用 SSH ：\n``` bash\n$ git clone user@server:project.git\n```\n如果不指明用户，Git 会默认使用当前登录的用户名连接服务器。\n__优点__\n\n使用 SSH 的好处有很多。首先，如果你想拥有对网络仓库的写权限，基本上不可能不使用 SSH。其次，SSH 架设相对比较简单 — SSH 守护进程很常见，很多网络管理员都有一些使用经验，而且很多操作系统都自带了它或者相关的管理工具。再次，通过 SSH 进行访问是安全的 — 所有数据传输都是加密和授权的。最后，和 Git 及本地协议一样，SSH 也很高效，会在传输之前尽可能压缩数据。\n\n__缺点__\n\nSSH 的限制在于你不能通过它实现仓库的匿名访问。即使仅为读取数据，人们也必须在能通过 SSH 访问主机的前提下才能访问仓库，这使得 SSH 不利于开源的项目。如果你仅仅在公司网络里使用，SSH 可能是你唯一需要使用的协议。如果想允许对项目的匿名只读访问，那么除了为自己推送而架设 SSH 协议之外，还需要支持其他协议以便他人访问读取。\n\n#### Git 协议\n接下来是 Git 协议。这是一个包含在 Git 软件包中的特殊守护进程； 它会监听一个提供类似于 SSH 服务的特定端口（9418），而无需任何授权。打算支持 Git 协议的仓库，需要先创建 git-daemon-export-ok 文件 — 它是协议进程提供仓库服务的必要条件 — 但除此之外该服务没有什么安全措施。要么所有人都能克隆 Git 仓库，要么谁也不能。这也意味着该协议通常不能用来进行推送。你可以允许推送操作；然而由于没有授权机制，一旦允许该操作，网络上任何一个知道项目 URL 的人将都有推送权限。不用说，这是十分罕见的情况。\n\n__优点__\n\nGit 协议是现存最快的传输协议。如果你在提供一个有很大访问量的公共项目，或者一个不需要对读操作进行授权的庞大项目，架设一个 Git 守护进程来供应仓库是个不错的选择。它使用与 SSH 协议相同的数据传输机制，但省去了加密和授权的开销。\n\n__缺点__\n\nGit 协议消极的一面是缺少授权机制。用 Git 协议作为访问项目的唯一方法通常是不可取的。一般的做法是，同时提供 SSH 接口，让几个开发者拥有推送（写）权限，其他人通过 git:// 拥有只读权限。 Git 协议可能也是最难架设的协议。它要求有单独的守护进程，需要定制 — 我们将在本章的 “Gitosis” 一节详细介绍它的架设 — 需要设定 xinetd 或类似的程序，而这些工作就没那么轻松了。该协议还要求防火墙开放 9418 端口，而企业级防火墙一般不允许对这个非标准端口的访问。大型企业级防火墙通常会封锁这个少见的端口。\n\n#### HTTP/S 协议\n最后还有 HTTP 协议。HTTP 或 HTTPS 协议的优美之处在于架设的简便性。基本上，只需要把 Git 的裸仓库文件放在 HTTP 的根目录下，配置一个特定的 post-update 挂钩（hook）就可以搞定（Git 挂钩的细节见第 7 章）。此后，每个能访问 Git 仓库所在服务器上 web 服务的人都可以进行克隆操作。下面的操作可以允许通过 HTTP 对仓库进行读取：\n``` bash\n$ cd /var/www/htdocs/\n$ git clone --bare /path/to/git_project gitproject.git\n$ cd gitproject.git\n$ mv hooks/post-update.sample hooks/post-update\n$ chmod a+x hooks/post-update\n```\n这样就可以了。Git 附带的 post-update 挂钩会默认运行合适的命令（git update-server-info）来确保通过 HTTP 的获取和克隆正常工作。这条命令在你用 SSH 向仓库推送内容时运行；之后，其他人就可以用下面的命令来克隆仓库：\n``` bash\n$ git clone http://example.com/gitproject.git\n\n```\n在本例中，我们使用了 Apache 设定中常用的 /var/www/htdocs 路径，不过你可以使用任何静态 web 服务 — 把裸仓库放在它的目录里就行。 Git 的数据是以最基本的静态文件的形式提供的（关于如何提供文件的详情见第 9 章）。\n\n通过 HTTP 进行推送操作也是可能的，不过这种做法不太常见，并且牵扯到复杂的 WebDAV 设定。由于很少用到，本书将略过对该内容的讨论。如果对 HTTP 推送协议感兴趣，不妨打开这个地址看一下操作方法：http://www.kernel.org/pub/software/scm/git/docs/howto/setup-git-server-over-http.txt 。通过 HTTP 推送的好处之一是你可以使用任何 WebDAV 服务器，不需要为 Git 设定特殊环境；所以如果主机提供商支持通过 WebDAV 更新网站内容，你也可以使用这项功能。\n\n__优点__\n\n使用 HTTP 协议的好处是易于架设。几条必要的命令就可以让全世界读取到仓库的内容。花费不过几分钟。HTTP 协议不会占用过多服务器资源。因为它一般只用到静态的 HTTP 服务提供所有数据，普通的 Apache 服务器平均每秒能支撑数千个文件的并发访问 — 哪怕让一个小型服务器超载都很难。\n\n你也可以通过 HTTPS 提供只读的仓库，这意味着你可以加密传输内容；你甚至可以要求客户端使用特定签名的 SSL 证书。一般情况下，如果到了这一步，使用 SSH 公共密钥可能是更简单的方案；不过也存在一些特殊情况，这时通过 HTTPS 使用带签名的 SSL 证书或者其他基于 HTTP 的只读连接授权方式是更好的解决方案。\n\nHTTP 还有个额外的好处：HTTP 是一个如此常见的协议，以至于企业级防火墙通常都允许其端口的通信。\n\n__缺点__\n\nHTTP 协议的消极面在于，相对来说客户端效率更低。克隆或者下载仓库内容可能会花费更多时间，而且 HTTP 传输的体积和网络开销比其他任何一个协议都大。因为它没有按需供应的能力 — 传输过程中没有服务端的动态计算 — 因而 HTTP 协议经常会被称为傻瓜（dumb）协议。更多 HTTP 协议和其他协议效率上的差异见第 9 章。\n\n\n### 在服务器上部署 Git\n开始架设 Git 服务器前，需要先把现有仓库导出为裸仓库 — 即一个不包含当前工作目录的仓库。做法直截了当，克隆时用 --bare 选项即可。裸仓库的目录名一般以 .git 结尾，像这样：\n``` bash\n$ git clone --bare my_project my_project.git\nCloning into bare repository 'my_project.git'...\ndone.\n```\n该命令的输出或许会让人有些不解。其实 clone 操作基本上相当于 git init 加 git fetch，所以这里出现的其实是 git init 的输出，先由它建立一个空目录，而之后传输数据对象的操作并无任何输出，只是悄悄在幕后执行。现在 my_project.git 目录中已经有了一份 Git 目录数据的副本。\n\n整体上的效果大致相当于：\n``` bash\n$ cp -Rf my_project/.git my_project.git\n```\n但在配置文件中有若干小改动，不过对用户来讲，使用方式都一样，不会有什么影响。它仅取出 Git 仓库的必要原始数据，存放在该目录中，而不会另外创建工作目录。\n#### 把裸仓库移到服务器上\n有了裸仓库的副本后，剩下的就是把它放到服务器上并设定相关协议。假设一个域名为 git.example.com 的服务器已经架设好，并可以通过 SSH 访问，我们打算把所有 Git 仓库储存在 /opt/git 目录下。只要把裸仓库复制过去：\n``` bash\n$ scp -r my_project.git user@git.example.com:/opt/git\n```\n现在，所有对该服务器有 SSH 访问权限，并可读取 /opt/git 目录的用户都可以用下面的命令克隆该项目：\n``` bash\n$ git clone user@git.example.com:/opt/git/my_project.git\n```\n如果某个 SSH 用户对 /opt/git/my_project.git 目录有写权限，那他就有推送权限。如果到该项目目录中运行 git init 命令，并加上 --shared 选项，那么 Git 会自动修改该仓库目录的组权限为可写（译注：实际上 --shared 可以指定其他行为，只是默认为将组权限改为可写并执行 g+sx，所以最后会得到 rws。）。\n``` bash\n$ ssh user@git.example.com\n$ cd /opt/git/my_project.git\n$ git init --bare --shared\n```\n由此可见，根据现有的 Git 仓库创建一个裸仓库，然后把它放上你和同事都有 SSH 访问权的服务器是多么容易。现在已经可以开始在同一项目上密切合作了。\n\n值得注意的是，这的的确确是架设一个少数人具有连接权的 Git 服务的全部 — 只要在服务器上加入可以用 SSH 登录的帐号，然后把裸仓库放在大家都有读写权限的地方。一切都准备停当，无需更多。\n\n下面的几节中，你会了解如何扩展到更复杂的设定。这些内容包含如何避免为每一个用户建立一个账户，给仓库添加公共读取权限，架设网页界面，使用 Gitosis 工具等等。然而，只是和几个人在一个不公开的项目上合作的话，仅仅是一个 SSH 服务器和裸仓库就足够了，记住这点就可以了。\n\n#### 小型安装\n如果设备较少或者你只想在小型开发团队里尝试 Git ，那么一切都很简单。架设 Git 服务最复杂的地方在于账户管理。如果需要仓库对特定的用户可读，而给另一部分用户读写权限，那么访问和许可的安排就比较困难。\n\nSSH 连接\n\n如果已经有了一个所有开发成员都可以用 SSH 访问的服务器，架设第一个服务器将变得异常简单，几乎什么都不用做（正如上节中介绍的那样）。如果需要对仓库进行更复杂的访问控制，只要使用服务器操作系统的本地文件访问许可机制就行了。\n\n如果需要团队里的每个人都对仓库有写权限，又不能给每个人在服务器上建立账户，那么提供 SSH 连接就是唯一的选择了。我们假设用来共享仓库的服务器已经安装了 SSH 服务，而且你通过它访问服务器。\n\n有好几个办法可以让团队的每个人都有访问权。第一个办法是给每个人建立一个账户，直截了当但略过繁琐。反复运行 adduser 并给所有人设定临时密码可不是好玩的。\n\n第二个办法是在主机上建立一个 git 账户，让每个需要写权限的人发送一个 SSH 公钥，然后将其加入 git 账户的 ~/.ssh/authorized_keys 文件。这样一来，所有人都将通过 git 账户访问主机。这丝毫不会影响提交的数据 — 访问主机用的身份不会影响提交对象的提交者信息。\n\n另一个办法是让 SSH 服务器通过某个 LDAP 服务，或者其他已经设定好的集中授权机制，来进行授权。只要每个人都能获得主机的 shell 访问权，任何可用的 SSH 授权机制都能达到相同效果。\n\n### 生成 SSH 公钥\n大多数 Git 服务器都会选择使用 SSH 公钥来进行授权。系统中的每个用户都必须提供一个公钥用于授权，没有的话就要生成一个。生成公钥的过程在所有操作系统上都差不多。 首先先确认一下是否已经有一个公钥了。SSH 公钥默认储存在账户的主目录下的 ~/.ssh 目录。进去看看：\n``` bash\n$ cd ~/.ssh\n$ ls\nauthorized_keys2  id_dsa       known_hosts\nconfig            id_dsa.pub\n```\n关键是看有没有用 something 和 something.pub 来命名的一对文件，这个 something 通常就是 id_dsa 或 id_rsa。有 .pub 后缀的文件就是公钥，另一个文件则是密钥。假如没有这些文件，或者干脆连 .ssh 目录都没有，可以用 ssh-keygen 来创建。该程序在 Linux/Mac 系统上由 SSH 包提供，而在 Windows 上则包含在 MSysGit 包里：\n``` bash\n$ ssh-keygen\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/schacon/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /Users/schacon/.ssh/id_rsa.\nYour public key has been saved in /Users/schacon/.ssh/id_rsa.pub.\nThe key fingerprint is:\n43:c5:5b:5f:b1:f1:50:43:ad:20:a6:92:6a:1f:9a:3a schacon@agadorlaptop.local\n```\n它先要求你确认保存公钥的位置（.ssh/id_rsa），然后它会让你重复一个密码两次，如果不想在使用公钥的时候输入密码，可以留空。\n\n现在，所有做过这一步的用户都得把它们的公钥给你或者 Git 服务器的管理员（假设 SSH 服务被设定为使用公钥机制）。他们只需要复制 .pub 文件的内容然后发邮件给管理员。公钥的样子大致如下：\n``` bash\n$ cat ~/.ssh/id_rsa.pub\nssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU\nGPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3\nPbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA\nt3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En\nmZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx\nNrRFi9wrf+M7Q== schacon@agadorlaptop.local\n```\n关于在多个操作系统上设立相同 SSH 公钥的教程，可以查阅 GitHub 上有关 SSH 公钥的[向导](http://github.com/guides/providing-your-ssh-key)。\n\nhttp://iissnan.com/progit/html/zh/ch4_10.html\n### Git 托管服务\n如果不想经历自己架设 Git 服务器的麻烦，网络上有几个专业的仓库托管服务可供选择。这样做有几大优点：托管账户的建立通常比较省时，方便项目的启动，而且不涉及服务器的维护和监控。即使内部创建并运行着自己的服务器，同时为开源项目提供一个公共托管站点还是有好处的 — 让开源社区更方便地找到该项目，并给予帮助。\n\n目前，可供选择的托管服务数量繁多，各有利弊。在 Git 官方 wiki 上的 Githosting 页面有一个最新的托管服务列表：\n``` bash\nhttps://git.wiki.kernel.org/index.php/GitHosting\n```\n由于本书无法全部一一介绍，而本人（译注：指本书作者 Scott Chacon。）刚好在其中一家公司工作，所以接下来我们将会介绍如何在 GitHub 上建立新账户并启动项目。至于其他托管服务大体也是这么一个过程，基本的想法都是差不多的。\n\nGitHub 是目前为止最大的开源 Git 托管服务，并且还是少数同时提供公共代码和私有代码托管服务的站点之一，所以你可以在上面同时保存开源和商业代码。事实上，本书就是放在 GitHub 上合作编著的。（译注：本书的翻译也是放在 GitHub 上广泛协作的。）\n\n#### GitHub\nGitHub 和大多数的代码托管站点在处理项目命名空间的方式上略有不同。GitHub 的设计更侧重于用户，而不是完全基于项目。也就是说，如果我在 GitHub 上托管一个名为 grit 的项目的话，它的地址不会是 github.com/grit，而是按在用户底下 github.com/shacon/grit （译注：本书作者 Scott Chacon 在 GitHub 上的用户名是 shacon。）。不存在所谓某个项目的官方版本，所以假如第一作者放弃了某个项目，它可以无缝转移到其它用户的名下。\n\nGitHub 同时也是一个向使用私有仓库的用户收取费用的商业公司，但任何人都可以方便快捷地申请到一个免费账户，并在上面托管数量不限的开源项目。接下来我们快速介绍一下 GitHub 的基本使用。\n##### 建立新账户\n首先注册一个免费账户。访问 \"Plans and pricing\" 页面 https://github.com/pricing 并点击 Free acount 里的 Sign Up 按钮（见图 4-2），进入注册页面。\n如果方便，现在就可以提供你的 SSH 公钥。我们在前文的\"小型安装\" 一节介绍过生成新公钥的方法。把新生成的公钥复制粘贴到 SSH Public Key 文本框中即可。要是对生成公钥的步骤不太清楚，也可以点击 \"explain ssh keys\" 链接，会显示各个主流操作系统上完成该步骤的介绍。 点击 \"I agree，sign me up\" 按钮完成用户注册，并转到该用户的 dashboard 页面\n##### 建立新仓库\n点击用户面板上仓库旁边的 \"create a new one\" 链接，显示 Create a New Repository 的表单.\n当然，项目名称是必不可少的，此外也可以适当描述一下项目的情况或者给出官方站点的地址。然后点击 \"Create Repository\" 按钮，新仓库就建立起来肋.\n由于尚未提交代码，点击项目地址后 GitHub 会显示一个简要的指南，告诉你如何新建一个项目并推送上来，如何从现有项目推送，以及如何从一个公共的 Subversion 仓库导入项目\n该指南和本书前文介绍的类似，对于新的项目，需要先在本地初始化为 Git 项目，添加要管理的文件并作首次提交：\n``` bash\n$ git init\n$ git add .\n$ git commit -m 'initial commit'\n```\n然后在这个本地仓库内把 GitHub 添加为远程仓库，并推送 master 分支上来：\n``` bash\n$ git remote add origin git@github.com:testinguser/iphone_project.git\n$ git push origin master\n```\n现在该项目就托管在 GitHub 上了。你可以把它的 URL 分享给每位对此项目感兴趣的人。本例的 URL 是 http://github.com/testinguser/iphone_project。而在项目页面的摘要部分，你会发现有两个 Git URL 地址.\nPublic Clone URL 是一个公开的，只读的 Git URL，任何人都可以通过它克隆该项目。可以随意散播这个 URL，比如发布到个人网站之类的地方等等。\n\nYour Clone URL 是一个基于 SSH 协议的可读可写 URL，只有使用与上传的 SSH 公钥对应的密钥来连接时，才能通过它进行读写操作。其他用户访问该项目页面时只能看到之前那个公共的 URL，看不到这个私有的 URL。\n\n##### 添加协作开发者\n现在把团队里的其他人也加进来。如果 John，Josie 和 Jessica 都在 GitHub 注册了账户，要赋予他们对该仓库的推送权限，可以把他们加为项目协作者。这样他们就可以通过各自的公钥访问我的这个仓库了。\n\n点击项目页面上方的 \"edit\" 按钮或者顶部的 Admin 标签，进入该项目的管理页面.\n为了给另一个用户添加项目的写权限，点击 \"Add another collaborator\" 链接，出现一个用于输入用户名的表单。在输入的同时，它会自动跳出一个符合条件的候选名单。找到正确用户名之后，点 Add 按钮，把该用户设为项目协作者.\n添加完协作者之后，就可以在 Repository Collaborators 区域看到他们的名单\n如果要取消某人的访问权，点击 \"revoke\" 即可取消他的推送权限。对于将来的项目，你可以从现有项目复制协作者名单，或者直接借用协作者群组\n\n##### 派生项目\n如果要为一个自己没有推送权限的项目贡献代码，GitHub 鼓励使用派生（fork）。到那个感兴趣的项目主页上，点击页面上方的 \"fork\" 按钮，GitHub 就会为你复制一份该项目的副本到你的仓库中，这样你就可以向自己的这个副本推送数据了。\n\n采取这种办法的好处是，项目拥有者不必忙于应付赋予他人推送权限的工作。随便谁都可以通过派生得到一个项目副本并在其中展开工作，事后只需要项目维护者将这些副本仓库加为远程仓库，然后提取更新合并即可。\n\n要派生一个项目，到原始项目的页面（本例中是 mojombo/chronic）点击 \"fork\" 按钮\n几秒钟之后，你将进入新建的项目页面，会显示该项目派生自哪一个项目\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Git学习笔记-二.md","raw":"---\ntitle: Git学习笔记(二)\ndate: 2016-08-26 23:05:27\ntags: Git 笔记\n---\n\n## Git 分支\n\n### 何谓分支\n\n为了理解 Git 分支的实现方式，我们需要回顾一下 Git 是如何储存数据的。或许你还记得第一章的内容，Git 保存的不是文件差异或者变化量，而只是一系列文件快照。\n\n在 Git 中提交时，会保存一个提交（commit）对象，该对象包含一个指向暂存内容快照的指针，包含本次提交的作者等相关附属信息，包含零个或多个指向该提交对象的父对象指针：首次提交是没有直接祖先的，普通提交有一个祖先，由两个或多个分支合并产生的提交则有多个祖先。\n\n为直观起见，我们假设在工作目录中有三个文件，准备将它们暂存后提交。暂存操作会对每一个文件计算校验和（即第一章中提到的 SHA-1 哈希字串），然后把当前版本的文件快照保存到 Git 仓库中（Git 使用 blob 类型的对象存储这些快照），并将校验和加入暂存区域：\n``` bash\n$ git add README test.rb LICENSE\n$ git commit -m 'initial commit of my project'\n```\n<!--more-->\n当使用 git commit 新建一个提交对象前，Git 会先计算每一个子目录（本例中就是项目根目录）的校验和，然后在 Git 仓库中将这些目录保存为树（tree）对象。之后 Git 创建的提交对象，除了包含相关提交信息以外，还包含着指向这个树对象（项目根目录）的指针，如此它就可以在将来需要的时候，重现此次快照的内容了。\n现在，Git 仓库中有五个对象：三个表示文件快照内容的 blob 对象；一个记录着目录树内容及其中各个文件对应 blob 对象索引的 tree 对象；以及一个包含指向 tree 对象（根目录）的索引和其他提交信息元数据的 commit 对象。概念上来说，仓库中的各个对象保存的数据和相互关系看起来如图 3-1 所示：\n![3_1](/images/3_1.png)\n作些修改后再次提交，那么这次的提交对象会包含一个指向上次提交对象的指针（译注：即下图中的 parent 对象）。两次提交后，仓库历史会变成图 3-2 的样子：\n![a](/images/3_2.png)\n\n现在来谈分支。Git 中的分支，其实本质上仅仅是个指向 commit 对象的可变指针。Git 会使用 master 作为分支的默认名字。在若干次提交后，你其实已经有了一个指向最后一次提交对象的 master 分支，它在每次提交的时候都会自动向前移动。\n![3_3](/images/3_3.png)\n\n那么，Git 又是如何创建一个新的分支的呢？答案很简单，创建一个新的分支指针。比如新建一个 testing 分支，可以使用 git branch 命令：\n``` bash\n$ git branch testing\n```\n这会在当前 **commit** 对象上新建一个分支指针（见图 3-4）。\n\n\n![3_4](/images/3_4.png)\n那么，Git 是如何知道你当前在哪个分支上工作的呢？其实答案也很简单，它保存着一个名为 HEAD 的特别指针。请注意它和你熟知的许多其他版本控制系统（比如 Subversion 或 CVS）里的 HEAD 概念大不相同。在 Git 中，它是一个指向你正在工作中的本地分支的指针（译注：将 HEAD 想象为当前分支的别名。）。运行 git branch 命令，仅仅是建立了一个新的分支，但不会自动切换到这个分支中去，所以在这个例子中，我们依然还在 master 分支里工作（参考图 3-5）。\n![3_5](/images/3_5.png)\n要切换到其他分支，可以执行 git checkout 命令。我们现在转换到新建的 testing 分支：\n``` bash\n$ git checkout testing\n```\n这样 HEAD 就指向了 testing 分支（见图3-6）。\n![3_6](/images/3_6.png)\n这样的实现方式会给我们带来什么好处呢？好吧，现在不妨再提交一次：\n``` bash\n$ vim test.rb\n$ git commit -a -m 'made a change'\n```\n图 3-7 展示了提交后的结果。\n![3_7](/images/3_7.png)\n非常有趣，现在 testing 分支向前移动了一格，而 master 分支仍然指向原先 git checkout 时所在的 commit 对象。现在我们回到 master 分支看看：\n``` bash\n$ git checkout master\n```\n![3_8](/images/3_8.png)\n\n这条命令做了两件事。它把 HEAD 指针移回到 master 分支，并把工作目录中的文件换成了 master 分支所指向的快照内容。也就是说，现在开始所做的改动，将始于本项目中一个较老的版本。它的主要作用是将 testing 分支里作出的修改暂时取消，这样你就可以向另一个方向进行开发。\n\n我们作些修改后再次提交：\n``` bash\n$ vim test.rb\n$ git commit -a -m 'made other changes'\n```\n现在我们的项目提交历史产生了分叉（如图 3-9 所示），因为刚才我们创建了一个分支，转换到其中进行了一些工作，然后又回到原来的主分支进行了另外一些工作。这些改变分别孤立在不同的分支里：我们可以在不同分支里反复切换，并在时机成熟时把它们合并到一起。而所有这些工作，仅仅需要 branch 和 checkout 这两条命令就可以完成。\n![3_9](/images/3_9.png)\n由于 Git 中的分支实际上仅是一个包含所指对象校验和（40 个字符长度 SHA-1 字串）的文件，所以创建和销毁一个分支就变得非常廉价。说白了，新建一个分支就是向一个文件写入 41 个字节（外加一个换行符）那么简单，当然也就很快了。\n\n这和大多数版本控制系统形成了鲜明对比，它们管理分支大多采取备份所有项目文件到特定目录的方式，所以根据项目文件数量和大小不同，可能花费的时间也会有相当大的差别，快则几秒，慢则数分钟。而 Git 的实现与项目复杂度无关，它永远可以在几毫秒的时间内完成分支的创建和切换。同时，因为每次提交时都记录了祖先信息（译注：即 parent 对象），将来要合并分支时，寻找恰当的合并基础（译注：即共同祖先）的工作其实已经自然而然地摆在那里了，所以实现起来非常容易。Git 鼓励开发者频繁使用分支，正是因为有着这些特性作保障。\n\n接下来看看，我们为什么应该频繁使用分支。\n\n### 分支的新建与合并\n现在让我们来看一个简单的分支与合并的例子，实际工作中大体也会用到这样的工作流程：\n\n1. 开发某个网站。\n2. 为实现某个新的需求，创建一个分支。\n3. 在这个分支上开展工作。\n假设此时，你突然接到一个电话说有个很严重的问题需要紧急修补，那么可以按照下面的方式处理：\n1. 返回到原先已经发布到生产服务器上的分支。\n2. 为这次紧急修补建立一个新分支，并在其中修复问题。\n3. 通过测试后，回到生产服务器所在的分支，将修补分支合并进来，然后再推送到生产服务器上。\n4. 切换到之前实现新需求的分支，继续工作。\n\n#### 分支的新建与切换\n首先，我们假设你正在项目中愉快地工作，并且已经提交了几次更新.\n现在，你决定要修补问题追踪系统上的 #53 问题。顺带说明下，Git 并不同任何特定的问题追踪系统打交道。这里为了说明要解决的问题，才把新建的分支取名为 iss53。要新建并切换到该分支，运行 git checkout 并加上 -b 参数：\n``` bash\n$ git checkout -b iss53\nSwitched to a new branch 'iss53'\n```\n这相当于执行下面这两条命令：\n``` bash\n$ git branch iss53\n$ git checkout iss53\n```\n接着你开始尝试修复问题，在提交了若干次更新后，iss53 分支的指针也会随着向前推进，因为它就是当前分支.\n``` bash\n$ vim index.html\n$ git commit -a -m 'added a new footer [issue 53]'\n```\n现在你就接到了那个网站问题的紧急电话，需要马上修补。有了 Git ，我们就不需要同时发布这个补丁和 iss53 里作出的修改，也不需要在创建和发布该补丁到服务器之前花费大力气来复原这些修改。唯一需要的仅仅是切换回 master 分支。\n\n不过在此之前，留心你的暂存区或者工作目录里，那些还没有提交的修改，它会和你即将检出的分支产生冲突从而阻止 Git 为你切换分支。切换分支的时候最好保持一个清洁的工作区域。稍后会介绍几个绕过这种问题的办法（分别叫做 stashing 和 commit amending）。目前已经提交了所有的修改，所以接下来可以正常转换到 master 分支：\n``` bash\n$ git checkout master\nSwitched to branch 'master'\n```\n此时工作目录中的内容和你在解决问题 #53 之前一模一样，你可以集中精力进行紧急修补。这一点值得牢记：Git 会把工作目录的内容恢复为检出某分支时它所指向的那个提交对象的快照。它会自动添加、删除和修改文件以确保目录的内容和你当时提交时完全一样。\n\n接下来，你得进行紧急修补。我们创建一个紧急修补分支 hotfix 来开展工作，直到搞定（见图 3-13）：\n``` bash\n$ git checkout -b hotfix\nSwitched to a new branch 'hotfix'\n$ vim index.html\n$ git commit -a -m 'fixed the broken email address'\n[hotfix 3a0874c] fixed the broken email address\n 1 files changed, 1 deletion(-)\n```\n有必要作些测试，确保修补是成功的，然后回到 master 分支并把它合并进来，然后发布到生产服务器。用 git merge 命令来进行合并：\n``` bash\n$ git checkout master\n$ git merge hotfix\nUpdating f42c576..3a0874c\nFast-forward\n README | 1 -\n 1 file changed, 1 deletion(-)\n```\n请注意，合并时出现了“Fast forward”的提示。由于当前 master 分支所在的提交对象是要并入的 hotfix 分支的直接上游，Git 只需把 master 分支指针直接右移。换句话说，如果顺着一个分支走下去可以到达另一个分支的话，那么 Git 在合并两者时，只会简单地把指针右移，因为这种单线的历史分支不存在任何需要解决的分歧，所以这种合并过程可以称为快进（Fast forward）。\n\n现在最新的修改已经在当前 master 分支所指向的提交对象中了，可以部署到生产服务器上去了.\n\n\n在那个超级重要的修补发布以后，你想要回到被打扰之前的工作。由于当前 hotfix 分支和 master 都指向相同的提交对象，所以 hotfix 已经完成了历史使命，可以删掉了。使用 git branch 的 -d 选项执行删除操作：\n``` bash\n$ git branch -d hotfix\nDeleted branch hotfix (was 3a0874c).\n```\n现在回到之前未完成的 #53 问题修复分支上继续工作\n``` bash\n$ git checkout iss53\nSwitched to branch 'iss53'\n$ vim index.html\n$ git commit -a -m 'finished the new footer [issue 53]'\n[iss53 ad82d7a] finished the new footer [issue 53]\n 1 file changed, 1 insertion(+)\n```\n值得注意的是之前 hotfix 分支的修改内容尚未包含到 iss53 中来。如果需要纳入此次修补，可以用 git merge master 把 master 分支合并到 iss53；或者等 iss53 完成之后，再将 iss53 分支中的更新并入 master。\n\n#### 分支的合并\n在问题 #53 相关的工作完成之后，可以合并回 master 分支。实际操作同前面合并 hotfix 分支差不多，只需回到 master 分支，运行 git merge 命令指定要合并进来的分支：\n``` bash\n$ git checkout master\n$ git merge iss53\nAuto-merging README\nMerge made by the 'recursive' strategy.\n README | 1 +\n 1 file changed, 1 insertion(+)\n```\n请注意，这次合并操作的底层实现，并不同于之前 hotfix 的并入方式。因为这次你的开发历史是从更早的地方开始分叉的。由于当前 master 分支所指向的提交对象（C4）并不是 iss53 分支的直接祖先，Git 不得不进行一些额外处理。就此例而言，Git 会用两个分支的末端（C4 和 C5）以及它们的共同祖先（C2）进行一次简单的三方合并计算。图 3-16 用红框标出了 Git 用于合并的三个提交对象：\n![3_10](/images/3_10.png)\n这次，Git 没有简单地把分支指针右移，而是对三方合并后的结果重新做一个新的快照，并自动创建一个指向它的提交对象（C6）（见图 3-17）。这个提交对象比较特殊，它有两个祖先（C4 和 C5）。\n\n值得一提的是 Git 可以自己裁决哪个共同祖先才是最佳合并基础；这和 CVS 或 Subversion（1.5 以后的版本）不同，它们需要开发者手工指定合并基础。所以此特性让 Git 的合并操作比其他系统都要简单不少。\n![3_11](/images/3_11.png)\n既然之前的工作成果已经合并到 master 了，那么 iss53 也就没用了。你可以就此删除它，并在问题追踪系统里关闭该问题。\n``` bash\n$ git branch -d iss53\n```\n\n#### 遇到冲突时的分支合并\n有时候合并操作并不会如此顺利。如果在不同的分支中都修改了同一个文件的同一部分，Git 就无法干净地把两者合到一起（译注：逻辑上说，这种问题只能由人来裁决。）。如果你在解决问题 #53 的过程中修改了 hotfix 中修改的部分，将得到类似下面的结果：\n``` bash\n$ git merge iss53\nAuto-merging index.html\nCONFLICT (content): Merge conflict in index.html\nAutomatic merge failed; fix conflicts and then commit the result.\n```\nGit 作了合并，但没有提交，它会停下来等你解决冲突。要看看哪些文件在合并时发生冲突，可以用 git status 查阅：\n``` bash\n$ git status\nOn branch master\nYou have unmerged paths.\n  (fix conflicts and run \"git commit\")\n\nUnmerged paths:\n  (use \"git add <file>...\" to mark resolution)\n\n        both modified:      index.html\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n任何包含未解决冲突的文件都会以未合并（unmerged）的状态列出。Git 会在有冲突的文件里加入标准的冲突解决标记，可以通过它们来手工定位并解决这些冲突。可以看到此文件包含类似下面这样的部分：\n``` bash\n<<<<<<< HEAD\n<div id=\"footer\">contact : email.support@github.com</div>\n=======\n<div id=\"footer\">\n  please contact us at support@github.com\n</div>\n>>>>>>> iss53\n```\n可以看到 ======= 隔开的上半部分，是 HEAD（即 master 分支，在运行 merge 命令时所切换到的分支）中的内容，下半部分是在 iss53 分支中的内容。解决冲突的办法无非是二者选其一或者由你亲自整合到一起。比如你可以通过把这段内容替换为下面这样来解决：\n``` bash\n<div id=\"footer\">\nplease contact us at email.support@github.com\n</div>\n```\n这个解决方案各采纳了两个分支中的一部分内容，而且我还删除了 <<<<<<<，======= 和 >>>>>>> 这些行。在解决了所有文件里的所有冲突后，运行 git add 将把它们标记为已解决状态（译注：实际上就是来一次快照保存到暂存区域。）。因为一旦暂存，就表示冲突已经解决。如果你想用一个有图形界面的工具来解决这些问题，不妨运行 git mergetool，它会调用一个可视化的合并工具并引导你解决所有冲突：\n``` bash\n$ git mergetool\n\nThis message is displayed because 'merge.tool' is not configured.\nSee 'git mergetool --tool-help' or 'git help config' for more details.\n'git mergetool' will now attempt to use one of the following tools:\nopendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc3 codecompare vimdiff emerge\nMerging:\nindex.html\n\nNormal merge conflict for 'index.html':\n  {local}: modified file\n  {remote}: modified file\nHit return to start merge resolution tool (opendiff):\n```\n如果不想用默认的合并工具（Git 为我默认选择了 opendiff，因为我在 Mac 上运行了该命令），你可以在上方\"merge tool candidates\"里找到可用的合并工具列表，输入你想用的工具名。我们将在第七章讨论怎样改变环境中的默认值。\n\n退出合并工具以后，Git 会询问你合并是否成功。如果回答是，它会为你把相关文件暂存起来，以表明状态为已解决。\n\n再运行一次 git status 来确认所有冲突都已解决：\n``` bash\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        modified:   index.html\n```\n如果觉得满意了，并且确认所有冲突都已解决，也就是进入了暂存区，就可以用 git commit 来完成这次合并提交。提交的记录差不多是这样：\n``` bash\nMerge branch 'iss53'\n\nConflicts:\n  index.html\n#\n# It looks like you may be committing a merge.\n# If this is not correct, please remove the file\n#       .git/MERGE_HEAD\n# and try again.\n#\n```\n如果想给将来看这次合并的人一些方便，可以修改该信息，提供更多合并细节。比如你都作了哪些改动，以及这么做的原因。有时候裁决冲突的理由并不直接或明显，有必要略加注解。\n\n### 分支的管理\n到目前为止，你已经学会了如何创建、合并和删除分支。除此之外，我们还需要学习如何管理分支，在日后的常规工作中会经常用到下面介绍的管理命令。\n\ngit branch 命令不仅仅能创建和删除分支，如果不加任何参数，它会给出当前所有分支的清单：\n``` bash\n$ git branch\n  iss53\n* master\n  testing\n```\n注意看 master 分支前的 * 字符：它表示当前所在的分支。也就是说，如果现在提交更新，master 分支将随着开发进度前移。若要查看各个分支最后一个提交对象的信息，运行 git branch -v：\n``` bash\n$ git branch -v\n  iss53   93b412c fix javascript issue\n* master  7a98805 Merge branch 'iss53'\n  testing 782fd34 add scott to the author list in the readmes\n```\n要从该清单中筛选出你已经（或尚未）与当前分支合并的分支，可以用 --merged 和 --no-merged 选项（Git 1.5.6 以上版本）。比如用 git branch --merged 查看哪些分支已被并入当前分支（译注：也就是说哪些分支是当前分支的直接上游。）：\n``` bash\n$ git branch --merged\n  iss53\n* master\n```\n之前我们已经合并了 iss53，所以在这里会看到它。一般来说，列表中没有 * 的分支通常都可以用 git branch -d 来删掉。原因很简单，既然已经把它们所包含的工作整合到了其他分支，删掉也不会损失什么。\n\n另外可以用 git branch --no-merged 查看尚未合并的工作：\n``` bash\n$ git branch --no-merged\n  testing\n```\n它会显示还未合并进来的分支。由于这些分支中还包含着尚未合并进来的工作成果，所以简单地用 git branch -d 删除该分支会提示错误，因为那样做会丢失数据：\n``` bash\n$ git branch -d testing\nerror: The branch 'testing' is not fully merged.\nIf you are sure you want to delete it, run 'git branch -D testing'.\n```\n不过，如果你确实想要删除该分支上的改动，可以用大写的删除选项 -D 强制执行，就像上面提示信息中给出的那样。\n\n### 利用分支进行开发的工作流程\n现在我们已经学会了新建分支和合并分支，可以（或应该）用它来做点什么呢？在本节，我们会介绍一些利用分支进行开发的工作流程。而正是由于分支管理的便捷，才衍生出了这类典型的工作模式，你可以根据项目的实际情况选择一种用用看。\n\n#### 长期分支\n由于 Git 使用简单的三方合并，所以就算在较长一段时间内，反复多次把某个分支合并到另一分支，也不是什么难事。也就是说，你可以同时拥有多个开放的分支，每个分支用于完成特定的任务，随着开发的推进，你可以随时把某个特性分支的成果并到其他分支中。\n\n许多使用 Git 的开发者都喜欢用这种方式来开展工作，比如仅在 master 分支中保留完全稳定的代码，即已经发布或即将发布的代码。与此同时，他们还有一个名为 develop 或 next 的平行分支，专门用于后续的开发，或仅用于稳定性测试 — 当然并不是说一定要绝对稳定，不过一旦进入某种稳定状态，便可以把它合并到 master 里。这样，在确保这些已完成的特性分支（短期分支，比如之前的 iss53 分支）能够通过所有测试，并且不会引入更多错误之后，就可以并到主干分支中，等待下一次的发布。\n\n本质上我们刚才谈论的，是随着提交对象不断右移的指针。稳定分支的指针总是在提交历史中落后一大截，而前沿分支总是比较靠前（见图 3-18）。\n![3_18](/images/3_18.png)\n你可以用这招维护不同层次的稳定性。某些大项目还会有个 proposed（建议）或 pu（proposed updates，建议更新）分支，它包含着那些可能还没有成熟到进入 next 或 master 的内容。这么做的目的是拥有不同层次的稳定性：当这些分支进入到更稳定的水平时，再把它们合并到更高层分支中去。再次说明下，使用多个长期分支的做法并非必需，不过一般来说，对于特大型项目或特复杂的项目，这么做确实更容易管理。\n\n#### 特性分支\n在任何规模的项目中都可以使用特性（Topic）分支。一个特性分支是指一个短期的，用来实现单一特性或与其相关工作的分支。可能你在以前的版本控制系统里从未做过类似这样的事情，因为通常创建与合并分支消耗太大。然而在 Git 中，一天之内建立、使用、合并再删除多个分支是常见的事。\n\n我们在上节的例子里已经见过这种用法了。我们创建了 iss53 和 hotfix 这两个特性分支，在提交了若干更新后，把它们合并到主干分支，然后删除。该技术允许你迅速且完全的进行语境切换 — 因为你的工作分散在不同的流水线里，每个分支里的改变都和它的目标特性相关，浏览代码之类的事情因而变得更简单了。你可以把作出的改变保持在特性分支中几分钟，几天甚至几个月，等它们成熟以后再合并，而不用在乎它们建立的顺序或者进度。\n\n现在我们来看一个实际的例子。请看图 3-20，由下往上，起先我们在 master 工作到 C1，然后开始一个新分支 iss91 尝试修复 91 号缺陷，提交到 C6 的时候，又冒出一个解决该问题的新办法，于是从之前 C4 的地方又分出一个分支 iss91v2，干到 C8 的时候，又回到主干 master 中提交了 C9 和 C10，再回到 iss91v2 继续工作，提交 C11，接着，又冒出个不太确定的想法，从 master 的最新提交 C10 处开了个新的分支 dumbidea 做些试验。\n![3_20](/images/3_20.png)\n现在，假定两件事情：我们最终决定使用第二个解决方案，即 iss91v2 中的办法；另外，我们把 dumbidea 分支拿给同事们看了以后，发现它竟然是个天才之作。所以接下来，我们准备抛弃原来的 iss91 分支（实际上会丢弃 C5 和 C6），直接在主干中并入另外两个分支。最终的提交历史将变成图 3-21 这样：\n![3_21](/images/3_21.png)\n请务必牢记这些分支全部都是本地分支，这一点很重要。当你在使用分支及合并的时候，一切都是在你自己的 Git 仓库中进行的 — 完全不涉及与服务器的交互。\n\n### 远程分支\n远程分支（remote branch）是对远程仓库中的分支的索引。它们是一些无法移动的本地分支；只有在 Git 进行网络交互时才会更新。远程分支就像是书签，提醒着你上次连接远程仓库时上面各分支的位置。\n\n我们用 (远程仓库名)/(分支名) 这样的形式表示远程分支。比如我们想看看上次同 origin 仓库通讯时 master 分支的样子，就应该查看 origin/master 分支。如果你和同伴一起修复某个问题，但他们先推送了一个 iss53 分支到远程仓库，虽然你可能也有一个本地的 iss53 分支，但指向服务器上最新更新的却应该是 origin/iss53 分支。\n\n可能有点乱，我们不妨举例说明。假设你们团队有个地址为 git.ourcompany.com 的 Git 服务器。如果你从这里克隆，Git 会自动为你将此远程仓库命名为 origin，并下载其中所有的数据，建立一个指向它的 master 分支的指针，在本地命名为 origin/master，但你无法在本地更改其数据。接着，Git 建立一个属于你自己的本地 master 分支，始于 origin 上 master 分支相同的位置，你可以就此开始工作（见图 3-22）：\n可能有点乱，我们不妨举例说明。假设你们团队有个地址为 git.ourcompany.com 的 Git 服务器。如果你从这里克隆，Git 会自动为你将此远程仓库命名为 origin，并下载其中所有的数据，建立一个指向它的 master 分支的指针，在本地命名为 origin/master，但你无法在本地更改其数据。接着，Git 建立一个属于你自己的本地 master 分支，始于 origin 上 master 分支相同的位置，你可以就此开始工作（见图 3-22）：\n![3_22](/images/3_22.png)\n如果你在本地 master 分支做了些改动，与此同时，其他人向 git.ourcompany.com 推送了他们的更新，那么服务器上的 master 分支就会向前推进，而与此同时，你在本地的提交历史正朝向不同方向发展。不过只要你不和服务器通讯，你的 origin/master 指针仍然保持原位不会移动（见图 3-23）。 \n![3_23](/images/3_23.png)\n图 3-23. 在本地工作的同时有人向远程仓库推送内容会让提交历史开始分流。\n可以运行 git fetch origin 来同步远程服务器上的数据到本地。该命令首先找到 origin 是哪个服务器（本例为 git.ourcompany.com），从上面获取你尚未拥有的数据，更新你本地的数据库，然后把 origin/master 的指针移到它最新的位置上（见图 3-24）。\n![3_24](/images/3_24.png)\n为了演示拥有多个远程分支（在不同的远程服务器上）的项目是如何工作的，我们假设你还有另一个仅供你的敏捷开发小组使用的内部服务器 git.team1.ourcompany.com。可以用第二章中提到的 git remote add 命令把它加为当前项目的远程分支之一。我们把它命名为 teamone，以便代替完整的 Git URL 以方便使用（见图 3-25）。\n![3_25](/images/3_25.png)\n现在你可以用 git fetch teamone 来获取小组服务器上你还没有的数据了。由于当前该服务器上的内容是你 origin 服务器上的子集，Git 不会下载任何数据，而只是简单地创建一个名为 teamone/master 的远程分支，指向 teamone 服务器上 master 分支所在的提交对象 31b8e（见图 3-26）。\n![3_26](/images/3_26.png)\n#### 推送本地分支\n要想和其他人分享某个本地分支，你需要把它推送到一个你拥有写权限的远程仓库。你创建的本地分支不会因为你的写入操作而被自动同步到你引入的远程服务器上，你需要明确地执行推送分支的操作。换句话说，对于无意分享的分支，你尽管保留为私人分支好了，而只推送那些协同工作要用到的特性分支。\n\n如果你有个叫 serverfix 的分支需要和他人一起开发，可以运行 git push (远程仓库名) (分支名)：\n``` bash\n$ git push origin serverfix\nCounting objects: 20, done.\nCompressing objects: 100% (14/14), done.\nWriting objects: 100% (15/15), 1.74 KiB, done.\nTotal 15 (delta 5), reused 0 (delta 0)\nTo git@github.com:schacon/simplegit.git\n * [new branch]      serverfix -> serverfix\n```\n这里其实走了一点捷径。Git 自动把 serverfix 分支名扩展为 refs/heads/serverfix:refs/heads/serverfix，意为“取出我在本地的 serverfix 分支，推送到远程仓库的 serverfix 分支中去”。我们将在第九章进一步介绍 refs/heads/ 部分的细节，不过一般使用的时候都可以省略它。也可以运行 git push origin serverfix:serverfix 来实现相同的效果，它的意思是“上传我本地的 serverfix 分支到远程仓库中去，仍旧称它为 serverfix 分支”。通过此语法，你可以把本地分支推送到某个命名不同的远程分支：若想把远程分支叫作 awesomebranch，可以用 git push origin serverfix:awesomebranch 来推送数据。\n\n接下来，当你的协作者再次从服务器上获取数据时，他们将得到一个新的远程分支 origin/serverfix，并指向服务器上 serverfix 所指向的版本：\n``` bash\n$ git fetch origin\nremote: Counting objects: 20, done.\nremote: Compressing objects: 100% (14/14), done.\nremote: Total 15 (delta 5), reused 0 (delta 0)\nUnpacking objects: 100% (15/15), done.\nFrom git@github.com:schacon/simplegit\n * [new branch]      serverfix    -> origin/serverfix\n```\n值得注意的是，在 fetch 操作下载好新的远程分支之后，你仍然无法在本地编辑该远程仓库中的分支。换句话说，在本例中，你不会有一个新的 serverfix 分支，有的只是一个你无法移动的 origin/serverfix 指针。\n\n如果要把该远程分支的内容合并到当前分支，可以运行 git merge origin/serverfix。如果想要一份自己的 serverfix 来开发，可以在远程分支的基础上分化出一个新的分支来：\n``` bash\n$ git checkout -b serverfix origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch 'serverfix'\n```\n这会切换到新建的 serverfix 本地分支，其内容同远程分支 origin/serverfix 一致，这样你就可以在里面继续开发了。\n#### 跟踪远程分支\n从远程分支 checkout 出来的本地分支，称为 跟踪分支 (tracking branch)。跟踪分支是一种和某个远程分支有直接联系的本地分支。在跟踪分支里输入 git push，Git 会自行推断应该向哪个服务器的哪个分支推送数据。同样，在这些分支里运行 git pull 会获取所有远程索引，并把它们的数据都合并到本地分支中来。\n\n在克隆仓库时，Git 通常会自动创建一个名为 master 的分支来跟踪 origin/master。这正是 git push 和 git pull 一开始就能正常工作的原因。当然，你可以随心所欲地设定为其它跟踪分支，比如 origin 上除了 master 之外的其它分支。刚才我们已经看到了这样的一个例子：git checkout -b [分支名] [远程名]/[分支名]。如果你有 1.6.2 以上版本的 Git，还可以用 --track 选项简化：\n``` bash\n$ git checkout --track origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch 'serverfix'\n```\n要为本地分支设定不同于远程分支的名字，只需在第一个版本的命令里换个名字：\n``` bash\n$ git checkout -b sf origin/serverfix\nBranch sf set up to track remote branch serverfix from origin.\nSwitched to a new branch 'sf'\n```\n现在你的本地分支 sf 会自动将推送和抓取数据的位置定位到 origin/serverfix 了。\n\n#### 删除远程分支\n如果不再需要某个远程分支了，比如搞定了某个特性并把它合并进了远程的 master 分支（或任何其他存放稳定代码的分支），可以用这个非常无厘头的语法来删除它：git push [远程名] :[分支名]。如果想在服务器上删除 serverfix 分支，运行下面的命令：\n``` bash\n$ git push origin :serverfix\nTo git@github.com:schacon/simplegit.git\n - [deleted]         serverfix\n```\n咚！服务器上的分支没了。你最好特别留心这一页，因为你一定会用到那个命令，而且你很可能会忘掉它的语法。有种方便记忆这条命令的方法：记住我们不久前见过的 git push [远程名] [本地分支]:[远程分支] 语法，如果省略 [本地分支]，那就等于是在说“在这里提取空白然后把它变成[远程分支]”。\n\n### 分支的衍合\n把一个分支中的修改整合到另一个分支的办法有两种：merge 和 rebase（译注：rebase 的翻译暂定为“衍合”，大家知道就可以了。）。在本章我们会学习什么是衍合，如何使用衍合，为什么衍合操作如此富有魅力，以及我们应该在什么情况下使用衍合。\n\n#### 基本的衍合操作\n![3_27](/images/3_27.png)\n![3_28](/images/3_28.png)\n在上面这个例子中，运行：\n``` bash\n$ git checkout experiment\n$ git rebase master\nFirst, rewinding head to replay your work on top of it...\nApplying: added staged command\n```\n它的原理是回到两个分支最近的共同祖先，根据当前分支（也就是要进行衍合的分支 experiment）后续的历次提交对象（这里只有一个 C3），生成一系列文件补丁，然后以基底分支（也就是主干分支 master）最后一个提交对象（C4）为新的出发点，逐个应用之前准备好的补丁文件，最后会生成一个新的合并提交对象（C3'），从而改写 experiment 的提交历史，使它成为 master 分支的直接下游，如图 3-29 所示：\n![3_30](/images/3_30.png)\n现在的 C3' 对应的快照，其实和普通的三方合并，即上个例子中的 C5 对应的快照内容一模一样了。虽然最后整合得到的结果没有任何区别，但衍合能产生一个更为整洁的提交历史。如果视察一个衍合过的分支的历史记录，看起来会更清楚：仿佛所有修改都是在一根线上先后进行的，尽管实际上它们原本是同时并行发生的。\n\n一般我们使用衍合的目的，是想要得到一个能在远程分支上干净应用的补丁 — 比如某些项目你不是维护者，但想帮点忙的话，最好用衍合：先在自己的一个分支里进行开发，当准备向主项目提交补丁的时候，根据最新的 origin/master 进行一次衍合操作然后再提交，这样维护者就不需要做任何整合工作（译注：实际上是把解决分支补丁同最新主干代码之间冲突的责任，化转为由提交补丁的人来解决。），只需根据你提供的仓库地址作一次快进合并，或者直接采纳你提交的补丁。\n\n请注意，合并结果中最后一次提交所指向的快照，无论是通过衍合，还是三方合并，都会得到相同的快照内容，只不过提交历史不同罢了。衍合是按照每行的修改次序重演一遍修改，而合并是把最终结果合在一起。\n\n#### 有趣的衍合\n衍合也可以放到其他分支进行，并不一定非得根据分化之前的分支。以图 3-31 的历史为例，我们为了给服务器端代码添加一些功能而创建了特性分支 server，然后提交 C3 和 C4。然后又从 C3 的地方再增加一个 client 分支来对客户端代码进行一些相应修改，所以提交了 C8 和 C9。最后，又回到 server 分支提交了 C10。\n![3_31](/images/3_31.png)\n假设在接下来的一次软件发布中，我们决定先把客户端的修改并到主线中，而暂缓并入服务端软件的修改（因为还需要进一步测试）。这个时候，我们就可以把基于 client 分支而非 server 分支的改变（即 C8 和 C9），跳过 server 直接放到 master 分支中重演一遍，但这需要用 git rebase 的 --onto 选项指定新的基底分支 master：\n``` bash\n$ git rebase --onto master server client\n```\n这好比在说：“取出 client 分支，找出 client 分支和 server 分支的共同祖先之后的变化，然后把它们在 master 上重演一遍”。是不是有点复杂？不过它的结果如图 3-32 所示，非常酷（译注：虽然 client 里的 C8, C9 在 C3 之后，但这仅表明时间上的先后，而非在 C3 修改的基础上进一步改动，因为 server 和 client 这两个分支对应的代码应该是两套文件，虽然这么说不是很严格，但应理解为在 C3 时间点之后，对另外的文件所做的 C8，C9 修改，放到主干重演。）：\n![3_32](/images/3_32.png)\n现在可以快进 master 分支了（见图 3-33）：\n``` bash\n$ git checkout master\n$ git merge client\n```\n现在我们决定把 server 分支的变化也包含进来。我们可以直接把 server 分支衍合到 master，而不用手工切换到 server 分支后再执行衍合操作 — git rebase [主分支] [特性分支] 命令会先取出特性分支 server，然后在主分支 master 上重演：\n``` bash\n$ git rebase master server\n```\n现在 client 和 server 分支的变化都已经集成到主干分支来了，可以删掉它们了。\n``` bash\n$ git branch -d client\n$ git branch -d server\n```\n#### 衍合的风险\n呃，奇妙的衍合也并非完美无缺，要用它得遵守一条准则：\n\n**一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行衍合操作。**\n\n如果你遵循这条金科玉律，就不会出差错。否则，人民群众会仇恨你，你的朋友和家人也会嘲笑你，唾弃你。\n\n在进行衍合的时候，实际上抛弃了一些现存的提交对象而创造了一些类似但不同的新的提交对象。如果你把原来分支中的提交对象发布出去，并且其他人更新下载后在其基础上开展工作，而稍后你又用 git rebase 抛弃这些提交对象，把新的重演后的提交对象发布出去的话，你的合作者就不得不重新合并他们的工作，这样当你再次从他们那里获取内容时，提交历史就会变得一团糟。\n\n下面我们用一个实际例子来说明为什么公开的衍合会带来问题。假设你从一个中央服务器克隆然后在它的基础上搞了一些开发，提交历史类似图 3-36 所示：\n![3_36](/images/3_36.png)\n![3_37](/images/3_37.png)\n![3_38](/images/3_38.png)\n![3_39](/images/3_39.png)\nC8 这一步的合并是迟早会发生的，因为只有这样你才能和其他协作者提交的内容保持同步。而在 C8 之后，你的提交历史里就会同时包含 C4 和 C4'，两者有着不同的 SHA-1 校验值，如果用 git log 查看历史，会看到两个提交拥有相同的作者日期与说明，令人费解。而更糟的是，当你把这样的历史推送到服务器后，会再次把这些衍合后的提交引入到中央服务器，进一步困扰其他人（译注：这个例子中，出问题的责任方是那个发布了 C6 后又用衍合发布 C4' 的人，其他人会因此反馈双重历史到共享主干，从而混淆大家的视听。）。\n\n如果把衍合当成一种在推送之前清理提交历史的手段，而且仅仅衍合那些尚未公开的提交对象，就没问题。如果衍合那些已经公开的提交对象，并且已经有人基于这些提交对象开展了后续开发工作的话，就会出现叫人沮丧的麻烦。\n\n\n## 服务器上的Git\n### 协议\nGit 可以使用四种主要的协议来传输数据：本地传输，SSH 协议，Git 协议和 HTTP 协议。下面分别介绍一下哪些情形应该使用（或避免使用）这些协议。\n\n值得注意的是，除了 HTTP 协议外，其他所有协议都要求在服务器端安装并运行 Git。\n\n#### 本地协议\n最基本的就是本地协议（Local protocol），所谓的远程仓库在该协议中的表示，就是硬盘上的另一个目录。这常见于团队每一个成员都对一个共享的文件系统（例如 NFS）拥有访问权，或者比较少见的多人共用同一台电脑的情况。后面一种情况并不安全，因为所有代码仓库实例都储存在同一台电脑里，增加了灾难性数据损失的可能性。\n\n如果你使用一个共享的文件系统，就可以在一个本地文件系统中克隆仓库，推送和获取。克隆的时候只需要将远程仓库的路径作为 URL 使用，比如下面这样：\n``` bash\n$ git clone /opt/git/project.git\n```\n或者这样：\n``` bash\n$ git clone file:///opt/git/project.git\n```\n如果在 URL 开头明确使用 file:// ，那么 Git 会以一种略微不同的方式运行。如果你只给出路径，Git 会尝试使用硬链接或直接复制它所需要的文件。如果使用了 file:// ，Git 会调用它平时通过网络来传输数据的工序，而这种方式的效率相对较低。使用 file:// 前缀的主要原因是当你需要一个不包含无关引用或对象的干净仓库副本的时候 — 一般指从其他版本控制系统导入的，或类似情形（参见第 9 章的维护任务）。我们这里仅仅使用普通路径，这样更快。\n\n要添加一个本地仓库作为现有 Git 项目的远程仓库，可以这样做：\n``` bash\n$ git remote add local_proj /opt/git/project.git\n```\n然后就可以像在网络上一样向这个远程仓库推送和获取数据了。\n__优点__\n\n基于文件仓库的优点在于它的简单，同时保留了现存文件的权限和网络访问权限。如果你的团队已经有一个全体共享的文件系统，建立仓库就十分容易了。你只需把一份裸仓库的副本放在大家都能访问的地方，然后像对其他共享目录一样设置读写权限就可以了。我们将在下一节“在服务器上部署 Git ”中讨论如何导出一个裸仓库的副本。\n\n这也是从别人工作目录中获取工作成果的快捷方法。假如你和你的同事在一个项目中合作，他们想让你检出一些东西的时候，运行类似 git pull /home/john/project 通常会比他们推送到服务器，而你再从服务器获取简单得多。\n\n__缺点__\n\n这种方法的缺点是，与基本的网络连接访问相比，难以控制从不同位置来的访问权限。如果你想从家里的笔记本电脑上推送，就要先挂载远程硬盘，这和基于网络连接的访问相比更加困难和缓慢。\n\n另一个很重要的问题是该方法不一定就是最快的，尤其是对于共享挂载的文件系统。本地仓库只有在你对数据访问速度快的时候才快。在同一个服务器上，如果二者同时允许 Git 访问本地硬盘，通过 NFS 访问仓库通常会比 SSH 慢。\n\n#### SSH 协议\nGit 使用的传输协议中最常见的可能就是 SSH 了。这是因为大多数环境已经支持通过 SSH 对服务器的访问 — 即便还没有，架设起来也很容易。SSH 也是唯一一个同时支持读写操作的网络协议。另外两个网络协议（HTTP 和 Git）通常都是只读的，所以虽然二者对大多数人都可用，但执行写操作时还是需要 SSH。SSH 同时也是一个验证授权的网络协议；而因为其普遍性，一般架设和使用都很容易。\n\n通过 SSH 克隆一个 Git 仓库，你可以像下面这样给出 ssh:// 的 URL：\n``` bash\n$ git clone ssh://user@server/project.git\n```\n或者不指明某个协议 — 这时 Git 会默认使用 SSH ：\n``` bash\n$ git clone user@server:project.git\n```\n如果不指明用户，Git 会默认使用当前登录的用户名连接服务器。\n__优点__\n\n使用 SSH 的好处有很多。首先，如果你想拥有对网络仓库的写权限，基本上不可能不使用 SSH。其次，SSH 架设相对比较简单 — SSH 守护进程很常见，很多网络管理员都有一些使用经验，而且很多操作系统都自带了它或者相关的管理工具。再次，通过 SSH 进行访问是安全的 — 所有数据传输都是加密和授权的。最后，和 Git 及本地协议一样，SSH 也很高效，会在传输之前尽可能压缩数据。\n\n__缺点__\n\nSSH 的限制在于你不能通过它实现仓库的匿名访问。即使仅为读取数据，人们也必须在能通过 SSH 访问主机的前提下才能访问仓库，这使得 SSH 不利于开源的项目。如果你仅仅在公司网络里使用，SSH 可能是你唯一需要使用的协议。如果想允许对项目的匿名只读访问，那么除了为自己推送而架设 SSH 协议之外，还需要支持其他协议以便他人访问读取。\n\n#### Git 协议\n接下来是 Git 协议。这是一个包含在 Git 软件包中的特殊守护进程； 它会监听一个提供类似于 SSH 服务的特定端口（9418），而无需任何授权。打算支持 Git 协议的仓库，需要先创建 git-daemon-export-ok 文件 — 它是协议进程提供仓库服务的必要条件 — 但除此之外该服务没有什么安全措施。要么所有人都能克隆 Git 仓库，要么谁也不能。这也意味着该协议通常不能用来进行推送。你可以允许推送操作；然而由于没有授权机制，一旦允许该操作，网络上任何一个知道项目 URL 的人将都有推送权限。不用说，这是十分罕见的情况。\n\n__优点__\n\nGit 协议是现存最快的传输协议。如果你在提供一个有很大访问量的公共项目，或者一个不需要对读操作进行授权的庞大项目，架设一个 Git 守护进程来供应仓库是个不错的选择。它使用与 SSH 协议相同的数据传输机制，但省去了加密和授权的开销。\n\n__缺点__\n\nGit 协议消极的一面是缺少授权机制。用 Git 协议作为访问项目的唯一方法通常是不可取的。一般的做法是，同时提供 SSH 接口，让几个开发者拥有推送（写）权限，其他人通过 git:// 拥有只读权限。 Git 协议可能也是最难架设的协议。它要求有单独的守护进程，需要定制 — 我们将在本章的 “Gitosis” 一节详细介绍它的架设 — 需要设定 xinetd 或类似的程序，而这些工作就没那么轻松了。该协议还要求防火墙开放 9418 端口，而企业级防火墙一般不允许对这个非标准端口的访问。大型企业级防火墙通常会封锁这个少见的端口。\n\n#### HTTP/S 协议\n最后还有 HTTP 协议。HTTP 或 HTTPS 协议的优美之处在于架设的简便性。基本上，只需要把 Git 的裸仓库文件放在 HTTP 的根目录下，配置一个特定的 post-update 挂钩（hook）就可以搞定（Git 挂钩的细节见第 7 章）。此后，每个能访问 Git 仓库所在服务器上 web 服务的人都可以进行克隆操作。下面的操作可以允许通过 HTTP 对仓库进行读取：\n``` bash\n$ cd /var/www/htdocs/\n$ git clone --bare /path/to/git_project gitproject.git\n$ cd gitproject.git\n$ mv hooks/post-update.sample hooks/post-update\n$ chmod a+x hooks/post-update\n```\n这样就可以了。Git 附带的 post-update 挂钩会默认运行合适的命令（git update-server-info）来确保通过 HTTP 的获取和克隆正常工作。这条命令在你用 SSH 向仓库推送内容时运行；之后，其他人就可以用下面的命令来克隆仓库：\n``` bash\n$ git clone http://example.com/gitproject.git\n\n```\n在本例中，我们使用了 Apache 设定中常用的 /var/www/htdocs 路径，不过你可以使用任何静态 web 服务 — 把裸仓库放在它的目录里就行。 Git 的数据是以最基本的静态文件的形式提供的（关于如何提供文件的详情见第 9 章）。\n\n通过 HTTP 进行推送操作也是可能的，不过这种做法不太常见，并且牵扯到复杂的 WebDAV 设定。由于很少用到，本书将略过对该内容的讨论。如果对 HTTP 推送协议感兴趣，不妨打开这个地址看一下操作方法：http://www.kernel.org/pub/software/scm/git/docs/howto/setup-git-server-over-http.txt 。通过 HTTP 推送的好处之一是你可以使用任何 WebDAV 服务器，不需要为 Git 设定特殊环境；所以如果主机提供商支持通过 WebDAV 更新网站内容，你也可以使用这项功能。\n\n__优点__\n\n使用 HTTP 协议的好处是易于架设。几条必要的命令就可以让全世界读取到仓库的内容。花费不过几分钟。HTTP 协议不会占用过多服务器资源。因为它一般只用到静态的 HTTP 服务提供所有数据，普通的 Apache 服务器平均每秒能支撑数千个文件的并发访问 — 哪怕让一个小型服务器超载都很难。\n\n你也可以通过 HTTPS 提供只读的仓库，这意味着你可以加密传输内容；你甚至可以要求客户端使用特定签名的 SSL 证书。一般情况下，如果到了这一步，使用 SSH 公共密钥可能是更简单的方案；不过也存在一些特殊情况，这时通过 HTTPS 使用带签名的 SSL 证书或者其他基于 HTTP 的只读连接授权方式是更好的解决方案。\n\nHTTP 还有个额外的好处：HTTP 是一个如此常见的协议，以至于企业级防火墙通常都允许其端口的通信。\n\n__缺点__\n\nHTTP 协议的消极面在于，相对来说客户端效率更低。克隆或者下载仓库内容可能会花费更多时间，而且 HTTP 传输的体积和网络开销比其他任何一个协议都大。因为它没有按需供应的能力 — 传输过程中没有服务端的动态计算 — 因而 HTTP 协议经常会被称为傻瓜（dumb）协议。更多 HTTP 协议和其他协议效率上的差异见第 9 章。\n\n\n### 在服务器上部署 Git\n开始架设 Git 服务器前，需要先把现有仓库导出为裸仓库 — 即一个不包含当前工作目录的仓库。做法直截了当，克隆时用 --bare 选项即可。裸仓库的目录名一般以 .git 结尾，像这样：\n``` bash\n$ git clone --bare my_project my_project.git\nCloning into bare repository 'my_project.git'...\ndone.\n```\n该命令的输出或许会让人有些不解。其实 clone 操作基本上相当于 git init 加 git fetch，所以这里出现的其实是 git init 的输出，先由它建立一个空目录，而之后传输数据对象的操作并无任何输出，只是悄悄在幕后执行。现在 my_project.git 目录中已经有了一份 Git 目录数据的副本。\n\n整体上的效果大致相当于：\n``` bash\n$ cp -Rf my_project/.git my_project.git\n```\n但在配置文件中有若干小改动，不过对用户来讲，使用方式都一样，不会有什么影响。它仅取出 Git 仓库的必要原始数据，存放在该目录中，而不会另外创建工作目录。\n#### 把裸仓库移到服务器上\n有了裸仓库的副本后，剩下的就是把它放到服务器上并设定相关协议。假设一个域名为 git.example.com 的服务器已经架设好，并可以通过 SSH 访问，我们打算把所有 Git 仓库储存在 /opt/git 目录下。只要把裸仓库复制过去：\n``` bash\n$ scp -r my_project.git user@git.example.com:/opt/git\n```\n现在，所有对该服务器有 SSH 访问权限，并可读取 /opt/git 目录的用户都可以用下面的命令克隆该项目：\n``` bash\n$ git clone user@git.example.com:/opt/git/my_project.git\n```\n如果某个 SSH 用户对 /opt/git/my_project.git 目录有写权限，那他就有推送权限。如果到该项目目录中运行 git init 命令，并加上 --shared 选项，那么 Git 会自动修改该仓库目录的组权限为可写（译注：实际上 --shared 可以指定其他行为，只是默认为将组权限改为可写并执行 g+sx，所以最后会得到 rws。）。\n``` bash\n$ ssh user@git.example.com\n$ cd /opt/git/my_project.git\n$ git init --bare --shared\n```\n由此可见，根据现有的 Git 仓库创建一个裸仓库，然后把它放上你和同事都有 SSH 访问权的服务器是多么容易。现在已经可以开始在同一项目上密切合作了。\n\n值得注意的是，这的的确确是架设一个少数人具有连接权的 Git 服务的全部 — 只要在服务器上加入可以用 SSH 登录的帐号，然后把裸仓库放在大家都有读写权限的地方。一切都准备停当，无需更多。\n\n下面的几节中，你会了解如何扩展到更复杂的设定。这些内容包含如何避免为每一个用户建立一个账户，给仓库添加公共读取权限，架设网页界面，使用 Gitosis 工具等等。然而，只是和几个人在一个不公开的项目上合作的话，仅仅是一个 SSH 服务器和裸仓库就足够了，记住这点就可以了。\n\n#### 小型安装\n如果设备较少或者你只想在小型开发团队里尝试 Git ，那么一切都很简单。架设 Git 服务最复杂的地方在于账户管理。如果需要仓库对特定的用户可读，而给另一部分用户读写权限，那么访问和许可的安排就比较困难。\n\nSSH 连接\n\n如果已经有了一个所有开发成员都可以用 SSH 访问的服务器，架设第一个服务器将变得异常简单，几乎什么都不用做（正如上节中介绍的那样）。如果需要对仓库进行更复杂的访问控制，只要使用服务器操作系统的本地文件访问许可机制就行了。\n\n如果需要团队里的每个人都对仓库有写权限，又不能给每个人在服务器上建立账户，那么提供 SSH 连接就是唯一的选择了。我们假设用来共享仓库的服务器已经安装了 SSH 服务，而且你通过它访问服务器。\n\n有好几个办法可以让团队的每个人都有访问权。第一个办法是给每个人建立一个账户，直截了当但略过繁琐。反复运行 adduser 并给所有人设定临时密码可不是好玩的。\n\n第二个办法是在主机上建立一个 git 账户，让每个需要写权限的人发送一个 SSH 公钥，然后将其加入 git 账户的 ~/.ssh/authorized_keys 文件。这样一来，所有人都将通过 git 账户访问主机。这丝毫不会影响提交的数据 — 访问主机用的身份不会影响提交对象的提交者信息。\n\n另一个办法是让 SSH 服务器通过某个 LDAP 服务，或者其他已经设定好的集中授权机制，来进行授权。只要每个人都能获得主机的 shell 访问权，任何可用的 SSH 授权机制都能达到相同效果。\n\n### 生成 SSH 公钥\n大多数 Git 服务器都会选择使用 SSH 公钥来进行授权。系统中的每个用户都必须提供一个公钥用于授权，没有的话就要生成一个。生成公钥的过程在所有操作系统上都差不多。 首先先确认一下是否已经有一个公钥了。SSH 公钥默认储存在账户的主目录下的 ~/.ssh 目录。进去看看：\n``` bash\n$ cd ~/.ssh\n$ ls\nauthorized_keys2  id_dsa       known_hosts\nconfig            id_dsa.pub\n```\n关键是看有没有用 something 和 something.pub 来命名的一对文件，这个 something 通常就是 id_dsa 或 id_rsa。有 .pub 后缀的文件就是公钥，另一个文件则是密钥。假如没有这些文件，或者干脆连 .ssh 目录都没有，可以用 ssh-keygen 来创建。该程序在 Linux/Mac 系统上由 SSH 包提供，而在 Windows 上则包含在 MSysGit 包里：\n``` bash\n$ ssh-keygen\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/schacon/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /Users/schacon/.ssh/id_rsa.\nYour public key has been saved in /Users/schacon/.ssh/id_rsa.pub.\nThe key fingerprint is:\n43:c5:5b:5f:b1:f1:50:43:ad:20:a6:92:6a:1f:9a:3a schacon@agadorlaptop.local\n```\n它先要求你确认保存公钥的位置（.ssh/id_rsa），然后它会让你重复一个密码两次，如果不想在使用公钥的时候输入密码，可以留空。\n\n现在，所有做过这一步的用户都得把它们的公钥给你或者 Git 服务器的管理员（假设 SSH 服务被设定为使用公钥机制）。他们只需要复制 .pub 文件的内容然后发邮件给管理员。公钥的样子大致如下：\n``` bash\n$ cat ~/.ssh/id_rsa.pub\nssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU\nGPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3\nPbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA\nt3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En\nmZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx\nNrRFi9wrf+M7Q== schacon@agadorlaptop.local\n```\n关于在多个操作系统上设立相同 SSH 公钥的教程，可以查阅 GitHub 上有关 SSH 公钥的[向导](http://github.com/guides/providing-your-ssh-key)。\n\nhttp://iissnan.com/progit/html/zh/ch4_10.html\n### Git 托管服务\n如果不想经历自己架设 Git 服务器的麻烦，网络上有几个专业的仓库托管服务可供选择。这样做有几大优点：托管账户的建立通常比较省时，方便项目的启动，而且不涉及服务器的维护和监控。即使内部创建并运行着自己的服务器，同时为开源项目提供一个公共托管站点还是有好处的 — 让开源社区更方便地找到该项目，并给予帮助。\n\n目前，可供选择的托管服务数量繁多，各有利弊。在 Git 官方 wiki 上的 Githosting 页面有一个最新的托管服务列表：\n``` bash\nhttps://git.wiki.kernel.org/index.php/GitHosting\n```\n由于本书无法全部一一介绍，而本人（译注：指本书作者 Scott Chacon。）刚好在其中一家公司工作，所以接下来我们将会介绍如何在 GitHub 上建立新账户并启动项目。至于其他托管服务大体也是这么一个过程，基本的想法都是差不多的。\n\nGitHub 是目前为止最大的开源 Git 托管服务，并且还是少数同时提供公共代码和私有代码托管服务的站点之一，所以你可以在上面同时保存开源和商业代码。事实上，本书就是放在 GitHub 上合作编著的。（译注：本书的翻译也是放在 GitHub 上广泛协作的。）\n\n#### GitHub\nGitHub 和大多数的代码托管站点在处理项目命名空间的方式上略有不同。GitHub 的设计更侧重于用户，而不是完全基于项目。也就是说，如果我在 GitHub 上托管一个名为 grit 的项目的话，它的地址不会是 github.com/grit，而是按在用户底下 github.com/shacon/grit （译注：本书作者 Scott Chacon 在 GitHub 上的用户名是 shacon。）。不存在所谓某个项目的官方版本，所以假如第一作者放弃了某个项目，它可以无缝转移到其它用户的名下。\n\nGitHub 同时也是一个向使用私有仓库的用户收取费用的商业公司，但任何人都可以方便快捷地申请到一个免费账户，并在上面托管数量不限的开源项目。接下来我们快速介绍一下 GitHub 的基本使用。\n##### 建立新账户\n首先注册一个免费账户。访问 \"Plans and pricing\" 页面 https://github.com/pricing 并点击 Free acount 里的 Sign Up 按钮（见图 4-2），进入注册页面。\n如果方便，现在就可以提供你的 SSH 公钥。我们在前文的\"小型安装\" 一节介绍过生成新公钥的方法。把新生成的公钥复制粘贴到 SSH Public Key 文本框中即可。要是对生成公钥的步骤不太清楚，也可以点击 \"explain ssh keys\" 链接，会显示各个主流操作系统上完成该步骤的介绍。 点击 \"I agree，sign me up\" 按钮完成用户注册，并转到该用户的 dashboard 页面\n##### 建立新仓库\n点击用户面板上仓库旁边的 \"create a new one\" 链接，显示 Create a New Repository 的表单.\n当然，项目名称是必不可少的，此外也可以适当描述一下项目的情况或者给出官方站点的地址。然后点击 \"Create Repository\" 按钮，新仓库就建立起来肋.\n由于尚未提交代码，点击项目地址后 GitHub 会显示一个简要的指南，告诉你如何新建一个项目并推送上来，如何从现有项目推送，以及如何从一个公共的 Subversion 仓库导入项目\n该指南和本书前文介绍的类似，对于新的项目，需要先在本地初始化为 Git 项目，添加要管理的文件并作首次提交：\n``` bash\n$ git init\n$ git add .\n$ git commit -m 'initial commit'\n```\n然后在这个本地仓库内把 GitHub 添加为远程仓库，并推送 master 分支上来：\n``` bash\n$ git remote add origin git@github.com:testinguser/iphone_project.git\n$ git push origin master\n```\n现在该项目就托管在 GitHub 上了。你可以把它的 URL 分享给每位对此项目感兴趣的人。本例的 URL 是 http://github.com/testinguser/iphone_project。而在项目页面的摘要部分，你会发现有两个 Git URL 地址.\nPublic Clone URL 是一个公开的，只读的 Git URL，任何人都可以通过它克隆该项目。可以随意散播这个 URL，比如发布到个人网站之类的地方等等。\n\nYour Clone URL 是一个基于 SSH 协议的可读可写 URL，只有使用与上传的 SSH 公钥对应的密钥来连接时，才能通过它进行读写操作。其他用户访问该项目页面时只能看到之前那个公共的 URL，看不到这个私有的 URL。\n\n##### 添加协作开发者\n现在把团队里的其他人也加进来。如果 John，Josie 和 Jessica 都在 GitHub 注册了账户，要赋予他们对该仓库的推送权限，可以把他们加为项目协作者。这样他们就可以通过各自的公钥访问我的这个仓库了。\n\n点击项目页面上方的 \"edit\" 按钮或者顶部的 Admin 标签，进入该项目的管理页面.\n为了给另一个用户添加项目的写权限，点击 \"Add another collaborator\" 链接，出现一个用于输入用户名的表单。在输入的同时，它会自动跳出一个符合条件的候选名单。找到正确用户名之后，点 Add 按钮，把该用户设为项目协作者.\n添加完协作者之后，就可以在 Repository Collaborators 区域看到他们的名单\n如果要取消某人的访问权，点击 \"revoke\" 即可取消他的推送权限。对于将来的项目，你可以从现有项目复制协作者名单，或者直接借用协作者群组\n\n##### 派生项目\n如果要为一个自己没有推送权限的项目贡献代码，GitHub 鼓励使用派生（fork）。到那个感兴趣的项目主页上，点击页面上方的 \"fork\" 按钮，GitHub 就会为你复制一份该项目的副本到你的仓库中，这样你就可以向自己的这个副本推送数据了。\n\n采取这种办法的好处是，项目拥有者不必忙于应付赋予他人推送权限的工作。随便谁都可以通过派生得到一个项目副本并在其中展开工作，事后只需要项目维护者将这些副本仓库加为远程仓库，然后提取更新合并即可。\n\n要派生一个项目，到原始项目的页面（本例中是 mojombo/chronic）点击 \"fork\" 按钮\n几秒钟之后，你将进入新建的项目页面，会显示该项目派生自哪一个项目\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Git学习笔记-二","published":1,"updated":"2016-10-31T03:55:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuy6rzit0000msq41bc2u58r","content":"<h2 id=\"Git-分支\"><a href=\"#Git-分支\" class=\"headerlink\" title=\"Git 分支\"></a>Git 分支</h2><h3 id=\"何谓分支\"><a href=\"#何谓分支\" class=\"headerlink\" title=\"何谓分支\"></a>何谓分支</h3><p>为了理解 Git 分支的实现方式，我们需要回顾一下 Git 是如何储存数据的。或许你还记得第一章的内容，Git 保存的不是文件差异或者变化量，而只是一系列文件快照。</p>\n<p>在 Git 中提交时，会保存一个提交（commit）对象，该对象包含一个指向暂存内容快照的指针，包含本次提交的作者等相关附属信息，包含零个或多个指向该提交对象的父对象指针：首次提交是没有直接祖先的，普通提交有一个祖先，由两个或多个分支合并产生的提交则有多个祖先。</p>\n<p>为直观起见，我们假设在工作目录中有三个文件，准备将它们暂存后提交。暂存操作会对每一个文件计算校验和（即第一章中提到的 SHA-1 哈希字串），然后把当前版本的文件快照保存到 Git 仓库中（Git 使用 blob 类型的对象存储这些快照），并将校验和加入暂存区域：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git add README test.rb LICENSE</div><div class=\"line\">$ git commit -m <span class=\"string\">'initial commit of my project'</span></div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>当使用 git commit 新建一个提交对象前，Git 会先计算每一个子目录（本例中就是项目根目录）的校验和，然后在 Git 仓库中将这些目录保存为树（tree）对象。之后 Git 创建的提交对象，除了包含相关提交信息以外，还包含着指向这个树对象（项目根目录）的指针，如此它就可以在将来需要的时候，重现此次快照的内容了。<br>现在，Git 仓库中有五个对象：三个表示文件快照内容的 blob 对象；一个记录着目录树内容及其中各个文件对应 blob 对象索引的 tree 对象；以及一个包含指向 tree 对象（根目录）的索引和其他提交信息元数据的 commit 对象。概念上来说，仓库中的各个对象保存的数据和相互关系看起来如图 3-1 所示：<br><img src=\"/images/3_1.png\" alt=\"3_1\"><br>作些修改后再次提交，那么这次的提交对象会包含一个指向上次提交对象的指针（译注：即下图中的 parent 对象）。两次提交后，仓库历史会变成图 3-2 的样子：<br><img src=\"/images/3_2.png\" alt=\"a\"></p>\n<p>现在来谈分支。Git 中的分支，其实本质上仅仅是个指向 commit 对象的可变指针。Git 会使用 master 作为分支的默认名字。在若干次提交后，你其实已经有了一个指向最后一次提交对象的 master 分支，它在每次提交的时候都会自动向前移动。<br><img src=\"/images/3_3.png\" alt=\"3_3\"></p>\n<p>那么，Git 又是如何创建一个新的分支的呢？答案很简单，创建一个新的分支指针。比如新建一个 testing 分支，可以使用 git branch 命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git branch testing</div></pre></td></tr></table></figure></p>\n<p>这会在当前 <strong>commit</strong> 对象上新建一个分支指针（见图 3-4）。</p>\n<p><img src=\"/images/3_4.png\" alt=\"3_4\"><br>那么，Git 是如何知道你当前在哪个分支上工作的呢？其实答案也很简单，它保存着一个名为 HEAD 的特别指针。请注意它和你熟知的许多其他版本控制系统（比如 Subversion 或 CVS）里的 HEAD 概念大不相同。在 Git 中，它是一个指向你正在工作中的本地分支的指针（译注：将 HEAD 想象为当前分支的别名。）。运行 git branch 命令，仅仅是建立了一个新的分支，但不会自动切换到这个分支中去，所以在这个例子中，我们依然还在 master 分支里工作（参考图 3-5）。<br><img src=\"/images/3_5.png\" alt=\"3_5\"><br>要切换到其他分支，可以执行 git checkout 命令。我们现在转换到新建的 testing 分支：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git checkout testing</div></pre></td></tr></table></figure></p>\n<p>这样 HEAD 就指向了 testing 分支（见图3-6）。<br><img src=\"/images/3_6.png\" alt=\"3_6\"><br>这样的实现方式会给我们带来什么好处呢？好吧，现在不妨再提交一次：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ vim test.rb</div><div class=\"line\">$ git commit <span class=\"_\">-a</span> -m <span class=\"string\">'made a change'</span></div></pre></td></tr></table></figure></p>\n<p>图 3-7 展示了提交后的结果。<br><img src=\"/images/3_7.png\" alt=\"3_7\"><br>非常有趣，现在 testing 分支向前移动了一格，而 master 分支仍然指向原先 git checkout 时所在的 commit 对象。现在我们回到 master 分支看看：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/3_8.png\" alt=\"3_8\"></p>\n<p>这条命令做了两件事。它把 HEAD 指针移回到 master 分支，并把工作目录中的文件换成了 master 分支所指向的快照内容。也就是说，现在开始所做的改动，将始于本项目中一个较老的版本。它的主要作用是将 testing 分支里作出的修改暂时取消，这样你就可以向另一个方向进行开发。</p>\n<p>我们作些修改后再次提交：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ vim test.rb</div><div class=\"line\">$ git commit <span class=\"_\">-a</span> -m <span class=\"string\">'made other changes'</span></div></pre></td></tr></table></figure></p>\n<p>现在我们的项目提交历史产生了分叉（如图 3-9 所示），因为刚才我们创建了一个分支，转换到其中进行了一些工作，然后又回到原来的主分支进行了另外一些工作。这些改变分别孤立在不同的分支里：我们可以在不同分支里反复切换，并在时机成熟时把它们合并到一起。而所有这些工作，仅仅需要 branch 和 checkout 这两条命令就可以完成。<br><img src=\"/images/3_9.png\" alt=\"3_9\"><br>由于 Git 中的分支实际上仅是一个包含所指对象校验和（40 个字符长度 SHA-1 字串）的文件，所以创建和销毁一个分支就变得非常廉价。说白了，新建一个分支就是向一个文件写入 41 个字节（外加一个换行符）那么简单，当然也就很快了。</p>\n<p>这和大多数版本控制系统形成了鲜明对比，它们管理分支大多采取备份所有项目文件到特定目录的方式，所以根据项目文件数量和大小不同，可能花费的时间也会有相当大的差别，快则几秒，慢则数分钟。而 Git 的实现与项目复杂度无关，它永远可以在几毫秒的时间内完成分支的创建和切换。同时，因为每次提交时都记录了祖先信息（译注：即 parent 对象），将来要合并分支时，寻找恰当的合并基础（译注：即共同祖先）的工作其实已经自然而然地摆在那里了，所以实现起来非常容易。Git 鼓励开发者频繁使用分支，正是因为有着这些特性作保障。</p>\n<p>接下来看看，我们为什么应该频繁使用分支。</p>\n<h3 id=\"分支的新建与合并\"><a href=\"#分支的新建与合并\" class=\"headerlink\" title=\"分支的新建与合并\"></a>分支的新建与合并</h3><p>现在让我们来看一个简单的分支与合并的例子，实际工作中大体也会用到这样的工作流程：</p>\n<ol>\n<li>开发某个网站。</li>\n<li>为实现某个新的需求，创建一个分支。</li>\n<li>在这个分支上开展工作。<br>假设此时，你突然接到一个电话说有个很严重的问题需要紧急修补，那么可以按照下面的方式处理：</li>\n<li>返回到原先已经发布到生产服务器上的分支。</li>\n<li>为这次紧急修补建立一个新分支，并在其中修复问题。</li>\n<li>通过测试后，回到生产服务器所在的分支，将修补分支合并进来，然后再推送到生产服务器上。</li>\n<li>切换到之前实现新需求的分支，继续工作。</li>\n</ol>\n<h4 id=\"分支的新建与切换\"><a href=\"#分支的新建与切换\" class=\"headerlink\" title=\"分支的新建与切换\"></a>分支的新建与切换</h4><p>首先，我们假设你正在项目中愉快地工作，并且已经提交了几次更新.<br>现在，你决定要修补问题追踪系统上的 #53 问题。顺带说明下，Git 并不同任何特定的问题追踪系统打交道。这里为了说明要解决的问题，才把新建的分支取名为 iss53。要新建并切换到该分支，运行 git checkout 并加上 -b 参数：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git checkout -b iss53</div><div class=\"line\">Switched to a new branch <span class=\"string\">'iss53'</span></div></pre></td></tr></table></figure></p>\n<p>这相当于执行下面这两条命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git branch iss53</div><div class=\"line\">$ git checkout iss53</div></pre></td></tr></table></figure></p>\n<p>接着你开始尝试修复问题，在提交了若干次更新后，iss53 分支的指针也会随着向前推进，因为它就是当前分支.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ vim index.html</div><div class=\"line\">$ git commit <span class=\"_\">-a</span> -m <span class=\"string\">'added a new footer [issue 53]'</span></div></pre></td></tr></table></figure></p>\n<p>现在你就接到了那个网站问题的紧急电话，需要马上修补。有了 Git ，我们就不需要同时发布这个补丁和 iss53 里作出的修改，也不需要在创建和发布该补丁到服务器之前花费大力气来复原这些修改。唯一需要的仅仅是切换回 master 分支。</p>\n<p>不过在此之前，留心你的暂存区或者工作目录里，那些还没有提交的修改，它会和你即将检出的分支产生冲突从而阻止 Git 为你切换分支。切换分支的时候最好保持一个清洁的工作区域。稍后会介绍几个绕过这种问题的办法（分别叫做 stashing 和 commit amending）。目前已经提交了所有的修改，所以接下来可以正常转换到 master 分支：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div><div class=\"line\">Switched to branch <span class=\"string\">'master'</span></div></pre></td></tr></table></figure></p>\n<p>此时工作目录中的内容和你在解决问题 #53 之前一模一样，你可以集中精力进行紧急修补。这一点值得牢记：Git 会把工作目录的内容恢复为检出某分支时它所指向的那个提交对象的快照。它会自动添加、删除和修改文件以确保目录的内容和你当时提交时完全一样。</p>\n<p>接下来，你得进行紧急修补。我们创建一个紧急修补分支 hotfix 来开展工作，直到搞定（见图 3-13）：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git checkout -b hotfix</div><div class=\"line\">Switched to a new branch <span class=\"string\">'hotfix'</span></div><div class=\"line\">$ vim index.html</div><div class=\"line\">$ git commit <span class=\"_\">-a</span> -m <span class=\"string\">'fixed the broken email address'</span></div><div class=\"line\">[hotfix 3a0874c] fixed the broken email address</div><div class=\"line\"> 1 files changed, 1 deletion(-)</div></pre></td></tr></table></figure></p>\n<p>有必要作些测试，确保修补是成功的，然后回到 master 分支并把它合并进来，然后发布到生产服务器。用 git merge 命令来进行合并：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div><div class=\"line\">$ git merge hotfix</div><div class=\"line\">Updating f42c576..3a0874c</div><div class=\"line\">Fast-forward</div><div class=\"line\"> README | 1 -</div><div class=\"line\"> 1 file changed, 1 deletion(-)</div></pre></td></tr></table></figure></p>\n<p>请注意，合并时出现了“Fast forward”的提示。由于当前 master 分支所在的提交对象是要并入的 hotfix 分支的直接上游，Git 只需把 master 分支指针直接右移。换句话说，如果顺着一个分支走下去可以到达另一个分支的话，那么 Git 在合并两者时，只会简单地把指针右移，因为这种单线的历史分支不存在任何需要解决的分歧，所以这种合并过程可以称为快进（Fast forward）。</p>\n<p>现在最新的修改已经在当前 master 分支所指向的提交对象中了，可以部署到生产服务器上去了.</p>\n<p>在那个超级重要的修补发布以后，你想要回到被打扰之前的工作。由于当前 hotfix 分支和 master 都指向相同的提交对象，所以 hotfix 已经完成了历史使命，可以删掉了。使用 git branch 的 -d 选项执行删除操作：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git branch <span class=\"_\">-d</span> hotfix</div><div class=\"line\">Deleted branch hotfix (was 3a0874c).</div></pre></td></tr></table></figure></p>\n<p>现在回到之前未完成的 #53 问题修复分支上继续工作<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git checkout iss53</div><div class=\"line\">Switched to branch <span class=\"string\">'iss53'</span></div><div class=\"line\">$ vim index.html</div><div class=\"line\">$ git commit <span class=\"_\">-a</span> -m <span class=\"string\">'finished the new footer [issue 53]'</span></div><div class=\"line\">[iss53 ad82d7a] finished the new footer [issue 53]</div><div class=\"line\"> 1 file changed, 1 insertion(+)</div></pre></td></tr></table></figure></p>\n<p>值得注意的是之前 hotfix 分支的修改内容尚未包含到 iss53 中来。如果需要纳入此次修补，可以用 git merge master 把 master 分支合并到 iss53；或者等 iss53 完成之后，再将 iss53 分支中的更新并入 master。</p>\n<h4 id=\"分支的合并\"><a href=\"#分支的合并\" class=\"headerlink\" title=\"分支的合并\"></a>分支的合并</h4><p>在问题 #53 相关的工作完成之后，可以合并回 master 分支。实际操作同前面合并 hotfix 分支差不多，只需回到 master 分支，运行 git merge 命令指定要合并进来的分支：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div><div class=\"line\">$ git merge iss53</div><div class=\"line\">Auto-merging README</div><div class=\"line\">Merge made by the <span class=\"string\">'recursive'</span> strategy.</div><div class=\"line\"> README | 1 +</div><div class=\"line\"> 1 file changed, 1 insertion(+)</div></pre></td></tr></table></figure></p>\n<p>请注意，这次合并操作的底层实现，并不同于之前 hotfix 的并入方式。因为这次你的开发历史是从更早的地方开始分叉的。由于当前 master 分支所指向的提交对象（C4）并不是 iss53 分支的直接祖先，Git 不得不进行一些额外处理。就此例而言，Git 会用两个分支的末端（C4 和 C5）以及它们的共同祖先（C2）进行一次简单的三方合并计算。图 3-16 用红框标出了 Git 用于合并的三个提交对象：<br><img src=\"/images/3_10.png\" alt=\"3_10\"><br>这次，Git 没有简单地把分支指针右移，而是对三方合并后的结果重新做一个新的快照，并自动创建一个指向它的提交对象（C6）（见图 3-17）。这个提交对象比较特殊，它有两个祖先（C4 和 C5）。</p>\n<p>值得一提的是 Git 可以自己裁决哪个共同祖先才是最佳合并基础；这和 CVS 或 Subversion（1.5 以后的版本）不同，它们需要开发者手工指定合并基础。所以此特性让 Git 的合并操作比其他系统都要简单不少。<br><img src=\"/images/3_11.png\" alt=\"3_11\"><br>既然之前的工作成果已经合并到 master 了，那么 iss53 也就没用了。你可以就此删除它，并在问题追踪系统里关闭该问题。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git branch <span class=\"_\">-d</span> iss53</div></pre></td></tr></table></figure></p>\n<h4 id=\"遇到冲突时的分支合并\"><a href=\"#遇到冲突时的分支合并\" class=\"headerlink\" title=\"遇到冲突时的分支合并\"></a>遇到冲突时的分支合并</h4><p>有时候合并操作并不会如此顺利。如果在不同的分支中都修改了同一个文件的同一部分，Git 就无法干净地把两者合到一起（译注：逻辑上说，这种问题只能由人来裁决。）。如果你在解决问题 #53 的过程中修改了 hotfix 中修改的部分，将得到类似下面的结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git merge iss53</div><div class=\"line\">Auto-merging index.html</div><div class=\"line\">CONFLICT (content): Merge conflict <span class=\"keyword\">in</span> index.html</div><div class=\"line\">Automatic merge failed; fix conflicts and <span class=\"keyword\">then</span> commit the result.</div></pre></td></tr></table></figure></p>\n<p>Git 作了合并，但没有提交，它会停下来等你解决冲突。要看看哪些文件在合并时发生冲突，可以用 git status 查阅：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">You have unmerged paths.</div><div class=\"line\">  (fix conflicts and run <span class=\"string\">\"git commit\"</span>)</div><div class=\"line\"></div><div class=\"line\">Unmerged paths:</div><div class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to mark resolution)</div><div class=\"line\"></div><div class=\"line\">        both modified:      index.html</div><div class=\"line\"></div><div class=\"line\">no changes added to commit (use <span class=\"string\">\"git add\"</span> and/or <span class=\"string\">\"git commit -a\"</span>)</div></pre></td></tr></table></figure></p>\n<p>任何包含未解决冲突的文件都会以未合并（unmerged）的状态列出。Git 会在有冲突的文件里加入标准的冲突解决标记，可以通过它们来手工定位并解决这些冲突。可以看到此文件包含类似下面这样的部分：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</div><div class=\"line\">&lt;div id=<span class=\"string\">\"footer\"</span>&gt;contact : email.support@github.com&lt;/div&gt;</div><div class=\"line\">=======</div><div class=\"line\">&lt;div id=<span class=\"string\">\"footer\"</span>&gt;</div><div class=\"line\">  please contact us at support@github.com</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; iss53</div></pre></td></tr></table></figure></p>\n<p>可以看到 ======= 隔开的上半部分，是 HEAD（即 master 分支，在运行 merge 命令时所切换到的分支）中的内容，下半部分是在 iss53 分支中的内容。解决冲突的办法无非是二者选其一或者由你亲自整合到一起。比如你可以通过把这段内容替换为下面这样来解决：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div id=<span class=\"string\">\"footer\"</span>&gt;</div><div class=\"line\">please contact us at email.support@github.com</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>这个解决方案各采纳了两个分支中的一部分内容，而且我还删除了 &lt;&lt;&lt;&lt;&lt;&lt;&lt;，======= 和 &gt;&gt;&gt;&gt;&gt;&gt;&gt; 这些行。在解决了所有文件里的所有冲突后，运行 git add 将把它们标记为已解决状态（译注：实际上就是来一次快照保存到暂存区域。）。因为一旦暂存，就表示冲突已经解决。如果你想用一个有图形界面的工具来解决这些问题，不妨运行 git mergetool，它会调用一个可视化的合并工具并引导你解决所有冲突：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git mergetool</div><div class=\"line\"></div><div class=\"line\">This message is displayed because <span class=\"string\">'merge.tool'</span> is not configured.</div><div class=\"line\">See <span class=\"string\">'git mergetool --tool-help'</span> or <span class=\"string\">'git help config'</span> <span class=\"keyword\">for</span> more details.</div><div class=\"line\"><span class=\"string\">'git mergetool'</span> will now attempt to use one of the following tools:</div><div class=\"line\">opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc3 codecompare vimdiff emerge</div><div class=\"line\">Merging:</div><div class=\"line\">index.html</div><div class=\"line\"></div><div class=\"line\">Normal merge conflict <span class=\"keyword\">for</span> <span class=\"string\">'index.html'</span>:</div><div class=\"line\">  &#123;<span class=\"built_in\">local</span>&#125;: modified file</div><div class=\"line\">  &#123;remote&#125;: modified file</div><div class=\"line\">Hit <span class=\"built_in\">return</span> to start merge resolution tool (opendiff):</div></pre></td></tr></table></figure></p>\n<p>如果不想用默认的合并工具（Git 为我默认选择了 opendiff，因为我在 Mac 上运行了该命令），你可以在上方”merge tool candidates”里找到可用的合并工具列表，输入你想用的工具名。我们将在第七章讨论怎样改变环境中的默认值。</p>\n<p>退出合并工具以后，Git 会询问你合并是否成功。如果回答是，它会为你把相关文件暂存起来，以表明状态为已解决。</p>\n<p>再运行一次 git status 来确认所有冲突都已解决：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Changes to be committed:</div><div class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</div><div class=\"line\"></div><div class=\"line\">        modified:   index.html</div></pre></td></tr></table></figure></p>\n<p>如果觉得满意了，并且确认所有冲突都已解决，也就是进入了暂存区，就可以用 git commit 来完成这次合并提交。提交的记录差不多是这样：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">Merge branch <span class=\"string\">'iss53'</span></div><div class=\"line\"></div><div class=\"line\">Conflicts:</div><div class=\"line\">  index.html</div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># It looks like you may be committing a merge.</span></div><div class=\"line\"><span class=\"comment\"># If this is not correct, please remove the file</span></div><div class=\"line\"><span class=\"comment\">#       .git/MERGE_HEAD</span></div><div class=\"line\"><span class=\"comment\"># and try again.</span></div><div class=\"line\"><span class=\"comment\">#</span></div></pre></td></tr></table></figure></p>\n<p>如果想给将来看这次合并的人一些方便，可以修改该信息，提供更多合并细节。比如你都作了哪些改动，以及这么做的原因。有时候裁决冲突的理由并不直接或明显，有必要略加注解。</p>\n<h3 id=\"分支的管理\"><a href=\"#分支的管理\" class=\"headerlink\" title=\"分支的管理\"></a>分支的管理</h3><p>到目前为止，你已经学会了如何创建、合并和删除分支。除此之外，我们还需要学习如何管理分支，在日后的常规工作中会经常用到下面介绍的管理命令。</p>\n<p>git branch 命令不仅仅能创建和删除分支，如果不加任何参数，它会给出当前所有分支的清单：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git branch</div><div class=\"line\">  iss53</div><div class=\"line\">* master</div><div class=\"line\">  testing</div></pre></td></tr></table></figure></p>\n<p>注意看 master 分支前的 * 字符：它表示当前所在的分支。也就是说，如果现在提交更新，master 分支将随着开发进度前移。若要查看各个分支最后一个提交对象的信息，运行 git branch -v：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git branch -v</div><div class=\"line\">  iss53   93b412c fix javascript issue</div><div class=\"line\">* master  7a98805 Merge branch <span class=\"string\">'iss53'</span></div><div class=\"line\">  testing 782fd34 add scott to the author list <span class=\"keyword\">in</span> the readmes</div></pre></td></tr></table></figure></p>\n<p>要从该清单中筛选出你已经（或尚未）与当前分支合并的分支，可以用 –merged 和 –no-merged 选项（Git 1.5.6 以上版本）。比如用 git branch –merged 查看哪些分支已被并入当前分支（译注：也就是说哪些分支是当前分支的直接上游。）：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git branch --merged</div><div class=\"line\">  iss53</div><div class=\"line\">* master</div></pre></td></tr></table></figure></p>\n<p>之前我们已经合并了 iss53，所以在这里会看到它。一般来说，列表中没有 * 的分支通常都可以用 git branch -d 来删掉。原因很简单，既然已经把它们所包含的工作整合到了其他分支，删掉也不会损失什么。</p>\n<p>另外可以用 git branch –no-merged 查看尚未合并的工作：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git branch --no-merged</div><div class=\"line\">  testing</div></pre></td></tr></table></figure></p>\n<p>它会显示还未合并进来的分支。由于这些分支中还包含着尚未合并进来的工作成果，所以简单地用 git branch -d 删除该分支会提示错误，因为那样做会丢失数据：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git branch <span class=\"_\">-d</span> testing</div><div class=\"line\">error: The branch <span class=\"string\">'testing'</span> is not fully merged.</div><div class=\"line\">If you are sure you want to delete it, run <span class=\"string\">'git branch -D testing'</span>.</div></pre></td></tr></table></figure></p>\n<p>不过，如果你确实想要删除该分支上的改动，可以用大写的删除选项 -D 强制执行，就像上面提示信息中给出的那样。</p>\n<h3 id=\"利用分支进行开发的工作流程\"><a href=\"#利用分支进行开发的工作流程\" class=\"headerlink\" title=\"利用分支进行开发的工作流程\"></a>利用分支进行开发的工作流程</h3><p>现在我们已经学会了新建分支和合并分支，可以（或应该）用它来做点什么呢？在本节，我们会介绍一些利用分支进行开发的工作流程。而正是由于分支管理的便捷，才衍生出了这类典型的工作模式，你可以根据项目的实际情况选择一种用用看。</p>\n<h4 id=\"长期分支\"><a href=\"#长期分支\" class=\"headerlink\" title=\"长期分支\"></a>长期分支</h4><p>由于 Git 使用简单的三方合并，所以就算在较长一段时间内，反复多次把某个分支合并到另一分支，也不是什么难事。也就是说，你可以同时拥有多个开放的分支，每个分支用于完成特定的任务，随着开发的推进，你可以随时把某个特性分支的成果并到其他分支中。</p>\n<p>许多使用 Git 的开发者都喜欢用这种方式来开展工作，比如仅在 master 分支中保留完全稳定的代码，即已经发布或即将发布的代码。与此同时，他们还有一个名为 develop 或 next 的平行分支，专门用于后续的开发，或仅用于稳定性测试 — 当然并不是说一定要绝对稳定，不过一旦进入某种稳定状态，便可以把它合并到 master 里。这样，在确保这些已完成的特性分支（短期分支，比如之前的 iss53 分支）能够通过所有测试，并且不会引入更多错误之后，就可以并到主干分支中，等待下一次的发布。</p>\n<p>本质上我们刚才谈论的，是随着提交对象不断右移的指针。稳定分支的指针总是在提交历史中落后一大截，而前沿分支总是比较靠前（见图 3-18）。<br><img src=\"/images/3_18.png\" alt=\"3_18\"><br>你可以用这招维护不同层次的稳定性。某些大项目还会有个 proposed（建议）或 pu（proposed updates，建议更新）分支，它包含着那些可能还没有成熟到进入 next 或 master 的内容。这么做的目的是拥有不同层次的稳定性：当这些分支进入到更稳定的水平时，再把它们合并到更高层分支中去。再次说明下，使用多个长期分支的做法并非必需，不过一般来说，对于特大型项目或特复杂的项目，这么做确实更容易管理。</p>\n<h4 id=\"特性分支\"><a href=\"#特性分支\" class=\"headerlink\" title=\"特性分支\"></a>特性分支</h4><p>在任何规模的项目中都可以使用特性（Topic）分支。一个特性分支是指一个短期的，用来实现单一特性或与其相关工作的分支。可能你在以前的版本控制系统里从未做过类似这样的事情，因为通常创建与合并分支消耗太大。然而在 Git 中，一天之内建立、使用、合并再删除多个分支是常见的事。</p>\n<p>我们在上节的例子里已经见过这种用法了。我们创建了 iss53 和 hotfix 这两个特性分支，在提交了若干更新后，把它们合并到主干分支，然后删除。该技术允许你迅速且完全的进行语境切换 — 因为你的工作分散在不同的流水线里，每个分支里的改变都和它的目标特性相关，浏览代码之类的事情因而变得更简单了。你可以把作出的改变保持在特性分支中几分钟，几天甚至几个月，等它们成熟以后再合并，而不用在乎它们建立的顺序或者进度。</p>\n<p>现在我们来看一个实际的例子。请看图 3-20，由下往上，起先我们在 master 工作到 C1，然后开始一个新分支 iss91 尝试修复 91 号缺陷，提交到 C6 的时候，又冒出一个解决该问题的新办法，于是从之前 C4 的地方又分出一个分支 iss91v2，干到 C8 的时候，又回到主干 master 中提交了 C9 和 C10，再回到 iss91v2 继续工作，提交 C11，接着，又冒出个不太确定的想法，从 master 的最新提交 C10 处开了个新的分支 dumbidea 做些试验。<br><img src=\"/images/3_20.png\" alt=\"3_20\"><br>现在，假定两件事情：我们最终决定使用第二个解决方案，即 iss91v2 中的办法；另外，我们把 dumbidea 分支拿给同事们看了以后，发现它竟然是个天才之作。所以接下来，我们准备抛弃原来的 iss91 分支（实际上会丢弃 C5 和 C6），直接在主干中并入另外两个分支。最终的提交历史将变成图 3-21 这样：<br><img src=\"/images/3_21.png\" alt=\"3_21\"><br>请务必牢记这些分支全部都是本地分支，这一点很重要。当你在使用分支及合并的时候，一切都是在你自己的 Git 仓库中进行的 — 完全不涉及与服务器的交互。</p>\n<h3 id=\"远程分支\"><a href=\"#远程分支\" class=\"headerlink\" title=\"远程分支\"></a>远程分支</h3><p>远程分支（remote branch）是对远程仓库中的分支的索引。它们是一些无法移动的本地分支；只有在 Git 进行网络交互时才会更新。远程分支就像是书签，提醒着你上次连接远程仓库时上面各分支的位置。</p>\n<p>我们用 (远程仓库名)/(分支名) 这样的形式表示远程分支。比如我们想看看上次同 origin 仓库通讯时 master 分支的样子，就应该查看 origin/master 分支。如果你和同伴一起修复某个问题，但他们先推送了一个 iss53 分支到远程仓库，虽然你可能也有一个本地的 iss53 分支，但指向服务器上最新更新的却应该是 origin/iss53 分支。</p>\n<p>可能有点乱，我们不妨举例说明。假设你们团队有个地址为 git.ourcompany.com 的 Git 服务器。如果你从这里克隆，Git 会自动为你将此远程仓库命名为 origin，并下载其中所有的数据，建立一个指向它的 master 分支的指针，在本地命名为 origin/master，但你无法在本地更改其数据。接着，Git 建立一个属于你自己的本地 master 分支，始于 origin 上 master 分支相同的位置，你可以就此开始工作（见图 3-22）：<br>可能有点乱，我们不妨举例说明。假设你们团队有个地址为 git.ourcompany.com 的 Git 服务器。如果你从这里克隆，Git 会自动为你将此远程仓库命名为 origin，并下载其中所有的数据，建立一个指向它的 master 分支的指针，在本地命名为 origin/master，但你无法在本地更改其数据。接着，Git 建立一个属于你自己的本地 master 分支，始于 origin 上 master 分支相同的位置，你可以就此开始工作（见图 3-22）：<br><img src=\"/images/3_22.png\" alt=\"3_22\"><br>如果你在本地 master 分支做了些改动，与此同时，其他人向 git.ourcompany.com 推送了他们的更新，那么服务器上的 master 分支就会向前推进，而与此同时，你在本地的提交历史正朝向不同方向发展。不过只要你不和服务器通讯，你的 origin/master 指针仍然保持原位不会移动（见图 3-23）。<br><img src=\"/images/3_23.png\" alt=\"3_23\"><br>图 3-23. 在本地工作的同时有人向远程仓库推送内容会让提交历史开始分流。<br>可以运行 git fetch origin 来同步远程服务器上的数据到本地。该命令首先找到 origin 是哪个服务器（本例为 git.ourcompany.com），从上面获取你尚未拥有的数据，更新你本地的数据库，然后把 origin/master 的指针移到它最新的位置上（见图 3-24）。<br><img src=\"/images/3_24.png\" alt=\"3_24\"><br>为了演示拥有多个远程分支（在不同的远程服务器上）的项目是如何工作的，我们假设你还有另一个仅供你的敏捷开发小组使用的内部服务器 git.team1.ourcompany.com。可以用第二章中提到的 git remote add 命令把它加为当前项目的远程分支之一。我们把它命名为 teamone，以便代替完整的 Git URL 以方便使用（见图 3-25）。<br><img src=\"/images/3_25.png\" alt=\"3_25\"><br>现在你可以用 git fetch teamone 来获取小组服务器上你还没有的数据了。由于当前该服务器上的内容是你 origin 服务器上的子集，Git 不会下载任何数据，而只是简单地创建一个名为 teamone/master 的远程分支，指向 teamone 服务器上 master 分支所在的提交对象 31b8e（见图 3-26）。<br><img src=\"/images/3_26.png\" alt=\"3_26\"></p>\n<h4 id=\"推送本地分支\"><a href=\"#推送本地分支\" class=\"headerlink\" title=\"推送本地分支\"></a>推送本地分支</h4><p>要想和其他人分享某个本地分支，你需要把它推送到一个你拥有写权限的远程仓库。你创建的本地分支不会因为你的写入操作而被自动同步到你引入的远程服务器上，你需要明确地执行推送分支的操作。换句话说，对于无意分享的分支，你尽管保留为私人分支好了，而只推送那些协同工作要用到的特性分支。</p>\n<p>如果你有个叫 serverfix 的分支需要和他人一起开发，可以运行 git push (远程仓库名) (分支名)：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git push origin serverfix</div><div class=\"line\">Counting objects: 20, done.</div><div class=\"line\">Compressing objects: 100% (14/14), done.</div><div class=\"line\">Writing objects: 100% (15/15), 1.74 KiB, done.</div><div class=\"line\">Total 15 (delta 5), reused 0 (delta 0)</div><div class=\"line\">To git@github.com:schacon/simplegit.git</div><div class=\"line\"> * [new branch]      serverfix -&gt; serverfix</div></pre></td></tr></table></figure></p>\n<p>这里其实走了一点捷径。Git 自动把 serverfix 分支名扩展为 refs/heads/serverfix:refs/heads/serverfix，意为“取出我在本地的 serverfix 分支，推送到远程仓库的 serverfix 分支中去”。我们将在第九章进一步介绍 refs/heads/ 部分的细节，不过一般使用的时候都可以省略它。也可以运行 git push origin serverfix:serverfix 来实现相同的效果，它的意思是“上传我本地的 serverfix 分支到远程仓库中去，仍旧称它为 serverfix 分支”。通过此语法，你可以把本地分支推送到某个命名不同的远程分支：若想把远程分支叫作 awesomebranch，可以用 git push origin serverfix:awesomebranch 来推送数据。</p>\n<p>接下来，当你的协作者再次从服务器上获取数据时，他们将得到一个新的远程分支 origin/serverfix，并指向服务器上 serverfix 所指向的版本：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git fetch origin</div><div class=\"line\">remote: Counting objects: 20, done.</div><div class=\"line\">remote: Compressing objects: 100% (14/14), done.</div><div class=\"line\">remote: Total 15 (delta 5), reused 0 (delta 0)</div><div class=\"line\">Unpacking objects: 100% (15/15), done.</div><div class=\"line\">From git@github.com:schacon/simplegit</div><div class=\"line\"> * [new branch]      serverfix    -&gt; origin/serverfix</div></pre></td></tr></table></figure></p>\n<p>值得注意的是，在 fetch 操作下载好新的远程分支之后，你仍然无法在本地编辑该远程仓库中的分支。换句话说，在本例中，你不会有一个新的 serverfix 分支，有的只是一个你无法移动的 origin/serverfix 指针。</p>\n<p>如果要把该远程分支的内容合并到当前分支，可以运行 git merge origin/serverfix。如果想要一份自己的 serverfix 来开发，可以在远程分支的基础上分化出一个新的分支来：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git checkout -b serverfix origin/serverfix</div><div class=\"line\">Branch serverfix <span class=\"built_in\">set</span> up to track remote branch serverfix from origin.</div><div class=\"line\">Switched to a new branch <span class=\"string\">'serverfix'</span></div></pre></td></tr></table></figure></p>\n<p>这会切换到新建的 serverfix 本地分支，其内容同远程分支 origin/serverfix 一致，这样你就可以在里面继续开发了。</p>\n<h4 id=\"跟踪远程分支\"><a href=\"#跟踪远程分支\" class=\"headerlink\" title=\"跟踪远程分支\"></a>跟踪远程分支</h4><p>从远程分支 checkout 出来的本地分支，称为 跟踪分支 (tracking branch)。跟踪分支是一种和某个远程分支有直接联系的本地分支。在跟踪分支里输入 git push，Git 会自行推断应该向哪个服务器的哪个分支推送数据。同样，在这些分支里运行 git pull 会获取所有远程索引，并把它们的数据都合并到本地分支中来。</p>\n<p>在克隆仓库时，Git 通常会自动创建一个名为 master 的分支来跟踪 origin/master。这正是 git push 和 git pull 一开始就能正常工作的原因。当然，你可以随心所欲地设定为其它跟踪分支，比如 origin 上除了 master 之外的其它分支。刚才我们已经看到了这样的一个例子：git checkout -b [分支名] [远程名]/[分支名]。如果你有 1.6.2 以上版本的 Git，还可以用 –track 选项简化：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git checkout --track origin/serverfix</div><div class=\"line\">Branch serverfix <span class=\"built_in\">set</span> up to track remote branch serverfix from origin.</div><div class=\"line\">Switched to a new branch <span class=\"string\">'serverfix'</span></div></pre></td></tr></table></figure></p>\n<p>要为本地分支设定不同于远程分支的名字，只需在第一个版本的命令里换个名字：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git checkout -b sf origin/serverfix</div><div class=\"line\">Branch sf <span class=\"built_in\">set</span> up to track remote branch serverfix from origin.</div><div class=\"line\">Switched to a new branch <span class=\"string\">'sf'</span></div></pre></td></tr></table></figure></p>\n<p>现在你的本地分支 sf 会自动将推送和抓取数据的位置定位到 origin/serverfix 了。</p>\n<h4 id=\"删除远程分支\"><a href=\"#删除远程分支\" class=\"headerlink\" title=\"删除远程分支\"></a>删除远程分支</h4><p>如果不再需要某个远程分支了，比如搞定了某个特性并把它合并进了远程的 master 分支（或任何其他存放稳定代码的分支），可以用这个非常无厘头的语法来删除它：git push [远程名] :[分支名]。如果想在服务器上删除 serverfix 分支，运行下面的命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git push origin :serverfix</div><div class=\"line\">To git@github.com:schacon/simplegit.git</div><div class=\"line\"> - [deleted]         serverfix</div></pre></td></tr></table></figure></p>\n<p>咚！服务器上的分支没了。你最好特别留心这一页，因为你一定会用到那个命令，而且你很可能会忘掉它的语法。有种方便记忆这条命令的方法：记住我们不久前见过的 git push [远程名] [本地分支]:[远程分支] 语法，如果省略 [本地分支]，那就等于是在说“在这里提取空白然后把它变成[远程分支]”。</p>\n<h3 id=\"分支的衍合\"><a href=\"#分支的衍合\" class=\"headerlink\" title=\"分支的衍合\"></a>分支的衍合</h3><p>把一个分支中的修改整合到另一个分支的办法有两种：merge 和 rebase（译注：rebase 的翻译暂定为“衍合”，大家知道就可以了。）。在本章我们会学习什么是衍合，如何使用衍合，为什么衍合操作如此富有魅力，以及我们应该在什么情况下使用衍合。</p>\n<h4 id=\"基本的衍合操作\"><a href=\"#基本的衍合操作\" class=\"headerlink\" title=\"基本的衍合操作\"></a>基本的衍合操作</h4><p><img src=\"/images/3_27.png\" alt=\"3_27\"><br><img src=\"/images/3_28.png\" alt=\"3_28\"><br>在上面这个例子中，运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git checkout experiment</div><div class=\"line\">$ git rebase master</div><div class=\"line\">First, rewinding head to replay your work on top of it...</div><div class=\"line\">Applying: added staged <span class=\"built_in\">command</span></div></pre></td></tr></table></figure></p>\n<p>它的原理是回到两个分支最近的共同祖先，根据当前分支（也就是要进行衍合的分支 experiment）后续的历次提交对象（这里只有一个 C3），生成一系列文件补丁，然后以基底分支（也就是主干分支 master）最后一个提交对象（C4）为新的出发点，逐个应用之前准备好的补丁文件，最后会生成一个新的合并提交对象（C3’），从而改写 experiment 的提交历史，使它成为 master 分支的直接下游，如图 3-29 所示：<br><img src=\"/images/3_30.png\" alt=\"3_30\"><br>现在的 C3’ 对应的快照，其实和普通的三方合并，即上个例子中的 C5 对应的快照内容一模一样了。虽然最后整合得到的结果没有任何区别，但衍合能产生一个更为整洁的提交历史。如果视察一个衍合过的分支的历史记录，看起来会更清楚：仿佛所有修改都是在一根线上先后进行的，尽管实际上它们原本是同时并行发生的。</p>\n<p>一般我们使用衍合的目的，是想要得到一个能在远程分支上干净应用的补丁 — 比如某些项目你不是维护者，但想帮点忙的话，最好用衍合：先在自己的一个分支里进行开发，当准备向主项目提交补丁的时候，根据最新的 origin/master 进行一次衍合操作然后再提交，这样维护者就不需要做任何整合工作（译注：实际上是把解决分支补丁同最新主干代码之间冲突的责任，化转为由提交补丁的人来解决。），只需根据你提供的仓库地址作一次快进合并，或者直接采纳你提交的补丁。</p>\n<p>请注意，合并结果中最后一次提交所指向的快照，无论是通过衍合，还是三方合并，都会得到相同的快照内容，只不过提交历史不同罢了。衍合是按照每行的修改次序重演一遍修改，而合并是把最终结果合在一起。</p>\n<h4 id=\"有趣的衍合\"><a href=\"#有趣的衍合\" class=\"headerlink\" title=\"有趣的衍合\"></a>有趣的衍合</h4><p>衍合也可以放到其他分支进行，并不一定非得根据分化之前的分支。以图 3-31 的历史为例，我们为了给服务器端代码添加一些功能而创建了特性分支 server，然后提交 C3 和 C4。然后又从 C3 的地方再增加一个 client 分支来对客户端代码进行一些相应修改，所以提交了 C8 和 C9。最后，又回到 server 分支提交了 C10。<br><img src=\"/images/3_31.png\" alt=\"3_31\"><br>假设在接下来的一次软件发布中，我们决定先把客户端的修改并到主线中，而暂缓并入服务端软件的修改（因为还需要进一步测试）。这个时候，我们就可以把基于 client 分支而非 server 分支的改变（即 C8 和 C9），跳过 server 直接放到 master 分支中重演一遍，但这需要用 git rebase 的 –onto 选项指定新的基底分支 master：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git rebase --onto master server client</div></pre></td></tr></table></figure></p>\n<p>这好比在说：“取出 client 分支，找出 client 分支和 server 分支的共同祖先之后的变化，然后把它们在 master 上重演一遍”。是不是有点复杂？不过它的结果如图 3-32 所示，非常酷（译注：虽然 client 里的 C8, C9 在 C3 之后，但这仅表明时间上的先后，而非在 C3 修改的基础上进一步改动，因为 server 和 client 这两个分支对应的代码应该是两套文件，虽然这么说不是很严格，但应理解为在 C3 时间点之后，对另外的文件所做的 C8，C9 修改，放到主干重演。）：<br><img src=\"/images/3_32.png\" alt=\"3_32\"><br>现在可以快进 master 分支了（见图 3-33）：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div><div class=\"line\">$ git merge client</div></pre></td></tr></table></figure></p>\n<p>现在我们决定把 server 分支的变化也包含进来。我们可以直接把 server 分支衍合到 master，而不用手工切换到 server 分支后再执行衍合操作 — git rebase [主分支] [特性分支] 命令会先取出特性分支 server，然后在主分支 master 上重演：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git rebase master server</div></pre></td></tr></table></figure></p>\n<p>现在 client 和 server 分支的变化都已经集成到主干分支来了，可以删掉它们了。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git branch <span class=\"_\">-d</span> client</div><div class=\"line\">$ git branch <span class=\"_\">-d</span> server</div></pre></td></tr></table></figure></p>\n<h4 id=\"衍合的风险\"><a href=\"#衍合的风险\" class=\"headerlink\" title=\"衍合的风险\"></a>衍合的风险</h4><p>呃，奇妙的衍合也并非完美无缺，要用它得遵守一条准则：</p>\n<p><strong>一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行衍合操作。</strong></p>\n<p>如果你遵循这条金科玉律，就不会出差错。否则，人民群众会仇恨你，你的朋友和家人也会嘲笑你，唾弃你。</p>\n<p>在进行衍合的时候，实际上抛弃了一些现存的提交对象而创造了一些类似但不同的新的提交对象。如果你把原来分支中的提交对象发布出去，并且其他人更新下载后在其基础上开展工作，而稍后你又用 git rebase 抛弃这些提交对象，把新的重演后的提交对象发布出去的话，你的合作者就不得不重新合并他们的工作，这样当你再次从他们那里获取内容时，提交历史就会变得一团糟。</p>\n<p>下面我们用一个实际例子来说明为什么公开的衍合会带来问题。假设你从一个中央服务器克隆然后在它的基础上搞了一些开发，提交历史类似图 3-36 所示：<br><img src=\"/images/3_36.png\" alt=\"3_36\"><br><img src=\"/images/3_37.png\" alt=\"3_37\"><br><img src=\"/images/3_38.png\" alt=\"3_38\"><br><img src=\"/images/3_39.png\" alt=\"3_39\"><br>C8 这一步的合并是迟早会发生的，因为只有这样你才能和其他协作者提交的内容保持同步。而在 C8 之后，你的提交历史里就会同时包含 C4 和 C4’，两者有着不同的 SHA-1 校验值，如果用 git log 查看历史，会看到两个提交拥有相同的作者日期与说明，令人费解。而更糟的是，当你把这样的历史推送到服务器后，会再次把这些衍合后的提交引入到中央服务器，进一步困扰其他人（译注：这个例子中，出问题的责任方是那个发布了 C6 后又用衍合发布 C4’ 的人，其他人会因此反馈双重历史到共享主干，从而混淆大家的视听。）。</p>\n<p>如果把衍合当成一种在推送之前清理提交历史的手段，而且仅仅衍合那些尚未公开的提交对象，就没问题。如果衍合那些已经公开的提交对象，并且已经有人基于这些提交对象开展了后续开发工作的话，就会出现叫人沮丧的麻烦。</p>\n<h2 id=\"服务器上的Git\"><a href=\"#服务器上的Git\" class=\"headerlink\" title=\"服务器上的Git\"></a>服务器上的Git</h2><h3 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h3><p>Git 可以使用四种主要的协议来传输数据：本地传输，SSH 协议，Git 协议和 HTTP 协议。下面分别介绍一下哪些情形应该使用（或避免使用）这些协议。</p>\n<p>值得注意的是，除了 HTTP 协议外，其他所有协议都要求在服务器端安装并运行 Git。</p>\n<h4 id=\"本地协议\"><a href=\"#本地协议\" class=\"headerlink\" title=\"本地协议\"></a>本地协议</h4><p>最基本的就是本地协议（Local protocol），所谓的远程仓库在该协议中的表示，就是硬盘上的另一个目录。这常见于团队每一个成员都对一个共享的文件系统（例如 NFS）拥有访问权，或者比较少见的多人共用同一台电脑的情况。后面一种情况并不安全，因为所有代码仓库实例都储存在同一台电脑里，增加了灾难性数据损失的可能性。</p>\n<p>如果你使用一个共享的文件系统，就可以在一个本地文件系统中克隆仓库，推送和获取。克隆的时候只需要将远程仓库的路径作为 URL 使用，比如下面这样：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> /opt/git/project.git</div></pre></td></tr></table></figure></p>\n<p>或者这样：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> file:///opt/git/project.git</div></pre></td></tr></table></figure></p>\n<p>如果在 URL 开头明确使用 file:// ，那么 Git 会以一种略微不同的方式运行。如果你只给出路径，Git 会尝试使用硬链接或直接复制它所需要的文件。如果使用了 file:// ，Git 会调用它平时通过网络来传输数据的工序，而这种方式的效率相对较低。使用 file:// 前缀的主要原因是当你需要一个不包含无关引用或对象的干净仓库副本的时候 — 一般指从其他版本控制系统导入的，或类似情形（参见第 9 章的维护任务）。我们这里仅仅使用普通路径，这样更快。</p>\n<p>要添加一个本地仓库作为现有 Git 项目的远程仓库，可以这样做：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git remote add local_proj /opt/git/project.git</div></pre></td></tr></table></figure></p>\n<p>然后就可以像在网络上一样向这个远程仓库推送和获取数据了。<br><strong>优点</strong></p>\n<p>基于文件仓库的优点在于它的简单，同时保留了现存文件的权限和网络访问权限。如果你的团队已经有一个全体共享的文件系统，建立仓库就十分容易了。你只需把一份裸仓库的副本放在大家都能访问的地方，然后像对其他共享目录一样设置读写权限就可以了。我们将在下一节“在服务器上部署 Git ”中讨论如何导出一个裸仓库的副本。</p>\n<p>这也是从别人工作目录中获取工作成果的快捷方法。假如你和你的同事在一个项目中合作，他们想让你检出一些东西的时候，运行类似 git pull /home/john/project 通常会比他们推送到服务器，而你再从服务器获取简单得多。</p>\n<p><strong>缺点</strong></p>\n<p>这种方法的缺点是，与基本的网络连接访问相比，难以控制从不同位置来的访问权限。如果你想从家里的笔记本电脑上推送，就要先挂载远程硬盘，这和基于网络连接的访问相比更加困难和缓慢。</p>\n<p>另一个很重要的问题是该方法不一定就是最快的，尤其是对于共享挂载的文件系统。本地仓库只有在你对数据访问速度快的时候才快。在同一个服务器上，如果二者同时允许 Git 访问本地硬盘，通过 NFS 访问仓库通常会比 SSH 慢。</p>\n<h4 id=\"SSH-协议\"><a href=\"#SSH-协议\" class=\"headerlink\" title=\"SSH 协议\"></a>SSH 协议</h4><p>Git 使用的传输协议中最常见的可能就是 SSH 了。这是因为大多数环境已经支持通过 SSH 对服务器的访问 — 即便还没有，架设起来也很容易。SSH 也是唯一一个同时支持读写操作的网络协议。另外两个网络协议（HTTP 和 Git）通常都是只读的，所以虽然二者对大多数人都可用，但执行写操作时还是需要 SSH。SSH 同时也是一个验证授权的网络协议；而因为其普遍性，一般架设和使用都很容易。</p>\n<p>通过 SSH 克隆一个 Git 仓库，你可以像下面这样给出 ssh:// 的 URL：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> ssh://user@server/project.git</div></pre></td></tr></table></figure></p>\n<p>或者不指明某个协议 — 这时 Git 会默认使用 SSH ：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> user@server:project.git</div></pre></td></tr></table></figure></p>\n<p>如果不指明用户，Git 会默认使用当前登录的用户名连接服务器。<br><strong>优点</strong></p>\n<p>使用 SSH 的好处有很多。首先，如果你想拥有对网络仓库的写权限，基本上不可能不使用 SSH。其次，SSH 架设相对比较简单 — SSH 守护进程很常见，很多网络管理员都有一些使用经验，而且很多操作系统都自带了它或者相关的管理工具。再次，通过 SSH 进行访问是安全的 — 所有数据传输都是加密和授权的。最后，和 Git 及本地协议一样，SSH 也很高效，会在传输之前尽可能压缩数据。</p>\n<p><strong>缺点</strong></p>\n<p>SSH 的限制在于你不能通过它实现仓库的匿名访问。即使仅为读取数据，人们也必须在能通过 SSH 访问主机的前提下才能访问仓库，这使得 SSH 不利于开源的项目。如果你仅仅在公司网络里使用，SSH 可能是你唯一需要使用的协议。如果想允许对项目的匿名只读访问，那么除了为自己推送而架设 SSH 协议之外，还需要支持其他协议以便他人访问读取。</p>\n<h4 id=\"Git-协议\"><a href=\"#Git-协议\" class=\"headerlink\" title=\"Git 协议\"></a>Git 协议</h4><p>接下来是 Git 协议。这是一个包含在 Git 软件包中的特殊守护进程； 它会监听一个提供类似于 SSH 服务的特定端口（9418），而无需任何授权。打算支持 Git 协议的仓库，需要先创建 git-daemon-export-ok 文件 — 它是协议进程提供仓库服务的必要条件 — 但除此之外该服务没有什么安全措施。要么所有人都能克隆 Git 仓库，要么谁也不能。这也意味着该协议通常不能用来进行推送。你可以允许推送操作；然而由于没有授权机制，一旦允许该操作，网络上任何一个知道项目 URL 的人将都有推送权限。不用说，这是十分罕见的情况。</p>\n<p><strong>优点</strong></p>\n<p>Git 协议是现存最快的传输协议。如果你在提供一个有很大访问量的公共项目，或者一个不需要对读操作进行授权的庞大项目，架设一个 Git 守护进程来供应仓库是个不错的选择。它使用与 SSH 协议相同的数据传输机制，但省去了加密和授权的开销。</p>\n<p><strong>缺点</strong></p>\n<p>Git 协议消极的一面是缺少授权机制。用 Git 协议作为访问项目的唯一方法通常是不可取的。一般的做法是，同时提供 SSH 接口，让几个开发者拥有推送（写）权限，其他人通过 git:// 拥有只读权限。 Git 协议可能也是最难架设的协议。它要求有单独的守护进程，需要定制 — 我们将在本章的 “Gitosis” 一节详细介绍它的架设 — 需要设定 xinetd 或类似的程序，而这些工作就没那么轻松了。该协议还要求防火墙开放 9418 端口，而企业级防火墙一般不允许对这个非标准端口的访问。大型企业级防火墙通常会封锁这个少见的端口。</p>\n<h4 id=\"HTTP-S-协议\"><a href=\"#HTTP-S-协议\" class=\"headerlink\" title=\"HTTP/S 协议\"></a>HTTP/S 协议</h4><p>最后还有 HTTP 协议。HTTP 或 HTTPS 协议的优美之处在于架设的简便性。基本上，只需要把 Git 的裸仓库文件放在 HTTP 的根目录下，配置一个特定的 post-update 挂钩（hook）就可以搞定（Git 挂钩的细节见第 7 章）。此后，每个能访问 Git 仓库所在服务器上 web 服务的人都可以进行克隆操作。下面的操作可以允许通过 HTTP 对仓库进行读取：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> /var/www/htdocs/</div><div class=\"line\">$ git <span class=\"built_in\">clone</span> --bare /path/to/git_project gitproject.git</div><div class=\"line\">$ <span class=\"built_in\">cd</span> gitproject.git</div><div class=\"line\">$ mv hooks/post-update.sample hooks/post-update</div><div class=\"line\">$ chmod a+x hooks/post-update</div></pre></td></tr></table></figure></p>\n<p>这样就可以了。Git 附带的 post-update 挂钩会默认运行合适的命令（git update-server-info）来确保通过 HTTP 的获取和克隆正常工作。这条命令在你用 SSH 向仓库推送内容时运行；之后，其他人就可以用下面的命令来克隆仓库：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> http://example.com/gitproject.git</div></pre></td></tr></table></figure></p>\n<p>在本例中，我们使用了 Apache 设定中常用的 /var/www/htdocs 路径，不过你可以使用任何静态 web 服务 — 把裸仓库放在它的目录里就行。 Git 的数据是以最基本的静态文件的形式提供的（关于如何提供文件的详情见第 9 章）。</p>\n<p>通过 HTTP 进行推送操作也是可能的，不过这种做法不太常见，并且牵扯到复杂的 WebDAV 设定。由于很少用到，本书将略过对该内容的讨论。如果对 HTTP 推送协议感兴趣，不妨打开这个地址看一下操作方法：<a href=\"http://www.kernel.org/pub/software/scm/git/docs/howto/setup-git-server-over-http.txt\" target=\"_blank\" rel=\"external\">http://www.kernel.org/pub/software/scm/git/docs/howto/setup-git-server-over-http.txt</a> 。通过 HTTP 推送的好处之一是你可以使用任何 WebDAV 服务器，不需要为 Git 设定特殊环境；所以如果主机提供商支持通过 WebDAV 更新网站内容，你也可以使用这项功能。</p>\n<p><strong>优点</strong></p>\n<p>使用 HTTP 协议的好处是易于架设。几条必要的命令就可以让全世界读取到仓库的内容。花费不过几分钟。HTTP 协议不会占用过多服务器资源。因为它一般只用到静态的 HTTP 服务提供所有数据，普通的 Apache 服务器平均每秒能支撑数千个文件的并发访问 — 哪怕让一个小型服务器超载都很难。</p>\n<p>你也可以通过 HTTPS 提供只读的仓库，这意味着你可以加密传输内容；你甚至可以要求客户端使用特定签名的 SSL 证书。一般情况下，如果到了这一步，使用 SSH 公共密钥可能是更简单的方案；不过也存在一些特殊情况，这时通过 HTTPS 使用带签名的 SSL 证书或者其他基于 HTTP 的只读连接授权方式是更好的解决方案。</p>\n<p>HTTP 还有个额外的好处：HTTP 是一个如此常见的协议，以至于企业级防火墙通常都允许其端口的通信。</p>\n<p><strong>缺点</strong></p>\n<p>HTTP 协议的消极面在于，相对来说客户端效率更低。克隆或者下载仓库内容可能会花费更多时间，而且 HTTP 传输的体积和网络开销比其他任何一个协议都大。因为它没有按需供应的能力 — 传输过程中没有服务端的动态计算 — 因而 HTTP 协议经常会被称为傻瓜（dumb）协议。更多 HTTP 协议和其他协议效率上的差异见第 9 章。</p>\n<h3 id=\"在服务器上部署-Git\"><a href=\"#在服务器上部署-Git\" class=\"headerlink\" title=\"在服务器上部署 Git\"></a>在服务器上部署 Git</h3><p>开始架设 Git 服务器前，需要先把现有仓库导出为裸仓库 — 即一个不包含当前工作目录的仓库。做法直截了当，克隆时用 –bare 选项即可。裸仓库的目录名一般以 .git 结尾，像这样：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> --bare my_project my_project.git</div><div class=\"line\">Cloning into bare repository <span class=\"string\">'my_project.git'</span>...</div><div class=\"line\">done.</div></pre></td></tr></table></figure></p>\n<p>该命令的输出或许会让人有些不解。其实 clone 操作基本上相当于 git init 加 git fetch，所以这里出现的其实是 git init 的输出，先由它建立一个空目录，而之后传输数据对象的操作并无任何输出，只是悄悄在幕后执行。现在 my_project.git 目录中已经有了一份 Git 目录数据的副本。</p>\n<p>整体上的效果大致相当于：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ cp -Rf my_project/.git my_project.git</div></pre></td></tr></table></figure></p>\n<p>但在配置文件中有若干小改动，不过对用户来讲，使用方式都一样，不会有什么影响。它仅取出 Git 仓库的必要原始数据，存放在该目录中，而不会另外创建工作目录。</p>\n<h4 id=\"把裸仓库移到服务器上\"><a href=\"#把裸仓库移到服务器上\" class=\"headerlink\" title=\"把裸仓库移到服务器上\"></a>把裸仓库移到服务器上</h4><p>有了裸仓库的副本后，剩下的就是把它放到服务器上并设定相关协议。假设一个域名为 git.example.com 的服务器已经架设好，并可以通过 SSH 访问，我们打算把所有 Git 仓库储存在 /opt/git 目录下。只要把裸仓库复制过去：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ scp -r my_project.git user@git.example.com:/opt/git</div></pre></td></tr></table></figure></p>\n<p>现在，所有对该服务器有 SSH 访问权限，并可读取 /opt/git 目录的用户都可以用下面的命令克隆该项目：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> user@git.example.com:/opt/git/my_project.git</div></pre></td></tr></table></figure></p>\n<p>如果某个 SSH 用户对 /opt/git/my_project.git 目录有写权限，那他就有推送权限。如果到该项目目录中运行 git init 命令，并加上 –shared 选项，那么 Git 会自动修改该仓库目录的组权限为可写（译注：实际上 –shared 可以指定其他行为，只是默认为将组权限改为可写并执行 g+sx，所以最后会得到 rws。）。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ ssh user@git.example.com</div><div class=\"line\">$ <span class=\"built_in\">cd</span> /opt/git/my_project.git</div><div class=\"line\">$ git init --bare --shared</div></pre></td></tr></table></figure></p>\n<p>由此可见，根据现有的 Git 仓库创建一个裸仓库，然后把它放上你和同事都有 SSH 访问权的服务器是多么容易。现在已经可以开始在同一项目上密切合作了。</p>\n<p>值得注意的是，这的的确确是架设一个少数人具有连接权的 Git 服务的全部 — 只要在服务器上加入可以用 SSH 登录的帐号，然后把裸仓库放在大家都有读写权限的地方。一切都准备停当，无需更多。</p>\n<p>下面的几节中，你会了解如何扩展到更复杂的设定。这些内容包含如何避免为每一个用户建立一个账户，给仓库添加公共读取权限，架设网页界面，使用 Gitosis 工具等等。然而，只是和几个人在一个不公开的项目上合作的话，仅仅是一个 SSH 服务器和裸仓库就足够了，记住这点就可以了。</p>\n<h4 id=\"小型安装\"><a href=\"#小型安装\" class=\"headerlink\" title=\"小型安装\"></a>小型安装</h4><p>如果设备较少或者你只想在小型开发团队里尝试 Git ，那么一切都很简单。架设 Git 服务最复杂的地方在于账户管理。如果需要仓库对特定的用户可读，而给另一部分用户读写权限，那么访问和许可的安排就比较困难。</p>\n<p>SSH 连接</p>\n<p>如果已经有了一个所有开发成员都可以用 SSH 访问的服务器，架设第一个服务器将变得异常简单，几乎什么都不用做（正如上节中介绍的那样）。如果需要对仓库进行更复杂的访问控制，只要使用服务器操作系统的本地文件访问许可机制就行了。</p>\n<p>如果需要团队里的每个人都对仓库有写权限，又不能给每个人在服务器上建立账户，那么提供 SSH 连接就是唯一的选择了。我们假设用来共享仓库的服务器已经安装了 SSH 服务，而且你通过它访问服务器。</p>\n<p>有好几个办法可以让团队的每个人都有访问权。第一个办法是给每个人建立一个账户，直截了当但略过繁琐。反复运行 adduser 并给所有人设定临时密码可不是好玩的。</p>\n<p>第二个办法是在主机上建立一个 git 账户，让每个需要写权限的人发送一个 SSH 公钥，然后将其加入 git 账户的 ~/.ssh/authorized_keys 文件。这样一来，所有人都将通过 git 账户访问主机。这丝毫不会影响提交的数据 — 访问主机用的身份不会影响提交对象的提交者信息。</p>\n<p>另一个办法是让 SSH 服务器通过某个 LDAP 服务，或者其他已经设定好的集中授权机制，来进行授权。只要每个人都能获得主机的 shell 访问权，任何可用的 SSH 授权机制都能达到相同效果。</p>\n<h3 id=\"生成-SSH-公钥\"><a href=\"#生成-SSH-公钥\" class=\"headerlink\" title=\"生成 SSH 公钥\"></a>生成 SSH 公钥</h3><p>大多数 Git 服务器都会选择使用 SSH 公钥来进行授权。系统中的每个用户都必须提供一个公钥用于授权，没有的话就要生成一个。生成公钥的过程在所有操作系统上都差不多。 首先先确认一下是否已经有一个公钥了。SSH 公钥默认储存在账户的主目录下的 ~/.ssh 目录。进去看看：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> ~/.ssh</div><div class=\"line\">$ ls</div><div class=\"line\">authorized_keys2  id_dsa       known_hosts</div><div class=\"line\">config            id_dsa.pub</div></pre></td></tr></table></figure></p>\n<p>关键是看有没有用 something 和 something.pub 来命名的一对文件，这个 something 通常就是 id_dsa 或 id_rsa。有 .pub 后缀的文件就是公钥，另一个文件则是密钥。假如没有这些文件，或者干脆连 .ssh 目录都没有，可以用 ssh-keygen 来创建。该程序在 Linux/Mac 系统上由 SSH 包提供，而在 Windows 上则包含在 MSysGit 包里：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen</div><div class=\"line\">Generating public/private rsa key pair.</div><div class=\"line\">Enter file <span class=\"keyword\">in</span> <span class=\"built_in\">which</span> to save the key (/Users/schacon/.ssh/id_rsa):</div><div class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase):</div><div class=\"line\">Enter same passphrase again:</div><div class=\"line\">Your identification has been saved <span class=\"keyword\">in</span> /Users/schacon/.ssh/id_rsa.</div><div class=\"line\">Your public key has been saved <span class=\"keyword\">in</span> /Users/schacon/.ssh/id_rsa.pub.</div><div class=\"line\">The key fingerprint is:</div><div class=\"line\">43:c5:5b:5f:b1:f1:50:43:ad:20:a6:92:6a:1f:9a:3a schacon@agadorlaptop.local</div></pre></td></tr></table></figure></p>\n<p>它先要求你确认保存公钥的位置（.ssh/id_rsa），然后它会让你重复一个密码两次，如果不想在使用公钥的时候输入密码，可以留空。</p>\n<p>现在，所有做过这一步的用户都得把它们的公钥给你或者 Git 服务器的管理员（假设 SSH 服务被设定为使用公钥机制）。他们只需要复制 .pub 文件的内容然后发邮件给管理员。公钥的样子大致如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ cat ~/.ssh/id_rsa.pub</div><div class=\"line\">ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU</div><div class=\"line\">GPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3</div><div class=\"line\">Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA</div><div class=\"line\">t3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En</div><div class=\"line\">mZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx</div><div class=\"line\">NrRFi9wrf+M7Q== schacon@agadorlaptop.local</div></pre></td></tr></table></figure></p>\n<p>关于在多个操作系统上设立相同 SSH 公钥的教程，可以查阅 GitHub 上有关 SSH 公钥的<a href=\"http://github.com/guides/providing-your-ssh-key\" target=\"_blank\" rel=\"external\">向导</a>。</p>\n<p><a href=\"http://iissnan.com/progit/html/zh/ch4_10.html\" target=\"_blank\" rel=\"external\">http://iissnan.com/progit/html/zh/ch4_10.html</a></p>\n<h3 id=\"Git-托管服务\"><a href=\"#Git-托管服务\" class=\"headerlink\" title=\"Git 托管服务\"></a>Git 托管服务</h3><p>如果不想经历自己架设 Git 服务器的麻烦，网络上有几个专业的仓库托管服务可供选择。这样做有几大优点：托管账户的建立通常比较省时，方便项目的启动，而且不涉及服务器的维护和监控。即使内部创建并运行着自己的服务器，同时为开源项目提供一个公共托管站点还是有好处的 — 让开源社区更方便地找到该项目，并给予帮助。</p>\n<p>目前，可供选择的托管服务数量繁多，各有利弊。在 Git 官方 wiki 上的 Githosting 页面有一个最新的托管服务列表：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">https://git.wiki.kernel.org/index.php/GitHosting</div></pre></td></tr></table></figure></p>\n<p>由于本书无法全部一一介绍，而本人（译注：指本书作者 Scott Chacon。）刚好在其中一家公司工作，所以接下来我们将会介绍如何在 GitHub 上建立新账户并启动项目。至于其他托管服务大体也是这么一个过程，基本的想法都是差不多的。</p>\n<p>GitHub 是目前为止最大的开源 Git 托管服务，并且还是少数同时提供公共代码和私有代码托管服务的站点之一，所以你可以在上面同时保存开源和商业代码。事实上，本书就是放在 GitHub 上合作编著的。（译注：本书的翻译也是放在 GitHub 上广泛协作的。）</p>\n<h4 id=\"GitHub\"><a href=\"#GitHub\" class=\"headerlink\" title=\"GitHub\"></a>GitHub</h4><p>GitHub 和大多数的代码托管站点在处理项目命名空间的方式上略有不同。GitHub 的设计更侧重于用户，而不是完全基于项目。也就是说，如果我在 GitHub 上托管一个名为 grit 的项目的话，它的地址不会是 github.com/grit，而是按在用户底下 github.com/shacon/grit （译注：本书作者 Scott Chacon 在 GitHub 上的用户名是 shacon。）。不存在所谓某个项目的官方版本，所以假如第一作者放弃了某个项目，它可以无缝转移到其它用户的名下。</p>\n<p>GitHub 同时也是一个向使用私有仓库的用户收取费用的商业公司，但任何人都可以方便快捷地申请到一个免费账户，并在上面托管数量不限的开源项目。接下来我们快速介绍一下 GitHub 的基本使用。</p>\n<h5 id=\"建立新账户\"><a href=\"#建立新账户\" class=\"headerlink\" title=\"建立新账户\"></a>建立新账户</h5><p>首先注册一个免费账户。访问 “Plans and pricing” 页面 <a href=\"https://github.com/pricing\" target=\"_blank\" rel=\"external\">https://github.com/pricing</a> 并点击 Free acount 里的 Sign Up 按钮（见图 4-2），进入注册页面。<br>如果方便，现在就可以提供你的 SSH 公钥。我们在前文的”小型安装” 一节介绍过生成新公钥的方法。把新生成的公钥复制粘贴到 SSH Public Key 文本框中即可。要是对生成公钥的步骤不太清楚，也可以点击 “explain ssh keys” 链接，会显示各个主流操作系统上完成该步骤的介绍。 点击 “I agree，sign me up” 按钮完成用户注册，并转到该用户的 dashboard 页面</p>\n<h5 id=\"建立新仓库\"><a href=\"#建立新仓库\" class=\"headerlink\" title=\"建立新仓库\"></a>建立新仓库</h5><p>点击用户面板上仓库旁边的 “create a new one” 链接，显示 Create a New Repository 的表单.<br>当然，项目名称是必不可少的，此外也可以适当描述一下项目的情况或者给出官方站点的地址。然后点击 “Create Repository” 按钮，新仓库就建立起来肋.<br>由于尚未提交代码，点击项目地址后 GitHub 会显示一个简要的指南，告诉你如何新建一个项目并推送上来，如何从现有项目推送，以及如何从一个公共的 Subversion 仓库导入项目<br>该指南和本书前文介绍的类似，对于新的项目，需要先在本地初始化为 Git 项目，添加要管理的文件并作首次提交：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git init</div><div class=\"line\">$ git add .</div><div class=\"line\">$ git commit -m <span class=\"string\">'initial commit'</span></div></pre></td></tr></table></figure></p>\n<p>然后在这个本地仓库内把 GitHub 添加为远程仓库，并推送 master 分支上来：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git remote add origin git@github.com:testinguser/iphone_project.git</div><div class=\"line\">$ git push origin master</div></pre></td></tr></table></figure></p>\n<p>现在该项目就托管在 GitHub 上了。你可以把它的 URL 分享给每位对此项目感兴趣的人。本例的 URL 是 <a href=\"http://github.com/testinguser/iphone_project。而在项目页面的摘要部分，你会发现有两个\" target=\"_blank\" rel=\"external\">http://github.com/testinguser/iphone_project。而在项目页面的摘要部分，你会发现有两个</a> Git URL 地址.<br>Public Clone URL 是一个公开的，只读的 Git URL，任何人都可以通过它克隆该项目。可以随意散播这个 URL，比如发布到个人网站之类的地方等等。</p>\n<p>Your Clone URL 是一个基于 SSH 协议的可读可写 URL，只有使用与上传的 SSH 公钥对应的密钥来连接时，才能通过它进行读写操作。其他用户访问该项目页面时只能看到之前那个公共的 URL，看不到这个私有的 URL。</p>\n<h5 id=\"添加协作开发者\"><a href=\"#添加协作开发者\" class=\"headerlink\" title=\"添加协作开发者\"></a>添加协作开发者</h5><p>现在把团队里的其他人也加进来。如果 John，Josie 和 Jessica 都在 GitHub 注册了账户，要赋予他们对该仓库的推送权限，可以把他们加为项目协作者。这样他们就可以通过各自的公钥访问我的这个仓库了。</p>\n<p>点击项目页面上方的 “edit” 按钮或者顶部的 Admin 标签，进入该项目的管理页面.<br>为了给另一个用户添加项目的写权限，点击 “Add another collaborator” 链接，出现一个用于输入用户名的表单。在输入的同时，它会自动跳出一个符合条件的候选名单。找到正确用户名之后，点 Add 按钮，把该用户设为项目协作者.<br>添加完协作者之后，就可以在 Repository Collaborators 区域看到他们的名单<br>如果要取消某人的访问权，点击 “revoke” 即可取消他的推送权限。对于将来的项目，你可以从现有项目复制协作者名单，或者直接借用协作者群组</p>\n<h5 id=\"派生项目\"><a href=\"#派生项目\" class=\"headerlink\" title=\"派生项目\"></a>派生项目</h5><p>如果要为一个自己没有推送权限的项目贡献代码，GitHub 鼓励使用派生（fork）。到那个感兴趣的项目主页上，点击页面上方的 “fork” 按钮，GitHub 就会为你复制一份该项目的副本到你的仓库中，这样你就可以向自己的这个副本推送数据了。</p>\n<p>采取这种办法的好处是，项目拥有者不必忙于应付赋予他人推送权限的工作。随便谁都可以通过派生得到一个项目副本并在其中展开工作，事后只需要项目维护者将这些副本仓库加为远程仓库，然后提取更新合并即可。</p>\n<p>要派生一个项目，到原始项目的页面（本例中是 mojombo/chronic）点击 “fork” 按钮<br>几秒钟之后，你将进入新建的项目页面，会显示该项目派生自哪一个项目</p>\n","excerpt":"<h2 id=\"Git-分支\"><a href=\"#Git-分支\" class=\"headerlink\" title=\"Git 分支\"></a>Git 分支</h2><h3 id=\"何谓分支\"><a href=\"#何谓分支\" class=\"headerlink\" title=\"何谓分支\"></a>何谓分支</h3><p>为了理解 Git 分支的实现方式，我们需要回顾一下 Git 是如何储存数据的。或许你还记得第一章的内容，Git 保存的不是文件差异或者变化量，而只是一系列文件快照。</p>\n<p>在 Git 中提交时，会保存一个提交（commit）对象，该对象包含一个指向暂存内容快照的指针，包含本次提交的作者等相关附属信息，包含零个或多个指向该提交对象的父对象指针：首次提交是没有直接祖先的，普通提交有一个祖先，由两个或多个分支合并产生的提交则有多个祖先。</p>\n<p>为直观起见，我们假设在工作目录中有三个文件，准备将它们暂存后提交。暂存操作会对每一个文件计算校验和（即第一章中提到的 SHA-1 哈希字串），然后把当前版本的文件快照保存到 Git 仓库中（Git 使用 blob 类型的对象存储这些快照），并将校验和加入暂存区域：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git add README test.rb LICENSE</div><div class=\"line\">$ git commit -m <span class=\"string\">'initial commit of my project'</span></div></pre></td></tr></table></figure></p>","more":"<p>当使用 git commit 新建一个提交对象前，Git 会先计算每一个子目录（本例中就是项目根目录）的校验和，然后在 Git 仓库中将这些目录保存为树（tree）对象。之后 Git 创建的提交对象，除了包含相关提交信息以外，还包含着指向这个树对象（项目根目录）的指针，如此它就可以在将来需要的时候，重现此次快照的内容了。<br>现在，Git 仓库中有五个对象：三个表示文件快照内容的 blob 对象；一个记录着目录树内容及其中各个文件对应 blob 对象索引的 tree 对象；以及一个包含指向 tree 对象（根目录）的索引和其他提交信息元数据的 commit 对象。概念上来说，仓库中的各个对象保存的数据和相互关系看起来如图 3-1 所示：<br><img src=\"/images/3_1.png\" alt=\"3_1\"><br>作些修改后再次提交，那么这次的提交对象会包含一个指向上次提交对象的指针（译注：即下图中的 parent 对象）。两次提交后，仓库历史会变成图 3-2 的样子：<br><img src=\"/images/3_2.png\" alt=\"a\"></p>\n<p>现在来谈分支。Git 中的分支，其实本质上仅仅是个指向 commit 对象的可变指针。Git 会使用 master 作为分支的默认名字。在若干次提交后，你其实已经有了一个指向最后一次提交对象的 master 分支，它在每次提交的时候都会自动向前移动。<br><img src=\"/images/3_3.png\" alt=\"3_3\"></p>\n<p>那么，Git 又是如何创建一个新的分支的呢？答案很简单，创建一个新的分支指针。比如新建一个 testing 分支，可以使用 git branch 命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git branch testing</div></pre></td></tr></table></figure></p>\n<p>这会在当前 <strong>commit</strong> 对象上新建一个分支指针（见图 3-4）。</p>\n<p><img src=\"/images/3_4.png\" alt=\"3_4\"><br>那么，Git 是如何知道你当前在哪个分支上工作的呢？其实答案也很简单，它保存着一个名为 HEAD 的特别指针。请注意它和你熟知的许多其他版本控制系统（比如 Subversion 或 CVS）里的 HEAD 概念大不相同。在 Git 中，它是一个指向你正在工作中的本地分支的指针（译注：将 HEAD 想象为当前分支的别名。）。运行 git branch 命令，仅仅是建立了一个新的分支，但不会自动切换到这个分支中去，所以在这个例子中，我们依然还在 master 分支里工作（参考图 3-5）。<br><img src=\"/images/3_5.png\" alt=\"3_5\"><br>要切换到其他分支，可以执行 git checkout 命令。我们现在转换到新建的 testing 分支：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git checkout testing</div></pre></td></tr></table></figure></p>\n<p>这样 HEAD 就指向了 testing 分支（见图3-6）。<br><img src=\"/images/3_6.png\" alt=\"3_6\"><br>这样的实现方式会给我们带来什么好处呢？好吧，现在不妨再提交一次：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ vim test.rb</div><div class=\"line\">$ git commit <span class=\"_\">-a</span> -m <span class=\"string\">'made a change'</span></div></pre></td></tr></table></figure></p>\n<p>图 3-7 展示了提交后的结果。<br><img src=\"/images/3_7.png\" alt=\"3_7\"><br>非常有趣，现在 testing 分支向前移动了一格，而 master 分支仍然指向原先 git checkout 时所在的 commit 对象。现在我们回到 master 分支看看：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/3_8.png\" alt=\"3_8\"></p>\n<p>这条命令做了两件事。它把 HEAD 指针移回到 master 分支，并把工作目录中的文件换成了 master 分支所指向的快照内容。也就是说，现在开始所做的改动，将始于本项目中一个较老的版本。它的主要作用是将 testing 分支里作出的修改暂时取消，这样你就可以向另一个方向进行开发。</p>\n<p>我们作些修改后再次提交：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ vim test.rb</div><div class=\"line\">$ git commit <span class=\"_\">-a</span> -m <span class=\"string\">'made other changes'</span></div></pre></td></tr></table></figure></p>\n<p>现在我们的项目提交历史产生了分叉（如图 3-9 所示），因为刚才我们创建了一个分支，转换到其中进行了一些工作，然后又回到原来的主分支进行了另外一些工作。这些改变分别孤立在不同的分支里：我们可以在不同分支里反复切换，并在时机成熟时把它们合并到一起。而所有这些工作，仅仅需要 branch 和 checkout 这两条命令就可以完成。<br><img src=\"/images/3_9.png\" alt=\"3_9\"><br>由于 Git 中的分支实际上仅是一个包含所指对象校验和（40 个字符长度 SHA-1 字串）的文件，所以创建和销毁一个分支就变得非常廉价。说白了，新建一个分支就是向一个文件写入 41 个字节（外加一个换行符）那么简单，当然也就很快了。</p>\n<p>这和大多数版本控制系统形成了鲜明对比，它们管理分支大多采取备份所有项目文件到特定目录的方式，所以根据项目文件数量和大小不同，可能花费的时间也会有相当大的差别，快则几秒，慢则数分钟。而 Git 的实现与项目复杂度无关，它永远可以在几毫秒的时间内完成分支的创建和切换。同时，因为每次提交时都记录了祖先信息（译注：即 parent 对象），将来要合并分支时，寻找恰当的合并基础（译注：即共同祖先）的工作其实已经自然而然地摆在那里了，所以实现起来非常容易。Git 鼓励开发者频繁使用分支，正是因为有着这些特性作保障。</p>\n<p>接下来看看，我们为什么应该频繁使用分支。</p>\n<h3 id=\"分支的新建与合并\"><a href=\"#分支的新建与合并\" class=\"headerlink\" title=\"分支的新建与合并\"></a>分支的新建与合并</h3><p>现在让我们来看一个简单的分支与合并的例子，实际工作中大体也会用到这样的工作流程：</p>\n<ol>\n<li>开发某个网站。</li>\n<li>为实现某个新的需求，创建一个分支。</li>\n<li>在这个分支上开展工作。<br>假设此时，你突然接到一个电话说有个很严重的问题需要紧急修补，那么可以按照下面的方式处理：</li>\n<li>返回到原先已经发布到生产服务器上的分支。</li>\n<li>为这次紧急修补建立一个新分支，并在其中修复问题。</li>\n<li>通过测试后，回到生产服务器所在的分支，将修补分支合并进来，然后再推送到生产服务器上。</li>\n<li>切换到之前实现新需求的分支，继续工作。</li>\n</ol>\n<h4 id=\"分支的新建与切换\"><a href=\"#分支的新建与切换\" class=\"headerlink\" title=\"分支的新建与切换\"></a>分支的新建与切换</h4><p>首先，我们假设你正在项目中愉快地工作，并且已经提交了几次更新.<br>现在，你决定要修补问题追踪系统上的 #53 问题。顺带说明下，Git 并不同任何特定的问题追踪系统打交道。这里为了说明要解决的问题，才把新建的分支取名为 iss53。要新建并切换到该分支，运行 git checkout 并加上 -b 参数：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git checkout -b iss53</div><div class=\"line\">Switched to a new branch <span class=\"string\">'iss53'</span></div></pre></td></tr></table></figure></p>\n<p>这相当于执行下面这两条命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git branch iss53</div><div class=\"line\">$ git checkout iss53</div></pre></td></tr></table></figure></p>\n<p>接着你开始尝试修复问题，在提交了若干次更新后，iss53 分支的指针也会随着向前推进，因为它就是当前分支.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ vim index.html</div><div class=\"line\">$ git commit <span class=\"_\">-a</span> -m <span class=\"string\">'added a new footer [issue 53]'</span></div></pre></td></tr></table></figure></p>\n<p>现在你就接到了那个网站问题的紧急电话，需要马上修补。有了 Git ，我们就不需要同时发布这个补丁和 iss53 里作出的修改，也不需要在创建和发布该补丁到服务器之前花费大力气来复原这些修改。唯一需要的仅仅是切换回 master 分支。</p>\n<p>不过在此之前，留心你的暂存区或者工作目录里，那些还没有提交的修改，它会和你即将检出的分支产生冲突从而阻止 Git 为你切换分支。切换分支的时候最好保持一个清洁的工作区域。稍后会介绍几个绕过这种问题的办法（分别叫做 stashing 和 commit amending）。目前已经提交了所有的修改，所以接下来可以正常转换到 master 分支：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div><div class=\"line\">Switched to branch <span class=\"string\">'master'</span></div></pre></td></tr></table></figure></p>\n<p>此时工作目录中的内容和你在解决问题 #53 之前一模一样，你可以集中精力进行紧急修补。这一点值得牢记：Git 会把工作目录的内容恢复为检出某分支时它所指向的那个提交对象的快照。它会自动添加、删除和修改文件以确保目录的内容和你当时提交时完全一样。</p>\n<p>接下来，你得进行紧急修补。我们创建一个紧急修补分支 hotfix 来开展工作，直到搞定（见图 3-13）：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git checkout -b hotfix</div><div class=\"line\">Switched to a new branch <span class=\"string\">'hotfix'</span></div><div class=\"line\">$ vim index.html</div><div class=\"line\">$ git commit <span class=\"_\">-a</span> -m <span class=\"string\">'fixed the broken email address'</span></div><div class=\"line\">[hotfix 3a0874c] fixed the broken email address</div><div class=\"line\"> 1 files changed, 1 deletion(-)</div></pre></td></tr></table></figure></p>\n<p>有必要作些测试，确保修补是成功的，然后回到 master 分支并把它合并进来，然后发布到生产服务器。用 git merge 命令来进行合并：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div><div class=\"line\">$ git merge hotfix</div><div class=\"line\">Updating f42c576..3a0874c</div><div class=\"line\">Fast-forward</div><div class=\"line\"> README | 1 -</div><div class=\"line\"> 1 file changed, 1 deletion(-)</div></pre></td></tr></table></figure></p>\n<p>请注意，合并时出现了“Fast forward”的提示。由于当前 master 分支所在的提交对象是要并入的 hotfix 分支的直接上游，Git 只需把 master 分支指针直接右移。换句话说，如果顺着一个分支走下去可以到达另一个分支的话，那么 Git 在合并两者时，只会简单地把指针右移，因为这种单线的历史分支不存在任何需要解决的分歧，所以这种合并过程可以称为快进（Fast forward）。</p>\n<p>现在最新的修改已经在当前 master 分支所指向的提交对象中了，可以部署到生产服务器上去了.</p>\n<p>在那个超级重要的修补发布以后，你想要回到被打扰之前的工作。由于当前 hotfix 分支和 master 都指向相同的提交对象，所以 hotfix 已经完成了历史使命，可以删掉了。使用 git branch 的 -d 选项执行删除操作：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git branch <span class=\"_\">-d</span> hotfix</div><div class=\"line\">Deleted branch hotfix (was 3a0874c).</div></pre></td></tr></table></figure></p>\n<p>现在回到之前未完成的 #53 问题修复分支上继续工作<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git checkout iss53</div><div class=\"line\">Switched to branch <span class=\"string\">'iss53'</span></div><div class=\"line\">$ vim index.html</div><div class=\"line\">$ git commit <span class=\"_\">-a</span> -m <span class=\"string\">'finished the new footer [issue 53]'</span></div><div class=\"line\">[iss53 ad82d7a] finished the new footer [issue 53]</div><div class=\"line\"> 1 file changed, 1 insertion(+)</div></pre></td></tr></table></figure></p>\n<p>值得注意的是之前 hotfix 分支的修改内容尚未包含到 iss53 中来。如果需要纳入此次修补，可以用 git merge master 把 master 分支合并到 iss53；或者等 iss53 完成之后，再将 iss53 分支中的更新并入 master。</p>\n<h4 id=\"分支的合并\"><a href=\"#分支的合并\" class=\"headerlink\" title=\"分支的合并\"></a>分支的合并</h4><p>在问题 #53 相关的工作完成之后，可以合并回 master 分支。实际操作同前面合并 hotfix 分支差不多，只需回到 master 分支，运行 git merge 命令指定要合并进来的分支：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div><div class=\"line\">$ git merge iss53</div><div class=\"line\">Auto-merging README</div><div class=\"line\">Merge made by the <span class=\"string\">'recursive'</span> strategy.</div><div class=\"line\"> README | 1 +</div><div class=\"line\"> 1 file changed, 1 insertion(+)</div></pre></td></tr></table></figure></p>\n<p>请注意，这次合并操作的底层实现，并不同于之前 hotfix 的并入方式。因为这次你的开发历史是从更早的地方开始分叉的。由于当前 master 分支所指向的提交对象（C4）并不是 iss53 分支的直接祖先，Git 不得不进行一些额外处理。就此例而言，Git 会用两个分支的末端（C4 和 C5）以及它们的共同祖先（C2）进行一次简单的三方合并计算。图 3-16 用红框标出了 Git 用于合并的三个提交对象：<br><img src=\"/images/3_10.png\" alt=\"3_10\"><br>这次，Git 没有简单地把分支指针右移，而是对三方合并后的结果重新做一个新的快照，并自动创建一个指向它的提交对象（C6）（见图 3-17）。这个提交对象比较特殊，它有两个祖先（C4 和 C5）。</p>\n<p>值得一提的是 Git 可以自己裁决哪个共同祖先才是最佳合并基础；这和 CVS 或 Subversion（1.5 以后的版本）不同，它们需要开发者手工指定合并基础。所以此特性让 Git 的合并操作比其他系统都要简单不少。<br><img src=\"/images/3_11.png\" alt=\"3_11\"><br>既然之前的工作成果已经合并到 master 了，那么 iss53 也就没用了。你可以就此删除它，并在问题追踪系统里关闭该问题。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git branch <span class=\"_\">-d</span> iss53</div></pre></td></tr></table></figure></p>\n<h4 id=\"遇到冲突时的分支合并\"><a href=\"#遇到冲突时的分支合并\" class=\"headerlink\" title=\"遇到冲突时的分支合并\"></a>遇到冲突时的分支合并</h4><p>有时候合并操作并不会如此顺利。如果在不同的分支中都修改了同一个文件的同一部分，Git 就无法干净地把两者合到一起（译注：逻辑上说，这种问题只能由人来裁决。）。如果你在解决问题 #53 的过程中修改了 hotfix 中修改的部分，将得到类似下面的结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git merge iss53</div><div class=\"line\">Auto-merging index.html</div><div class=\"line\">CONFLICT (content): Merge conflict <span class=\"keyword\">in</span> index.html</div><div class=\"line\">Automatic merge failed; fix conflicts and <span class=\"keyword\">then</span> commit the result.</div></pre></td></tr></table></figure></p>\n<p>Git 作了合并，但没有提交，它会停下来等你解决冲突。要看看哪些文件在合并时发生冲突，可以用 git status 查阅：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">You have unmerged paths.</div><div class=\"line\">  (fix conflicts and run <span class=\"string\">\"git commit\"</span>)</div><div class=\"line\"></div><div class=\"line\">Unmerged paths:</div><div class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to mark resolution)</div><div class=\"line\"></div><div class=\"line\">        both modified:      index.html</div><div class=\"line\"></div><div class=\"line\">no changes added to commit (use <span class=\"string\">\"git add\"</span> and/or <span class=\"string\">\"git commit -a\"</span>)</div></pre></td></tr></table></figure></p>\n<p>任何包含未解决冲突的文件都会以未合并（unmerged）的状态列出。Git 会在有冲突的文件里加入标准的冲突解决标记，可以通过它们来手工定位并解决这些冲突。可以看到此文件包含类似下面这样的部分：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</div><div class=\"line\">&lt;div id=<span class=\"string\">\"footer\"</span>&gt;contact : email.support@github.com&lt;/div&gt;</div><div class=\"line\">=======</div><div class=\"line\">&lt;div id=<span class=\"string\">\"footer\"</span>&gt;</div><div class=\"line\">  please contact us at support@github.com</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; iss53</div></pre></td></tr></table></figure></p>\n<p>可以看到 ======= 隔开的上半部分，是 HEAD（即 master 分支，在运行 merge 命令时所切换到的分支）中的内容，下半部分是在 iss53 分支中的内容。解决冲突的办法无非是二者选其一或者由你亲自整合到一起。比如你可以通过把这段内容替换为下面这样来解决：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div id=<span class=\"string\">\"footer\"</span>&gt;</div><div class=\"line\">please contact us at email.support@github.com</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>这个解决方案各采纳了两个分支中的一部分内容，而且我还删除了 &lt;&lt;&lt;&lt;&lt;&lt;&lt;，======= 和 &gt;&gt;&gt;&gt;&gt;&gt;&gt; 这些行。在解决了所有文件里的所有冲突后，运行 git add 将把它们标记为已解决状态（译注：实际上就是来一次快照保存到暂存区域。）。因为一旦暂存，就表示冲突已经解决。如果你想用一个有图形界面的工具来解决这些问题，不妨运行 git mergetool，它会调用一个可视化的合并工具并引导你解决所有冲突：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git mergetool</div><div class=\"line\"></div><div class=\"line\">This message is displayed because <span class=\"string\">'merge.tool'</span> is not configured.</div><div class=\"line\">See <span class=\"string\">'git mergetool --tool-help'</span> or <span class=\"string\">'git help config'</span> <span class=\"keyword\">for</span> more details.</div><div class=\"line\"><span class=\"string\">'git mergetool'</span> will now attempt to use one of the following tools:</div><div class=\"line\">opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc3 codecompare vimdiff emerge</div><div class=\"line\">Merging:</div><div class=\"line\">index.html</div><div class=\"line\"></div><div class=\"line\">Normal merge conflict <span class=\"keyword\">for</span> <span class=\"string\">'index.html'</span>:</div><div class=\"line\">  &#123;<span class=\"built_in\">local</span>&#125;: modified file</div><div class=\"line\">  &#123;remote&#125;: modified file</div><div class=\"line\">Hit <span class=\"built_in\">return</span> to start merge resolution tool (opendiff):</div></pre></td></tr></table></figure></p>\n<p>如果不想用默认的合并工具（Git 为我默认选择了 opendiff，因为我在 Mac 上运行了该命令），你可以在上方”merge tool candidates”里找到可用的合并工具列表，输入你想用的工具名。我们将在第七章讨论怎样改变环境中的默认值。</p>\n<p>退出合并工具以后，Git 会询问你合并是否成功。如果回答是，它会为你把相关文件暂存起来，以表明状态为已解决。</p>\n<p>再运行一次 git status 来确认所有冲突都已解决：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Changes to be committed:</div><div class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</div><div class=\"line\"></div><div class=\"line\">        modified:   index.html</div></pre></td></tr></table></figure></p>\n<p>如果觉得满意了，并且确认所有冲突都已解决，也就是进入了暂存区，就可以用 git commit 来完成这次合并提交。提交的记录差不多是这样：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">Merge branch <span class=\"string\">'iss53'</span></div><div class=\"line\"></div><div class=\"line\">Conflicts:</div><div class=\"line\">  index.html</div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># It looks like you may be committing a merge.</span></div><div class=\"line\"><span class=\"comment\"># If this is not correct, please remove the file</span></div><div class=\"line\"><span class=\"comment\">#       .git/MERGE_HEAD</span></div><div class=\"line\"><span class=\"comment\"># and try again.</span></div><div class=\"line\"><span class=\"comment\">#</span></div></pre></td></tr></table></figure></p>\n<p>如果想给将来看这次合并的人一些方便，可以修改该信息，提供更多合并细节。比如你都作了哪些改动，以及这么做的原因。有时候裁决冲突的理由并不直接或明显，有必要略加注解。</p>\n<h3 id=\"分支的管理\"><a href=\"#分支的管理\" class=\"headerlink\" title=\"分支的管理\"></a>分支的管理</h3><p>到目前为止，你已经学会了如何创建、合并和删除分支。除此之外，我们还需要学习如何管理分支，在日后的常规工作中会经常用到下面介绍的管理命令。</p>\n<p>git branch 命令不仅仅能创建和删除分支，如果不加任何参数，它会给出当前所有分支的清单：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git branch</div><div class=\"line\">  iss53</div><div class=\"line\">* master</div><div class=\"line\">  testing</div></pre></td></tr></table></figure></p>\n<p>注意看 master 分支前的 * 字符：它表示当前所在的分支。也就是说，如果现在提交更新，master 分支将随着开发进度前移。若要查看各个分支最后一个提交对象的信息，运行 git branch -v：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git branch -v</div><div class=\"line\">  iss53   93b412c fix javascript issue</div><div class=\"line\">* master  7a98805 Merge branch <span class=\"string\">'iss53'</span></div><div class=\"line\">  testing 782fd34 add scott to the author list <span class=\"keyword\">in</span> the readmes</div></pre></td></tr></table></figure></p>\n<p>要从该清单中筛选出你已经（或尚未）与当前分支合并的分支，可以用 –merged 和 –no-merged 选项（Git 1.5.6 以上版本）。比如用 git branch –merged 查看哪些分支已被并入当前分支（译注：也就是说哪些分支是当前分支的直接上游。）：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git branch --merged</div><div class=\"line\">  iss53</div><div class=\"line\">* master</div></pre></td></tr></table></figure></p>\n<p>之前我们已经合并了 iss53，所以在这里会看到它。一般来说，列表中没有 * 的分支通常都可以用 git branch -d 来删掉。原因很简单，既然已经把它们所包含的工作整合到了其他分支，删掉也不会损失什么。</p>\n<p>另外可以用 git branch –no-merged 查看尚未合并的工作：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git branch --no-merged</div><div class=\"line\">  testing</div></pre></td></tr></table></figure></p>\n<p>它会显示还未合并进来的分支。由于这些分支中还包含着尚未合并进来的工作成果，所以简单地用 git branch -d 删除该分支会提示错误，因为那样做会丢失数据：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git branch <span class=\"_\">-d</span> testing</div><div class=\"line\">error: The branch <span class=\"string\">'testing'</span> is not fully merged.</div><div class=\"line\">If you are sure you want to delete it, run <span class=\"string\">'git branch -D testing'</span>.</div></pre></td></tr></table></figure></p>\n<p>不过，如果你确实想要删除该分支上的改动，可以用大写的删除选项 -D 强制执行，就像上面提示信息中给出的那样。</p>\n<h3 id=\"利用分支进行开发的工作流程\"><a href=\"#利用分支进行开发的工作流程\" class=\"headerlink\" title=\"利用分支进行开发的工作流程\"></a>利用分支进行开发的工作流程</h3><p>现在我们已经学会了新建分支和合并分支，可以（或应该）用它来做点什么呢？在本节，我们会介绍一些利用分支进行开发的工作流程。而正是由于分支管理的便捷，才衍生出了这类典型的工作模式，你可以根据项目的实际情况选择一种用用看。</p>\n<h4 id=\"长期分支\"><a href=\"#长期分支\" class=\"headerlink\" title=\"长期分支\"></a>长期分支</h4><p>由于 Git 使用简单的三方合并，所以就算在较长一段时间内，反复多次把某个分支合并到另一分支，也不是什么难事。也就是说，你可以同时拥有多个开放的分支，每个分支用于完成特定的任务，随着开发的推进，你可以随时把某个特性分支的成果并到其他分支中。</p>\n<p>许多使用 Git 的开发者都喜欢用这种方式来开展工作，比如仅在 master 分支中保留完全稳定的代码，即已经发布或即将发布的代码。与此同时，他们还有一个名为 develop 或 next 的平行分支，专门用于后续的开发，或仅用于稳定性测试 — 当然并不是说一定要绝对稳定，不过一旦进入某种稳定状态，便可以把它合并到 master 里。这样，在确保这些已完成的特性分支（短期分支，比如之前的 iss53 分支）能够通过所有测试，并且不会引入更多错误之后，就可以并到主干分支中，等待下一次的发布。</p>\n<p>本质上我们刚才谈论的，是随着提交对象不断右移的指针。稳定分支的指针总是在提交历史中落后一大截，而前沿分支总是比较靠前（见图 3-18）。<br><img src=\"/images/3_18.png\" alt=\"3_18\"><br>你可以用这招维护不同层次的稳定性。某些大项目还会有个 proposed（建议）或 pu（proposed updates，建议更新）分支，它包含着那些可能还没有成熟到进入 next 或 master 的内容。这么做的目的是拥有不同层次的稳定性：当这些分支进入到更稳定的水平时，再把它们合并到更高层分支中去。再次说明下，使用多个长期分支的做法并非必需，不过一般来说，对于特大型项目或特复杂的项目，这么做确实更容易管理。</p>\n<h4 id=\"特性分支\"><a href=\"#特性分支\" class=\"headerlink\" title=\"特性分支\"></a>特性分支</h4><p>在任何规模的项目中都可以使用特性（Topic）分支。一个特性分支是指一个短期的，用来实现单一特性或与其相关工作的分支。可能你在以前的版本控制系统里从未做过类似这样的事情，因为通常创建与合并分支消耗太大。然而在 Git 中，一天之内建立、使用、合并再删除多个分支是常见的事。</p>\n<p>我们在上节的例子里已经见过这种用法了。我们创建了 iss53 和 hotfix 这两个特性分支，在提交了若干更新后，把它们合并到主干分支，然后删除。该技术允许你迅速且完全的进行语境切换 — 因为你的工作分散在不同的流水线里，每个分支里的改变都和它的目标特性相关，浏览代码之类的事情因而变得更简单了。你可以把作出的改变保持在特性分支中几分钟，几天甚至几个月，等它们成熟以后再合并，而不用在乎它们建立的顺序或者进度。</p>\n<p>现在我们来看一个实际的例子。请看图 3-20，由下往上，起先我们在 master 工作到 C1，然后开始一个新分支 iss91 尝试修复 91 号缺陷，提交到 C6 的时候，又冒出一个解决该问题的新办法，于是从之前 C4 的地方又分出一个分支 iss91v2，干到 C8 的时候，又回到主干 master 中提交了 C9 和 C10，再回到 iss91v2 继续工作，提交 C11，接着，又冒出个不太确定的想法，从 master 的最新提交 C10 处开了个新的分支 dumbidea 做些试验。<br><img src=\"/images/3_20.png\" alt=\"3_20\"><br>现在，假定两件事情：我们最终决定使用第二个解决方案，即 iss91v2 中的办法；另外，我们把 dumbidea 分支拿给同事们看了以后，发现它竟然是个天才之作。所以接下来，我们准备抛弃原来的 iss91 分支（实际上会丢弃 C5 和 C6），直接在主干中并入另外两个分支。最终的提交历史将变成图 3-21 这样：<br><img src=\"/images/3_21.png\" alt=\"3_21\"><br>请务必牢记这些分支全部都是本地分支，这一点很重要。当你在使用分支及合并的时候，一切都是在你自己的 Git 仓库中进行的 — 完全不涉及与服务器的交互。</p>\n<h3 id=\"远程分支\"><a href=\"#远程分支\" class=\"headerlink\" title=\"远程分支\"></a>远程分支</h3><p>远程分支（remote branch）是对远程仓库中的分支的索引。它们是一些无法移动的本地分支；只有在 Git 进行网络交互时才会更新。远程分支就像是书签，提醒着你上次连接远程仓库时上面各分支的位置。</p>\n<p>我们用 (远程仓库名)/(分支名) 这样的形式表示远程分支。比如我们想看看上次同 origin 仓库通讯时 master 分支的样子，就应该查看 origin/master 分支。如果你和同伴一起修复某个问题，但他们先推送了一个 iss53 分支到远程仓库，虽然你可能也有一个本地的 iss53 分支，但指向服务器上最新更新的却应该是 origin/iss53 分支。</p>\n<p>可能有点乱，我们不妨举例说明。假设你们团队有个地址为 git.ourcompany.com 的 Git 服务器。如果你从这里克隆，Git 会自动为你将此远程仓库命名为 origin，并下载其中所有的数据，建立一个指向它的 master 分支的指针，在本地命名为 origin/master，但你无法在本地更改其数据。接着，Git 建立一个属于你自己的本地 master 分支，始于 origin 上 master 分支相同的位置，你可以就此开始工作（见图 3-22）：<br>可能有点乱，我们不妨举例说明。假设你们团队有个地址为 git.ourcompany.com 的 Git 服务器。如果你从这里克隆，Git 会自动为你将此远程仓库命名为 origin，并下载其中所有的数据，建立一个指向它的 master 分支的指针，在本地命名为 origin/master，但你无法在本地更改其数据。接着，Git 建立一个属于你自己的本地 master 分支，始于 origin 上 master 分支相同的位置，你可以就此开始工作（见图 3-22）：<br><img src=\"/images/3_22.png\" alt=\"3_22\"><br>如果你在本地 master 分支做了些改动，与此同时，其他人向 git.ourcompany.com 推送了他们的更新，那么服务器上的 master 分支就会向前推进，而与此同时，你在本地的提交历史正朝向不同方向发展。不过只要你不和服务器通讯，你的 origin/master 指针仍然保持原位不会移动（见图 3-23）。<br><img src=\"/images/3_23.png\" alt=\"3_23\"><br>图 3-23. 在本地工作的同时有人向远程仓库推送内容会让提交历史开始分流。<br>可以运行 git fetch origin 来同步远程服务器上的数据到本地。该命令首先找到 origin 是哪个服务器（本例为 git.ourcompany.com），从上面获取你尚未拥有的数据，更新你本地的数据库，然后把 origin/master 的指针移到它最新的位置上（见图 3-24）。<br><img src=\"/images/3_24.png\" alt=\"3_24\"><br>为了演示拥有多个远程分支（在不同的远程服务器上）的项目是如何工作的，我们假设你还有另一个仅供你的敏捷开发小组使用的内部服务器 git.team1.ourcompany.com。可以用第二章中提到的 git remote add 命令把它加为当前项目的远程分支之一。我们把它命名为 teamone，以便代替完整的 Git URL 以方便使用（见图 3-25）。<br><img src=\"/images/3_25.png\" alt=\"3_25\"><br>现在你可以用 git fetch teamone 来获取小组服务器上你还没有的数据了。由于当前该服务器上的内容是你 origin 服务器上的子集，Git 不会下载任何数据，而只是简单地创建一个名为 teamone/master 的远程分支，指向 teamone 服务器上 master 分支所在的提交对象 31b8e（见图 3-26）。<br><img src=\"/images/3_26.png\" alt=\"3_26\"></p>\n<h4 id=\"推送本地分支\"><a href=\"#推送本地分支\" class=\"headerlink\" title=\"推送本地分支\"></a>推送本地分支</h4><p>要想和其他人分享某个本地分支，你需要把它推送到一个你拥有写权限的远程仓库。你创建的本地分支不会因为你的写入操作而被自动同步到你引入的远程服务器上，你需要明确地执行推送分支的操作。换句话说，对于无意分享的分支，你尽管保留为私人分支好了，而只推送那些协同工作要用到的特性分支。</p>\n<p>如果你有个叫 serverfix 的分支需要和他人一起开发，可以运行 git push (远程仓库名) (分支名)：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git push origin serverfix</div><div class=\"line\">Counting objects: 20, done.</div><div class=\"line\">Compressing objects: 100% (14/14), done.</div><div class=\"line\">Writing objects: 100% (15/15), 1.74 KiB, done.</div><div class=\"line\">Total 15 (delta 5), reused 0 (delta 0)</div><div class=\"line\">To git@github.com:schacon/simplegit.git</div><div class=\"line\"> * [new branch]      serverfix -&gt; serverfix</div></pre></td></tr></table></figure></p>\n<p>这里其实走了一点捷径。Git 自动把 serverfix 分支名扩展为 refs/heads/serverfix:refs/heads/serverfix，意为“取出我在本地的 serverfix 分支，推送到远程仓库的 serverfix 分支中去”。我们将在第九章进一步介绍 refs/heads/ 部分的细节，不过一般使用的时候都可以省略它。也可以运行 git push origin serverfix:serverfix 来实现相同的效果，它的意思是“上传我本地的 serverfix 分支到远程仓库中去，仍旧称它为 serverfix 分支”。通过此语法，你可以把本地分支推送到某个命名不同的远程分支：若想把远程分支叫作 awesomebranch，可以用 git push origin serverfix:awesomebranch 来推送数据。</p>\n<p>接下来，当你的协作者再次从服务器上获取数据时，他们将得到一个新的远程分支 origin/serverfix，并指向服务器上 serverfix 所指向的版本：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git fetch origin</div><div class=\"line\">remote: Counting objects: 20, done.</div><div class=\"line\">remote: Compressing objects: 100% (14/14), done.</div><div class=\"line\">remote: Total 15 (delta 5), reused 0 (delta 0)</div><div class=\"line\">Unpacking objects: 100% (15/15), done.</div><div class=\"line\">From git@github.com:schacon/simplegit</div><div class=\"line\"> * [new branch]      serverfix    -&gt; origin/serverfix</div></pre></td></tr></table></figure></p>\n<p>值得注意的是，在 fetch 操作下载好新的远程分支之后，你仍然无法在本地编辑该远程仓库中的分支。换句话说，在本例中，你不会有一个新的 serverfix 分支，有的只是一个你无法移动的 origin/serverfix 指针。</p>\n<p>如果要把该远程分支的内容合并到当前分支，可以运行 git merge origin/serverfix。如果想要一份自己的 serverfix 来开发，可以在远程分支的基础上分化出一个新的分支来：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git checkout -b serverfix origin/serverfix</div><div class=\"line\">Branch serverfix <span class=\"built_in\">set</span> up to track remote branch serverfix from origin.</div><div class=\"line\">Switched to a new branch <span class=\"string\">'serverfix'</span></div></pre></td></tr></table></figure></p>\n<p>这会切换到新建的 serverfix 本地分支，其内容同远程分支 origin/serverfix 一致，这样你就可以在里面继续开发了。</p>\n<h4 id=\"跟踪远程分支\"><a href=\"#跟踪远程分支\" class=\"headerlink\" title=\"跟踪远程分支\"></a>跟踪远程分支</h4><p>从远程分支 checkout 出来的本地分支，称为 跟踪分支 (tracking branch)。跟踪分支是一种和某个远程分支有直接联系的本地分支。在跟踪分支里输入 git push，Git 会自行推断应该向哪个服务器的哪个分支推送数据。同样，在这些分支里运行 git pull 会获取所有远程索引，并把它们的数据都合并到本地分支中来。</p>\n<p>在克隆仓库时，Git 通常会自动创建一个名为 master 的分支来跟踪 origin/master。这正是 git push 和 git pull 一开始就能正常工作的原因。当然，你可以随心所欲地设定为其它跟踪分支，比如 origin 上除了 master 之外的其它分支。刚才我们已经看到了这样的一个例子：git checkout -b [分支名] [远程名]/[分支名]。如果你有 1.6.2 以上版本的 Git，还可以用 –track 选项简化：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git checkout --track origin/serverfix</div><div class=\"line\">Branch serverfix <span class=\"built_in\">set</span> up to track remote branch serverfix from origin.</div><div class=\"line\">Switched to a new branch <span class=\"string\">'serverfix'</span></div></pre></td></tr></table></figure></p>\n<p>要为本地分支设定不同于远程分支的名字，只需在第一个版本的命令里换个名字：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git checkout -b sf origin/serverfix</div><div class=\"line\">Branch sf <span class=\"built_in\">set</span> up to track remote branch serverfix from origin.</div><div class=\"line\">Switched to a new branch <span class=\"string\">'sf'</span></div></pre></td></tr></table></figure></p>\n<p>现在你的本地分支 sf 会自动将推送和抓取数据的位置定位到 origin/serverfix 了。</p>\n<h4 id=\"删除远程分支\"><a href=\"#删除远程分支\" class=\"headerlink\" title=\"删除远程分支\"></a>删除远程分支</h4><p>如果不再需要某个远程分支了，比如搞定了某个特性并把它合并进了远程的 master 分支（或任何其他存放稳定代码的分支），可以用这个非常无厘头的语法来删除它：git push [远程名] :[分支名]。如果想在服务器上删除 serverfix 分支，运行下面的命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git push origin :serverfix</div><div class=\"line\">To git@github.com:schacon/simplegit.git</div><div class=\"line\"> - [deleted]         serverfix</div></pre></td></tr></table></figure></p>\n<p>咚！服务器上的分支没了。你最好特别留心这一页，因为你一定会用到那个命令，而且你很可能会忘掉它的语法。有种方便记忆这条命令的方法：记住我们不久前见过的 git push [远程名] [本地分支]:[远程分支] 语法，如果省略 [本地分支]，那就等于是在说“在这里提取空白然后把它变成[远程分支]”。</p>\n<h3 id=\"分支的衍合\"><a href=\"#分支的衍合\" class=\"headerlink\" title=\"分支的衍合\"></a>分支的衍合</h3><p>把一个分支中的修改整合到另一个分支的办法有两种：merge 和 rebase（译注：rebase 的翻译暂定为“衍合”，大家知道就可以了。）。在本章我们会学习什么是衍合，如何使用衍合，为什么衍合操作如此富有魅力，以及我们应该在什么情况下使用衍合。</p>\n<h4 id=\"基本的衍合操作\"><a href=\"#基本的衍合操作\" class=\"headerlink\" title=\"基本的衍合操作\"></a>基本的衍合操作</h4><p><img src=\"/images/3_27.png\" alt=\"3_27\"><br><img src=\"/images/3_28.png\" alt=\"3_28\"><br>在上面这个例子中，运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git checkout experiment</div><div class=\"line\">$ git rebase master</div><div class=\"line\">First, rewinding head to replay your work on top of it...</div><div class=\"line\">Applying: added staged <span class=\"built_in\">command</span></div></pre></td></tr></table></figure></p>\n<p>它的原理是回到两个分支最近的共同祖先，根据当前分支（也就是要进行衍合的分支 experiment）后续的历次提交对象（这里只有一个 C3），生成一系列文件补丁，然后以基底分支（也就是主干分支 master）最后一个提交对象（C4）为新的出发点，逐个应用之前准备好的补丁文件，最后会生成一个新的合并提交对象（C3’），从而改写 experiment 的提交历史，使它成为 master 分支的直接下游，如图 3-29 所示：<br><img src=\"/images/3_30.png\" alt=\"3_30\"><br>现在的 C3’ 对应的快照，其实和普通的三方合并，即上个例子中的 C5 对应的快照内容一模一样了。虽然最后整合得到的结果没有任何区别，但衍合能产生一个更为整洁的提交历史。如果视察一个衍合过的分支的历史记录，看起来会更清楚：仿佛所有修改都是在一根线上先后进行的，尽管实际上它们原本是同时并行发生的。</p>\n<p>一般我们使用衍合的目的，是想要得到一个能在远程分支上干净应用的补丁 — 比如某些项目你不是维护者，但想帮点忙的话，最好用衍合：先在自己的一个分支里进行开发，当准备向主项目提交补丁的时候，根据最新的 origin/master 进行一次衍合操作然后再提交，这样维护者就不需要做任何整合工作（译注：实际上是把解决分支补丁同最新主干代码之间冲突的责任，化转为由提交补丁的人来解决。），只需根据你提供的仓库地址作一次快进合并，或者直接采纳你提交的补丁。</p>\n<p>请注意，合并结果中最后一次提交所指向的快照，无论是通过衍合，还是三方合并，都会得到相同的快照内容，只不过提交历史不同罢了。衍合是按照每行的修改次序重演一遍修改，而合并是把最终结果合在一起。</p>\n<h4 id=\"有趣的衍合\"><a href=\"#有趣的衍合\" class=\"headerlink\" title=\"有趣的衍合\"></a>有趣的衍合</h4><p>衍合也可以放到其他分支进行，并不一定非得根据分化之前的分支。以图 3-31 的历史为例，我们为了给服务器端代码添加一些功能而创建了特性分支 server，然后提交 C3 和 C4。然后又从 C3 的地方再增加一个 client 分支来对客户端代码进行一些相应修改，所以提交了 C8 和 C9。最后，又回到 server 分支提交了 C10。<br><img src=\"/images/3_31.png\" alt=\"3_31\"><br>假设在接下来的一次软件发布中，我们决定先把客户端的修改并到主线中，而暂缓并入服务端软件的修改（因为还需要进一步测试）。这个时候，我们就可以把基于 client 分支而非 server 分支的改变（即 C8 和 C9），跳过 server 直接放到 master 分支中重演一遍，但这需要用 git rebase 的 –onto 选项指定新的基底分支 master：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git rebase --onto master server client</div></pre></td></tr></table></figure></p>\n<p>这好比在说：“取出 client 分支，找出 client 分支和 server 分支的共同祖先之后的变化，然后把它们在 master 上重演一遍”。是不是有点复杂？不过它的结果如图 3-32 所示，非常酷（译注：虽然 client 里的 C8, C9 在 C3 之后，但这仅表明时间上的先后，而非在 C3 修改的基础上进一步改动，因为 server 和 client 这两个分支对应的代码应该是两套文件，虽然这么说不是很严格，但应理解为在 C3 时间点之后，对另外的文件所做的 C8，C9 修改，放到主干重演。）：<br><img src=\"/images/3_32.png\" alt=\"3_32\"><br>现在可以快进 master 分支了（见图 3-33）：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git checkout master</div><div class=\"line\">$ git merge client</div></pre></td></tr></table></figure></p>\n<p>现在我们决定把 server 分支的变化也包含进来。我们可以直接把 server 分支衍合到 master，而不用手工切换到 server 分支后再执行衍合操作 — git rebase [主分支] [特性分支] 命令会先取出特性分支 server，然后在主分支 master 上重演：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git rebase master server</div></pre></td></tr></table></figure></p>\n<p>现在 client 和 server 分支的变化都已经集成到主干分支来了，可以删掉它们了。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git branch <span class=\"_\">-d</span> client</div><div class=\"line\">$ git branch <span class=\"_\">-d</span> server</div></pre></td></tr></table></figure></p>\n<h4 id=\"衍合的风险\"><a href=\"#衍合的风险\" class=\"headerlink\" title=\"衍合的风险\"></a>衍合的风险</h4><p>呃，奇妙的衍合也并非完美无缺，要用它得遵守一条准则：</p>\n<p><strong>一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行衍合操作。</strong></p>\n<p>如果你遵循这条金科玉律，就不会出差错。否则，人民群众会仇恨你，你的朋友和家人也会嘲笑你，唾弃你。</p>\n<p>在进行衍合的时候，实际上抛弃了一些现存的提交对象而创造了一些类似但不同的新的提交对象。如果你把原来分支中的提交对象发布出去，并且其他人更新下载后在其基础上开展工作，而稍后你又用 git rebase 抛弃这些提交对象，把新的重演后的提交对象发布出去的话，你的合作者就不得不重新合并他们的工作，这样当你再次从他们那里获取内容时，提交历史就会变得一团糟。</p>\n<p>下面我们用一个实际例子来说明为什么公开的衍合会带来问题。假设你从一个中央服务器克隆然后在它的基础上搞了一些开发，提交历史类似图 3-36 所示：<br><img src=\"/images/3_36.png\" alt=\"3_36\"><br><img src=\"/images/3_37.png\" alt=\"3_37\"><br><img src=\"/images/3_38.png\" alt=\"3_38\"><br><img src=\"/images/3_39.png\" alt=\"3_39\"><br>C8 这一步的合并是迟早会发生的，因为只有这样你才能和其他协作者提交的内容保持同步。而在 C8 之后，你的提交历史里就会同时包含 C4 和 C4’，两者有着不同的 SHA-1 校验值，如果用 git log 查看历史，会看到两个提交拥有相同的作者日期与说明，令人费解。而更糟的是，当你把这样的历史推送到服务器后，会再次把这些衍合后的提交引入到中央服务器，进一步困扰其他人（译注：这个例子中，出问题的责任方是那个发布了 C6 后又用衍合发布 C4’ 的人，其他人会因此反馈双重历史到共享主干，从而混淆大家的视听。）。</p>\n<p>如果把衍合当成一种在推送之前清理提交历史的手段，而且仅仅衍合那些尚未公开的提交对象，就没问题。如果衍合那些已经公开的提交对象，并且已经有人基于这些提交对象开展了后续开发工作的话，就会出现叫人沮丧的麻烦。</p>\n<h2 id=\"服务器上的Git\"><a href=\"#服务器上的Git\" class=\"headerlink\" title=\"服务器上的Git\"></a>服务器上的Git</h2><h3 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h3><p>Git 可以使用四种主要的协议来传输数据：本地传输，SSH 协议，Git 协议和 HTTP 协议。下面分别介绍一下哪些情形应该使用（或避免使用）这些协议。</p>\n<p>值得注意的是，除了 HTTP 协议外，其他所有协议都要求在服务器端安装并运行 Git。</p>\n<h4 id=\"本地协议\"><a href=\"#本地协议\" class=\"headerlink\" title=\"本地协议\"></a>本地协议</h4><p>最基本的就是本地协议（Local protocol），所谓的远程仓库在该协议中的表示，就是硬盘上的另一个目录。这常见于团队每一个成员都对一个共享的文件系统（例如 NFS）拥有访问权，或者比较少见的多人共用同一台电脑的情况。后面一种情况并不安全，因为所有代码仓库实例都储存在同一台电脑里，增加了灾难性数据损失的可能性。</p>\n<p>如果你使用一个共享的文件系统，就可以在一个本地文件系统中克隆仓库，推送和获取。克隆的时候只需要将远程仓库的路径作为 URL 使用，比如下面这样：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> /opt/git/project.git</div></pre></td></tr></table></figure></p>\n<p>或者这样：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> file:///opt/git/project.git</div></pre></td></tr></table></figure></p>\n<p>如果在 URL 开头明确使用 file:// ，那么 Git 会以一种略微不同的方式运行。如果你只给出路径，Git 会尝试使用硬链接或直接复制它所需要的文件。如果使用了 file:// ，Git 会调用它平时通过网络来传输数据的工序，而这种方式的效率相对较低。使用 file:// 前缀的主要原因是当你需要一个不包含无关引用或对象的干净仓库副本的时候 — 一般指从其他版本控制系统导入的，或类似情形（参见第 9 章的维护任务）。我们这里仅仅使用普通路径，这样更快。</p>\n<p>要添加一个本地仓库作为现有 Git 项目的远程仓库，可以这样做：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git remote add local_proj /opt/git/project.git</div></pre></td></tr></table></figure></p>\n<p>然后就可以像在网络上一样向这个远程仓库推送和获取数据了。<br><strong>优点</strong></p>\n<p>基于文件仓库的优点在于它的简单，同时保留了现存文件的权限和网络访问权限。如果你的团队已经有一个全体共享的文件系统，建立仓库就十分容易了。你只需把一份裸仓库的副本放在大家都能访问的地方，然后像对其他共享目录一样设置读写权限就可以了。我们将在下一节“在服务器上部署 Git ”中讨论如何导出一个裸仓库的副本。</p>\n<p>这也是从别人工作目录中获取工作成果的快捷方法。假如你和你的同事在一个项目中合作，他们想让你检出一些东西的时候，运行类似 git pull /home/john/project 通常会比他们推送到服务器，而你再从服务器获取简单得多。</p>\n<p><strong>缺点</strong></p>\n<p>这种方法的缺点是，与基本的网络连接访问相比，难以控制从不同位置来的访问权限。如果你想从家里的笔记本电脑上推送，就要先挂载远程硬盘，这和基于网络连接的访问相比更加困难和缓慢。</p>\n<p>另一个很重要的问题是该方法不一定就是最快的，尤其是对于共享挂载的文件系统。本地仓库只有在你对数据访问速度快的时候才快。在同一个服务器上，如果二者同时允许 Git 访问本地硬盘，通过 NFS 访问仓库通常会比 SSH 慢。</p>\n<h4 id=\"SSH-协议\"><a href=\"#SSH-协议\" class=\"headerlink\" title=\"SSH 协议\"></a>SSH 协议</h4><p>Git 使用的传输协议中最常见的可能就是 SSH 了。这是因为大多数环境已经支持通过 SSH 对服务器的访问 — 即便还没有，架设起来也很容易。SSH 也是唯一一个同时支持读写操作的网络协议。另外两个网络协议（HTTP 和 Git）通常都是只读的，所以虽然二者对大多数人都可用，但执行写操作时还是需要 SSH。SSH 同时也是一个验证授权的网络协议；而因为其普遍性，一般架设和使用都很容易。</p>\n<p>通过 SSH 克隆一个 Git 仓库，你可以像下面这样给出 ssh:// 的 URL：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> ssh://user@server/project.git</div></pre></td></tr></table></figure></p>\n<p>或者不指明某个协议 — 这时 Git 会默认使用 SSH ：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> user@server:project.git</div></pre></td></tr></table></figure></p>\n<p>如果不指明用户，Git 会默认使用当前登录的用户名连接服务器。<br><strong>优点</strong></p>\n<p>使用 SSH 的好处有很多。首先，如果你想拥有对网络仓库的写权限，基本上不可能不使用 SSH。其次，SSH 架设相对比较简单 — SSH 守护进程很常见，很多网络管理员都有一些使用经验，而且很多操作系统都自带了它或者相关的管理工具。再次，通过 SSH 进行访问是安全的 — 所有数据传输都是加密和授权的。最后，和 Git 及本地协议一样，SSH 也很高效，会在传输之前尽可能压缩数据。</p>\n<p><strong>缺点</strong></p>\n<p>SSH 的限制在于你不能通过它实现仓库的匿名访问。即使仅为读取数据，人们也必须在能通过 SSH 访问主机的前提下才能访问仓库，这使得 SSH 不利于开源的项目。如果你仅仅在公司网络里使用，SSH 可能是你唯一需要使用的协议。如果想允许对项目的匿名只读访问，那么除了为自己推送而架设 SSH 协议之外，还需要支持其他协议以便他人访问读取。</p>\n<h4 id=\"Git-协议\"><a href=\"#Git-协议\" class=\"headerlink\" title=\"Git 协议\"></a>Git 协议</h4><p>接下来是 Git 协议。这是一个包含在 Git 软件包中的特殊守护进程； 它会监听一个提供类似于 SSH 服务的特定端口（9418），而无需任何授权。打算支持 Git 协议的仓库，需要先创建 git-daemon-export-ok 文件 — 它是协议进程提供仓库服务的必要条件 — 但除此之外该服务没有什么安全措施。要么所有人都能克隆 Git 仓库，要么谁也不能。这也意味着该协议通常不能用来进行推送。你可以允许推送操作；然而由于没有授权机制，一旦允许该操作，网络上任何一个知道项目 URL 的人将都有推送权限。不用说，这是十分罕见的情况。</p>\n<p><strong>优点</strong></p>\n<p>Git 协议是现存最快的传输协议。如果你在提供一个有很大访问量的公共项目，或者一个不需要对读操作进行授权的庞大项目，架设一个 Git 守护进程来供应仓库是个不错的选择。它使用与 SSH 协议相同的数据传输机制，但省去了加密和授权的开销。</p>\n<p><strong>缺点</strong></p>\n<p>Git 协议消极的一面是缺少授权机制。用 Git 协议作为访问项目的唯一方法通常是不可取的。一般的做法是，同时提供 SSH 接口，让几个开发者拥有推送（写）权限，其他人通过 git:// 拥有只读权限。 Git 协议可能也是最难架设的协议。它要求有单独的守护进程，需要定制 — 我们将在本章的 “Gitosis” 一节详细介绍它的架设 — 需要设定 xinetd 或类似的程序，而这些工作就没那么轻松了。该协议还要求防火墙开放 9418 端口，而企业级防火墙一般不允许对这个非标准端口的访问。大型企业级防火墙通常会封锁这个少见的端口。</p>\n<h4 id=\"HTTP-S-协议\"><a href=\"#HTTP-S-协议\" class=\"headerlink\" title=\"HTTP/S 协议\"></a>HTTP/S 协议</h4><p>最后还有 HTTP 协议。HTTP 或 HTTPS 协议的优美之处在于架设的简便性。基本上，只需要把 Git 的裸仓库文件放在 HTTP 的根目录下，配置一个特定的 post-update 挂钩（hook）就可以搞定（Git 挂钩的细节见第 7 章）。此后，每个能访问 Git 仓库所在服务器上 web 服务的人都可以进行克隆操作。下面的操作可以允许通过 HTTP 对仓库进行读取：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> /var/www/htdocs/</div><div class=\"line\">$ git <span class=\"built_in\">clone</span> --bare /path/to/git_project gitproject.git</div><div class=\"line\">$ <span class=\"built_in\">cd</span> gitproject.git</div><div class=\"line\">$ mv hooks/post-update.sample hooks/post-update</div><div class=\"line\">$ chmod a+x hooks/post-update</div></pre></td></tr></table></figure></p>\n<p>这样就可以了。Git 附带的 post-update 挂钩会默认运行合适的命令（git update-server-info）来确保通过 HTTP 的获取和克隆正常工作。这条命令在你用 SSH 向仓库推送内容时运行；之后，其他人就可以用下面的命令来克隆仓库：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> http://example.com/gitproject.git</div></pre></td></tr></table></figure></p>\n<p>在本例中，我们使用了 Apache 设定中常用的 /var/www/htdocs 路径，不过你可以使用任何静态 web 服务 — 把裸仓库放在它的目录里就行。 Git 的数据是以最基本的静态文件的形式提供的（关于如何提供文件的详情见第 9 章）。</p>\n<p>通过 HTTP 进行推送操作也是可能的，不过这种做法不太常见，并且牵扯到复杂的 WebDAV 设定。由于很少用到，本书将略过对该内容的讨论。如果对 HTTP 推送协议感兴趣，不妨打开这个地址看一下操作方法：<a href=\"http://www.kernel.org/pub/software/scm/git/docs/howto/setup-git-server-over-http.txt\">http://www.kernel.org/pub/software/scm/git/docs/howto/setup-git-server-over-http.txt</a> 。通过 HTTP 推送的好处之一是你可以使用任何 WebDAV 服务器，不需要为 Git 设定特殊环境；所以如果主机提供商支持通过 WebDAV 更新网站内容，你也可以使用这项功能。</p>\n<p><strong>优点</strong></p>\n<p>使用 HTTP 协议的好处是易于架设。几条必要的命令就可以让全世界读取到仓库的内容。花费不过几分钟。HTTP 协议不会占用过多服务器资源。因为它一般只用到静态的 HTTP 服务提供所有数据，普通的 Apache 服务器平均每秒能支撑数千个文件的并发访问 — 哪怕让一个小型服务器超载都很难。</p>\n<p>你也可以通过 HTTPS 提供只读的仓库，这意味着你可以加密传输内容；你甚至可以要求客户端使用特定签名的 SSL 证书。一般情况下，如果到了这一步，使用 SSH 公共密钥可能是更简单的方案；不过也存在一些特殊情况，这时通过 HTTPS 使用带签名的 SSL 证书或者其他基于 HTTP 的只读连接授权方式是更好的解决方案。</p>\n<p>HTTP 还有个额外的好处：HTTP 是一个如此常见的协议，以至于企业级防火墙通常都允许其端口的通信。</p>\n<p><strong>缺点</strong></p>\n<p>HTTP 协议的消极面在于，相对来说客户端效率更低。克隆或者下载仓库内容可能会花费更多时间，而且 HTTP 传输的体积和网络开销比其他任何一个协议都大。因为它没有按需供应的能力 — 传输过程中没有服务端的动态计算 — 因而 HTTP 协议经常会被称为傻瓜（dumb）协议。更多 HTTP 协议和其他协议效率上的差异见第 9 章。</p>\n<h3 id=\"在服务器上部署-Git\"><a href=\"#在服务器上部署-Git\" class=\"headerlink\" title=\"在服务器上部署 Git\"></a>在服务器上部署 Git</h3><p>开始架设 Git 服务器前，需要先把现有仓库导出为裸仓库 — 即一个不包含当前工作目录的仓库。做法直截了当，克隆时用 –bare 选项即可。裸仓库的目录名一般以 .git 结尾，像这样：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> --bare my_project my_project.git</div><div class=\"line\">Cloning into bare repository <span class=\"string\">'my_project.git'</span>...</div><div class=\"line\">done.</div></pre></td></tr></table></figure></p>\n<p>该命令的输出或许会让人有些不解。其实 clone 操作基本上相当于 git init 加 git fetch，所以这里出现的其实是 git init 的输出，先由它建立一个空目录，而之后传输数据对象的操作并无任何输出，只是悄悄在幕后执行。现在 my_project.git 目录中已经有了一份 Git 目录数据的副本。</p>\n<p>整体上的效果大致相当于：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ cp -Rf my_project/.git my_project.git</div></pre></td></tr></table></figure></p>\n<p>但在配置文件中有若干小改动，不过对用户来讲，使用方式都一样，不会有什么影响。它仅取出 Git 仓库的必要原始数据，存放在该目录中，而不会另外创建工作目录。</p>\n<h4 id=\"把裸仓库移到服务器上\"><a href=\"#把裸仓库移到服务器上\" class=\"headerlink\" title=\"把裸仓库移到服务器上\"></a>把裸仓库移到服务器上</h4><p>有了裸仓库的副本后，剩下的就是把它放到服务器上并设定相关协议。假设一个域名为 git.example.com 的服务器已经架设好，并可以通过 SSH 访问，我们打算把所有 Git 仓库储存在 /opt/git 目录下。只要把裸仓库复制过去：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ scp -r my_project.git user@git.example.com:/opt/git</div></pre></td></tr></table></figure></p>\n<p>现在，所有对该服务器有 SSH 访问权限，并可读取 /opt/git 目录的用户都可以用下面的命令克隆该项目：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> user@git.example.com:/opt/git/my_project.git</div></pre></td></tr></table></figure></p>\n<p>如果某个 SSH 用户对 /opt/git/my_project.git 目录有写权限，那他就有推送权限。如果到该项目目录中运行 git init 命令，并加上 –shared 选项，那么 Git 会自动修改该仓库目录的组权限为可写（译注：实际上 –shared 可以指定其他行为，只是默认为将组权限改为可写并执行 g+sx，所以最后会得到 rws。）。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ ssh user@git.example.com</div><div class=\"line\">$ <span class=\"built_in\">cd</span> /opt/git/my_project.git</div><div class=\"line\">$ git init --bare --shared</div></pre></td></tr></table></figure></p>\n<p>由此可见，根据现有的 Git 仓库创建一个裸仓库，然后把它放上你和同事都有 SSH 访问权的服务器是多么容易。现在已经可以开始在同一项目上密切合作了。</p>\n<p>值得注意的是，这的的确确是架设一个少数人具有连接权的 Git 服务的全部 — 只要在服务器上加入可以用 SSH 登录的帐号，然后把裸仓库放在大家都有读写权限的地方。一切都准备停当，无需更多。</p>\n<p>下面的几节中，你会了解如何扩展到更复杂的设定。这些内容包含如何避免为每一个用户建立一个账户，给仓库添加公共读取权限，架设网页界面，使用 Gitosis 工具等等。然而，只是和几个人在一个不公开的项目上合作的话，仅仅是一个 SSH 服务器和裸仓库就足够了，记住这点就可以了。</p>\n<h4 id=\"小型安装\"><a href=\"#小型安装\" class=\"headerlink\" title=\"小型安装\"></a>小型安装</h4><p>如果设备较少或者你只想在小型开发团队里尝试 Git ，那么一切都很简单。架设 Git 服务最复杂的地方在于账户管理。如果需要仓库对特定的用户可读，而给另一部分用户读写权限，那么访问和许可的安排就比较困难。</p>\n<p>SSH 连接</p>\n<p>如果已经有了一个所有开发成员都可以用 SSH 访问的服务器，架设第一个服务器将变得异常简单，几乎什么都不用做（正如上节中介绍的那样）。如果需要对仓库进行更复杂的访问控制，只要使用服务器操作系统的本地文件访问许可机制就行了。</p>\n<p>如果需要团队里的每个人都对仓库有写权限，又不能给每个人在服务器上建立账户，那么提供 SSH 连接就是唯一的选择了。我们假设用来共享仓库的服务器已经安装了 SSH 服务，而且你通过它访问服务器。</p>\n<p>有好几个办法可以让团队的每个人都有访问权。第一个办法是给每个人建立一个账户，直截了当但略过繁琐。反复运行 adduser 并给所有人设定临时密码可不是好玩的。</p>\n<p>第二个办法是在主机上建立一个 git 账户，让每个需要写权限的人发送一个 SSH 公钥，然后将其加入 git 账户的 ~/.ssh/authorized_keys 文件。这样一来，所有人都将通过 git 账户访问主机。这丝毫不会影响提交的数据 — 访问主机用的身份不会影响提交对象的提交者信息。</p>\n<p>另一个办法是让 SSH 服务器通过某个 LDAP 服务，或者其他已经设定好的集中授权机制，来进行授权。只要每个人都能获得主机的 shell 访问权，任何可用的 SSH 授权机制都能达到相同效果。</p>\n<h3 id=\"生成-SSH-公钥\"><a href=\"#生成-SSH-公钥\" class=\"headerlink\" title=\"生成 SSH 公钥\"></a>生成 SSH 公钥</h3><p>大多数 Git 服务器都会选择使用 SSH 公钥来进行授权。系统中的每个用户都必须提供一个公钥用于授权，没有的话就要生成一个。生成公钥的过程在所有操作系统上都差不多。 首先先确认一下是否已经有一个公钥了。SSH 公钥默认储存在账户的主目录下的 ~/.ssh 目录。进去看看：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> ~/.ssh</div><div class=\"line\">$ ls</div><div class=\"line\">authorized_keys2  id_dsa       known_hosts</div><div class=\"line\">config            id_dsa.pub</div></pre></td></tr></table></figure></p>\n<p>关键是看有没有用 something 和 something.pub 来命名的一对文件，这个 something 通常就是 id_dsa 或 id_rsa。有 .pub 后缀的文件就是公钥，另一个文件则是密钥。假如没有这些文件，或者干脆连 .ssh 目录都没有，可以用 ssh-keygen 来创建。该程序在 Linux/Mac 系统上由 SSH 包提供，而在 Windows 上则包含在 MSysGit 包里：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen</div><div class=\"line\">Generating public/private rsa key pair.</div><div class=\"line\">Enter file <span class=\"keyword\">in</span> <span class=\"built_in\">which</span> to save the key (/Users/schacon/.ssh/id_rsa):</div><div class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase):</div><div class=\"line\">Enter same passphrase again:</div><div class=\"line\">Your identification has been saved <span class=\"keyword\">in</span> /Users/schacon/.ssh/id_rsa.</div><div class=\"line\">Your public key has been saved <span class=\"keyword\">in</span> /Users/schacon/.ssh/id_rsa.pub.</div><div class=\"line\">The key fingerprint is:</div><div class=\"line\">43:c5:5b:5f:b1:f1:50:43:ad:20:a6:92:6a:1f:9a:3a schacon@agadorlaptop.local</div></pre></td></tr></table></figure></p>\n<p>它先要求你确认保存公钥的位置（.ssh/id_rsa），然后它会让你重复一个密码两次，如果不想在使用公钥的时候输入密码，可以留空。</p>\n<p>现在，所有做过这一步的用户都得把它们的公钥给你或者 Git 服务器的管理员（假设 SSH 服务被设定为使用公钥机制）。他们只需要复制 .pub 文件的内容然后发邮件给管理员。公钥的样子大致如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ cat ~/.ssh/id_rsa.pub</div><div class=\"line\">ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU</div><div class=\"line\">GPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3</div><div class=\"line\">Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA</div><div class=\"line\">t3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En</div><div class=\"line\">mZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx</div><div class=\"line\">NrRFi9wrf+M7Q== schacon@agadorlaptop.local</div></pre></td></tr></table></figure></p>\n<p>关于在多个操作系统上设立相同 SSH 公钥的教程，可以查阅 GitHub 上有关 SSH 公钥的<a href=\"http://github.com/guides/providing-your-ssh-key\">向导</a>。</p>\n<p><a href=\"http://iissnan.com/progit/html/zh/ch4_10.html\">http://iissnan.com/progit/html/zh/ch4_10.html</a></p>\n<h3 id=\"Git-托管服务\"><a href=\"#Git-托管服务\" class=\"headerlink\" title=\"Git 托管服务\"></a>Git 托管服务</h3><p>如果不想经历自己架设 Git 服务器的麻烦，网络上有几个专业的仓库托管服务可供选择。这样做有几大优点：托管账户的建立通常比较省时，方便项目的启动，而且不涉及服务器的维护和监控。即使内部创建并运行着自己的服务器，同时为开源项目提供一个公共托管站点还是有好处的 — 让开源社区更方便地找到该项目，并给予帮助。</p>\n<p>目前，可供选择的托管服务数量繁多，各有利弊。在 Git 官方 wiki 上的 Githosting 页面有一个最新的托管服务列表：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">https://git.wiki.kernel.org/index.php/GitHosting</div></pre></td></tr></table></figure></p>\n<p>由于本书无法全部一一介绍，而本人（译注：指本书作者 Scott Chacon。）刚好在其中一家公司工作，所以接下来我们将会介绍如何在 GitHub 上建立新账户并启动项目。至于其他托管服务大体也是这么一个过程，基本的想法都是差不多的。</p>\n<p>GitHub 是目前为止最大的开源 Git 托管服务，并且还是少数同时提供公共代码和私有代码托管服务的站点之一，所以你可以在上面同时保存开源和商业代码。事实上，本书就是放在 GitHub 上合作编著的。（译注：本书的翻译也是放在 GitHub 上广泛协作的。）</p>\n<h4 id=\"GitHub\"><a href=\"#GitHub\" class=\"headerlink\" title=\"GitHub\"></a>GitHub</h4><p>GitHub 和大多数的代码托管站点在处理项目命名空间的方式上略有不同。GitHub 的设计更侧重于用户，而不是完全基于项目。也就是说，如果我在 GitHub 上托管一个名为 grit 的项目的话，它的地址不会是 github.com/grit，而是按在用户底下 github.com/shacon/grit （译注：本书作者 Scott Chacon 在 GitHub 上的用户名是 shacon。）。不存在所谓某个项目的官方版本，所以假如第一作者放弃了某个项目，它可以无缝转移到其它用户的名下。</p>\n<p>GitHub 同时也是一个向使用私有仓库的用户收取费用的商业公司，但任何人都可以方便快捷地申请到一个免费账户，并在上面托管数量不限的开源项目。接下来我们快速介绍一下 GitHub 的基本使用。</p>\n<h5 id=\"建立新账户\"><a href=\"#建立新账户\" class=\"headerlink\" title=\"建立新账户\"></a>建立新账户</h5><p>首先注册一个免费账户。访问 “Plans and pricing” 页面 <a href=\"https://github.com/pricing\">https://github.com/pricing</a> 并点击 Free acount 里的 Sign Up 按钮（见图 4-2），进入注册页面。<br>如果方便，现在就可以提供你的 SSH 公钥。我们在前文的”小型安装” 一节介绍过生成新公钥的方法。把新生成的公钥复制粘贴到 SSH Public Key 文本框中即可。要是对生成公钥的步骤不太清楚，也可以点击 “explain ssh keys” 链接，会显示各个主流操作系统上完成该步骤的介绍。 点击 “I agree，sign me up” 按钮完成用户注册，并转到该用户的 dashboard 页面</p>\n<h5 id=\"建立新仓库\"><a href=\"#建立新仓库\" class=\"headerlink\" title=\"建立新仓库\"></a>建立新仓库</h5><p>点击用户面板上仓库旁边的 “create a new one” 链接，显示 Create a New Repository 的表单.<br>当然，项目名称是必不可少的，此外也可以适当描述一下项目的情况或者给出官方站点的地址。然后点击 “Create Repository” 按钮，新仓库就建立起来肋.<br>由于尚未提交代码，点击项目地址后 GitHub 会显示一个简要的指南，告诉你如何新建一个项目并推送上来，如何从现有项目推送，以及如何从一个公共的 Subversion 仓库导入项目<br>该指南和本书前文介绍的类似，对于新的项目，需要先在本地初始化为 Git 项目，添加要管理的文件并作首次提交：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git init</div><div class=\"line\">$ git add .</div><div class=\"line\">$ git commit -m <span class=\"string\">'initial commit'</span></div></pre></td></tr></table></figure></p>\n<p>然后在这个本地仓库内把 GitHub 添加为远程仓库，并推送 master 分支上来：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git remote add origin git@github.com:testinguser/iphone_project.git</div><div class=\"line\">$ git push origin master</div></pre></td></tr></table></figure></p>\n<p>现在该项目就托管在 GitHub 上了。你可以把它的 URL 分享给每位对此项目感兴趣的人。本例的 URL 是 <a href=\"http://github.com/testinguser/iphone_project。而在项目页面的摘要部分，你会发现有两个\">http://github.com/testinguser/iphone_project。而在项目页面的摘要部分，你会发现有两个</a> Git URL 地址.<br>Public Clone URL 是一个公开的，只读的 Git URL，任何人都可以通过它克隆该项目。可以随意散播这个 URL，比如发布到个人网站之类的地方等等。</p>\n<p>Your Clone URL 是一个基于 SSH 协议的可读可写 URL，只有使用与上传的 SSH 公钥对应的密钥来连接时，才能通过它进行读写操作。其他用户访问该项目页面时只能看到之前那个公共的 URL，看不到这个私有的 URL。</p>\n<h5 id=\"添加协作开发者\"><a href=\"#添加协作开发者\" class=\"headerlink\" title=\"添加协作开发者\"></a>添加协作开发者</h5><p>现在把团队里的其他人也加进来。如果 John，Josie 和 Jessica 都在 GitHub 注册了账户，要赋予他们对该仓库的推送权限，可以把他们加为项目协作者。这样他们就可以通过各自的公钥访问我的这个仓库了。</p>\n<p>点击项目页面上方的 “edit” 按钮或者顶部的 Admin 标签，进入该项目的管理页面.<br>为了给另一个用户添加项目的写权限，点击 “Add another collaborator” 链接，出现一个用于输入用户名的表单。在输入的同时，它会自动跳出一个符合条件的候选名单。找到正确用户名之后，点 Add 按钮，把该用户设为项目协作者.<br>添加完协作者之后，就可以在 Repository Collaborators 区域看到他们的名单<br>如果要取消某人的访问权，点击 “revoke” 即可取消他的推送权限。对于将来的项目，你可以从现有项目复制协作者名单，或者直接借用协作者群组</p>\n<h5 id=\"派生项目\"><a href=\"#派生项目\" class=\"headerlink\" title=\"派生项目\"></a>派生项目</h5><p>如果要为一个自己没有推送权限的项目贡献代码，GitHub 鼓励使用派生（fork）。到那个感兴趣的项目主页上，点击页面上方的 “fork” 按钮，GitHub 就会为你复制一份该项目的副本到你的仓库中，这样你就可以向自己的这个副本推送数据了。</p>\n<p>采取这种办法的好处是，项目拥有者不必忙于应付赋予他人推送权限的工作。随便谁都可以通过派生得到一个项目副本并在其中展开工作，事后只需要项目维护者将这些副本仓库加为远程仓库，然后提取更新合并即可。</p>\n<p>要派生一个项目，到原始项目的页面（本例中是 mojombo/chronic）点击 “fork” 按钮<br>几秒钟之后，你将进入新建的项目页面，会显示该项目派生自哪一个项目</p>"},{"title":"Node.js 学习","date":"2016-09-04T23:16:12.000Z","_content":"nodejs.org\nwww.npmjs.com\ngithub.com\nstackoverflow.com\n\n## 安装Nodejs\nNode.js版本 偶数位为稳定版本, 奇数位为非稳定版本\n### Windows下安装Nodejs\n1. 下载git bash\n2. 下载Node.js的安装包\n\n<!--more-->\n\n\n\n\n","source":"_posts/Node-js-学习.md","raw":"---\ntitle: Node.js 学习\ndate: 2016-09-04 23:16:12\ntags:\n---\nnodejs.org\nwww.npmjs.com\ngithub.com\nstackoverflow.com\n\n## 安装Nodejs\nNode.js版本 偶数位为稳定版本, 奇数位为非稳定版本\n### Windows下安装Nodejs\n1. 下载git bash\n2. 下载Node.js的安装包\n\n<!--more-->\n\n\n\n\n","slug":"Node-js-学习","published":1,"updated":"2016-10-31T03:55:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuy6rzj30001msq4rj72wh4q","content":"<p>nodejs.org<br>www.npmjs.com<br>github.com<br>stackoverflow.com</p>\n<h2 id=\"安装Nodejs\"><a href=\"#安装Nodejs\" class=\"headerlink\" title=\"安装Nodejs\"></a>安装Nodejs</h2><p>Node.js版本 偶数位为稳定版本, 奇数位为非稳定版本</p>\n<h3 id=\"Windows下安装Nodejs\"><a href=\"#Windows下安装Nodejs\" class=\"headerlink\" title=\"Windows下安装Nodejs\"></a>Windows下安装Nodejs</h3><ol>\n<li>下载git bash</li>\n<li>下载Node.js的安装包</li>\n</ol>\n<a id=\"more\"></a>\n","excerpt":"<p>nodejs.org<br>www.npmjs.com<br>github.com<br>stackoverflow.com</p>\n<h2 id=\"安装Nodejs\"><a href=\"#安装Nodejs\" class=\"headerlink\" title=\"安装Nodejs\"></a>安装Nodejs</h2><p>Node.js版本 偶数位为稳定版本, 奇数位为非稳定版本</p>\n<h3 id=\"Windows下安装Nodejs\"><a href=\"#Windows下安装Nodejs\" class=\"headerlink\" title=\"Windows下安装Nodejs\"></a>Windows下安装Nodejs</h3><ol>\n<li>下载git bash</li>\n<li>下载Node.js的安装包</li>\n</ol>","more":""},{"title":"angular","date":"2016-10-30T13:05:09.000Z","_content":"在&lt;li&gt;元素标签上的元素属性ng-repeat=\"phone in phones\"是一个Angular转发器指令\n花括号包围的表达式（{{phone.name}}和{{phone.snippet}}）将被替换成表达式的值。\n我们已经添加了一个新指令，称为ng-controller，它给元素标签&lt;body&gt;附加了一个PhoneListCtrl控制器。\n在花括号中的表达式（{{phone.name}}和{{phone.snippet}}）表示绑定，在我们的应用程序模块中参引它们，它们被设置在我们的PhoneListCtrl控制器上。\n\nMVC，模块，指令，双向绑定\n<!--more-->\n\n对Grunt：package.json，每次启动npm，会读这个文件。Gruntfile.js文件。\ngrunt（grunt-contrib-concat，watch，uglify），bower，http-server，\n![angular1](/images/angular1.png)\n![angular2](/images/angular2.jpg)\n![angular3](/images/angular3.jpg)\n![angular4](/images/angular4.jpg)\n![angular5](/images/angular5.jpg)\n![angular6](/images/angular6.jpg)\n![angular7](/images/angular7.png)\n![angular8](/images/angular8.jpg)\n![angular9](/images/angular9.png)\n![angular10](/images/angular10.jpg)\n![angular11](/images/angular11.jpg)\n![angular12](/images/angular12.png)\n![angular13](/images/angular13.png)\n![angular14](/images/angular14.png)\n![angular15](/images/angular15.png)\n![angular16](/images/angular16.png)\n![angular17](/images/angular17.jpg)\n![angular18](/images/angular18.png)\n![angular19](/images/angular19.png)\n![angular20](/images/angular20.jpg)\n![angular21](/images/angular21.png)\n![angular22](/images/angular22.jpg)\n![angular23](/images/angular23.jpg)\n![angular24](/images/angular24.png)\n![angular25](/images/angular25.png)\n![angular26](/images/angular26.png)\n![angular27](/images/angular27.png)\n![angular28](/images/angular28.png)\n![angular29](/images/angular29.png)\n![angular30](/images/angular30.png)\n![angular31](/images/angular31.png)\n![angular32](/images/angular32.png)\n![angular33](/images/angular33.png)\n![angular34](/images/angular34.jpg)\n![angular35](/images/angular35.png)\n![angular36](/images/angular36.jpg)\n![angular37](/images/angular37.png)\n![angular38](/images/angular38.jpg)\n![angular39](/images/angular39.png)\n![angular40](/images/angular40.jpg)\n![angular41](/images/angular41.png)\n![angular42](/images/angular42.jpg)\n![angular43](/images/angular43.jpg)\n![angular44](/images/angular44.png)\n![angular45](/images/angular45.jpg)\n![angular46](/images/angular46.png)\n![angular47](/images/angular47.png)\n\n\n\n\n\n\n\n\n","source":"_posts/angular.md","raw":"---\ntitle: angular\ndate: 2016-10-30 13:05:09\ntags:\n---\n在&lt;li&gt;元素标签上的元素属性ng-repeat=\"phone in phones\"是一个Angular转发器指令\n花括号包围的表达式（{{phone.name}}和{{phone.snippet}}）将被替换成表达式的值。\n我们已经添加了一个新指令，称为ng-controller，它给元素标签&lt;body&gt;附加了一个PhoneListCtrl控制器。\n在花括号中的表达式（{{phone.name}}和{{phone.snippet}}）表示绑定，在我们的应用程序模块中参引它们，它们被设置在我们的PhoneListCtrl控制器上。\n\nMVC，模块，指令，双向绑定\n<!--more-->\n\n对Grunt：package.json，每次启动npm，会读这个文件。Gruntfile.js文件。\ngrunt（grunt-contrib-concat，watch，uglify），bower，http-server，\n![angular1](/images/angular1.png)\n![angular2](/images/angular2.jpg)\n![angular3](/images/angular3.jpg)\n![angular4](/images/angular4.jpg)\n![angular5](/images/angular5.jpg)\n![angular6](/images/angular6.jpg)\n![angular7](/images/angular7.png)\n![angular8](/images/angular8.jpg)\n![angular9](/images/angular9.png)\n![angular10](/images/angular10.jpg)\n![angular11](/images/angular11.jpg)\n![angular12](/images/angular12.png)\n![angular13](/images/angular13.png)\n![angular14](/images/angular14.png)\n![angular15](/images/angular15.png)\n![angular16](/images/angular16.png)\n![angular17](/images/angular17.jpg)\n![angular18](/images/angular18.png)\n![angular19](/images/angular19.png)\n![angular20](/images/angular20.jpg)\n![angular21](/images/angular21.png)\n![angular22](/images/angular22.jpg)\n![angular23](/images/angular23.jpg)\n![angular24](/images/angular24.png)\n![angular25](/images/angular25.png)\n![angular26](/images/angular26.png)\n![angular27](/images/angular27.png)\n![angular28](/images/angular28.png)\n![angular29](/images/angular29.png)\n![angular30](/images/angular30.png)\n![angular31](/images/angular31.png)\n![angular32](/images/angular32.png)\n![angular33](/images/angular33.png)\n![angular34](/images/angular34.jpg)\n![angular35](/images/angular35.png)\n![angular36](/images/angular36.jpg)\n![angular37](/images/angular37.png)\n![angular38](/images/angular38.jpg)\n![angular39](/images/angular39.png)\n![angular40](/images/angular40.jpg)\n![angular41](/images/angular41.png)\n![angular42](/images/angular42.jpg)\n![angular43](/images/angular43.jpg)\n![angular44](/images/angular44.png)\n![angular45](/images/angular45.jpg)\n![angular46](/images/angular46.png)\n![angular47](/images/angular47.png)\n\n\n\n\n\n\n\n\n","slug":"angular","published":1,"updated":"2016-10-31T03:55:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuy6rzjg0003msq45j4oj4jp","content":"<p>在&lt;li&gt;元素标签上的元素属性ng-repeat=”phone in phones”是一个Angular转发器指令<br>花括号包围的表达式（和）将被替换成表达式的值。<br>我们已经添加了一个新指令，称为ng-controller，它给元素标签&lt;body&gt;附加了一个PhoneListCtrl控制器。<br>在花括号中的表达式（和）表示绑定，在我们的应用程序模块中参引它们，它们被设置在我们的PhoneListCtrl控制器上。</p>\n<p>MVC，模块，指令，双向绑定<br><a id=\"more\"></a></p>\n<p>对Grunt：package.json，每次启动npm，会读这个文件。Gruntfile.js文件。<br>grunt（grunt-contrib-concat，watch，uglify），bower，http-server，<br><img src=\"/images/angular1.png\" alt=\"angular1\"><br><img src=\"/images/angular2.jpg\" alt=\"angular2\"><br><img src=\"/images/angular3.jpg\" alt=\"angular3\"><br><img src=\"/images/angular4.jpg\" alt=\"angular4\"><br><img src=\"/images/angular5.jpg\" alt=\"angular5\"><br><img src=\"/images/angular6.jpg\" alt=\"angular6\"><br><img src=\"/images/angular7.png\" alt=\"angular7\"><br><img src=\"/images/angular8.jpg\" alt=\"angular8\"><br><img src=\"/images/angular9.png\" alt=\"angular9\"><br><img src=\"/images/angular10.jpg\" alt=\"angular10\"><br><img src=\"/images/angular11.jpg\" alt=\"angular11\"><br><img src=\"/images/angular12.png\" alt=\"angular12\"><br><img src=\"/images/angular13.png\" alt=\"angular13\"><br><img src=\"/images/angular14.png\" alt=\"angular14\"><br><img src=\"/images/angular15.png\" alt=\"angular15\"><br><img src=\"/images/angular16.png\" alt=\"angular16\"><br><img src=\"/images/angular17.jpg\" alt=\"angular17\"><br><img src=\"/images/angular18.png\" alt=\"angular18\"><br><img src=\"/images/angular19.png\" alt=\"angular19\"><br><img src=\"/images/angular20.jpg\" alt=\"angular20\"><br><img src=\"/images/angular21.png\" alt=\"angular21\"><br><img src=\"/images/angular22.jpg\" alt=\"angular22\"><br><img src=\"/images/angular23.jpg\" alt=\"angular23\"><br><img src=\"/images/angular24.png\" alt=\"angular24\"><br><img src=\"/images/angular25.png\" alt=\"angular25\"><br><img src=\"/images/angular26.png\" alt=\"angular26\"><br><img src=\"/images/angular27.png\" alt=\"angular27\"><br><img src=\"/images/angular28.png\" alt=\"angular28\"><br><img src=\"/images/angular29.png\" alt=\"angular29\"><br><img src=\"/images/angular30.png\" alt=\"angular30\"><br><img src=\"/images/angular31.png\" alt=\"angular31\"><br><img src=\"/images/angular32.png\" alt=\"angular32\"><br><img src=\"/images/angular33.png\" alt=\"angular33\"><br><img src=\"/images/angular34.jpg\" alt=\"angular34\"><br><img src=\"/images/angular35.png\" alt=\"angular35\"><br><img src=\"/images/angular36.jpg\" alt=\"angular36\"><br><img src=\"/images/angular37.png\" alt=\"angular37\"><br><img src=\"/images/angular38.jpg\" alt=\"angular38\"><br><img src=\"/images/angular39.png\" alt=\"angular39\"><br><img src=\"/images/angular40.jpg\" alt=\"angular40\"><br><img src=\"/images/angular41.png\" alt=\"angular41\"><br><img src=\"/images/angular42.jpg\" alt=\"angular42\"><br><img src=\"/images/angular43.jpg\" alt=\"angular43\"><br><img src=\"/images/angular44.png\" alt=\"angular44\"><br><img src=\"/images/angular45.jpg\" alt=\"angular45\"><br><img src=\"/images/angular46.png\" alt=\"angular46\"><br><img src=\"/images/angular47.png\" alt=\"angular47\"></p>\n","excerpt":"<p>在&lt;li&gt;元素标签上的元素属性ng-repeat=”phone in phones”是一个Angular转发器指令<br>花括号包围的表达式（和）将被替换成表达式的值。<br>我们已经添加了一个新指令，称为ng-controller，它给元素标签&lt;body&gt;附加了一个PhoneListCtrl控制器。<br>在花括号中的表达式（和）表示绑定，在我们的应用程序模块中参引它们，它们被设置在我们的PhoneListCtrl控制器上。</p>\n<p>MVC，模块，指令，双向绑定<br>","more":"</p>\n<p>对Grunt：package.json，每次启动npm，会读这个文件。Gruntfile.js文件。<br>grunt（grunt-contrib-concat，watch，uglify），bower，http-server，<br><img src=\"/images/angular1.png\" alt=\"angular1\"><br><img src=\"/images/angular2.jpg\" alt=\"angular2\"><br><img src=\"/images/angular3.jpg\" alt=\"angular3\"><br><img src=\"/images/angular4.jpg\" alt=\"angular4\"><br><img src=\"/images/angular5.jpg\" alt=\"angular5\"><br><img src=\"/images/angular6.jpg\" alt=\"angular6\"><br><img src=\"/images/angular7.png\" alt=\"angular7\"><br><img src=\"/images/angular8.jpg\" alt=\"angular8\"><br><img src=\"/images/angular9.png\" alt=\"angular9\"><br><img src=\"/images/angular10.jpg\" alt=\"angular10\"><br><img src=\"/images/angular11.jpg\" alt=\"angular11\"><br><img src=\"/images/angular12.png\" alt=\"angular12\"><br><img src=\"/images/angular13.png\" alt=\"angular13\"><br><img src=\"/images/angular14.png\" alt=\"angular14\"><br><img src=\"/images/angular15.png\" alt=\"angular15\"><br><img src=\"/images/angular16.png\" alt=\"angular16\"><br><img src=\"/images/angular17.jpg\" alt=\"angular17\"><br><img src=\"/images/angular18.png\" alt=\"angular18\"><br><img src=\"/images/angular19.png\" alt=\"angular19\"><br><img src=\"/images/angular20.jpg\" alt=\"angular20\"><br><img src=\"/images/angular21.png\" alt=\"angular21\"><br><img src=\"/images/angular22.jpg\" alt=\"angular22\"><br><img src=\"/images/angular23.jpg\" alt=\"angular23\"><br><img src=\"/images/angular24.png\" alt=\"angular24\"><br><img src=\"/images/angular25.png\" alt=\"angular25\"><br><img src=\"/images/angular26.png\" alt=\"angular26\"><br><img src=\"/images/angular27.png\" alt=\"angular27\"><br><img src=\"/images/angular28.png\" alt=\"angular28\"><br><img src=\"/images/angular29.png\" alt=\"angular29\"><br><img src=\"/images/angular30.png\" alt=\"angular30\"><br><img src=\"/images/angular31.png\" alt=\"angular31\"><br><img src=\"/images/angular32.png\" alt=\"angular32\"><br><img src=\"/images/angular33.png\" alt=\"angular33\"><br><img src=\"/images/angular34.jpg\" alt=\"angular34\"><br><img src=\"/images/angular35.png\" alt=\"angular35\"><br><img src=\"/images/angular36.jpg\" alt=\"angular36\"><br><img src=\"/images/angular37.png\" alt=\"angular37\"><br><img src=\"/images/angular38.jpg\" alt=\"angular38\"><br><img src=\"/images/angular39.png\" alt=\"angular39\"><br><img src=\"/images/angular40.jpg\" alt=\"angular40\"><br><img src=\"/images/angular41.png\" alt=\"angular41\"><br><img src=\"/images/angular42.jpg\" alt=\"angular42\"><br><img src=\"/images/angular43.jpg\" alt=\"angular43\"><br><img src=\"/images/angular44.png\" alt=\"angular44\"><br><img src=\"/images/angular45.jpg\" alt=\"angular45\"><br><img src=\"/images/angular46.png\" alt=\"angular46\"><br><img src=\"/images/angular47.png\" alt=\"angular47\"></p>"},{"title":"git 学习笔记(三)","date":"2016-08-31T19:14:14.000Z","_content":"\n\n\n## 分布式 Git\n为了便于项目中的所有开发者分享代码，我们准备好了一台服务器存放远程 Git 仓库。经过前面几章的学习，我们已经学会了一些基本的本地工作流程中所需用到的命令。接下来，我们要学习下如何利用 Git 来组织和完成分布式工作流程。\n\n特别是，当作为项目贡献者时，我们该怎么做才能方便维护者采纳更新；或者作为项目维护者时，又该怎样有效管理大量贡献者的提交。\n<!--more-->\n### 分布式工作流程\n同传统的集中式版本控制系统（CVCS）不同，开发者之间的协作方式因着 Git 的分布式特性而变得更为灵活多样。在集中式系统上，每个开发者就像是连接在集线器上的节点，彼此的工作方式大体相像。而在 Git 网络中，每个开发者同时扮演着节点和集线器的角色，这就是说，每一个开发者都可以将自己的代码贡献到另外一个开发者的仓库中，或者建立自己的公共仓库，让其他开发者基于自己的工作开始，为自己的仓库贡献代码。于是，Git 的分布式协作便可以衍生出种种不同的工作流程，我会在接下来的章节介绍几种常见的应用方式，并分别讨论各自的优缺点。你可以选择其中的一种，或者结合起来，应用到你自己的项目中。\n\n#### 集中式工作流\n通常，集中式工作流程使用的都是单点协作模型。一个存放代码仓库的中心服务器，可以接受所有开发者提交的代码。所有的开发者都是普通的节点，作为中心集线器的消费者，平时的工作就是和中心仓库同步数据.\n如果两个开发者从中心仓库克隆代码下来，同时作了一些修订，那么只有第一个开发者可以顺利地把数据推送到共享服务器。第二个开发者在提交他的修订之前，必须先下载合并服务器上的数据，解决冲突之后才能推送数据到共享服务器上。在 Git 中这么用也决无问题，这就好比是在用 Subversion（或其他 CVCS）一样，可以很好地工作。\n\n如果你的团队不是很大，或者大家都已经习惯了使用集中式工作流程，完全可以采用这种简单的模式。只需要配置好一台中心服务器，并给每个人推送数据的权限，就可以开展工作了。但如果提交代码时有冲突， Git 根本就不会让用户覆盖他人代码，它直接驳回第二个人的提交操作。这就等于告诉提交者，你所作的修订无法通过快进（fast-forward）来合并，你必须先拉取最新数据下来，手工解决冲突合并后，才能继续推送新的提交。 绝大多数人都熟悉和了解这种模式的工作方式，所以使用也非常广泛。\n\n#### 集成管理员工作流\n由于 Git 允许使用多个远程仓库，开发者便可以建立自己的公共仓库，往里面写数据并共享给他人，而同时又可以从别人的仓库中提取他们的更新过来。这种情形通常都会有个代表着官方发布的项目仓库（blessed repository），开发者们由此仓库克隆出一个自己的公共仓库（developer public），然后将自己的提交推送上去，请求官方仓库的维护者拉取更新合并到主项目。维护者在自己的本地也有个克隆仓库（integration manager），他可以将你的公共仓库作为远程仓库添加进来，经过测试无误后合并到主干分支，然后再推送到官方仓库。工作流程看起来就像图 5-2 所示：\n\n1. 项目维护者可以推送数据到公共仓库 blessed repository。\n2. 贡献者克隆此仓库，修订或编写新代码。\n3. 贡献者推送数据到自己的公共仓库 developer public。\n4. 贡献者给维护者发送邮件，请求拉取自己的最新修订。\n5. 维护者在自己本地的 integration manger 仓库中，将贡献者的仓库加为远程仓库，合并更新并做测试。\n6. 维护者将合并后的更新推送到主仓库 blessed repository。\n\n在 GitHub 网站上使用得最多的就是这种工作流。人们可以复制（fork 亦即克隆）某个项目到自己的列表中，成为自己的公共仓库。随后将自己的更新提交到这个仓库，所有人都可以看到你的每次更新。这么做最主要的优点在于，你可以按照自己的节奏继续工作，而不必等待维护者处理你提交的更新；而维护者也可以按照自己的节奏，任何时候都可以过来处理接纳你的贡献。\n\n#### 司令官与副官工作流\n这其实是上一种工作流的变体。一般超大型的项目才会用到这样的工作方式，像是拥有数百协作开发者的 Linux 内核项目就是如此。各个集成管理员分别负责集成项目中的特定部分，所以称为副官（lieutenant）。而所有这些集成管理员头上还有一位负责统筹的总集成管理员，称为司令官（dictator）。司令官维护的仓库用于提供所有协作者拉取最新集成的项目代码。整个流程看起来如图 5-3 所示：\n\n1. 一般的开发者在自己的特性分支上工作，并不定期地根据主干分支（dictator 上的 master）衍合。\n2. 副官（lieutenant）将普通开发者的特性分支合并到自己的 master 分支中。\n3. 司令官（dictator）将所有副官的 master 分支并入自己的 master 分支。\n4. 司令官（dictator）将集成后的 master 分支推送到共享仓库 blessed repository 中，以便所有其他开发者以此为基础进行衍合。\n\n这种工作流程并不常用，只有当项目极为庞杂，或者需要多级别管理时，才会体现出优势。利用这种方式，项目总负责人（即司令官）可以把大量分散的集成工作委托给不同的小组负责人分别处理，最后再统筹起来，如此各人的职责清晰明确，也不易出错（译注：此乃分而治之）。\n\n以上介绍的是常见的分布式系统可以应用的工作流程，当然不止于 Git。在实际的开发工作中，你可能会遇到各种为了满足特定需求而有所变化的工作方式。我想现在你应该已经清楚，接下来自己需要用哪种方式开展工作了。下节我还会再举些例子，看看各式工作流中的每个角色具体应该如何操作。\n\n### 为项目作贡献\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/git-学习笔记-三.md","raw":"---\ntitle: git 学习笔记(三)\ndate: 2016-08-31 19:14:14\ntags: git笔记\n---\n\n\n\n## 分布式 Git\n为了便于项目中的所有开发者分享代码，我们准备好了一台服务器存放远程 Git 仓库。经过前面几章的学习，我们已经学会了一些基本的本地工作流程中所需用到的命令。接下来，我们要学习下如何利用 Git 来组织和完成分布式工作流程。\n\n特别是，当作为项目贡献者时，我们该怎么做才能方便维护者采纳更新；或者作为项目维护者时，又该怎样有效管理大量贡献者的提交。\n<!--more-->\n### 分布式工作流程\n同传统的集中式版本控制系统（CVCS）不同，开发者之间的协作方式因着 Git 的分布式特性而变得更为灵活多样。在集中式系统上，每个开发者就像是连接在集线器上的节点，彼此的工作方式大体相像。而在 Git 网络中，每个开发者同时扮演着节点和集线器的角色，这就是说，每一个开发者都可以将自己的代码贡献到另外一个开发者的仓库中，或者建立自己的公共仓库，让其他开发者基于自己的工作开始，为自己的仓库贡献代码。于是，Git 的分布式协作便可以衍生出种种不同的工作流程，我会在接下来的章节介绍几种常见的应用方式，并分别讨论各自的优缺点。你可以选择其中的一种，或者结合起来，应用到你自己的项目中。\n\n#### 集中式工作流\n通常，集中式工作流程使用的都是单点协作模型。一个存放代码仓库的中心服务器，可以接受所有开发者提交的代码。所有的开发者都是普通的节点，作为中心集线器的消费者，平时的工作就是和中心仓库同步数据.\n如果两个开发者从中心仓库克隆代码下来，同时作了一些修订，那么只有第一个开发者可以顺利地把数据推送到共享服务器。第二个开发者在提交他的修订之前，必须先下载合并服务器上的数据，解决冲突之后才能推送数据到共享服务器上。在 Git 中这么用也决无问题，这就好比是在用 Subversion（或其他 CVCS）一样，可以很好地工作。\n\n如果你的团队不是很大，或者大家都已经习惯了使用集中式工作流程，完全可以采用这种简单的模式。只需要配置好一台中心服务器，并给每个人推送数据的权限，就可以开展工作了。但如果提交代码时有冲突， Git 根本就不会让用户覆盖他人代码，它直接驳回第二个人的提交操作。这就等于告诉提交者，你所作的修订无法通过快进（fast-forward）来合并，你必须先拉取最新数据下来，手工解决冲突合并后，才能继续推送新的提交。 绝大多数人都熟悉和了解这种模式的工作方式，所以使用也非常广泛。\n\n#### 集成管理员工作流\n由于 Git 允许使用多个远程仓库，开发者便可以建立自己的公共仓库，往里面写数据并共享给他人，而同时又可以从别人的仓库中提取他们的更新过来。这种情形通常都会有个代表着官方发布的项目仓库（blessed repository），开发者们由此仓库克隆出一个自己的公共仓库（developer public），然后将自己的提交推送上去，请求官方仓库的维护者拉取更新合并到主项目。维护者在自己的本地也有个克隆仓库（integration manager），他可以将你的公共仓库作为远程仓库添加进来，经过测试无误后合并到主干分支，然后再推送到官方仓库。工作流程看起来就像图 5-2 所示：\n\n1. 项目维护者可以推送数据到公共仓库 blessed repository。\n2. 贡献者克隆此仓库，修订或编写新代码。\n3. 贡献者推送数据到自己的公共仓库 developer public。\n4. 贡献者给维护者发送邮件，请求拉取自己的最新修订。\n5. 维护者在自己本地的 integration manger 仓库中，将贡献者的仓库加为远程仓库，合并更新并做测试。\n6. 维护者将合并后的更新推送到主仓库 blessed repository。\n\n在 GitHub 网站上使用得最多的就是这种工作流。人们可以复制（fork 亦即克隆）某个项目到自己的列表中，成为自己的公共仓库。随后将自己的更新提交到这个仓库，所有人都可以看到你的每次更新。这么做最主要的优点在于，你可以按照自己的节奏继续工作，而不必等待维护者处理你提交的更新；而维护者也可以按照自己的节奏，任何时候都可以过来处理接纳你的贡献。\n\n#### 司令官与副官工作流\n这其实是上一种工作流的变体。一般超大型的项目才会用到这样的工作方式，像是拥有数百协作开发者的 Linux 内核项目就是如此。各个集成管理员分别负责集成项目中的特定部分，所以称为副官（lieutenant）。而所有这些集成管理员头上还有一位负责统筹的总集成管理员，称为司令官（dictator）。司令官维护的仓库用于提供所有协作者拉取最新集成的项目代码。整个流程看起来如图 5-3 所示：\n\n1. 一般的开发者在自己的特性分支上工作，并不定期地根据主干分支（dictator 上的 master）衍合。\n2. 副官（lieutenant）将普通开发者的特性分支合并到自己的 master 分支中。\n3. 司令官（dictator）将所有副官的 master 分支并入自己的 master 分支。\n4. 司令官（dictator）将集成后的 master 分支推送到共享仓库 blessed repository 中，以便所有其他开发者以此为基础进行衍合。\n\n这种工作流程并不常用，只有当项目极为庞杂，或者需要多级别管理时，才会体现出优势。利用这种方式，项目总负责人（即司令官）可以把大量分散的集成工作委托给不同的小组负责人分别处理，最后再统筹起来，如此各人的职责清晰明确，也不易出错（译注：此乃分而治之）。\n\n以上介绍的是常见的分布式系统可以应用的工作流程，当然不止于 Git。在实际的开发工作中，你可能会遇到各种为了满足特定需求而有所变化的工作方式。我想现在你应该已经清楚，接下来自己需要用哪种方式开展工作了。下节我还会再举些例子，看看各式工作流中的每个角色具体应该如何操作。\n\n### 为项目作贡献\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"git-学习笔记-三","published":1,"updated":"2016-10-31T03:55:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuy6rzjl0004msq42wkexm0v","content":"<h2 id=\"分布式-Git\"><a href=\"#分布式-Git\" class=\"headerlink\" title=\"分布式 Git\"></a>分布式 Git</h2><p>为了便于项目中的所有开发者分享代码，我们准备好了一台服务器存放远程 Git 仓库。经过前面几章的学习，我们已经学会了一些基本的本地工作流程中所需用到的命令。接下来，我们要学习下如何利用 Git 来组织和完成分布式工作流程。</p>\n<p>特别是，当作为项目贡献者时，我们该怎么做才能方便维护者采纳更新；或者作为项目维护者时，又该怎样有效管理大量贡献者的提交。<br><a id=\"more\"></a></p>\n<h3 id=\"分布式工作流程\"><a href=\"#分布式工作流程\" class=\"headerlink\" title=\"分布式工作流程\"></a>分布式工作流程</h3><p>同传统的集中式版本控制系统（CVCS）不同，开发者之间的协作方式因着 Git 的分布式特性而变得更为灵活多样。在集中式系统上，每个开发者就像是连接在集线器上的节点，彼此的工作方式大体相像。而在 Git 网络中，每个开发者同时扮演着节点和集线器的角色，这就是说，每一个开发者都可以将自己的代码贡献到另外一个开发者的仓库中，或者建立自己的公共仓库，让其他开发者基于自己的工作开始，为自己的仓库贡献代码。于是，Git 的分布式协作便可以衍生出种种不同的工作流程，我会在接下来的章节介绍几种常见的应用方式，并分别讨论各自的优缺点。你可以选择其中的一种，或者结合起来，应用到你自己的项目中。</p>\n<h4 id=\"集中式工作流\"><a href=\"#集中式工作流\" class=\"headerlink\" title=\"集中式工作流\"></a>集中式工作流</h4><p>通常，集中式工作流程使用的都是单点协作模型。一个存放代码仓库的中心服务器，可以接受所有开发者提交的代码。所有的开发者都是普通的节点，作为中心集线器的消费者，平时的工作就是和中心仓库同步数据.<br>如果两个开发者从中心仓库克隆代码下来，同时作了一些修订，那么只有第一个开发者可以顺利地把数据推送到共享服务器。第二个开发者在提交他的修订之前，必须先下载合并服务器上的数据，解决冲突之后才能推送数据到共享服务器上。在 Git 中这么用也决无问题，这就好比是在用 Subversion（或其他 CVCS）一样，可以很好地工作。</p>\n<p>如果你的团队不是很大，或者大家都已经习惯了使用集中式工作流程，完全可以采用这种简单的模式。只需要配置好一台中心服务器，并给每个人推送数据的权限，就可以开展工作了。但如果提交代码时有冲突， Git 根本就不会让用户覆盖他人代码，它直接驳回第二个人的提交操作。这就等于告诉提交者，你所作的修订无法通过快进（fast-forward）来合并，你必须先拉取最新数据下来，手工解决冲突合并后，才能继续推送新的提交。 绝大多数人都熟悉和了解这种模式的工作方式，所以使用也非常广泛。</p>\n<h4 id=\"集成管理员工作流\"><a href=\"#集成管理员工作流\" class=\"headerlink\" title=\"集成管理员工作流\"></a>集成管理员工作流</h4><p>由于 Git 允许使用多个远程仓库，开发者便可以建立自己的公共仓库，往里面写数据并共享给他人，而同时又可以从别人的仓库中提取他们的更新过来。这种情形通常都会有个代表着官方发布的项目仓库（blessed repository），开发者们由此仓库克隆出一个自己的公共仓库（developer public），然后将自己的提交推送上去，请求官方仓库的维护者拉取更新合并到主项目。维护者在自己的本地也有个克隆仓库（integration manager），他可以将你的公共仓库作为远程仓库添加进来，经过测试无误后合并到主干分支，然后再推送到官方仓库。工作流程看起来就像图 5-2 所示：</p>\n<ol>\n<li>项目维护者可以推送数据到公共仓库 blessed repository。</li>\n<li>贡献者克隆此仓库，修订或编写新代码。</li>\n<li>贡献者推送数据到自己的公共仓库 developer public。</li>\n<li>贡献者给维护者发送邮件，请求拉取自己的最新修订。</li>\n<li>维护者在自己本地的 integration manger 仓库中，将贡献者的仓库加为远程仓库，合并更新并做测试。</li>\n<li>维护者将合并后的更新推送到主仓库 blessed repository。</li>\n</ol>\n<p>在 GitHub 网站上使用得最多的就是这种工作流。人们可以复制（fork 亦即克隆）某个项目到自己的列表中，成为自己的公共仓库。随后将自己的更新提交到这个仓库，所有人都可以看到你的每次更新。这么做最主要的优点在于，你可以按照自己的节奏继续工作，而不必等待维护者处理你提交的更新；而维护者也可以按照自己的节奏，任何时候都可以过来处理接纳你的贡献。</p>\n<h4 id=\"司令官与副官工作流\"><a href=\"#司令官与副官工作流\" class=\"headerlink\" title=\"司令官与副官工作流\"></a>司令官与副官工作流</h4><p>这其实是上一种工作流的变体。一般超大型的项目才会用到这样的工作方式，像是拥有数百协作开发者的 Linux 内核项目就是如此。各个集成管理员分别负责集成项目中的特定部分，所以称为副官（lieutenant）。而所有这些集成管理员头上还有一位负责统筹的总集成管理员，称为司令官（dictator）。司令官维护的仓库用于提供所有协作者拉取最新集成的项目代码。整个流程看起来如图 5-3 所示：</p>\n<ol>\n<li>一般的开发者在自己的特性分支上工作，并不定期地根据主干分支（dictator 上的 master）衍合。</li>\n<li>副官（lieutenant）将普通开发者的特性分支合并到自己的 master 分支中。</li>\n<li>司令官（dictator）将所有副官的 master 分支并入自己的 master 分支。</li>\n<li>司令官（dictator）将集成后的 master 分支推送到共享仓库 blessed repository 中，以便所有其他开发者以此为基础进行衍合。</li>\n</ol>\n<p>这种工作流程并不常用，只有当项目极为庞杂，或者需要多级别管理时，才会体现出优势。利用这种方式，项目总负责人（即司令官）可以把大量分散的集成工作委托给不同的小组负责人分别处理，最后再统筹起来，如此各人的职责清晰明确，也不易出错（译注：此乃分而治之）。</p>\n<p>以上介绍的是常见的分布式系统可以应用的工作流程，当然不止于 Git。在实际的开发工作中，你可能会遇到各种为了满足特定需求而有所变化的工作方式。我想现在你应该已经清楚，接下来自己需要用哪种方式开展工作了。下节我还会再举些例子，看看各式工作流中的每个角色具体应该如何操作。</p>\n<h3 id=\"为项目作贡献\"><a href=\"#为项目作贡献\" class=\"headerlink\" title=\"为项目作贡献\"></a>为项目作贡献</h3>","excerpt":"<h2 id=\"分布式-Git\"><a href=\"#分布式-Git\" class=\"headerlink\" title=\"分布式 Git\"></a>分布式 Git</h2><p>为了便于项目中的所有开发者分享代码，我们准备好了一台服务器存放远程 Git 仓库。经过前面几章的学习，我们已经学会了一些基本的本地工作流程中所需用到的命令。接下来，我们要学习下如何利用 Git 来组织和完成分布式工作流程。</p>\n<p>特别是，当作为项目贡献者时，我们该怎么做才能方便维护者采纳更新；或者作为项目维护者时，又该怎样有效管理大量贡献者的提交。<br>","more":"</p>\n<h3 id=\"分布式工作流程\"><a href=\"#分布式工作流程\" class=\"headerlink\" title=\"分布式工作流程\"></a>分布式工作流程</h3><p>同传统的集中式版本控制系统（CVCS）不同，开发者之间的协作方式因着 Git 的分布式特性而变得更为灵活多样。在集中式系统上，每个开发者就像是连接在集线器上的节点，彼此的工作方式大体相像。而在 Git 网络中，每个开发者同时扮演着节点和集线器的角色，这就是说，每一个开发者都可以将自己的代码贡献到另外一个开发者的仓库中，或者建立自己的公共仓库，让其他开发者基于自己的工作开始，为自己的仓库贡献代码。于是，Git 的分布式协作便可以衍生出种种不同的工作流程，我会在接下来的章节介绍几种常见的应用方式，并分别讨论各自的优缺点。你可以选择其中的一种，或者结合起来，应用到你自己的项目中。</p>\n<h4 id=\"集中式工作流\"><a href=\"#集中式工作流\" class=\"headerlink\" title=\"集中式工作流\"></a>集中式工作流</h4><p>通常，集中式工作流程使用的都是单点协作模型。一个存放代码仓库的中心服务器，可以接受所有开发者提交的代码。所有的开发者都是普通的节点，作为中心集线器的消费者，平时的工作就是和中心仓库同步数据.<br>如果两个开发者从中心仓库克隆代码下来，同时作了一些修订，那么只有第一个开发者可以顺利地把数据推送到共享服务器。第二个开发者在提交他的修订之前，必须先下载合并服务器上的数据，解决冲突之后才能推送数据到共享服务器上。在 Git 中这么用也决无问题，这就好比是在用 Subversion（或其他 CVCS）一样，可以很好地工作。</p>\n<p>如果你的团队不是很大，或者大家都已经习惯了使用集中式工作流程，完全可以采用这种简单的模式。只需要配置好一台中心服务器，并给每个人推送数据的权限，就可以开展工作了。但如果提交代码时有冲突， Git 根本就不会让用户覆盖他人代码，它直接驳回第二个人的提交操作。这就等于告诉提交者，你所作的修订无法通过快进（fast-forward）来合并，你必须先拉取最新数据下来，手工解决冲突合并后，才能继续推送新的提交。 绝大多数人都熟悉和了解这种模式的工作方式，所以使用也非常广泛。</p>\n<h4 id=\"集成管理员工作流\"><a href=\"#集成管理员工作流\" class=\"headerlink\" title=\"集成管理员工作流\"></a>集成管理员工作流</h4><p>由于 Git 允许使用多个远程仓库，开发者便可以建立自己的公共仓库，往里面写数据并共享给他人，而同时又可以从别人的仓库中提取他们的更新过来。这种情形通常都会有个代表着官方发布的项目仓库（blessed repository），开发者们由此仓库克隆出一个自己的公共仓库（developer public），然后将自己的提交推送上去，请求官方仓库的维护者拉取更新合并到主项目。维护者在自己的本地也有个克隆仓库（integration manager），他可以将你的公共仓库作为远程仓库添加进来，经过测试无误后合并到主干分支，然后再推送到官方仓库。工作流程看起来就像图 5-2 所示：</p>\n<ol>\n<li>项目维护者可以推送数据到公共仓库 blessed repository。</li>\n<li>贡献者克隆此仓库，修订或编写新代码。</li>\n<li>贡献者推送数据到自己的公共仓库 developer public。</li>\n<li>贡献者给维护者发送邮件，请求拉取自己的最新修订。</li>\n<li>维护者在自己本地的 integration manger 仓库中，将贡献者的仓库加为远程仓库，合并更新并做测试。</li>\n<li>维护者将合并后的更新推送到主仓库 blessed repository。</li>\n</ol>\n<p>在 GitHub 网站上使用得最多的就是这种工作流。人们可以复制（fork 亦即克隆）某个项目到自己的列表中，成为自己的公共仓库。随后将自己的更新提交到这个仓库，所有人都可以看到你的每次更新。这么做最主要的优点在于，你可以按照自己的节奏继续工作，而不必等待维护者处理你提交的更新；而维护者也可以按照自己的节奏，任何时候都可以过来处理接纳你的贡献。</p>\n<h4 id=\"司令官与副官工作流\"><a href=\"#司令官与副官工作流\" class=\"headerlink\" title=\"司令官与副官工作流\"></a>司令官与副官工作流</h4><p>这其实是上一种工作流的变体。一般超大型的项目才会用到这样的工作方式，像是拥有数百协作开发者的 Linux 内核项目就是如此。各个集成管理员分别负责集成项目中的特定部分，所以称为副官（lieutenant）。而所有这些集成管理员头上还有一位负责统筹的总集成管理员，称为司令官（dictator）。司令官维护的仓库用于提供所有协作者拉取最新集成的项目代码。整个流程看起来如图 5-3 所示：</p>\n<ol>\n<li>一般的开发者在自己的特性分支上工作，并不定期地根据主干分支（dictator 上的 master）衍合。</li>\n<li>副官（lieutenant）将普通开发者的特性分支合并到自己的 master 分支中。</li>\n<li>司令官（dictator）将所有副官的 master 分支并入自己的 master 分支。</li>\n<li>司令官（dictator）将集成后的 master 分支推送到共享仓库 blessed repository 中，以便所有其他开发者以此为基础进行衍合。</li>\n</ol>\n<p>这种工作流程并不常用，只有当项目极为庞杂，或者需要多级别管理时，才会体现出优势。利用这种方式，项目总负责人（即司令官）可以把大量分散的集成工作委托给不同的小组负责人分别处理，最后再统筹起来，如此各人的职责清晰明确，也不易出错（译注：此乃分而治之）。</p>\n<p>以上介绍的是常见的分布式系统可以应用的工作流程，当然不止于 Git。在实际的开发工作中，你可能会遇到各种为了满足特定需求而有所变化的工作方式。我想现在你应该已经清楚，接下来自己需要用哪种方式开展工作了。下节我还会再举些例子，看看各式工作流中的每个角色具体应该如何操作。</p>\n<h3 id=\"为项目作贡献\"><a href=\"#为项目作贡献\" class=\"headerlink\" title=\"为项目作贡献\"></a>为项目作贡献</h3>"},{"title":"grunt学习","date":"2016-10-24T18:51:59.000Z","_content":"\nGrunt以Nodejs构建。\n# 基础\n## 安装\nNodejs把javascript客户端语言转换成服务端的js。 \n\n\n## 命令行的使用\n\n\n\n## Node项目的基本结构\n","source":"_posts/grunt学习.md","raw":"---\ntitle: grunt学习\ndate: 2016-10-24 18:51:59\ntags:\n---\n\nGrunt以Nodejs构建。\n# 基础\n## 安装\nNodejs把javascript客户端语言转换成服务端的js。 \n\n\n## 命令行的使用\n\n\n\n## Node项目的基本结构\n","slug":"grunt学习","published":1,"updated":"2016-10-31T03:55:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuy6rzjs0005msq48dhjsmeh","content":"<p>Grunt以Nodejs构建。</p>\n<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>Nodejs把javascript客户端语言转换成服务端的js。 </p>\n<h2 id=\"命令行的使用\"><a href=\"#命令行的使用\" class=\"headerlink\" title=\"命令行的使用\"></a>命令行的使用</h2><h2 id=\"Node项目的基本结构\"><a href=\"#Node项目的基本结构\" class=\"headerlink\" title=\"Node项目的基本结构\"></a>Node项目的基本结构</h2>","excerpt":"","more":"<p>Grunt以Nodejs构建。</p>\n<h1 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>Nodejs把javascript客户端语言转换成服务端的js。 </p>\n<h2 id=\"命令行的使用\"><a href=\"#命令行的使用\" class=\"headerlink\" title=\"命令行的使用\"></a>命令行的使用</h2><h2 id=\"Node项目的基本结构\"><a href=\"#Node项目的基本结构\" class=\"headerlink\" title=\"Node项目的基本结构\"></a>Node项目的基本结构</h2>"},{"title":"js学习笔记","date":"2016-08-28T19:31:59.000Z","_content":"``` bash\n\tvar scope = \"global\";\n\tfunction check1(){\n\t\treturn function f(){\n\t\t\talert(scope);\n\t\t}\n\t   var scope = \"local\";\n\t};\n\tcheck1()();     //输出 undefined\n````\n上面的代码在运行时, 全局变量scope, check1()运行时, 返回f(),f()中的scope为局部变量 (在check1中var 了 scope , 覆盖了全局变量, 虽然并未运行到赋值语句, 但js中var的变量在这一层作用域中从开始就存在, 因此alert中的scope为undefined)\n\n<!--more-->\n``` bash\n\tvar scope = \"global\";\n\tfunction check2(){\n\t  function f(){\n\t\t\talert(scope);\n\t  }\n\t\t\tvar scope = \"local\";\n\t\t\treturn f;\n  };\n  check2()();     //输出 local\n```\n上面的代码, f()中scope同样为局部变量, 但此时仍然为 undefined , 当运行到赋值时, 变为 local , 再将f函数返回. 当调用f()时, 能正确显示局部变量的值, local .\n\n\n``` bash\nvar s = \"test\";\nvar S = new String(\"test\");\ns.len = 4;\nalert(s.len);\t//输出  undefined , 因为s.len为临时对象添加属性, 在引用完成后随即销毁. typeof s 为string\nS.len = 4;\nalert(S.len);\t//输出4 ; typeof S 为 object\n```\n\n\n\n--js总是严格按照从左至右的顺序来计算表达式--\n如: 在w = x + y * z 中 , 将首先计算字表达式 w , 然后计算x, y和z, 然后, y的值和z的值相乘, 再加上x的值, 最后将其赋值给表达式 w 所指代的变量的属性. 给表达式添加圆括号将会改变乘法/加法和赋值运算的关系, 但是从左至右的顺序是不会改变的. \n例子: date[++i] *= 2;\n\n\n``` bash\nvar point = {\n\tx:2,\n\ty:1,\n};\nvar point2 = {\n\tx:point.x,\n\ty:point.y + 1,\n};\nalert(point2.x+\" \"+point2.y);   // 2 2\npoint.x = 4;\npoint.y *= 2;\nalert(point2.x+\" \"+point2.y);   // 2 2\n```\n每次计算对象直接量的时候, 也都会计算它的每个属性的值. \n\n\n``` bash\nvar point = {\n\tx:2,\n\ty:1,\n};\nvar point2 = {\n\tx:point,\n};\nalert(point2.x.x+\" \"+point2.x.y);   // 2 1\npoint.x = 4;\npoint.y *= 2;\nalert(point2.x.x+\" \"+point2.x.y);   // 4 2\n```\n当值为引用时, 情况不一致, 思考为什么?\n\n__js 属性值为原始值或者对象值的区别__\n\njavascript的数据类型可以分为两种：原始类型和引用类型。原始类型也称为基本类型或简单类型，javascript基本数据类型包括Undefined、Null、Boolean、Number和String五种，而引用类型也称为复杂类型，在Javascript中是Object。与此相对应，它们的值也分别被称为原始值和复杂值\n__原始值(primitive value)__\n\n简单的说：原始值是固定而简单的值,是存放在栈(stack)中的简单数据段,也就是说,它们的值直接存储在变量访问的位置.\n\n　　原始值是表示Javascript中可用的数据或信息的最底层形式或最简单形式。原始类型的值被称为原始值，是因为它们是不可细化的。也就是说，数字是数字，字符是字符，布尔值则是true或false，null和undefined就是null和undefined。这些值本身很简单，不能表示由其他值组成的值.\n\n_有哪些类型是原始类型呢?_\n\n原始类型(primitive type)有以下五种类型:Undefined,Null,Boolean,Number,String\n\n我们可以使用typeof来判断一个是否在某个类型的范围内.\n<span style = \"color:red;\">typeof运算符</span>\n注意:\n1.返回值为字符串类型.\n\n2.和原始类型比,还差了个null,这个比较特殊,使用typeof(null),返回的是\"object\",我们将null理解成是object的占位符.\n\n__复杂值__\n　复杂值可以由很多不同类型的javascript对象组成。复杂对象其在内存中的大小是未知的，因为复杂对象可以包含任何值，而不是一个特定的已知值\n存储方式\n栈存储\n　　因为原始值占据空间固定，是简单的数据段，为了便于提升变量查询速度，将其存储在栈(stack)中\n堆存储\n　　由于复杂值的大小会改变，所以不能将其存放在栈中，否则会降低变量查询速度，因此其存储在堆(heap)中，存储在变量处的值是一个指针，指向存储对象的内存处\n\n访问方式\n\n按值访问\n\n　　原始值是作为不可细化的值进行存储和操作的，引用它们会转移其值\n``` bash\t\nvar myString = 'foo';\nvar myStringCopy = myString;\nvar myString = null;\nconsole.log(myString,myStringCopy);//null,'foo'\n```\n引用访问\n\n　　复杂值是通过引用进行存储和操作的，而不是实际的值。创建一个包含复杂对象的变量时，其值是内存中的一个引用地址。引用一个复杂对象时，使用它的名称(即变量或对象属性)通过内存中的引用地址获取该对象值\n``` bash\nvar myObject = {};\nvar copyOfMyObject = myObject;//没有复制值，而是复制了引用\nmyObject.foo = 'bar';//操作myObject中的值\n//现在如果输出myObject和copyOfMyObject，则都会输出foo属性，因为它们引用的是同一个对象\nconsole.log(myObject,copyOfMyObject);//Object{foo=\"bar\"}\n```\n\n\n比较方式\n\n　　原始值采用值比较，而复杂值采用引用比较。复杂值只有在引用相同的对象(即有相同的地址)时才相等。即使是包含相同对象的两个变量也彼此不相等，因为它们并不指向同一个对象\n``` bash\nvar price1 = 10;\nvar price2 = 10;\nvar price3 = new Number('10');\nvar price4 = price3;\nconsole.log(price1 == price2);//true\nconsole.log(price1 == price3);//true\nprice4 = 10;\nconsole.log(price4 == price3);//true\nconsole.log(price4 === price3);//false \nvar objectFoo = {same:'same'};\nvar objectBar = {same:'same'};\nconsole.log(objectFoo == objectBar);//false\nvar objectA = {foo: 'bar'};\nvar objectB = objectA;\nconsole.log(objectA == objectB);//true\n```\n\n动态属性\n\n　　对于复杂值，可以为其添加属性和方法，也可以改变和删除其属性和方法；但简单值不可以添加属性和方法\n\n　　复杂值支持动态对象属性，因为我们可以定义对象，然后创建引用，再更新对象，并且所有指向该对象的变量都会获得更新。一个新变量指向现有的复杂对象，并没有复制该对象。这就是复杂值有时被称为引用值的原因。复杂值可以根据需求有任意多个引用，即使对象改变，它们也总是指向同一个对象\n``` bash\nvar str = 'test';\nstr.property = true;\nconsole.log(str.property);//undefined　 \nvar objA = {property: 'value'};\nvar pointer1 = objA;\nvar pointer2 = pointer1;\nobjA.property = null;\nconsole.log(objA.property,pointer1.property,pointer2.property);//null null null\n```\n\n包装类型\n\n　　原始值被当作构造函数创建的一个对象来使用时，Javascript会将其转换成一个对象，以便可以使用对象的特性和方法，而后抛弃对象性质，并将它变回到原始值\n\n\n``` bash\nfunction constfunc(v) {\n\treturn function () {\n\t\treturn v;\n\t}\n}\n\nvar funcs = [];\nfor( var i = 0 ; i　< 10 ; ++i ){\n\tfuncs[i] = constfunc(i);\n}\nconsole.log(funcs[5]());\t\t//输出 5\n\nfunction constfuncs() {\n\tvar funcs = [];\n\tfor ( var i = 0; i < 10; ++ i){\n\t\tfuncs[i] = function(){return i;};\n\t}\n\treturn funcs;\n}\nvar funcs = constfuncs();\nconsole.log(funcs[3]());\t\t// 输出10   闭包中共享变量 i ,i最后为10, 所以funcs[i]() 都为10\n\n```\n\n``` bash\nfunction yi() {\n\tlet a = 1;\n\twhile (true){\n\t\tyield a;\n\t\t++a;\n\t}\n}\n\tlet f = yi();\n\tfor(let  i = 0; i < 10; ++i)\n\t\tconsole.log(f.next());\n\tf.close();\n```\n对于生成器 yield 的用法, 在上面的例子中, 如果不用f = yi() 语句, 而将 console.log(f.next()) 改为 console.log(yi().next()); 的话, 不能正确调用生成器. 这是因为使用yi().next()的话,相当于每次都先调用yi(), (这时就相当于函数调用, 使局部变量全部重新初始化, 当然得不到预期的结果), 使用f = yi(); 时, 相当于得到了yi()中的生成器对象, 这时调用next()方法, 当然就是正确的了. \n\n**style.height**\n我们都知道obj.offsetHeight与obj.style.height都可以获取obj的高度，但是在js使用中，我们通常会使用前者来获取高度，这是为什么，二者有什么样的区别呢。\n1、obj.offsetHeight可以获取写在样式文件里的属性值，而obj.style.height只能获取行内属性，在表现与结构分离的今天，这显然是不合适的\n2、obj.offsetHeight返回的是一个数值，而obj.style.height返回的是一个字符串，单位是“px”\n3、obj.offsetHeight是只读，而obj.style.height是可读写\n4、如果没有为元素设置高度，obj.offsetHeight会根据内容获取高度值，而obj.style.height会返回undefind\njQuery里我们使用\\$(obj).height()来获取元素的高度，（\\$(obj).css('height')返回的是一个带有单位的字符串）。\n与其他三个（\\$(obj).height()、\\$(obj).css('height')、obj.style.height）不同的是，obj.offsetHeight的高度就是height+padding,其他是不把padding计入高度的\n\n\n\n\n\n\n","source":"_posts/js学习笔记.md","raw":"---\ntitle: js学习笔记\ndate: 2016-08-28 19:31:59\ntags: js 笔记\n---\n``` bash\n\tvar scope = \"global\";\n\tfunction check1(){\n\t\treturn function f(){\n\t\t\talert(scope);\n\t\t}\n\t   var scope = \"local\";\n\t};\n\tcheck1()();     //输出 undefined\n````\n上面的代码在运行时, 全局变量scope, check1()运行时, 返回f(),f()中的scope为局部变量 (在check1中var 了 scope , 覆盖了全局变量, 虽然并未运行到赋值语句, 但js中var的变量在这一层作用域中从开始就存在, 因此alert中的scope为undefined)\n\n<!--more-->\n``` bash\n\tvar scope = \"global\";\n\tfunction check2(){\n\t  function f(){\n\t\t\talert(scope);\n\t  }\n\t\t\tvar scope = \"local\";\n\t\t\treturn f;\n  };\n  check2()();     //输出 local\n```\n上面的代码, f()中scope同样为局部变量, 但此时仍然为 undefined , 当运行到赋值时, 变为 local , 再将f函数返回. 当调用f()时, 能正确显示局部变量的值, local .\n\n\n``` bash\nvar s = \"test\";\nvar S = new String(\"test\");\ns.len = 4;\nalert(s.len);\t//输出  undefined , 因为s.len为临时对象添加属性, 在引用完成后随即销毁. typeof s 为string\nS.len = 4;\nalert(S.len);\t//输出4 ; typeof S 为 object\n```\n\n\n\n--js总是严格按照从左至右的顺序来计算表达式--\n如: 在w = x + y * z 中 , 将首先计算字表达式 w , 然后计算x, y和z, 然后, y的值和z的值相乘, 再加上x的值, 最后将其赋值给表达式 w 所指代的变量的属性. 给表达式添加圆括号将会改变乘法/加法和赋值运算的关系, 但是从左至右的顺序是不会改变的. \n例子: date[++i] *= 2;\n\n\n``` bash\nvar point = {\n\tx:2,\n\ty:1,\n};\nvar point2 = {\n\tx:point.x,\n\ty:point.y + 1,\n};\nalert(point2.x+\" \"+point2.y);   // 2 2\npoint.x = 4;\npoint.y *= 2;\nalert(point2.x+\" \"+point2.y);   // 2 2\n```\n每次计算对象直接量的时候, 也都会计算它的每个属性的值. \n\n\n``` bash\nvar point = {\n\tx:2,\n\ty:1,\n};\nvar point2 = {\n\tx:point,\n};\nalert(point2.x.x+\" \"+point2.x.y);   // 2 1\npoint.x = 4;\npoint.y *= 2;\nalert(point2.x.x+\" \"+point2.x.y);   // 4 2\n```\n当值为引用时, 情况不一致, 思考为什么?\n\n__js 属性值为原始值或者对象值的区别__\n\njavascript的数据类型可以分为两种：原始类型和引用类型。原始类型也称为基本类型或简单类型，javascript基本数据类型包括Undefined、Null、Boolean、Number和String五种，而引用类型也称为复杂类型，在Javascript中是Object。与此相对应，它们的值也分别被称为原始值和复杂值\n__原始值(primitive value)__\n\n简单的说：原始值是固定而简单的值,是存放在栈(stack)中的简单数据段,也就是说,它们的值直接存储在变量访问的位置.\n\n　　原始值是表示Javascript中可用的数据或信息的最底层形式或最简单形式。原始类型的值被称为原始值，是因为它们是不可细化的。也就是说，数字是数字，字符是字符，布尔值则是true或false，null和undefined就是null和undefined。这些值本身很简单，不能表示由其他值组成的值.\n\n_有哪些类型是原始类型呢?_\n\n原始类型(primitive type)有以下五种类型:Undefined,Null,Boolean,Number,String\n\n我们可以使用typeof来判断一个是否在某个类型的范围内.\n<span style = \"color:red;\">typeof运算符</span>\n注意:\n1.返回值为字符串类型.\n\n2.和原始类型比,还差了个null,这个比较特殊,使用typeof(null),返回的是\"object\",我们将null理解成是object的占位符.\n\n__复杂值__\n　复杂值可以由很多不同类型的javascript对象组成。复杂对象其在内存中的大小是未知的，因为复杂对象可以包含任何值，而不是一个特定的已知值\n存储方式\n栈存储\n　　因为原始值占据空间固定，是简单的数据段，为了便于提升变量查询速度，将其存储在栈(stack)中\n堆存储\n　　由于复杂值的大小会改变，所以不能将其存放在栈中，否则会降低变量查询速度，因此其存储在堆(heap)中，存储在变量处的值是一个指针，指向存储对象的内存处\n\n访问方式\n\n按值访问\n\n　　原始值是作为不可细化的值进行存储和操作的，引用它们会转移其值\n``` bash\t\nvar myString = 'foo';\nvar myStringCopy = myString;\nvar myString = null;\nconsole.log(myString,myStringCopy);//null,'foo'\n```\n引用访问\n\n　　复杂值是通过引用进行存储和操作的，而不是实际的值。创建一个包含复杂对象的变量时，其值是内存中的一个引用地址。引用一个复杂对象时，使用它的名称(即变量或对象属性)通过内存中的引用地址获取该对象值\n``` bash\nvar myObject = {};\nvar copyOfMyObject = myObject;//没有复制值，而是复制了引用\nmyObject.foo = 'bar';//操作myObject中的值\n//现在如果输出myObject和copyOfMyObject，则都会输出foo属性，因为它们引用的是同一个对象\nconsole.log(myObject,copyOfMyObject);//Object{foo=\"bar\"}\n```\n\n\n比较方式\n\n　　原始值采用值比较，而复杂值采用引用比较。复杂值只有在引用相同的对象(即有相同的地址)时才相等。即使是包含相同对象的两个变量也彼此不相等，因为它们并不指向同一个对象\n``` bash\nvar price1 = 10;\nvar price2 = 10;\nvar price3 = new Number('10');\nvar price4 = price3;\nconsole.log(price1 == price2);//true\nconsole.log(price1 == price3);//true\nprice4 = 10;\nconsole.log(price4 == price3);//true\nconsole.log(price4 === price3);//false \nvar objectFoo = {same:'same'};\nvar objectBar = {same:'same'};\nconsole.log(objectFoo == objectBar);//false\nvar objectA = {foo: 'bar'};\nvar objectB = objectA;\nconsole.log(objectA == objectB);//true\n```\n\n动态属性\n\n　　对于复杂值，可以为其添加属性和方法，也可以改变和删除其属性和方法；但简单值不可以添加属性和方法\n\n　　复杂值支持动态对象属性，因为我们可以定义对象，然后创建引用，再更新对象，并且所有指向该对象的变量都会获得更新。一个新变量指向现有的复杂对象，并没有复制该对象。这就是复杂值有时被称为引用值的原因。复杂值可以根据需求有任意多个引用，即使对象改变，它们也总是指向同一个对象\n``` bash\nvar str = 'test';\nstr.property = true;\nconsole.log(str.property);//undefined　 \nvar objA = {property: 'value'};\nvar pointer1 = objA;\nvar pointer2 = pointer1;\nobjA.property = null;\nconsole.log(objA.property,pointer1.property,pointer2.property);//null null null\n```\n\n包装类型\n\n　　原始值被当作构造函数创建的一个对象来使用时，Javascript会将其转换成一个对象，以便可以使用对象的特性和方法，而后抛弃对象性质，并将它变回到原始值\n\n\n``` bash\nfunction constfunc(v) {\n\treturn function () {\n\t\treturn v;\n\t}\n}\n\nvar funcs = [];\nfor( var i = 0 ; i　< 10 ; ++i ){\n\tfuncs[i] = constfunc(i);\n}\nconsole.log(funcs[5]());\t\t//输出 5\n\nfunction constfuncs() {\n\tvar funcs = [];\n\tfor ( var i = 0; i < 10; ++ i){\n\t\tfuncs[i] = function(){return i;};\n\t}\n\treturn funcs;\n}\nvar funcs = constfuncs();\nconsole.log(funcs[3]());\t\t// 输出10   闭包中共享变量 i ,i最后为10, 所以funcs[i]() 都为10\n\n```\n\n``` bash\nfunction yi() {\n\tlet a = 1;\n\twhile (true){\n\t\tyield a;\n\t\t++a;\n\t}\n}\n\tlet f = yi();\n\tfor(let  i = 0; i < 10; ++i)\n\t\tconsole.log(f.next());\n\tf.close();\n```\n对于生成器 yield 的用法, 在上面的例子中, 如果不用f = yi() 语句, 而将 console.log(f.next()) 改为 console.log(yi().next()); 的话, 不能正确调用生成器. 这是因为使用yi().next()的话,相当于每次都先调用yi(), (这时就相当于函数调用, 使局部变量全部重新初始化, 当然得不到预期的结果), 使用f = yi(); 时, 相当于得到了yi()中的生成器对象, 这时调用next()方法, 当然就是正确的了. \n\n**style.height**\n我们都知道obj.offsetHeight与obj.style.height都可以获取obj的高度，但是在js使用中，我们通常会使用前者来获取高度，这是为什么，二者有什么样的区别呢。\n1、obj.offsetHeight可以获取写在样式文件里的属性值，而obj.style.height只能获取行内属性，在表现与结构分离的今天，这显然是不合适的\n2、obj.offsetHeight返回的是一个数值，而obj.style.height返回的是一个字符串，单位是“px”\n3、obj.offsetHeight是只读，而obj.style.height是可读写\n4、如果没有为元素设置高度，obj.offsetHeight会根据内容获取高度值，而obj.style.height会返回undefind\njQuery里我们使用\\$(obj).height()来获取元素的高度，（\\$(obj).css('height')返回的是一个带有单位的字符串）。\n与其他三个（\\$(obj).height()、\\$(obj).css('height')、obj.style.height）不同的是，obj.offsetHeight的高度就是height+padding,其他是不把padding计入高度的\n\n\n\n\n\n\n","slug":"js学习笔记","published":1,"updated":"2016-10-31T03:55:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuy6rzjv0008msq4xkg9kxf2","content":"<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">\tvar scope = <span class=\"string\">\"global\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">check1</span></span>()&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">return</span> <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f</span></span>()&#123;</div><div class=\"line\">\t\t\talert(scope);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t   var scope = <span class=\"string\">\"local\"</span>;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\tcheck1()();     //输出 undefined</div><div class=\"line\">`</div></pre></td></tr></table></figure>\n<p>上面的代码在运行时, 全局变量scope, check1()运行时, 返回f(),f()中的scope为局部变量 (在check1中var 了 scope , 覆盖了全局变量, 虽然并未运行到赋值语句, 但js中var的变量在这一层作用域中从开始就存在, 因此alert中的scope为undefined)</p>\n<a id=\"more\"></a>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">var scope = <span class=\"string\">\"global\"</span>;</div><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">check2</span></span>()&#123;</div><div class=\"line\">  <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f</span></span>()&#123;</div><div class=\"line\">\t\talert(scope);</div><div class=\"line\">  &#125;</div><div class=\"line\">\t\tvar scope = <span class=\"string\">\"local\"</span>;</div><div class=\"line\">\t\t<span class=\"built_in\">return</span> f;</div><div class=\"line\"> &#125;;</div><div class=\"line\"> check2()();     //输出 <span class=\"built_in\">local</span></div></pre></td></tr></table></figure>\n<p>上面的代码, f()中scope同样为局部变量, 但此时仍然为 undefined , 当运行到赋值时, 变为 local , 再将f函数返回. 当调用f()时, 能正确显示局部变量的值, local .</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">var s = <span class=\"string\">\"test\"</span>;</div><div class=\"line\">var S = new String(<span class=\"string\">\"test\"</span>);</div><div class=\"line\">s.len = 4;</div><div class=\"line\">alert(s.len);\t//输出  undefined , 因为s.len为临时对象添加属性, 在引用完成后随即销毁. typeof s 为string</div><div class=\"line\">S.len = 4;</div><div class=\"line\">alert(S.len);\t//输出4 ; typeof S 为 object</div></pre></td></tr></table></figure>\n<p>–js总是严格按照从左至右的顺序来计算表达式–<br>如: 在w = x + y <em> z 中 , 将首先计算字表达式 w , 然后计算x, y和z, 然后, y的值和z的值相乘, 再加上x的值, 最后将其赋值给表达式 w 所指代的变量的属性. 给表达式添加圆括号将会改变乘法/加法和赋值运算的关系, 但是从左至右的顺序是不会改变的.<br>例子: date[++i] </em>= 2;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">var point = &#123;</div><div class=\"line\">\tx:2,</div><div class=\"line\">\ty:1,</div><div class=\"line\">&#125;;</div><div class=\"line\">var point2 = &#123;</div><div class=\"line\">\tx:point.x,</div><div class=\"line\">\ty:point.y + 1,</div><div class=\"line\">&#125;;</div><div class=\"line\">alert(point2.x+<span class=\"string\">\" \"</span>+point2.y);   // 2 2</div><div class=\"line\">point.x = 4;</div><div class=\"line\">point.y *= 2;</div><div class=\"line\">alert(point2.x+<span class=\"string\">\" \"</span>+point2.y);   // 2 2</div></pre></td></tr></table></figure>\n<p>每次计算对象直接量的时候, 也都会计算它的每个属性的值. </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">var point = &#123;</div><div class=\"line\">\tx:2,</div><div class=\"line\">\ty:1,</div><div class=\"line\">&#125;;</div><div class=\"line\">var point2 = &#123;</div><div class=\"line\">\tx:point,</div><div class=\"line\">&#125;;</div><div class=\"line\">alert(point2.x.x+<span class=\"string\">\" \"</span>+point2.x.y);   // 2 1</div><div class=\"line\">point.x = 4;</div><div class=\"line\">point.y *= 2;</div><div class=\"line\">alert(point2.x.x+<span class=\"string\">\" \"</span>+point2.x.y);   // 4 2</div></pre></td></tr></table></figure>\n<p>当值为引用时, 情况不一致, 思考为什么?</p>\n<p><strong>js 属性值为原始值或者对象值的区别</strong></p>\n<p>javascript的数据类型可以分为两种：原始类型和引用类型。原始类型也称为基本类型或简单类型，javascript基本数据类型包括Undefined、Null、Boolean、Number和String五种，而引用类型也称为复杂类型，在Javascript中是Object。与此相对应，它们的值也分别被称为原始值和复杂值<br><strong>原始值(primitive value)</strong></p>\n<p>简单的说：原始值是固定而简单的值,是存放在栈(stack)中的简单数据段,也就是说,它们的值直接存储在变量访问的位置.</p>\n<p>　　原始值是表示Javascript中可用的数据或信息的最底层形式或最简单形式。原始类型的值被称为原始值，是因为它们是不可细化的。也就是说，数字是数字，字符是字符，布尔值则是true或false，null和undefined就是null和undefined。这些值本身很简单，不能表示由其他值组成的值.</p>\n<p><em>有哪些类型是原始类型呢?</em></p>\n<p>原始类型(primitive type)有以下五种类型:Undefined,Null,Boolean,Number,String</p>\n<p>我们可以使用typeof来判断一个是否在某个类型的范围内.<br><span style=\"color:red;\">typeof运算符</span><br>注意:<br>1.返回值为字符串类型.</p>\n<p>2.和原始类型比,还差了个null,这个比较特殊,使用typeof(null),返回的是”object”,我们将null理解成是object的占位符.</p>\n<p><strong>复杂值</strong><br>　复杂值可以由很多不同类型的javascript对象组成。复杂对象其在内存中的大小是未知的，因为复杂对象可以包含任何值，而不是一个特定的已知值<br>存储方式<br>栈存储<br>　　因为原始值占据空间固定，是简单的数据段，为了便于提升变量查询速度，将其存储在栈(stack)中<br>堆存储<br>　　由于复杂值的大小会改变，所以不能将其存放在栈中，否则会降低变量查询速度，因此其存储在堆(heap)中，存储在变量处的值是一个指针，指向存储对象的内存处</p>\n<p>访问方式</p>\n<p>按值访问</p>\n<p>　　原始值是作为不可细化的值进行存储和操作的，引用它们会转移其值<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">var myString = <span class=\"string\">'foo'</span>;</div><div class=\"line\">var myStringCopy = myString;</div><div class=\"line\">var myString = null;</div><div class=\"line\">console.log(myString,myStringCopy);//null,<span class=\"string\">'foo'</span></div></pre></td></tr></table></figure></p>\n<p>引用访问</p>\n<p>　　复杂值是通过引用进行存储和操作的，而不是实际的值。创建一个包含复杂对象的变量时，其值是内存中的一个引用地址。引用一个复杂对象时，使用它的名称(即变量或对象属性)通过内存中的引用地址获取该对象值<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">var myObject = &#123;&#125;;</div><div class=\"line\">var copyOfMyObject = myObject;//没有复制值，而是复制了引用</div><div class=\"line\">myObject.foo = <span class=\"string\">'bar'</span>;//操作myObject中的值</div><div class=\"line\">//现在如果输出myObject和copyOfMyObject，则都会输出foo属性，因为它们引用的是同一个对象</div><div class=\"line\">console.log(myObject,copyOfMyObject);//Object&#123;foo=<span class=\"string\">\"bar\"</span>&#125;</div></pre></td></tr></table></figure></p>\n<p>比较方式</p>\n<p>　　原始值采用值比较，而复杂值采用引用比较。复杂值只有在引用相同的对象(即有相同的地址)时才相等。即使是包含相同对象的两个变量也彼此不相等，因为它们并不指向同一个对象<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">var price1 = 10;</div><div class=\"line\">var price2 = 10;</div><div class=\"line\">var price3 = new Number(<span class=\"string\">'10'</span>);</div><div class=\"line\">var price4 = price3;</div><div class=\"line\">console.log(price1 == price2);//<span class=\"literal\">true</span></div><div class=\"line\">console.log(price1 == price3);//<span class=\"literal\">true</span></div><div class=\"line\">price4 = 10;</div><div class=\"line\">console.log(price4 == price3);//<span class=\"literal\">true</span></div><div class=\"line\">console.log(price4 === price3);//<span class=\"literal\">false</span> </div><div class=\"line\">var objectFoo = &#123;same:<span class=\"string\">'same'</span>&#125;;</div><div class=\"line\">var objectBar = &#123;same:<span class=\"string\">'same'</span>&#125;;</div><div class=\"line\">console.log(objectFoo == objectBar);//<span class=\"literal\">false</span></div><div class=\"line\">var objectA = &#123;foo: <span class=\"string\">'bar'</span>&#125;;</div><div class=\"line\">var objectB = objectA;</div><div class=\"line\">console.log(objectA == objectB);//<span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<p>动态属性</p>\n<p>　　对于复杂值，可以为其添加属性和方法，也可以改变和删除其属性和方法；但简单值不可以添加属性和方法</p>\n<p>　　复杂值支持动态对象属性，因为我们可以定义对象，然后创建引用，再更新对象，并且所有指向该对象的变量都会获得更新。一个新变量指向现有的复杂对象，并没有复制该对象。这就是复杂值有时被称为引用值的原因。复杂值可以根据需求有任意多个引用，即使对象改变，它们也总是指向同一个对象<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">var str = <span class=\"string\">'test'</span>;</div><div class=\"line\">str.property = <span class=\"literal\">true</span>;</div><div class=\"line\">console.log(str.property);//undefined　 </div><div class=\"line\">var objA = &#123;property: <span class=\"string\">'value'</span>&#125;;</div><div class=\"line\">var pointer1 = objA;</div><div class=\"line\">var pointer2 = pointer1;</div><div class=\"line\">objA.property = null;</div><div class=\"line\">console.log(objA.property,pointer1.property,pointer2.property);//null null null</div></pre></td></tr></table></figure></p>\n<p>包装类型</p>\n<p>　　原始值被当作构造函数创建的一个对象来使用时，Javascript会将其转换成一个对象，以便可以使用对象的特性和方法，而后抛弃对象性质，并将它变回到原始值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> constfunc(v) &#123;</div><div class=\"line\">\t<span class=\"built_in\">return</span> <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">return</span> v;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var funcs = [];</div><div class=\"line\"><span class=\"keyword\">for</span>( var i = 0 ; i　&lt; 10 ; ++i )&#123;</div><div class=\"line\">\tfuncs[i] = constfunc(i);</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(funcs[5]());\t\t//输出 5</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">constfuncs</span></span>() &#123;</div><div class=\"line\">\tvar funcs = [];</div><div class=\"line\">\t<span class=\"keyword\">for</span> ( var i = 0; i &lt; 10; ++ i)&#123;</div><div class=\"line\">\t\tfuncs[i] = <span class=\"function\"><span class=\"title\">function</span></span>()&#123;<span class=\"built_in\">return</span> i;&#125;;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">return</span> funcs;</div><div class=\"line\">&#125;</div><div class=\"line\">var funcs = constfuncs();</div><div class=\"line\">console.log(funcs[3]());\t\t// 输出10   闭包中共享变量 i ,i最后为10, 所以funcs[i]() 都为10</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">yi</span></span>() &#123;</div><div class=\"line\">\t<span class=\"built_in\">let</span> a = 1;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</div><div class=\"line\">\t\tyield a;</div><div class=\"line\">\t\t++a;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">\t<span class=\"built_in\">let</span> f = yi();</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"built_in\">let</span>  i = 0; i &lt; 10; ++i)</div><div class=\"line\">\t\tconsole.log(f.next());</div><div class=\"line\">\tf.close();</div></pre></td></tr></table></figure>\n<p>对于生成器 yield 的用法, 在上面的例子中, 如果不用f = yi() 语句, 而将 console.log(f.next()) 改为 console.log(yi().next()); 的话, 不能正确调用生成器. 这是因为使用yi().next()的话,相当于每次都先调用yi(), (这时就相当于函数调用, 使局部变量全部重新初始化, 当然得不到预期的结果), 使用f = yi(); 时, 相当于得到了yi()中的生成器对象, 这时调用next()方法, 当然就是正确的了. </p>\n<p><strong>style.height</strong><br>我们都知道obj.offsetHeight与obj.style.height都可以获取obj的高度，但是在js使用中，我们通常会使用前者来获取高度，这是为什么，二者有什么样的区别呢。<br>1、obj.offsetHeight可以获取写在样式文件里的属性值，而obj.style.height只能获取行内属性，在表现与结构分离的今天，这显然是不合适的<br>2、obj.offsetHeight返回的是一个数值，而obj.style.height返回的是一个字符串，单位是“px”<br>3、obj.offsetHeight是只读，而obj.style.height是可读写<br>4、如果没有为元素设置高度，obj.offsetHeight会根据内容获取高度值，而obj.style.height会返回undefind<br>jQuery里我们使用\\$(obj).height()来获取元素的高度，（\\$(obj).css(‘height’)返回的是一个带有单位的字符串）。<br>与其他三个（\\$(obj).height()、\\$(obj).css(‘height’)、obj.style.height）不同的是，obj.offsetHeight的高度就是height+padding,其他是不把padding计入高度的</p>\n","excerpt":"<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">\tvar scope = <span class=\"string\">\"global\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">check1</span></span>()&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">return</span> <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f</span></span>()&#123;</div><div class=\"line\">\t\t\talert(scope);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t   var scope = <span class=\"string\">\"local\"</span>;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\tcheck1()();     //输出 undefined</div><div class=\"line\">`</div></pre></td></tr></table></figure>\n<p>上面的代码在运行时, 全局变量scope, check1()运行时, 返回f(),f()中的scope为局部变量 (在check1中var 了 scope , 覆盖了全局变量, 虽然并未运行到赋值语句, 但js中var的变量在这一层作用域中从开始就存在, 因此alert中的scope为undefined)</p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">var scope = <span class=\"string\">\"global\"</span>;</div><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">check2</span></span>()&#123;</div><div class=\"line\">  <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f</span></span>()&#123;</div><div class=\"line\">\t\talert(scope);</div><div class=\"line\">  &#125;</div><div class=\"line\">\t\tvar scope = <span class=\"string\">\"local\"</span>;</div><div class=\"line\">\t\t<span class=\"built_in\">return</span> f;</div><div class=\"line\"> &#125;;</div><div class=\"line\"> check2()();     //输出 <span class=\"built_in\">local</span></div></pre></td></tr></table></figure>\n<p>上面的代码, f()中scope同样为局部变量, 但此时仍然为 undefined , 当运行到赋值时, 变为 local , 再将f函数返回. 当调用f()时, 能正确显示局部变量的值, local .</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">var s = <span class=\"string\">\"test\"</span>;</div><div class=\"line\">var S = new String(<span class=\"string\">\"test\"</span>);</div><div class=\"line\">s.len = 4;</div><div class=\"line\">alert(s.len);\t//输出  undefined , 因为s.len为临时对象添加属性, 在引用完成后随即销毁. typeof s 为string</div><div class=\"line\">S.len = 4;</div><div class=\"line\">alert(S.len);\t//输出4 ; typeof S 为 object</div></pre></td></tr></table></figure>\n<p>–js总是严格按照从左至右的顺序来计算表达式–<br>如: 在w = x + y <em> z 中 , 将首先计算字表达式 w , 然后计算x, y和z, 然后, y的值和z的值相乘, 再加上x的值, 最后将其赋值给表达式 w 所指代的变量的属性. 给表达式添加圆括号将会改变乘法/加法和赋值运算的关系, 但是从左至右的顺序是不会改变的.<br>例子: date[++i] </em>= 2;</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">var point = &#123;</div><div class=\"line\">\tx:2,</div><div class=\"line\">\ty:1,</div><div class=\"line\">&#125;;</div><div class=\"line\">var point2 = &#123;</div><div class=\"line\">\tx:point.x,</div><div class=\"line\">\ty:point.y + 1,</div><div class=\"line\">&#125;;</div><div class=\"line\">alert(point2.x+<span class=\"string\">\" \"</span>+point2.y);   // 2 2</div><div class=\"line\">point.x = 4;</div><div class=\"line\">point.y *= 2;</div><div class=\"line\">alert(point2.x+<span class=\"string\">\" \"</span>+point2.y);   // 2 2</div></pre></td></tr></table></figure>\n<p>每次计算对象直接量的时候, 也都会计算它的每个属性的值. </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">var point = &#123;</div><div class=\"line\">\tx:2,</div><div class=\"line\">\ty:1,</div><div class=\"line\">&#125;;</div><div class=\"line\">var point2 = &#123;</div><div class=\"line\">\tx:point,</div><div class=\"line\">&#125;;</div><div class=\"line\">alert(point2.x.x+<span class=\"string\">\" \"</span>+point2.x.y);   // 2 1</div><div class=\"line\">point.x = 4;</div><div class=\"line\">point.y *= 2;</div><div class=\"line\">alert(point2.x.x+<span class=\"string\">\" \"</span>+point2.x.y);   // 4 2</div></pre></td></tr></table></figure>\n<p>当值为引用时, 情况不一致, 思考为什么?</p>\n<p><strong>js 属性值为原始值或者对象值的区别</strong></p>\n<p>javascript的数据类型可以分为两种：原始类型和引用类型。原始类型也称为基本类型或简单类型，javascript基本数据类型包括Undefined、Null、Boolean、Number和String五种，而引用类型也称为复杂类型，在Javascript中是Object。与此相对应，它们的值也分别被称为原始值和复杂值<br><strong>原始值(primitive value)</strong></p>\n<p>简单的说：原始值是固定而简单的值,是存放在栈(stack)中的简单数据段,也就是说,它们的值直接存储在变量访问的位置.</p>\n<p>　　原始值是表示Javascript中可用的数据或信息的最底层形式或最简单形式。原始类型的值被称为原始值，是因为它们是不可细化的。也就是说，数字是数字，字符是字符，布尔值则是true或false，null和undefined就是null和undefined。这些值本身很简单，不能表示由其他值组成的值.</p>\n<p><em>有哪些类型是原始类型呢?</em></p>\n<p>原始类型(primitive type)有以下五种类型:Undefined,Null,Boolean,Number,String</p>\n<p>我们可以使用typeof来判断一个是否在某个类型的范围内.<br><span style = \"color:red;\">typeof运算符</span><br>注意:<br>1.返回值为字符串类型.</p>\n<p>2.和原始类型比,还差了个null,这个比较特殊,使用typeof(null),返回的是”object”,我们将null理解成是object的占位符.</p>\n<p><strong>复杂值</strong><br>　复杂值可以由很多不同类型的javascript对象组成。复杂对象其在内存中的大小是未知的，因为复杂对象可以包含任何值，而不是一个特定的已知值<br>存储方式<br>栈存储<br>　　因为原始值占据空间固定，是简单的数据段，为了便于提升变量查询速度，将其存储在栈(stack)中<br>堆存储<br>　　由于复杂值的大小会改变，所以不能将其存放在栈中，否则会降低变量查询速度，因此其存储在堆(heap)中，存储在变量处的值是一个指针，指向存储对象的内存处</p>\n<p>访问方式</p>\n<p>按值访问</p>\n<p>　　原始值是作为不可细化的值进行存储和操作的，引用它们会转移其值<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">var myString = <span class=\"string\">'foo'</span>;</div><div class=\"line\">var myStringCopy = myString;</div><div class=\"line\">var myString = null;</div><div class=\"line\">console.log(myString,myStringCopy);//null,<span class=\"string\">'foo'</span></div></pre></td></tr></table></figure></p>\n<p>引用访问</p>\n<p>　　复杂值是通过引用进行存储和操作的，而不是实际的值。创建一个包含复杂对象的变量时，其值是内存中的一个引用地址。引用一个复杂对象时，使用它的名称(即变量或对象属性)通过内存中的引用地址获取该对象值<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">var myObject = &#123;&#125;;</div><div class=\"line\">var copyOfMyObject = myObject;//没有复制值，而是复制了引用</div><div class=\"line\">myObject.foo = <span class=\"string\">'bar'</span>;//操作myObject中的值</div><div class=\"line\">//现在如果输出myObject和copyOfMyObject，则都会输出foo属性，因为它们引用的是同一个对象</div><div class=\"line\">console.log(myObject,copyOfMyObject);//Object&#123;foo=<span class=\"string\">\"bar\"</span>&#125;</div></pre></td></tr></table></figure></p>\n<p>比较方式</p>\n<p>　　原始值采用值比较，而复杂值采用引用比较。复杂值只有在引用相同的对象(即有相同的地址)时才相等。即使是包含相同对象的两个变量也彼此不相等，因为它们并不指向同一个对象<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">var price1 = 10;</div><div class=\"line\">var price2 = 10;</div><div class=\"line\">var price3 = new Number(<span class=\"string\">'10'</span>);</div><div class=\"line\">var price4 = price3;</div><div class=\"line\">console.log(price1 == price2);//<span class=\"literal\">true</span></div><div class=\"line\">console.log(price1 == price3);//<span class=\"literal\">true</span></div><div class=\"line\">price4 = 10;</div><div class=\"line\">console.log(price4 == price3);//<span class=\"literal\">true</span></div><div class=\"line\">console.log(price4 === price3);//<span class=\"literal\">false</span> </div><div class=\"line\">var objectFoo = &#123;same:<span class=\"string\">'same'</span>&#125;;</div><div class=\"line\">var objectBar = &#123;same:<span class=\"string\">'same'</span>&#125;;</div><div class=\"line\">console.log(objectFoo == objectBar);//<span class=\"literal\">false</span></div><div class=\"line\">var objectA = &#123;foo: <span class=\"string\">'bar'</span>&#125;;</div><div class=\"line\">var objectB = objectA;</div><div class=\"line\">console.log(objectA == objectB);//<span class=\"literal\">true</span></div></pre></td></tr></table></figure></p>\n<p>动态属性</p>\n<p>　　对于复杂值，可以为其添加属性和方法，也可以改变和删除其属性和方法；但简单值不可以添加属性和方法</p>\n<p>　　复杂值支持动态对象属性，因为我们可以定义对象，然后创建引用，再更新对象，并且所有指向该对象的变量都会获得更新。一个新变量指向现有的复杂对象，并没有复制该对象。这就是复杂值有时被称为引用值的原因。复杂值可以根据需求有任意多个引用，即使对象改变，它们也总是指向同一个对象<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">var str = <span class=\"string\">'test'</span>;</div><div class=\"line\">str.property = <span class=\"literal\">true</span>;</div><div class=\"line\">console.log(str.property);//undefined　 </div><div class=\"line\">var objA = &#123;property: <span class=\"string\">'value'</span>&#125;;</div><div class=\"line\">var pointer1 = objA;</div><div class=\"line\">var pointer2 = pointer1;</div><div class=\"line\">objA.property = null;</div><div class=\"line\">console.log(objA.property,pointer1.property,pointer2.property);//null null null</div></pre></td></tr></table></figure></p>\n<p>包装类型</p>\n<p>　　原始值被当作构造函数创建的一个对象来使用时，Javascript会将其转换成一个对象，以便可以使用对象的特性和方法，而后抛弃对象性质，并将它变回到原始值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> constfunc(v) &#123;</div><div class=\"line\">\t<span class=\"built_in\">return</span> <span class=\"function\"><span class=\"title\">function</span></span> () &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">return</span> v;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var funcs = [];</div><div class=\"line\"><span class=\"keyword\">for</span>( var i = 0 ; i　&lt; 10 ; ++i )&#123;</div><div class=\"line\">\tfuncs[i] = constfunc(i);</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(funcs[5]());\t\t//输出 5</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">constfuncs</span></span>() &#123;</div><div class=\"line\">\tvar funcs = [];</div><div class=\"line\">\t<span class=\"keyword\">for</span> ( var i = 0; i &lt; 10; ++ i)&#123;</div><div class=\"line\">\t\tfuncs[i] = <span class=\"function\"><span class=\"title\">function</span></span>()&#123;<span class=\"built_in\">return</span> i;&#125;;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">return</span> funcs;</div><div class=\"line\">&#125;</div><div class=\"line\">var funcs = constfuncs();</div><div class=\"line\">console.log(funcs[3]());\t\t// 输出10   闭包中共享变量 i ,i最后为10, 所以funcs[i]() 都为10</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">yi</span></span>() &#123;</div><div class=\"line\">\t<span class=\"built_in\">let</span> a = 1;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</div><div class=\"line\">\t\tyield a;</div><div class=\"line\">\t\t++a;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">\t<span class=\"built_in\">let</span> f = yi();</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"built_in\">let</span>  i = 0; i &lt; 10; ++i)</div><div class=\"line\">\t\tconsole.log(f.next());</div><div class=\"line\">\tf.close();</div></pre></td></tr></table></figure>\n<p>对于生成器 yield 的用法, 在上面的例子中, 如果不用f = yi() 语句, 而将 console.log(f.next()) 改为 console.log(yi().next()); 的话, 不能正确调用生成器. 这是因为使用yi().next()的话,相当于每次都先调用yi(), (这时就相当于函数调用, 使局部变量全部重新初始化, 当然得不到预期的结果), 使用f = yi(); 时, 相当于得到了yi()中的生成器对象, 这时调用next()方法, 当然就是正确的了. </p>\n<p><strong>style.height</strong><br>我们都知道obj.offsetHeight与obj.style.height都可以获取obj的高度，但是在js使用中，我们通常会使用前者来获取高度，这是为什么，二者有什么样的区别呢。<br>1、obj.offsetHeight可以获取写在样式文件里的属性值，而obj.style.height只能获取行内属性，在表现与结构分离的今天，这显然是不合适的<br>2、obj.offsetHeight返回的是一个数值，而obj.style.height返回的是一个字符串，单位是“px”<br>3、obj.offsetHeight是只读，而obj.style.height是可读写<br>4、如果没有为元素设置高度，obj.offsetHeight会根据内容获取高度值，而obj.style.height会返回undefind<br>jQuery里我们使用\\$(obj).height()来获取元素的高度，（\\$(obj).css(‘height’)返回的是一个带有单位的字符串）。<br>与其他三个（\\$(obj).height()、\\$(obj).css(‘height’)、obj.style.height）不同的是，obj.offsetHeight的高度就是height+padding,其他是不把padding计入高度的</p>"},{"title":"js小工具","date":"2016-09-06T16:03:42.000Z","_content":"\n小工具一:先收藏以下代码为书签. 在网页中选取了文本后, 若需要查询, 则可直接点击该书签\n``` bash\njavascript: \nvar q;\nif(window.getSelection) q = window.getSelection().toString();\nelse if(document.selection) q = document.selection.createRange().text;\nvoid window.open('http://baidu.com/s?wd='+q);\n\n```\n\n<!--more-->\n\n小工具二：\n``` bash\njavascript:(function(){isScrolling=false;var%20num;var%20clickTimer=null;while(isNaN(num))num=prompt(\"\\u4f60\\u60f3\\u4e00\\u79d2\\u6eda\\u591a\\u8fdc\\uff1f\\uff08\\u9ed8\\u8ba4100\\uff0c\\u5355\\u4f4d\\u50cf\\u7d20,\\u8f93\\u5165\\u503c\\u4e0d\\u542b\\u5355\\u4f4d,\\u53cc\\u51fb\\u6539\\u53d8\\u6eda\\u52a8\\u901f\\u5ea6\\uff09\",\"10\");var%20isScrolling=true;var%20b=setInterval(function(){window.scrollBy(0,num/10)},100);var%20btn=document.createElement(\"button\");btn.type=\"button\";btn.innerHTML=\"stop%20scroll\";btn.style.textAlign=\"center\";btn.style.position=\"fixed\";btn.style.right=\"20px\";btn.style.bottom=\"200px\";document.getElementsByTagName(\"body\")[0].appendChild(btn);btn.onclick=function(){if(clickTimer){window.clearTimeout(clickTimer);clickTimer=null}clickTimer=window.setTimeout(function(){if(isScrolling){clearInterval(b);btn.innerHTML=\"start_scroll\";isScrolling=false}else{b=setInterval(function(){window.scrollBy(0,num/10)},100);isScrolling=true;btn.innerHTML=\"stop_scroll\"}},200)};btn.ondblclick=function(){if(clickTimer){window.clearTimeout(clickTimer);clickTimer=null}clearInterval(b);num=undefined;while(isNaN(num))num=prompt(\"\\u91cd\\u8bbe\\u6eda\\u52a8\\u901f\\u5ea6\",\"10\");b=setInterval(function(){window.scrollBy(0,num/10);isScrolling=true;btn.innerHTML=\"stop_scroll\"},100)}})();\n```\n将上面代码存为书签，即可实现自动滚屏功能。可上滚（负值），下滚。\n\n","source":"_posts/js小工具.md","raw":"---\ntitle: js小工具\ndate: 2016-09-06 16:03:42\ntags:\n---\n\n小工具一:先收藏以下代码为书签. 在网页中选取了文本后, 若需要查询, 则可直接点击该书签\n``` bash\njavascript: \nvar q;\nif(window.getSelection) q = window.getSelection().toString();\nelse if(document.selection) q = document.selection.createRange().text;\nvoid window.open('http://baidu.com/s?wd='+q);\n\n```\n\n<!--more-->\n\n小工具二：\n``` bash\njavascript:(function(){isScrolling=false;var%20num;var%20clickTimer=null;while(isNaN(num))num=prompt(\"\\u4f60\\u60f3\\u4e00\\u79d2\\u6eda\\u591a\\u8fdc\\uff1f\\uff08\\u9ed8\\u8ba4100\\uff0c\\u5355\\u4f4d\\u50cf\\u7d20,\\u8f93\\u5165\\u503c\\u4e0d\\u542b\\u5355\\u4f4d,\\u53cc\\u51fb\\u6539\\u53d8\\u6eda\\u52a8\\u901f\\u5ea6\\uff09\",\"10\");var%20isScrolling=true;var%20b=setInterval(function(){window.scrollBy(0,num/10)},100);var%20btn=document.createElement(\"button\");btn.type=\"button\";btn.innerHTML=\"stop%20scroll\";btn.style.textAlign=\"center\";btn.style.position=\"fixed\";btn.style.right=\"20px\";btn.style.bottom=\"200px\";document.getElementsByTagName(\"body\")[0].appendChild(btn);btn.onclick=function(){if(clickTimer){window.clearTimeout(clickTimer);clickTimer=null}clickTimer=window.setTimeout(function(){if(isScrolling){clearInterval(b);btn.innerHTML=\"start_scroll\";isScrolling=false}else{b=setInterval(function(){window.scrollBy(0,num/10)},100);isScrolling=true;btn.innerHTML=\"stop_scroll\"}},200)};btn.ondblclick=function(){if(clickTimer){window.clearTimeout(clickTimer);clickTimer=null}clearInterval(b);num=undefined;while(isNaN(num))num=prompt(\"\\u91cd\\u8bbe\\u6eda\\u52a8\\u901f\\u5ea6\",\"10\");b=setInterval(function(){window.scrollBy(0,num/10);isScrolling=true;btn.innerHTML=\"stop_scroll\"},100)}})();\n```\n将上面代码存为书签，即可实现自动滚屏功能。可上滚（负值），下滚。\n\n","slug":"js小工具","published":1,"updated":"2016-10-31T03:55:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuy6rzjz0009msq4ig449qp9","content":"<p>小工具一:先收藏以下代码为书签. 在网页中选取了文本后, 若需要查询, 则可直接点击该书签<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">javascript: </div><div class=\"line\">var q;</div><div class=\"line\"><span class=\"keyword\">if</span>(window.getSelection) q = window.getSelection().toString();</div><div class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(document.selection) q = document.selection.createRange().text;</div><div class=\"line\">void window.open(<span class=\"string\">'http://baidu.com/s?wd='</span>+q);</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>小工具二：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">javascript:(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;isScrolling=<span class=\"literal\">false</span>;var%20num;var%20clickTimer=null;<span class=\"keyword\">while</span>(isNaN(num))num=prompt(<span class=\"string\">\"\\u4f60\\u60f3\\u4e00\\u79d2\\u6eda\\u591a\\u8fdc\\uff1f\\uff08\\u9ed8\\u8ba4100\\uff0c\\u5355\\u4f4d\\u50cf\\u7d20,\\u8f93\\u5165\\u503c\\u4e0d\\u542b\\u5355\\u4f4d,\\u53cc\\u51fb\\u6539\\u53d8\\u6eda\\u52a8\\u901f\\u5ea6\\uff09\"</span>,<span class=\"string\">\"10\"</span>);var%20isScrolling=<span class=\"literal\">true</span>;var%20b=<span class=\"built_in\">set</span>Interval(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;window.scrollBy(0,num/10)&#125;,100);var%20btn=document.createElement(<span class=\"string\">\"button\"</span>);btn.type=<span class=\"string\">\"button\"</span>;btn.innerHTML=<span class=\"string\">\"stop%20scroll\"</span>;btn.style.textAlign=<span class=\"string\">\"center\"</span>;btn.style.position=<span class=\"string\">\"fixed\"</span>;btn.style.right=<span class=\"string\">\"20px\"</span>;btn.style.bottom=<span class=\"string\">\"200px\"</span>;document.getElementsByTagName(<span class=\"string\">\"body\"</span>)[0].appendChild(btn);btn.onclick=<span class=\"function\"><span class=\"title\">function</span></span>()&#123;<span class=\"keyword\">if</span>(clickTimer)&#123;window.clearTimeout(clickTimer);clickTimer=null&#125;clickTimer=window.setTimeout(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;<span class=\"keyword\">if</span>(isScrolling)&#123;clearInterval(b);btn.innerHTML=<span class=\"string\">\"start_scroll\"</span>;isScrolling=<span class=\"literal\">false</span>&#125;<span class=\"keyword\">else</span>&#123;b=<span class=\"built_in\">set</span>Interval(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;window.scrollBy(0,num/10)&#125;,100);isScrolling=<span class=\"literal\">true</span>;btn.innerHTML=<span class=\"string\">\"stop_scroll\"</span>&#125;&#125;,200)&#125;;btn.ondblclick=<span class=\"function\"><span class=\"title\">function</span></span>()&#123;<span class=\"keyword\">if</span>(clickTimer)&#123;window.clearTimeout(clickTimer);clickTimer=null&#125;clearInterval(b);num=undefined;<span class=\"keyword\">while</span>(isNaN(num))num=prompt(<span class=\"string\">\"\\u91cd\\u8bbe\\u6eda\\u52a8\\u901f\\u5ea6\"</span>,<span class=\"string\">\"10\"</span>);b=<span class=\"built_in\">set</span>Interval(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;window.scrollBy(0,num/10);isScrolling=<span class=\"literal\">true</span>;btn.innerHTML=<span class=\"string\">\"stop_scroll\"</span>&#125;,100)&#125;&#125;)();</div></pre></td></tr></table></figure></p>\n<p>将上面代码存为书签，即可实现自动滚屏功能。可上滚（负值），下滚。</p>\n","excerpt":"<p>小工具一:先收藏以下代码为书签. 在网页中选取了文本后, 若需要查询, 则可直接点击该书签<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">javascript: </div><div class=\"line\">var q;</div><div class=\"line\"><span class=\"keyword\">if</span>(window.getSelection) q = window.getSelection().toString();</div><div class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(document.selection) q = document.selection.createRange().text;</div><div class=\"line\">void window.open(<span class=\"string\">'http://baidu.com/s?wd='</span>+q);</div></pre></td></tr></table></figure></p>","more":"<p>小工具二：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">javascript:(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;isScrolling=<span class=\"literal\">false</span>;var%20num;var%20clickTimer=null;<span class=\"keyword\">while</span>(isNaN(num))num=prompt(<span class=\"string\">\"\\u4f60\\u60f3\\u4e00\\u79d2\\u6eda\\u591a\\u8fdc\\uff1f\\uff08\\u9ed8\\u8ba4100\\uff0c\\u5355\\u4f4d\\u50cf\\u7d20,\\u8f93\\u5165\\u503c\\u4e0d\\u542b\\u5355\\u4f4d,\\u53cc\\u51fb\\u6539\\u53d8\\u6eda\\u52a8\\u901f\\u5ea6\\uff09\"</span>,<span class=\"string\">\"10\"</span>);var%20isScrolling=<span class=\"literal\">true</span>;var%20b=<span class=\"built_in\">set</span>Interval(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;window.scrollBy(0,num/10)&#125;,100);var%20btn=document.createElement(<span class=\"string\">\"button\"</span>);btn.type=<span class=\"string\">\"button\"</span>;btn.innerHTML=<span class=\"string\">\"stop%20scroll\"</span>;btn.style.textAlign=<span class=\"string\">\"center\"</span>;btn.style.position=<span class=\"string\">\"fixed\"</span>;btn.style.right=<span class=\"string\">\"20px\"</span>;btn.style.bottom=<span class=\"string\">\"200px\"</span>;document.getElementsByTagName(<span class=\"string\">\"body\"</span>)[0].appendChild(btn);btn.onclick=<span class=\"function\"><span class=\"title\">function</span></span>()&#123;<span class=\"keyword\">if</span>(clickTimer)&#123;window.clearTimeout(clickTimer);clickTimer=null&#125;clickTimer=window.setTimeout(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;<span class=\"keyword\">if</span>(isScrolling)&#123;clearInterval(b);btn.innerHTML=<span class=\"string\">\"start_scroll\"</span>;isScrolling=<span class=\"literal\">false</span>&#125;<span class=\"keyword\">else</span>&#123;b=<span class=\"built_in\">set</span>Interval(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;window.scrollBy(0,num/10)&#125;,100);isScrolling=<span class=\"literal\">true</span>;btn.innerHTML=<span class=\"string\">\"stop_scroll\"</span>&#125;&#125;,200)&#125;;btn.ondblclick=<span class=\"function\"><span class=\"title\">function</span></span>()&#123;<span class=\"keyword\">if</span>(clickTimer)&#123;window.clearTimeout(clickTimer);clickTimer=null&#125;clearInterval(b);num=undefined;<span class=\"keyword\">while</span>(isNaN(num))num=prompt(<span class=\"string\">\"\\u91cd\\u8bbe\\u6eda\\u52a8\\u901f\\u5ea6\"</span>,<span class=\"string\">\"10\"</span>);b=<span class=\"built_in\">set</span>Interval(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;window.scrollBy(0,num/10);isScrolling=<span class=\"literal\">true</span>;btn.innerHTML=<span class=\"string\">\"stop_scroll\"</span>&#125;,100)&#125;&#125;)();</div></pre></td></tr></table></figure></p>\n<p>将上面代码存为书签，即可实现自动滚屏功能。可上滚（负值），下滚。</p>"},{"title":"markdown语法","date":"2016-08-27T08:17:59.000Z","_content":"Markdown是一种极简的『标记语言』，将文本转为HTML，通常为我大码农所用。其不追求大而全，简洁至上，正所谓不求最贵，只求最好！\n\n本文介绍Markdown基本语法，内容很少，一行语法一行示例，学会后可轻松写出高大上的文档，再也不需要各种编辑器去调文章格式。另外，网上有各平台下的Markdown工具可用，也有在线的，我直接使用sublime搞定，Markdown本来就是为了追求简洁，弄个工具岂不多此一举。\n<!--more-->\n## 强调\n\n星号与下划线都可以，单是斜体，双是粗体，符号可跨行，符号可加空格\n\\*\\*一个人来到田纳西\\*\\*\n\n\\_\\_毫无疑问\\_\\_\n\\*我做的馅饼\n是全天下\\*\n\\_最好吃的\\_\n\n**一个人来到田纳西**\n\n__毫无疑问__\n*我做的馅饼\n是全天下*\n_最好吃的_\n\n\n## 分割线\n三个或更多-_*，必须单独一行，可含空格\n\n---\n说啥呢.   分割线  \"---\"上一行要空行才可输入分割线, 若上一行有内容, 则变为小标题.\n\n\\-\\-\\-\n\n## 引用\n翻译成html就是<blockquote></blockquote>，符号后的空格可不要\n\n\n\\> 引用\n内层符号前的空格必须要\n\n\\> 引用\n \\>\\> 引用中的引用\n  \\>\\>\\> 第三层\n\n\n\n> 引用\n内层符号前的空格必须要\n\n> 引用\n >> 引用中的引用\n  >>> 第三层\n\n## 标题：Setext方式\n \n三个或更多\n\n大标题\n<span>===</span>\n小标题\n\\-\\-\\-\n\\# 一级标题\n\\#\\# 二级标题\n\\#\\#\\# 三级标题\n\\#\\#\\#\\# 四级标题\n\\#\\#\\#\\#\\# 五级标题\n\\#\\#\\#\\#\\#\\# 六级标题 \n \n大标题\n===\n小标题\n---\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题 \n\n## 无序列表\n符号之后的空格不能少，-+*效果一样，但不能混合使用，因混合是嵌套列表，内容可超长\n\n\\- 无序列表\n\\- 无序列表\n\\- 无序列表\n\\- 无序列表：我很长。我也很长！那比一比啊？比就比！我有这么长，你有我长吗？我有这么这么长！好吧，你赢了！\n\n\n- 无序列表\n- 无序列表\n- 无序列表\n- 无序列表：我很长。我也很长！那比一比啊？比就比！我有这么长，你有我长吗？我有这么这么长！好吧，你赢了！\n\n## 有序列表\n\n数字不能省略但可无序，点号之后的空格不能少\n\n\\1. 有序列表\n\\2. 有序列表\n\\3. 有序列表\n\\4. 有序列表\n\n1. 有序列表\n2. 有序列表\n3. 有序列表\n4. 有序列表\n\n## 嵌套列表\n-+*可循环使用，但符号之后的空格不能少，符号之前的空格也不能少\n\n- 嵌套列表\n + 嵌套列表\n + 嵌套列表\n  - 嵌套列表\n   * 嵌套列表\n- 嵌套列表\n\n\n## 文字超链：Inline方式\nTooltips可省略\n\\[不如\\]\\(http://bruce-sha.github.io \"不如的博客\"\\)\n[不如](http://bruce-sha.github.io \"不如的博客\")\n\n## 图片超链\n多个感叹号，Tooltips可省略，要设置大小只能借助HTML标记\n\\!\\[GitHub Mark\\]\\(http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png \"GitHub Mark\"\\)\n![GitHub Mark](http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png \"GitHub Mark\")\n\n## 索引超链：Reference方式\n索引，1 2可以是任意字符\n\n\\[不如\\]\\[1\\]\n\\!\\[GitHub Octocat\\]\\[2\\]\n\n\\[1\\]:http://bruce-sha.github.io\n\\[2\\]:http://github.global.ssl.fastly.net/images/modules/logos_page/Octocat.png\n\n[不如][1]\n![GitHub Octocat][2]\n\n[1]:http://bruce-sha.github.io\n[2]:http://github.global.ssl.fastly.net/images/modules/logos_page/Octocat.png\n\n## 自动链接\n尖括号\n\n<span><http://ibruce.info>\n<bu.ru@qq.com></span>\n\n<http://ibruce.info>\n<bu.ru@qq.com>\n\n## 代码：行内代码\n在第一行后指定编程语言，也可以不指定\n\n<!--javascript-->\n\nval s = \"hello Markdown\"\nprintln( s )\n\n## 代码：段落代码\n\n每行文字前加4个空格或者1个Tab\n\nval s = \"hello Markdown\"\nprintln( s )\nval s = \"hello Markdown\"\nprintln( s )\n\n\n\n\tval s = \"hello Markdown\"\n\tprintln( s )\n\tval s = \"hello Markdown\"\n\tprintln( s )\n\n## 代码：hexo\n可指定编程语言，『』代表左右大括号\n\n『% codeblock [title] [lang:language] [url] [link text] %』\n\tcode snippet\n『% endcodeblock %』\n\n## 注释\n用html的注释，好像只有这样？\n\n<pre><!-- 注释 --></pre>\n\n## 转义字符\n\n用html的注释，好像只有这样？\nMarkdown中的转义字符为\\，转义的有：\n\\\\\\\\ 反斜杠\n\\\\\\` 反引号\n\\\\\\* 星号\n\\\\_ 下划线\n\\\\{\\\\} 大括号\n\\\\[\\\\] 中括号\n\\\\(\\\\) 小括号\n\\\\\\# 井号\n\\\\\\+ 加号\n\\\\\\- 减号\n\\\\\\. 英文句号\n\\\\\\! 感叹号\n\n\n\\\\ 反斜杠\n\\` 反引号\n\\* 星号\n\\_ 下划线\n\\{\\} 大括号\n\\[\\] 中括号\n\\(\\) 小括号\n\\# 井号\n\\+ 加号\n\\- 减号\n\\. 英文句号\n\\! 感叹号\n\n## 其它\n文本中可直接用html标签，但是要前后加上空行。\n## one more thing：表格\nMarkdown的扩展语法，hexo不支持\n\n|| *Year* || *Temperature (low)* || *Temperature (high)* ||\n|| 1900 || -10 || 25 ||\n|| 1910 || -15 || 30 ||\n|| 1920 || -10 || 32 ||\n\n首页不显示全文，底部有个阅读全文按钮，实现：\n``` bash\n//在md文档中想截断的段落前一行加下面一行代码\n<!--more-->\n```\n\n1、首行缩进\n\n写文章时，我们常常希望能够首行缩进，这时可以在段首加入\\&ensp;来输入一个空格.加入\\&emsp;来输入两个空格。\n2、插入代码\n\n插入代码的方式有两种\n\n在每行代码前加入4个空格或者添加一个制表符（TAB键）\n在代码两侧添加三个反引号‘```’。\n\n两种方法都有需要注意的地方，很多入门文档未能提及。\n\n\n\n\n\n\n\n\n\n","source":"_posts/markdown语法.md","raw":"---\ntitle: markdown语法\ndate: 2016-08-27 08:17:59\ntags: 教程 markdown语法\n---\nMarkdown是一种极简的『标记语言』，将文本转为HTML，通常为我大码农所用。其不追求大而全，简洁至上，正所谓不求最贵，只求最好！\n\n本文介绍Markdown基本语法，内容很少，一行语法一行示例，学会后可轻松写出高大上的文档，再也不需要各种编辑器去调文章格式。另外，网上有各平台下的Markdown工具可用，也有在线的，我直接使用sublime搞定，Markdown本来就是为了追求简洁，弄个工具岂不多此一举。\n<!--more-->\n## 强调\n\n星号与下划线都可以，单是斜体，双是粗体，符号可跨行，符号可加空格\n\\*\\*一个人来到田纳西\\*\\*\n\n\\_\\_毫无疑问\\_\\_\n\\*我做的馅饼\n是全天下\\*\n\\_最好吃的\\_\n\n**一个人来到田纳西**\n\n__毫无疑问__\n*我做的馅饼\n是全天下*\n_最好吃的_\n\n\n## 分割线\n三个或更多-_*，必须单独一行，可含空格\n\n---\n说啥呢.   分割线  \"---\"上一行要空行才可输入分割线, 若上一行有内容, 则变为小标题.\n\n\\-\\-\\-\n\n## 引用\n翻译成html就是<blockquote></blockquote>，符号后的空格可不要\n\n\n\\> 引用\n内层符号前的空格必须要\n\n\\> 引用\n \\>\\> 引用中的引用\n  \\>\\>\\> 第三层\n\n\n\n> 引用\n内层符号前的空格必须要\n\n> 引用\n >> 引用中的引用\n  >>> 第三层\n\n## 标题：Setext方式\n \n三个或更多\n\n大标题\n<span>===</span>\n小标题\n\\-\\-\\-\n\\# 一级标题\n\\#\\# 二级标题\n\\#\\#\\# 三级标题\n\\#\\#\\#\\# 四级标题\n\\#\\#\\#\\#\\# 五级标题\n\\#\\#\\#\\#\\#\\# 六级标题 \n \n大标题\n===\n小标题\n---\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题 \n\n## 无序列表\n符号之后的空格不能少，-+*效果一样，但不能混合使用，因混合是嵌套列表，内容可超长\n\n\\- 无序列表\n\\- 无序列表\n\\- 无序列表\n\\- 无序列表：我很长。我也很长！那比一比啊？比就比！我有这么长，你有我长吗？我有这么这么长！好吧，你赢了！\n\n\n- 无序列表\n- 无序列表\n- 无序列表\n- 无序列表：我很长。我也很长！那比一比啊？比就比！我有这么长，你有我长吗？我有这么这么长！好吧，你赢了！\n\n## 有序列表\n\n数字不能省略但可无序，点号之后的空格不能少\n\n\\1. 有序列表\n\\2. 有序列表\n\\3. 有序列表\n\\4. 有序列表\n\n1. 有序列表\n2. 有序列表\n3. 有序列表\n4. 有序列表\n\n## 嵌套列表\n-+*可循环使用，但符号之后的空格不能少，符号之前的空格也不能少\n\n- 嵌套列表\n + 嵌套列表\n + 嵌套列表\n  - 嵌套列表\n   * 嵌套列表\n- 嵌套列表\n\n\n## 文字超链：Inline方式\nTooltips可省略\n\\[不如\\]\\(http://bruce-sha.github.io \"不如的博客\"\\)\n[不如](http://bruce-sha.github.io \"不如的博客\")\n\n## 图片超链\n多个感叹号，Tooltips可省略，要设置大小只能借助HTML标记\n\\!\\[GitHub Mark\\]\\(http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png \"GitHub Mark\"\\)\n![GitHub Mark](http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png \"GitHub Mark\")\n\n## 索引超链：Reference方式\n索引，1 2可以是任意字符\n\n\\[不如\\]\\[1\\]\n\\!\\[GitHub Octocat\\]\\[2\\]\n\n\\[1\\]:http://bruce-sha.github.io\n\\[2\\]:http://github.global.ssl.fastly.net/images/modules/logos_page/Octocat.png\n\n[不如][1]\n![GitHub Octocat][2]\n\n[1]:http://bruce-sha.github.io\n[2]:http://github.global.ssl.fastly.net/images/modules/logos_page/Octocat.png\n\n## 自动链接\n尖括号\n\n<span><http://ibruce.info>\n<bu.ru@qq.com></span>\n\n<http://ibruce.info>\n<bu.ru@qq.com>\n\n## 代码：行内代码\n在第一行后指定编程语言，也可以不指定\n\n<!--javascript-->\n\nval s = \"hello Markdown\"\nprintln( s )\n\n## 代码：段落代码\n\n每行文字前加4个空格或者1个Tab\n\nval s = \"hello Markdown\"\nprintln( s )\nval s = \"hello Markdown\"\nprintln( s )\n\n\n\n\tval s = \"hello Markdown\"\n\tprintln( s )\n\tval s = \"hello Markdown\"\n\tprintln( s )\n\n## 代码：hexo\n可指定编程语言，『』代表左右大括号\n\n『% codeblock [title] [lang:language] [url] [link text] %』\n\tcode snippet\n『% endcodeblock %』\n\n## 注释\n用html的注释，好像只有这样？\n\n<pre><!-- 注释 --></pre>\n\n## 转义字符\n\n用html的注释，好像只有这样？\nMarkdown中的转义字符为\\，转义的有：\n\\\\\\\\ 反斜杠\n\\\\\\` 反引号\n\\\\\\* 星号\n\\\\_ 下划线\n\\\\{\\\\} 大括号\n\\\\[\\\\] 中括号\n\\\\(\\\\) 小括号\n\\\\\\# 井号\n\\\\\\+ 加号\n\\\\\\- 减号\n\\\\\\. 英文句号\n\\\\\\! 感叹号\n\n\n\\\\ 反斜杠\n\\` 反引号\n\\* 星号\n\\_ 下划线\n\\{\\} 大括号\n\\[\\] 中括号\n\\(\\) 小括号\n\\# 井号\n\\+ 加号\n\\- 减号\n\\. 英文句号\n\\! 感叹号\n\n## 其它\n文本中可直接用html标签，但是要前后加上空行。\n## one more thing：表格\nMarkdown的扩展语法，hexo不支持\n\n|| *Year* || *Temperature (low)* || *Temperature (high)* ||\n|| 1900 || -10 || 25 ||\n|| 1910 || -15 || 30 ||\n|| 1920 || -10 || 32 ||\n\n首页不显示全文，底部有个阅读全文按钮，实现：\n``` bash\n//在md文档中想截断的段落前一行加下面一行代码\n<!--more-->\n```\n\n1、首行缩进\n\n写文章时，我们常常希望能够首行缩进，这时可以在段首加入\\&ensp;来输入一个空格.加入\\&emsp;来输入两个空格。\n2、插入代码\n\n插入代码的方式有两种\n\n在每行代码前加入4个空格或者添加一个制表符（TAB键）\n在代码两侧添加三个反引号‘```’。\n\n两种方法都有需要注意的地方，很多入门文档未能提及。\n\n\n\n\n\n\n\n\n\n","slug":"markdown语法","published":1,"updated":"2016-10-31T03:55:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuy6rzk5000amsq4doevy96e","content":"<p>Markdown是一种极简的『标记语言』，将文本转为HTML，通常为我大码农所用。其不追求大而全，简洁至上，正所谓不求最贵，只求最好！</p>\n<p>本文介绍Markdown基本语法，内容很少，一行语法一行示例，学会后可轻松写出高大上的文档，再也不需要各种编辑器去调文章格式。另外，网上有各平台下的Markdown工具可用，也有在线的，我直接使用sublime搞定，Markdown本来就是为了追求简洁，弄个工具岂不多此一举。<br><a id=\"more\"></a></p>\n<h2 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a>强调</h2><p>星号与下划线都可以，单是斜体，双是粗体，符号可跨行，符号可加空格<br>**一个人来到田纳西**</p>\n<p>__毫无疑问__<br>*我做的馅饼<br>是全天下*<br>_最好吃的_</p>\n<p><strong>一个人来到田纳西</strong></p>\n<p><strong>毫无疑问</strong><br><em>我做的馅饼<br>是全天下</em><br><em>最好吃的</em></p>\n<h2 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h2><p>三个或更多-_*，必须单独一行，可含空格</p>\n<hr>\n<p>说啥呢.   分割线  “—“上一行要空行才可输入分割线, 若上一行有内容, 则变为小标题.</p>\n<p>---</p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p>翻译成html就是<blockquote></blockquote>，符号后的空格可不要</p>\n<p>> 引用<br>内层符号前的空格必须要</p>\n<p>> 引用<br> >> 引用中的引用<br>  >>> 第三层</p>\n<blockquote>\n<p>引用<br>内层符号前的空格必须要</p>\n<p>引用</p>\n<blockquote>\n<p>引用中的引用</p>\n<blockquote>\n<p>第三层</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h2 id=\"标题：Setext方式\"><a href=\"#标题：Setext方式\" class=\"headerlink\" title=\"标题：Setext方式\"></a>标题：Setext方式</h2><p>三个或更多</p>\n<p>大标题<br><span>===</span><br>小标题<br>---<br># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题 </p>\n<h1 id=\"大标题\"><a href=\"#大标题\" class=\"headerlink\" title=\"大标题\"></a>大标题</h1><h2 id=\"小标题\"><a href=\"#小标题\" class=\"headerlink\" title=\"小标题\"></a>小标题</h2><h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4><h5 id=\"五级标题\"><a href=\"#五级标题\" class=\"headerlink\" title=\"五级标题\"></a>五级标题</h5><h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a>六级标题</h6><h2 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h2><p>符号之后的空格不能少，-+*效果一样，但不能混合使用，因混合是嵌套列表，内容可超长</p>\n<p>- 无序列表<br>- 无序列表<br>- 无序列表<br>- 无序列表：我很长。我也很长！那比一比啊？比就比！我有这么长，你有我长吗？我有这么这么长！好吧，你赢了！</p>\n<ul>\n<li>无序列表</li>\n<li>无序列表</li>\n<li>无序列表</li>\n<li>无序列表：我很长。我也很长！那比一比啊？比就比！我有这么长，你有我长吗？我有这么这么长！好吧，你赢了！</li>\n</ul>\n<h2 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h2><p>数字不能省略但可无序，点号之后的空格不能少</p>\n<p>\\1. 有序列表<br>\\2. 有序列表<br>\\3. 有序列表<br>\\4. 有序列表</p>\n<ol>\n<li>有序列表</li>\n<li>有序列表</li>\n<li>有序列表</li>\n<li>有序列表</li>\n</ol>\n<h2 id=\"嵌套列表\"><a href=\"#嵌套列表\" class=\"headerlink\" title=\"嵌套列表\"></a>嵌套列表</h2><p>-+*可循环使用，但符号之后的空格不能少，符号之前的空格也不能少</p>\n<ul>\n<li>嵌套列表<ul>\n<li>嵌套列表</li>\n<li>嵌套列表</li>\n</ul>\n<ul>\n<li>嵌套列表<ul>\n<li>嵌套列表</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>嵌套列表</li>\n</ul>\n<h2 id=\"文字超链：Inline方式\"><a href=\"#文字超链：Inline方式\" class=\"headerlink\" title=\"文字超链：Inline方式\"></a>文字超链：Inline方式</h2><p>Tooltips可省略<br>[不如](<a href=\"http://bruce-sha.github.io\" target=\"_blank\" rel=\"external\">http://bruce-sha.github.io</a> “不如的博客”)<br><a href=\"http://bruce-sha.github.io\" title=\"不如的博客\" target=\"_blank\" rel=\"external\">不如</a></p>\n<h2 id=\"图片超链\"><a href=\"#图片超链\" class=\"headerlink\" title=\"图片超链\"></a>图片超链</h2><p>多个感叹号，Tooltips可省略，要设置大小只能借助HTML标记<br>![GitHub Mark](<a href=\"http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png\" target=\"_blank\" rel=\"external\">http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png</a> “GitHub Mark”)<br><img src=\"http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png\" alt=\"GitHub Mark\" title=\"GitHub Mark\"></p>\n<h2 id=\"索引超链：Reference方式\"><a href=\"#索引超链：Reference方式\" class=\"headerlink\" title=\"索引超链：Reference方式\"></a>索引超链：Reference方式</h2><p>索引，1 2可以是任意字符</p>\n<p>[不如][1]<br>![GitHub Octocat][2]</p>\n<p>[1]:<a href=\"http://bruce-sha.github.io\" target=\"_blank\" rel=\"external\">http://bruce-sha.github.io</a><br>[2]:<a href=\"http://github.global.ssl.fastly.net/images/modules/logos_page/Octocat.png\" target=\"_blank\" rel=\"external\">http://github.global.ssl.fastly.net/images/modules/logos_page/Octocat.png</a></p>\n<p><a href=\"http://bruce-sha.github.io\" target=\"_blank\" rel=\"external\">不如</a><br><img src=\"http://github.global.ssl.fastly.net/images/modules/logos_page/Octocat.png\" alt=\"GitHub Octocat\"></p>\n<h2 id=\"自动链接\"><a href=\"#自动链接\" class=\"headerlink\" title=\"自动链接\"></a>自动链接</h2><p>尖括号</p>\n<p><span><a href=\"http://ibruce.info\" target=\"_blank\" rel=\"external\">http://ibruce.info</a></span></p>\n<p><a href=\"&#109;&#x61;&#x69;&#x6c;&#x74;&#111;&#x3a;&#x62;&#117;&#x2e;&#114;&#x75;&#64;&#x71;&#113;&#46;&#99;&#111;&#109;\">&#x62;&#117;&#x2e;&#114;&#x75;&#64;&#x71;&#113;&#46;&#99;&#111;&#109;</a></p>\n<p><a href=\"http://ibruce.info\" target=\"_blank\" rel=\"external\">http://ibruce.info</a></p>\n<a href=\"&#109;&#x61;&#x69;&#x6c;&#116;&#111;&#x3a;&#x62;&#117;&#x2e;&#x72;&#117;&#64;&#x71;&#x71;&#46;&#99;&#x6f;&#x6d;\">&#x62;&#117;&#x2e;&#x72;&#117;&#64;&#x71;&#x71;&#46;&#99;&#x6f;&#x6d;</a>\n\n<h2 id=\"代码：行内代码\"><a href=\"#代码：行内代码\" class=\"headerlink\" title=\"代码：行内代码\"></a>代码：行内代码</h2><p>在第一行后指定编程语言，也可以不指定</p>\n<!--javascript-->\n<p>val s = “hello Markdown”<br>println( s )</p>\n<h2 id=\"代码：段落代码\"><a href=\"#代码：段落代码\" class=\"headerlink\" title=\"代码：段落代码\"></a>代码：段落代码</h2><p>每行文字前加4个空格或者1个Tab</p>\n<p>val s = “hello Markdown”<br>println( s )<br>val s = “hello Markdown”<br>println( s )</p>\n<pre><code>val s = &quot;hello Markdown&quot;\nprintln( s )\nval s = &quot;hello Markdown&quot;\nprintln( s )\n</code></pre><h2 id=\"代码：hexo\"><a href=\"#代码：hexo\" class=\"headerlink\" title=\"代码：hexo\"></a>代码：hexo</h2><p>可指定编程语言，『』代表左右大括号</p>\n<p>『% codeblock [title] [lang:language] [url] [link text] %』<br>    code snippet<br>『% endcodeblock %』</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>用html的注释，好像只有这样？</p>\n<pre><!-- 注释 --></pre>\n\n<h2 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h2><p>用html的注释，好像只有这样？<br>Markdown中的转义字符为\\，转义的有：<br>\\\\ 反斜杠<br>\\` 反引号<br>\\* 星号<br>\\_ 下划线<br>\\{\\} 大括号<br>\\[\\] 中括号<br>\\(\\) 小括号<br>\\# 井号<br>\\+ 加号<br>\\- 减号<br>\\. 英文句号<br>\\! 感叹号</p>\n<p>\\ 反斜杠<br>` 反引号<br>* 星号<br>_ 下划线<br>{} 大括号<br>[] 中括号<br>() 小括号<br># 井号<br>+ 加号<br>- 减号<br>. 英文句号<br>! 感叹号</p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>文本中可直接用html标签，但是要前后加上空行。</p>\n<h2 id=\"one-more-thing：表格\"><a href=\"#one-more-thing：表格\" class=\"headerlink\" title=\"one more thing：表格\"></a>one more thing：表格</h2><p>Markdown的扩展语法，hexo不支持</p>\n<p>|| <em>Year</em> || <em>Temperature (low)</em> || <em>Temperature (high)</em> ||<br>|| 1900 || -10 || 25 ||<br>|| 1910 || -15 || 30 ||<br>|| 1920 || -10 || 32 ||</p>\n<p>首页不显示全文，底部有个阅读全文按钮，实现：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//在md文档中想截断的段落前一行加下面一行代码</div><div class=\"line\">&lt;!--more--&gt;</div></pre></td></tr></table></figure></p>\n<p>1、首行缩进</p>\n<p>写文章时，我们常常希望能够首行缩进，这时可以在段首加入\\&ensp;来输入一个空格.加入\\&emsp;来输入两个空格。<br>2、插入代码</p>\n<p>插入代码的方式有两种</p>\n<p>在每行代码前加入4个空格或者添加一个制表符（TAB键）<br>在代码两侧添加三个反引号‘```’。</p>\n<p>两种方法都有需要注意的地方，很多入门文档未能提及。</p>\n","excerpt":"<p>Markdown是一种极简的『标记语言』，将文本转为HTML，通常为我大码农所用。其不追求大而全，简洁至上，正所谓不求最贵，只求最好！</p>\n<p>本文介绍Markdown基本语法，内容很少，一行语法一行示例，学会后可轻松写出高大上的文档，再也不需要各种编辑器去调文章格式。另外，网上有各平台下的Markdown工具可用，也有在线的，我直接使用sublime搞定，Markdown本来就是为了追求简洁，弄个工具岂不多此一举。<br>","more":"</p>\n<h2 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a>强调</h2><p>星号与下划线都可以，单是斜体，双是粗体，符号可跨行，符号可加空格<br>**一个人来到田纳西**</p>\n<p>__毫无疑问__<br>*我做的馅饼<br>是全天下*<br>_最好吃的_</p>\n<p><strong>一个人来到田纳西</strong></p>\n<p><strong>毫无疑问</strong><br><em>我做的馅饼<br>是全天下</em><br><em>最好吃的</em></p>\n<h2 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h2><p>三个或更多-_*，必须单独一行，可含空格</p>\n<hr>\n<p>说啥呢.   分割线  “—“上一行要空行才可输入分割线, 若上一行有内容, 则变为小标题.</p>\n<p>---</p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p>翻译成html就是<blockquote></blockquote>，符号后的空格可不要</p>\n<p>> 引用<br>内层符号前的空格必须要</p>\n<p>> 引用<br> >> 引用中的引用<br>  >>> 第三层</p>\n<blockquote>\n<p>引用<br>内层符号前的空格必须要</p>\n<p>引用</p>\n<blockquote>\n<p>引用中的引用</p>\n<blockquote>\n<p>第三层</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<h2 id=\"标题：Setext方式\"><a href=\"#标题：Setext方式\" class=\"headerlink\" title=\"标题：Setext方式\"></a>标题：Setext方式</h2><p>三个或更多</p>\n<p>大标题<br><span>===</span><br>小标题<br>---<br># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题 </p>\n<h1 id=\"大标题\"><a href=\"#大标题\" class=\"headerlink\" title=\"大标题\"></a>大标题</h1><h2 id=\"小标题\"><a href=\"#小标题\" class=\"headerlink\" title=\"小标题\"></a>小标题</h2><h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4><h5 id=\"五级标题\"><a href=\"#五级标题\" class=\"headerlink\" title=\"五级标题\"></a>五级标题</h5><h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a>六级标题</h6><h2 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h2><p>符号之后的空格不能少，-+*效果一样，但不能混合使用，因混合是嵌套列表，内容可超长</p>\n<p>- 无序列表<br>- 无序列表<br>- 无序列表<br>- 无序列表：我很长。我也很长！那比一比啊？比就比！我有这么长，你有我长吗？我有这么这么长！好吧，你赢了！</p>\n<ul>\n<li>无序列表</li>\n<li>无序列表</li>\n<li>无序列表</li>\n<li>无序列表：我很长。我也很长！那比一比啊？比就比！我有这么长，你有我长吗？我有这么这么长！好吧，你赢了！</li>\n</ul>\n<h2 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h2><p>数字不能省略但可无序，点号之后的空格不能少</p>\n<p>\\1. 有序列表<br>\\2. 有序列表<br>\\3. 有序列表<br>\\4. 有序列表</p>\n<ol>\n<li>有序列表</li>\n<li>有序列表</li>\n<li>有序列表</li>\n<li>有序列表</li>\n</ol>\n<h2 id=\"嵌套列表\"><a href=\"#嵌套列表\" class=\"headerlink\" title=\"嵌套列表\"></a>嵌套列表</h2><p>-+*可循环使用，但符号之后的空格不能少，符号之前的空格也不能少</p>\n<ul>\n<li>嵌套列表<ul>\n<li>嵌套列表</li>\n<li>嵌套列表</li>\n</ul>\n<ul>\n<li>嵌套列表<ul>\n<li>嵌套列表</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>嵌套列表</li>\n</ul>\n<h2 id=\"文字超链：Inline方式\"><a href=\"#文字超链：Inline方式\" class=\"headerlink\" title=\"文字超链：Inline方式\"></a>文字超链：Inline方式</h2><p>Tooltips可省略<br>[不如](<a href=\"http://bruce-sha.github.io\">http://bruce-sha.github.io</a> “不如的博客”)<br><a href=\"http://bruce-sha.github.io\" title=\"不如的博客\">不如</a></p>\n<h2 id=\"图片超链\"><a href=\"#图片超链\" class=\"headerlink\" title=\"图片超链\"></a>图片超链</h2><p>多个感叹号，Tooltips可省略，要设置大小只能借助HTML标记<br>![GitHub Mark](<a href=\"http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png\">http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png</a> “GitHub Mark”)<br><img src=\"http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png\" alt=\"GitHub Mark\" title=\"GitHub Mark\"></p>\n<h2 id=\"索引超链：Reference方式\"><a href=\"#索引超链：Reference方式\" class=\"headerlink\" title=\"索引超链：Reference方式\"></a>索引超链：Reference方式</h2><p>索引，1 2可以是任意字符</p>\n<p>[不如][1]<br>![GitHub Octocat][2]</p>\n<p>[1]:<a href=\"http://bruce-sha.github.io\">http://bruce-sha.github.io</a><br>[2]:<a href=\"http://github.global.ssl.fastly.net/images/modules/logos_page/Octocat.png\">http://github.global.ssl.fastly.net/images/modules/logos_page/Octocat.png</a></p>\n<p><a href=\"http://bruce-sha.github.io\">不如</a><br><img src=\"http://github.global.ssl.fastly.net/images/modules/logos_page/Octocat.png\" alt=\"GitHub Octocat\"></p>\n<h2 id=\"自动链接\"><a href=\"#自动链接\" class=\"headerlink\" title=\"自动链接\"></a>自动链接</h2><p>尖括号</p>\n<p><span><a href=\"http://ibruce.info\">http://ibruce.info</a></p>\n<p><a href=\"&#109;&#x61;&#x69;&#x6c;&#x74;&#111;&#x3a;&#x62;&#117;&#x2e;&#114;&#x75;&#64;&#x71;&#113;&#46;&#99;&#111;&#109;\">&#x62;&#117;&#x2e;&#114;&#x75;&#64;&#x71;&#113;&#46;&#99;&#111;&#109;</a></span></p>\n<p><a href=\"http://ibruce.info\">http://ibruce.info</a></p>\n<a href=\"&#109;&#x61;&#x69;&#x6c;&#116;&#111;&#x3a;&#x62;&#117;&#x2e;&#x72;&#117;&#64;&#x71;&#x71;&#46;&#99;&#x6f;&#x6d;\">&#x62;&#117;&#x2e;&#x72;&#117;&#64;&#x71;&#x71;&#46;&#99;&#x6f;&#x6d;</a>\n\n<h2 id=\"代码：行内代码\"><a href=\"#代码：行内代码\" class=\"headerlink\" title=\"代码：行内代码\"></a>代码：行内代码</h2><p>在第一行后指定编程语言，也可以不指定</p>\n<!--javascript-->\n<p>val s = “hello Markdown”<br>println( s )</p>\n<h2 id=\"代码：段落代码\"><a href=\"#代码：段落代码\" class=\"headerlink\" title=\"代码：段落代码\"></a>代码：段落代码</h2><p>每行文字前加4个空格或者1个Tab</p>\n<p>val s = “hello Markdown”<br>println( s )<br>val s = “hello Markdown”<br>println( s )</p>\n<pre><code>val s = &quot;hello Markdown&quot;\nprintln( s )\nval s = &quot;hello Markdown&quot;\nprintln( s )\n</code></pre><h2 id=\"代码：hexo\"><a href=\"#代码：hexo\" class=\"headerlink\" title=\"代码：hexo\"></a>代码：hexo</h2><p>可指定编程语言，『』代表左右大括号</p>\n<p>『% codeblock [title] [lang:language] [url] [link text] %』<br>    code snippet<br>『% endcodeblock %』</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>用html的注释，好像只有这样？</p>\n<pre><!-- 注释 --></pre>\n\n<h2 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h2><p>用html的注释，好像只有这样？<br>Markdown中的转义字符为\\，转义的有：<br>\\\\ 反斜杠<br>\\` 反引号<br>\\* 星号<br>\\_ 下划线<br>\\{\\} 大括号<br>\\[\\] 中括号<br>\\(\\) 小括号<br>\\# 井号<br>\\+ 加号<br>\\- 减号<br>\\. 英文句号<br>\\! 感叹号</p>\n<p>\\ 反斜杠<br>` 反引号<br>* 星号<br>_ 下划线<br>{} 大括号<br>[] 中括号<br>() 小括号<br># 井号<br>+ 加号<br>- 减号<br>. 英文句号<br>! 感叹号</p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>文本中可直接用html标签，但是要前后加上空行。</p>\n<h2 id=\"one-more-thing：表格\"><a href=\"#one-more-thing：表格\" class=\"headerlink\" title=\"one more thing：表格\"></a>one more thing：表格</h2><p>Markdown的扩展语法，hexo不支持</p>\n<p>|| <em>Year</em> || <em>Temperature (low)</em> || <em>Temperature (high)</em> ||<br>|| 1900 || -10 || 25 ||<br>|| 1910 || -15 || 30 ||<br>|| 1920 || -10 || 32 ||</p>\n<p>首页不显示全文，底部有个阅读全文按钮，实现：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//在md文档中想截断的段落前一行加下面一行代码</div><div class=\"line\">&lt;!--more--&gt;</div></pre></td></tr></table></figure></p>\n<p>1、首行缩进</p>\n<p>写文章时，我们常常希望能够首行缩进，这时可以在段首加入\\&ensp;来输入一个空格.加入\\&emsp;来输入两个空格。<br>2、插入代码</p>\n<p>插入代码的方式有两种</p>\n<p>在每行代码前加入4个空格或者添加一个制表符（TAB键）<br>在代码两侧添加三个反引号‘```’。</p>\n<p>两种方法都有需要注意的地方，很多入门文档未能提及。</p>"},{"title":"git学习笔记(一)","date":"2016-08-26T15:25:51.000Z","_content":"\n## \t起步\n\n### 版本控制\n关于版本控制\n什么是版本控制？我为什么要关心它呢？版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。在本书所展示的例子中，我们仅对保存着软件源代码的文本文件作版本控制管理，但实际上，你可以对任何类型的文件进行版本控制。\n<!--more-->\n### 分布式版本控制系统\n于是分布式版本控制系统（ Distributed Version Control System，简称 DVCS ）面世了。在这类系统中，像 Git，Mercurial，Bazaar 以及 Darcs 等，客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。因为每一次的提取操作，实际上都是一次对代码仓库的完整备份。\n如果你是位图形或网页设计师，可能会需要保存某一幅图片或页面布局文件的所有修订版本（这或许是你非常渴望拥有的功能）。采用版本控制系统（VCS）是个明智的选择。有了它你就可以将某个文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态。你可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而找出导致怪异问题出现的原因，又是谁在何时报告了某个功能缺陷等等。使用版本控制系统通常还意味着，就算你乱来一气把整个项目中的文件改的改删的删，你也照样可以轻松恢复到原先的样子。但额外增加的工作量却微乎其微。\n\n### Git基础\n\n#### 直接记录快照，而非差异比较\nGit 和其他版本控制系统的主要差别在于，Git 只关心文件数据的整体是否发生变化，而大多数其他系统则只关心文件内容的具体差异。这类系统（CVS，Subversion，Perforce，Bazaar 等等）每次记录有哪些文件作了更新，以及都更新了哪些行的什么内容.Git 并不保存这些前后变化的差异数据。实际上，Git 更像是把变化的文件作快照后，记录在一个微型的文件系统中。每次提交更新时，它会纵览一遍所有文件的指纹信息并对文件作一快照，然后保存一个指向这次快照的索引。为提高性能，若文件没有变化，Git 不会再次保存，而只对上次保存的快照作一链接。\n\n#### 近乎所有操作都是本地执行\n在 Git 中的绝大多数操作都只需要访问本地文件和资源，不用连网。但如果用 CVCS 的话，差不多所有操作都需要连接网络。因为 Git 在本地磁盘上就保存着所有当前项目的历史更新，所以处理起来速度飞快。\n\n#### 文件的三种状态\n对于任何一个文件，在 Git 内都只有三种状态：已提交（committed），已修改（modified）和已暂存（staged）。已提交表示该文件已经被安全地保存在本地数据库中了；已修改表示修改了某个文件，但还没有提交保存；已暂存表示把已修改的文件放在下次提交时要保存的清单中。\n\n#### 基本的 Git 工作流程如下：\n在工作目录中修改某些文件。\n对修改后的文件进行快照，然后保存到暂存区域。\n提交更新，将保存在暂存区域的文件快照永久转储到 Git 目录中。\n\n### 安装\n\n#### 从源代码安装\n若是条件允许，从源代码安装有很多好处，至少可以安装最新的版本。Git 的每个版本都在不断尝试改进用户体验，所以能通过源代码自己编译安装最新版本就再好不过了。有些 Linux 版本自带的安装包更新起来并不及时，所以除非你在用最新的 distro 或者 backports，那么从源代码安装其实该算是最佳选择。Git 的工作需要调用 curl，zlib，openssl，expat，libiconv 等库的代码，所以需要先安装这些依赖工具。\n\n#### Linux\n在 Ubuntu 这类 Debian 体系的系统上可以用 apt-get 安装：\n``` bash\n$ apt-get install git\n```\n\n#### Windows\n在 Windows 上安装:[官网](http://msysgit.github.com/)\n给 Windows 用户的敬告：你应该在 msysGit 提供的 Unix 风格的 shell 来运行 Git。在 Unix 风格的 shell 中，可以使用本书中提及的复杂多行的命令。对于那些需要在 Windows 命令行中使用 Git 的用户，必须注意：在参数中间有空格的时候，必须使用双引号将参数括起来（在 Linux 中是单引号）；另外，如果扬抑符（^）作为参数的结尾，并且作为这一行的最后一个字符，则这个参数也需要用双引号括起来。因为扬抑符在 Windows 命令行中表示续行（译注：即下一行为这一行命令的继续）。\n\n\n### 初次运行 Git 前的配置\n一般在新的系统上，我们都需要先配置下自己的 Git 工作环境。配置工作只需一次，以后升级时还会沿用现在的配置。当然，如果需要，你随时可以用相同的命令修改已有的配置。\nGit 提供了一个叫做 git config 的工具（译注：实际是 git-config 命令，只不过可以通过 git 加一个名字来呼叫此命令。），专门用来配置或读取相应的工作环境变量。而正是由这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：\n\n1, /etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 --system 选项，读写的就是这个文件。\n2, ~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用 --global 选项，读写的就是这个文件。\n3, 当前项目的 Git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。\n\n#### 用户信息\n第一个要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：\n``` bash\n$ git config --global user.name \"John Doe\"\n$ git config --global user.email johndoe@example.com\n```\n如果用了 --global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 --global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。\n\n#### 文本编辑器\n接下来要设置的是默认使用的文本编辑器。Git 需要你输入一些额外消息的时候，会自动调用一个外部文本编辑器给你用。默认会使用操作系统指定的默认编辑器，一般可能会是 Vi 或者 Vim。如果你有其他偏好，比如 Emacs 的话，可以重新设置：\n``` bash\n$ git config --global core.editor emacs\n```\n\n#### 差异分析工具\n还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用 vimdiff 的话：\n``` bash\n$ git config --global merge.tool vimdiff\n```\nGit 可以理解 kdiff3，tkdiff，meld，xxdiff，emerge，vimdiff，gvimdiff，ecmerge，和 opendiff 等合并工具的输出信息。当然，你也可以指定使用自己开发的工具，具体怎么做可以参阅第七章。\n\n#### 查看配置信息\n要检查已有的配置信息，可以使用 git config --list 命令：\n``` bash\n$ git config --list\nuser.name=Scott Chacon\nuser.email=schacon@gmail.com\ncolor.status=auto\ncolor.branch=auto\ncolor.interactive=auto\ncolor.diff=auto\n...\n```\n有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 /etc/gitconfig 和 ~/.gitconfig），不过最终 Git 实际采用的是最后一个。\n\n也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：\n``` bash\n$ git config user.name\nScott Chacon\n```\n\n### 获取帮助\n想了解 Git 的各式工具该怎么用，可以阅读它们的使用帮助，方法有三：\n``` bash\n$ git help <verb>\n$ git <verb> --help\n$ man git-<verb>\n```\n我们随时都可以浏览这些帮助信息而无需连网。 不过，要是你觉得还不够，可以到 Freenode IRC 服务器（irc.freenode.net）上的 #git 或 #github 频道寻求他人帮助。这两个频道上总有着上百号人，大多都有着丰富的 Git 知识，并且乐于助人。\n\n## Git基础\n\n### 取得项目的 Git 仓库\n有两种取得 Git 项目仓库的方法。第一种是在现存的目录下，通过导入所有文件来创建新的 Git 仓库。第二种是从已有的 Git 仓库克隆出一个新的镜像仓库来。\n\n#### 在工作目录中初始化新仓库\n要对现有的某个项目开始用 Git 管理，只需到此项目所在的目录，执行：\n``` bash\n$ git init\n```\n初始化后，在当前目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。不过目前，仅仅是按照既有的结构框架初始化好了里边所有的文件和目录，但我们还没有开始跟踪管理项目中的任何一个文件。（在第九章我们会详细说明刚才创建的 .git 目录中究竟有哪些文件，以及都起些什么作用。）\n如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：\n``` bash\n$ git add *.c\n$ git add README\n$ git commit -m 'initial project version'\n```\n\n#### 从现有仓库克隆\n如果想对某个开源项目出一份力，可以先把该项目的 Git 仓库复制一份出来，这就需要用到 git clone 命令。如果你熟悉其他的 VCS 比如 Subversion，你可能已经注意到这里使用的是 clone 而不是 checkout。这是个非常重要的差别，Git 收取的是项目历史的所有数据（每一个文件的每一个版本），服务器上有的数据克隆之后本地也都有了。实际上，即便服务器的磁盘发生故障，用任何一个克隆出来的客户端都可以重建服务器上的仓库，回到当初克隆时的状态（虽然可能会丢失某些服务器端的挂钩设置，但所有版本的数据仍旧还在，有关细节请参考第四章）。\n\n克隆仓库的命令格式为 git clone [url]。比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：\n``` bash\n$ git clone git://github.com/schacon/grit.git\n```\n这会在当前目录下创建一个名为grit的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录，然后从中取出最新版本的文件拷贝。如果进入这个新建的 grit 目录，你会看到项目中的所有文件已经在里边了，准备好后续的开发和使用。如果希望在克隆的时候，自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：\n``` bash\n$ git clone git://github.com/schacon/grit.git mygrit\n```\n唯一的差别就是，现在新建的目录成了 mygrit，其他的都和上边的一样。\n\nGit 支持许多数据传输协议。之前的例子使用的是 git:// 协议，不过你也可以用 http(s):// 或者 user@server:/path.git 表示的 SSH 传输协议。我们会在第四章详细介绍所有这些协议在服务器端该如何配置使用，以及各种方式之间的利弊。\n\n### 记录每次更新到仓库\n\n现在我们手上已经有了一个真实项目的 Git 仓库，并从这个仓库中取出了所有文件的工作拷贝。接下来，对这些文件作些修改，在完成了一个阶段的目标之后，提交本次更新到仓库。\n\n请记住，工作目录下面的所有文件都不外乎这两种状态：已跟踪或未跟踪。已跟踪的文件是指本来就被纳入版本控制管理的文件，在上次快照中有它们的记录，工作一段时间后，它们的状态可能是未更新，已修改或者已放入暂存区。而所有其他文件都属于未跟踪文件。它们既没有上次更新时的快照，也不在当前的暂存区域。初次克隆某个仓库时，工作目录中的所有文件都属于已跟踪文件，且状态为未修改。\n\n在编辑过某些文件之后，Git 将这些文件标为已修改。我们逐步把这些修改过的文件放到暂存区域，直到最后一次性提交所有这些暂存起来的文件，如此重复。\n\n#### 检查当前文件状态\n要确定哪些文件当前处于什么状态，可以用 git status 命令。如果在克隆仓库之后立即执行此命令，会看到类似这样的输出：\n``` bash\n$ git status\nOn branch master\nnothing to commit, working directory clean\n```\n这说明你现在的工作目录相当干净。换句话说，所有已跟踪文件在上次提交后都未被更改过。此外，上面的信息还表明，当前目录下没有出现任何处于未跟踪的新文件，否则 Git 会在这里列出来。最后，该命令还显示了当前所在的分支是 master，这是默认的分支名称，实际是可以修改的，现在先不用考虑。下一章我们就会详细讨论分支和引用。\n\n现在让我们用 vim 创建一个新文件 README，保存退出后运行 git status 会看到该文件出现在未跟踪文件列表中：\n``` bash\n$ vim README\t\t#自学vim编辑器\n$ git status\nOn branch master\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n        README\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n```\n在状态报告中可以看到新建的README文件出现在“Untracked files”下面。未跟踪的文件意味着Git在之前的快照（提交）中没有这些文件；Git 不会自动将之纳入跟踪范围，除非你明明白白地告诉它“我需要跟踪该文件”，因而不用担心把临时文件什么的也归入版本管理。不过现在的例子中，我们确实想要跟踪管理 README 这个文件。\n\n#### 跟踪新文件\n使用命令 git add 开始跟踪一个新文件。所以，要跟踪 README 文件，运行：\n``` bash\n$ git add README\n```\n此时再运行 git status 命令，会看到 README 文件已被跟踪，并处于暂存状态：\n``` bash\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        new file:   README\n\n```\n只要在 “Changes to be committed” 这行下面的，就说明是已暂存状态。如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。你可能会想起之前我们使用 git init 后就运行了 git add 命令，开始跟踪当前目录下的文件。在 git add 后面可以指明要跟踪的文件或目录路径。如果是目录的话，就说明要递归跟踪该目录下的所有文件。（译注：其实 git add 的潜台词就是把目标文件快照放入暂存区域，也就是 add file into staged area，同时未曾跟踪过的文件标记为需要跟踪。这样就好理解后续 add 操作的实际意义了。）\n\n#### 暂存已修改文件\n现在我们修改下之前已跟踪过的文件 benchmarks.rb，然后再次运行 status 命令，会看到这样的状态报告：\n``` bash\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        new file:   README\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   benchmarks.rb\n```\n文件 benchmarks.rb 出现在 “Changes not staged for commit” 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。要暂存这次更新，需要运行 git add 命令（这是个多功能命令，根据目标文件的状态不同，此命令的效果也不同：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等）。现在让我们运行 git add 将 benchmarks.rb 放到暂存区，然后再看看 git status 的输出：\n``` bash\n$ git add benchmarks.rb\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        new file:   README\n        modified:   benchmarks.rb\n```\n现在两个文件都已暂存，下次提交时就会一并记录到仓库。假设此时，你想要在 benchmarks.rb 里再加条注释，重新编辑存盘后，准备好提交。不过且慢，再运行 git status 看看：\n``` bash\n$ vim benchmarks.rb\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        new file:   README\n        modified:   benchmarks.rb\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   benchmarks.rb\n```\n怎么回事？ benchmarks.rb 文件出现了两次！一次算未暂存，一次算已暂存，这怎么可能呢？好吧，实际上 Git 只不过暂存了你运行 git add 命令时的版本，如果现在提交，那么提交的是添加注释前的版本，而非当前工作目录中的版本。所以，运行了 git add 之后又作了修订的文件，需要重新运行 git add 把最新版本重新暂存起来：\n``` bash\n$ git add benchmarks.rb\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        new file:   README\n        modified:   benchmarks.rb\n```\n\n#### 忽略某些文件\n一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式。来看一个实际的例子：\n``` bash\n$ cat .gitignore\n*.[oa]\n*~\n```\n第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件。一般这类对象文件和存档文件都是编译过程中出现的，我们用不着跟踪它们的版本。第二行告诉 Git 忽略所有以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存副本。此外，你可能还需要忽略 log，tmp 或者 pid 目录，以及自动生成的文档等等。要养成一开始就设置好 .gitignore 文件的习惯，以免将来误提交这类无用的文件。\n\n文件 .gitignore 的格式规范如下：\n\n1, 所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。\n2, 可以使用标准的 glob 模式匹配。\n3, 匹配模式最后跟反斜杠（/）说明要忽略的是目录。\n4, 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。\n\n所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。星号（*）匹配零个或多个任意字符；[abc] 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（?）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。\n我们再看一个 .gitignore 文件的例子：\n``` bash\n# 此为注释 – 将被 Git 忽略\n# 忽略所有 .a 结尾的文件\n*.a\n# 但 lib.a 除外\n!lib.a\n# 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO\n/TODO\n# 忽略 build/ 目录下的所有文件\nbuild/\n# 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt\ndoc/*.txt\n# ignore all .txt files in the doc/ directory\ndoc/**/*.txt\n```\nA **/ pattern is available in Git since version 1.8.2.\n\n#### 查看已暂存和未暂存的更新\n实际上 git status 的显示比较简单，仅仅是列出了修改过的文件，如果要查看具体修改了什么地方，可以用 git diff 命令。稍后我们会详细介绍 git diff，不过现在，它已经能回答我们的两个问题了：当前做的哪些更新还没有暂存？有哪些更新已经暂存起来准备好了下次提交？ git diff 会使用文件补丁的格式显示具体添加和删除的行。\n\n假如再次修改 README 文件后暂存，然后编辑 benchmarks.rb 文件后先别暂存，运行 status 命令将会看到：\n``` bash\n$ git diff\ndiff --git a/benchmarks.rb b/benchmarks.rb\nindex 3cb747f..da65585 100644\n--- a/benchmarks.rb\n+++ b/benchmarks.rb\n@@ -36,6 +36,10 @@ def main\n           @commit.parents[0].parents[0].parents[0]\n         end\n\n+        run_code(x, 'commits 1') do\n+          git.commits.size\n+        end\n+\n         run_code(x, 'commits 2') do\n           log = git.commits('master', 15)\n           log.size\n```\n此命令比较的是工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化内容。\n\n若要看已经暂存起来的文件和上次提交时的快照之间的差异，可以用 git diff --cached 命令。（Git 1.6.1 及更高版本还允许使用 git diff --staged，效果是相同的，但更好记些。）来看看实际的效果：\n``` bash\n$ git diff --cached\ndiff --git a/README b/README\nnew file mode 100644\nindex 0000000..03902a1\n--- /dev/null\n+++ b/README2\n@@ -0,0 +1,5 @@\n+grit\n+ by Tom Preston-Werner, Chris Wanstrath\n+ http://github.com/mojombo/grit\n+\n+Grit is a Ruby library for extracting information from a Git repository\n```\n像之前说的，暂存 benchmarks.rb 后再编辑，运行 git status 会看到暂存前后的两个版本：\n``` bash\n$ git add benchmarks.rb\n$ echo '# test line' >> benchmarks.rb\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        modified:   benchmarks.rb\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   benchmarks.rb\n```\n现在运行 git diff 看暂存前后的变化：\n``` bash\n$ git diff\ndiff --git a/benchmarks.rb b/benchmarks.rb\nindex e445e28..86b2f7c 100644\n--- a/benchmarks.rb\n+++ b/benchmarks.rb\n@@ -127,3 +127,4 @@ end\n main()\n\n ##pp Grit::GitRuby.cache_client.stats\n+# test line\n```\n然后用 git diff --cached 查看已经暂存起来的变化：\n``` bash\n$ git diff --cached\ndiff --git a/benchmarks.rb b/benchmarks.rb\nindex 3cb747f..e445e28 100644\n--- a/benchmarks.rb\n+++ b/benchmarks.rb\n@@ -36,6 +36,10 @@ def main\n          @commit.parents[0].parents[0].parents[0]\n        end\n\n+        run_code(x, 'commits 1') do\n+          git.commits.size\n+        end\n+\n        run_code(x, 'commits 2') do\n          log = git.commits('master', 15)\n          log.size\n```\n#### 提交更新\n现在的暂存区域已经准备妥当可以提交了。在此之前，请一定要确认还有什么修改过的或新建的文件还没有 git add 过，否则提交的时候不会记录这些还没暂存起来的变化。所以，每次准备提交前，先用 git status 看下，是不是都已暂存起来了，然后再运行提交命令 git commit：\n``` bash\n$ git commit\n```\n这种方式会启动文本编辑器以便输入本次提交的说明。（默认会启用 shell 的环境变量 $EDITOR 所指定的软件，一般都是 vim 或 emacs。当然也可以按照第一章介绍的方式，使用 git config --global core.editor 命令设定你喜欢的编辑软件。）\n\n编辑器会显示类似下面的文本信息（本例选用 Vim 的屏显方式展示）：\n``` bash\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n# On branch master\n# Changes to be committed:\n#       new file:   README\n#       modified:   benchmarks.rb\n#\n~\n~\n~\n\".git/COMMIT_EDITMSG\" 10L, 283C\n```\n可以看到，默认的提交消息包含最后一次运行 git status 的输出，放在注释行里，另外开头还有一空行，供你输入提交说明。你完全可以去掉这些注释行，不过留着也没关系，多少能帮你回想起这次更新的内容有哪些。（如果觉得这还不够，可以用 -v 选项将修改差异的每一行都包含到注释中来。）退出编辑器时，Git 会丢掉注释行，将说明内容和本次更新提交到仓库。\n\n另外也可以用 -m 参数后跟提交说明的方式，在一行命令中提交更新：\n``` bash\n$ git commit -m \"Story 182: Fix benchmarks for speed\"\n[master 463dc4f] Story 182: Fix benchmarks for speed\n 2 files changed, 3 insertions(+)\n create mode 100644 README\n```\n\n好，现在你已经创建了第一个提交！可以看到，提交后它会告诉你，当前是在哪个分支（master）提交的，本次提交的完整 SHA-1 校验和是什么（463dc4f），以及在本次提交中，有多少文件修订过，多少行添改和删改过。\n\n记住，提交时的记录是放在暂存区域的快照，任何还未暂存的仍然保持已修改状态，可以在下次提交时纳入版本管理。每一次运行提交操作，都是对你项目作一次快照，以后可以回到这个状态，或者进行比较。\n\n### 跳过使用暂存区域\n尽管使用暂存区域的方式可以精心准备要提交的细节，但有时候这么做略显繁琐。Git 提供了一个跳过使用暂存区域的方式，只要在提交的时候，给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤：\n``` bash\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   benchmarks.rb\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n$ git commit -a -m 'added new benchmarks'\n[master 83e38c7] added new benchmarks\n 1 files changed, 5 insertions(+)\n```\n看到了吗？提交之前不再需要 git add 文件 benchmarks.rb 了。\n\n#### 移除文件\n要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。可以用 git rm 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。\n\n如果只是简单地从工作目录中手工删除文件，运行 git status 时就会在 “Changes not staged for commit” 部分（也就是未暂存清单）看到：\n``` bash\n$ rm grit.gemspec\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add/rm <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        deleted:    grit.gemspec\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n然后再运行 git rm 记录此次移除文件的操作：\n``` bash\n$ git rm grit.gemspec\nrm 'grit.gemspec'\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        deleted:    grit.gemspec\n```\n最后提交的时候，该文件就不再纳入版本管理了。如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f（译注：即 force 的首字母），以防误删除文件后丢失修改的内容。\n\n另外一种情况是，我们想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。换句话说，仅是从跟踪清单中删除。比如一些大型日志文件或者一堆 .a 编译文件，不小心纳入仓库后，要移除跟踪但不删除文件，以便稍后在 .gitignore 文件中补上，用 --cached 选项即可：\n``` bash\n$ git rm --cached readme.txt\n```\n后面可以列出文件或者目录的名字，也可以使用 glob 模式。比方说：\n``` bash\n$ git rm log/\\*.log\n```\n注意到星号 * 之前的反斜杠 \\，因为 Git 有它自己的文件模式扩展匹配方式，所以我们不用 shell 来帮忙展开（译注：实际上不加反斜杠也可以运行，只不过按照 shell 扩展的话，仅仅删除指定目录下的文件而不会递归匹配。上面的例子本来就指定了目录，所以效果等同，但下面的例子就会用递归方式匹配，所以必须加反斜杠。）。此命令删除所有 log/ 目录下扩展名为 .log 的文件。类似的比如：\n``` bash\n$ git rm \\*~\n```\n会递归删除当前目录及其子目录中所有 ~ 结尾的文件。\n\n#### 移动文件\n不像其他的 VCS 系统，Git 并不跟踪文件移动操作。如果在 Git 中重命名了某个文件，仓库中存储的元数据并不会体现出这是一次改名操作。不过 Git 非常聪明，它会推断出究竟发生了什么，至于具体是如何做到的，我们稍后再谈。\n\n既然如此，当你看到 Git 的 mv 命令时一定会困惑不已。要在 Git 中对文件改名，可以这么做：\n``` bash\n$ git mv file_from file_to\n```\n它会恰如预期般正常工作。实际上，即便此时查看状态信息，也会明白无误地看到关于重命名操作的说明：\n``` bash\n$ git mv README.txt README\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        renamed:    README.txt -> README\n```\n其实，运行 git mv 就相当于运行了下面三条命令：\n``` bash\n$ mv README.txt README\n$ git rm README.txt\n$ git add README\n```\n如此分开操作，Git 也会意识到这是一次改名，所以不管何种方式都一样。当然，直接用 git mv 轻便得多，不过有时候用其他工具批处理改名的话，要记得在提交前删除老的文件名，再添加新的文件名。\n\n#### 查看提交历史\n在提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，可以使用 git log 命令查看。\n\n接下来的例子会用我专门用于演示的 simplegit 项目，运行下面的命令获取该项目源代码：\n``` bash\ngit clone git://github.com/schacon/simplegit-progit.git\n```\n然后在此项目中运行 git log，应该会看到下面的输出：\n``` bash\n$ git log\ncommit ca82a6dff817ec66f44342007202690a93763949\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Mon Mar 17 21:52:11 2008 -0700\n\n    changed the version number\n\ncommit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Sat Mar 15 16:40:33 2008 -0700\n\n    removed unnecessary test code\n\ncommit a11bef06a3f659402fe7563abf99ad00de2209e6\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Sat Mar 15 10:31:28 2008 -0700\n\n    first commit\n```\n\n默认不用任何参数的话，git log 会按提交时间列出所有的更新，最近的更新排在最上面。看到了吗，每次更新都有一个 SHA-1 校验和、作者的名字和电子邮件地址、提交时间，最后缩进一个段落显示提交说明。\n\ngit log 有许多选项可以帮助你搜寻感兴趣的提交，接下来我们介绍些最常用的。\n\n我们常用 -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新：\n``` bash\n$ git log -p -2\ncommit ca82a6dff817ec66f44342007202690a93763949\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Mon Mar 17 21:52:11 2008 -0700\n\n    changed the version number\n\ndiff --git a/Rakefile b/Rakefile\nindex a874b73..8f94139 100644\n--- a/Rakefile\n+++ b/Rakefile\n@@ -5,5 +5,5 @@ require 'rake/gempackagetask'\n spec = Gem::Specification.new do |s|\n     s.name      =   \"simplegit\"\n-    s.version   =   \"0.1.0\"\n+    s.version   =   \"0.1.1\"\n     s.author    =   \"Scott Chacon\"\n     s.email     =   \"schacon@gee-mail.com\n\ncommit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Sat Mar 15 16:40:33 2008 -0700\n\n    removed unnecessary test code\n\ndiff --git a/lib/simplegit.rb b/lib/simplegit.rb\nindex a0a60ae..47c6340 100644\n--- a/lib/simplegit.rb\n+++ b/lib/simplegit.rb\n@@ -18,8 +18,3 @@ class SimpleGit\n     end\n\n end\n-\n-if $0 == __FILE__\n-  git = SimpleGit.new\n-  puts git.show\n-end\n\\ No newline at end of file\n```\n该选项除了显示基本信息之外，还在附带了每次 commit 的变化。当进行代码审查，或者快速浏览某个搭档提交的 commit 的变化的时候，这个参数就非常有用了。\n\n某些时候，单词层面的对比，比行层面的对比，更加容易观察。Git 提供了 --word-diff 选项。我们可以将其添加到 git log -p 命令的后面，从而获取单词层面上的对比。在程序代码中进行单词层面的对比常常是没什么用的。不过当你需要在书籍、论文这种很大的文本文件上进行对比的时候，这个功能就显出用武之地了。下面是一个简单的例子：\n``` bash\n$ git log -U1 --word-diff\ncommit ca82a6dff817ec66f44342007202690a93763949\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Mon Mar 17 21:52:11 2008 -0700\n\n    changed the version number\n\ndiff --git a/Rakefile b/Rakefile\nindex a874b73..8f94139 100644\n--- a/Rakefile\n+++ b/Rakefile\n@@ -7,3 +7,3 @@ spec = Gem::Specification.new do |s|\n    s.name      =   \"simplegit\"\n    s.version   =   [-\"0.1.0\"-]{+\"0.1.1\"+}\n    s.author    =   \"Scott Chacon\"\n```\n如你所见，这里并没有平常看到的添加行或者删除行的信息。这里的对比显示在行间。新增加的单词被 {+ +} 括起来，被删除的单词被 [- -] 括起来。在进行单词层面的对比的时候，你可能希望上下文（ context ）行数从默认的 3 行，减为 1 行，那么可以使用 -U1 选项。上面的例子中，我们就使用了这个选项。\n\n另外，git log 还提供了许多摘要选项可以用，比如 --stat，仅显示简要的增改行数统计：\n``` bash\n$ git log --stat\ncommit ca82a6dff817ec66f44342007202690a93763949\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Mon Mar 17 21:52:11 2008 -0700\n\n    changed the version number\n\n Rakefile |    2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ncommit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Sat Mar 15 16:40:33 2008 -0700\n\n    removed unnecessary test code\n\n lib/simplegit.rb |    5 -----\n 1 file changed, 5 deletions(-)\n\ncommit a11bef06a3f659402fe7563abf99ad00de2209e6\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Sat Mar 15 10:31:28 2008 -0700\n\n    first commit\n\n README           |    6 ++++++\n Rakefile         |   23 +++++++++++++++++++++++\n lib/simplegit.rb |   25 +++++++++++++++++++++++++\n 3 files changed, 54 insertions(+)\n```\n每个提交都列出了修改过的文件，以及其中添加和移除的行数，并在最后列出所有增减行数小计。 还有个常用的 --pretty 选项，可以指定使用完全不同于默认格式的方式展示提交历史。比如用 oneline 将每个提交放在一行显示，这在提交数很大时非常有用。另外还有 short，full 和 fuller 可以用，展示的信息或多或少有些不同，请自己动手实践一下看看效果如何。\n``` bash\n$ git log --pretty=oneline\nca82a6dff817ec66f44342007202690a93763949 changed the version number\n085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test code\na11bef06a3f659402fe7563abf99ad00de2209e6 first commit\n```\n但最有意思的是 format，可以定制要显示的记录格式，这样的输出便于后期编程提取分析，像这样：\n``` bash\n$ git log --pretty=format:\"%h - %an, %ar : %s\"\nca82a6d - Scott Chacon, 11 months ago : changed the version number\n085bb3b - Scott Chacon, 11 months ago : removed unnecessary test code\na11bef0 - Scott Chacon, 11 months ago : first commit\n```\n表 2-1 列出了常用的格式占位符写法及其代表的意义。\n\n<!-- Attention to translators: this is a table declaration. The lines must be formatted as follows <TAB><First column text><TAB><Second column text> -->\n``` bash\n选项\t 说明\n%H\t提交对象（commit）的完整哈希字串\n%h\t提交对象的简短哈希字串\n%T\t树对象（tree）的完整哈希字串\n%t\t树对象的简短哈希字串\n%P\t父对象（parent）的完整哈希字串\n%p\t父对象的简短哈希字串\n%an\t作者（author）的名字\n%ae\t作者的电子邮件地址\n%ad\t作者修订日期（可以用 -date= 选项定制格式）\n%ar\t作者修订日期，按多久以前的方式显示\n%cn\t提交者(committer)的名字\n%ce\t提交者的电子邮件地址\n%cd\t提交日期\n%cr\t提交日期，按多久以前的方式显示\n%s\t提交说明\n```\n你一定奇怪作者（author）和提交者（committer）之间究竟有何差别，其实作者指的是实际作出修改的人，提交者指的是最后将此工作成果提交到仓库的人。所以，当你为某个项目发布补丁，然后某个核心成员将你的补丁并入项目时，你就是作者，而那个核心成员就是提交者。我们会在第五章再详细介绍两者之间的细微差别。\n\n用 oneline 或 format 时结合 --graph 选项，可以看到开头多出一些 ASCII 字符串表示的简单图形，形象地展示了每个提交所在的分支及其分化衍合情况。在我们之前提到的 Grit 项目仓库中可以看到：\n``` bash\n$ git log --pretty=format:\"%h %s\" --graph\n* 2d3acf9 ignore errors from SIGCHLD on trap\n*  5e3ee11 Merge branch 'master' of git://github.com/dustin/grit\n|\\\n| * 420eac9 Added a method for getting the current branch.\n* | 30e367c timeout code and tests\n* | 5a09431 add timeout protection to grit\n* | e1193f8 support for heads with slashes in them\n|/\n* d6016bc require time for xmlschema\n*  11d191e Merge branch 'defunkt' into local\n```\n``` bash\n选项\t说明\n-p\t按补丁格式显示每个更新之间的差异。\n--word-diff\t按 word diff 格式显示差异。\n--stat\t显示每次更新的文件修改统计信息。\n--shortstat\t只显示 --stat 中最后的行数修改添加移除统计。\n--name-only\t仅在提交信息后显示已修改的文件清单。\n--name-status\t显示新增、修改、删除的文件清单。\n--abbrev-commit\t仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。\n--relative-date\t使用较短的相对时间显示（比如，“2 weeks ago”）。\n--graph\t显示 ASCII 图形表示的分支合并历史。\n--pretty\t使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。\n--oneline\t`--pretty=oneline --abbrev-commit` 的简化用法。\n```\n\n#### 限制输出长度\n\n除了定制输出格式的选项之外，git log 还有许多非常实用的限制输出长度的选项，也就是只输出部分提交信息。之前我们已经看到过 -2 了，它只显示最近的两条提交，实际上，这是 -<n> 选项的写法，其中的 n 可以是任何自然数，表示仅显示最近的若干条提交。不过实践中我们是不太用这个选项的，Git 在输出所有提交时会自动调用分页程序（less），要看更早的更新只需翻到下页即可。\n\n另外还有按照时间作限制的选项，比如 --since 和 --until。下面的命令列出所有最近两周内的提交：\n``` bash\n$ git log --since=2.weeks\n```\n你可以给出各种时间格式，比如说具体的某一天（“2008-01-15”），或者是多久以前（“2 years 1 day 3 minutes ago”）。\n\n还可以给出若干搜索条件，列出符合的提交。用 --author 选项显示指定作者的提交，用 --grep 选项搜索提交说明中的关键字。（请注意，如果要得到同时满足这两个选项搜索条件的提交，就必须用 --all-match 选项。否则，满足任意一个条件的提交都会被匹配出来）\n\n另一个真正实用的git log选项是路径(path)，如果只关心某些文件或者目录的历史提交，可以在 git log 选项的最后指定它们的路径。因为是放在最后位置上的选项，所以用两个短划线（--）隔开之前的选项和后面限定的路径名。\n\n表 2-3 还列出了其他常用的类似选项。\n\n``` bash\n选项\t说明\n-(n)\t仅显示最近的 n 条提交\n--since, --after\t仅显示指定时间之后的提交。\n--until, --before\t仅显示指定时间之前的提交。\n--author\t仅显示指定作者相关的提交。\n--committer\t仅显示指定提交者相关的提交。\n```\n来看一个实际的例子，如果要查看 Git 仓库中，2008 年 10 月期间，Junio Hamano 提交的但未合并的测试脚本（位于项目的 t/ 目录下的文件），可以用下面的查询命令：\n``` bash\n$ git log --pretty=\"%h - %s\" --author=gitster --since=\"2008-10-01\" \\\n   --before=\"2008-11-01\" --no-merges -- t/\n5610e3b - Fix testcase failure when extended attribute\nacd3b9e - Enhance hold_lock_file_for_{update,append}()\nf563754 - demonstrate breakage of detached checkout wi\nd1a43f2 - reset --hard/read-tree --reset -u: remove un\n51a94af - Fix \"checkout --track -b newbranch\" on detac\nb0ad11e - pull: allow \"git pull origin $something:$cur\n```\nGit 项目有 20,000 多条提交，但我们给出搜索选项后，仅列出了其中满足条件的 6 条。\n\n####使用图形化工具查阅提交历史\n\n有时候图形化工具更容易展示历史提交的变化，随 Git 一同发布的 gitk 就是这样一种工具。它是用 Tcl/Tk 写成的，基本上相当于 git log 命令的可视化版本，凡是 git log 可以用的选项也都能用在 gitk 上。在项目工作目录中输入 gitk 命令后，就会启动图 2-2 所示的界面\n上半个窗口显示的是历次提交的分支祖先图谱，下半个窗口显示当前点选的提交对应的具体差异。\n\n### 撤消操作\n任何时候，你都有可能需要撤消刚才所做的某些操作。接下来，我们会介绍一些基本的撤消操作相关的命令。请注意，有些撤销操作是不可逆的，所以请务必谨慎小心，一旦失误，就有可能丢失部分工作成果。\n\n#### 修改最后一次提交\n有时候我们提交完了才发现漏掉了几个文件没有加，或者提交信息写错了。想要撤消刚才的提交操作，可以使用 --amend 选项重新提交：\n``` bash\n$ git commit --amend\n```\n此命令将使用当前的暂存区域快照提交。如果刚才提交完没有作任何改动，直接运行此命令的话，相当于有机会重新编辑提交说明，但将要提交的文件快照和之前的一样。\n\n启动文本编辑器后，会看到上次提交时的说明，编辑它确认没问题后保存退出，就会使用新的提交说明覆盖刚才失误的提交。\n\n如果刚才提交时忘了暂存某些修改，可以先补上暂存操作，然后再运行 --amend 提交：\n``` bash\n$ git commit -m 'initial commit'\n$ git add forgotten_file\n$ git commit --amend\n```\n上面的三条命令最终只是产生一个提交，第二个提交命令修正了第一个的提交内容。\n\n#### 取消已经暂存的文件\n接下来的两个小节将演示如何取消暂存区域中的文件，以及如何取消工作目录中已修改的文件。不用担心，查看文件状态的时候就提示了该如何撤消，所以不需要死记硬背。来看下面的例子，有两个修改过的文件，我们想要分开提交，但不小心用 git add . 全加到了暂存区域。该如何撤消暂存其中的一个文件呢？其实，git status 的命令输出已经告诉了我们该怎么做：\n``` bash\n$ git add .\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        modified:   README.txt\n        modified:   benchmarks.rb\n```\n就在 “Changes to be committed” 下面，括号中有提示，可以使用 git reset HEAD <file>... 的方式取消暂存。好吧，我们来试试取消暂存 benchmarks.rb 文件：\n``` bash\n$ git reset HEAD benchmarks.rb\nUnstaged changes after reset:\nM       benchmarks.rb\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        modified:   README.txt\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   benchmarks.rb\n```\n这条命令看起来有些古怪，先别管，能用就行。现在 benchmarks.rb 文件又回到了之前已修改未暂存的状态。\n\n#### 取消对文件的修改\n如果觉得刚才对 benchmarks.rb 的修改完全没有必要，该如何取消修改，回到之前的状态（也就是修改之前的版本）呢？git status 同样提示了具体的撤消方法，接着上面的例子，现在未暂存区域看起来像这样：\n``` bash\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   benchmarks.rb\n```\n在第二个括号中，我们看到了抛弃文件修改的命令（至少在 Git 1.6.1 以及更高版本中会这样提示，如果你还在用老版本，我们强烈建议你升级，以获取最佳的用户体验），让我们试试看：\n``` bash\n$ git checkout -- benchmarks.rb \t\t#必须是跟踪的\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        modified:   README.txt\n```\n可以看到，该文件已经恢复到修改前的版本。你可能已经意识到了，这条命令有些危险，所有对文件的修改都没有了，因为我们刚刚把之前版本的文件复制过来重写了此文件。所以在用这条命令前，请务必确定真的不再需要保留刚才的修改。如果只是想回退版本，同时保留刚才的修改以便将来继续工作，可以用下章介绍的 stashing 和分支来处理，应该会更好些。\n\n记住，任何已经提交到 Git 的都可以被恢复。即便在已经删除的分支中的提交，或者用 --amend 重新改写的提交，都可以被恢复（关于数据恢复的内容见第九章）。所以，你可能失去的数据，仅限于没有提交过的，对 Git 来说它们就像从未存在过一样。\n\n### 远程仓库的使用\n\n要参与任何一个 Git 项目的协作，必须要了解该如何管理远程仓库。远程仓库是指托管在网络上的项目仓库，可能会有好多个，其中有些你只能读，另外有些可以写。同他人协作开发某个项目时，需要管理这些远程仓库，以便推送或拉取数据，分享各自的工作进展。 管理远程仓库的工作，包括添加远程库，移除废弃的远程库，管理各式远程库分支，定义是否跟踪这些分支，等等。本节我们将详细讨论远程库的管理和使用。\n\n#### 查看当前的远程库\n要查看当前配置有哪些远程仓库，可以用 git remote 命令，它会列出每个远程库的简短名字。在克隆完某个项目后，至少可以看到一个名为 origin 的远程库，Git 默认使用这个名字来标识你所克隆的原始仓库：\n``` bash\n$ git clone git://github.com/schacon/ticgit.git\nCloning into 'ticgit'...\nremote: Reusing existing pack: 1857, done.\nremote: Total 1857 (delta 0), reused 0 (delta 0)\nReceiving objects: 100% (1857/1857), 374.35 KiB | 193.00 KiB/s, done.\nResolving deltas: 100% (772/772), done.\nChecking connectivity... done.\n$ cd ticgit\n$ git remote\norigin\n```\n也可以加上 -v 选项（译注：此为 --verbose 的简写，取首字母），显示对应的克隆地址：\n``` bash\n$ git remote -v\norigin  git://github.com/schacon/ticgit.git (fetch)\norigin  git://github.com/schacon/ticgit.git (push)\n```\n如果有多个远程仓库，此命令将全部列出。比如在我的 Grit 项目中，可以看到：\n``` bash\n$ cd grit\n$ git remote -v\nbakkdoor  git://github.com/bakkdoor/grit.git\ncho45     git://github.com/cho45/grit.git\ndefunkt   git://github.com/defunkt/grit.git\nkoke      git://github.com/koke/grit.git\norigin    git@github.com:mojombo/grit.git\n```\n这样一来，我就可以非常轻松地从这些用户的仓库中，拉取他们的提交到本地。请注意，上面列出的地址只有 origin 用的是 SSH URL 链接，所以也只有这个仓库我能推送数据上去（我们会在第四章解释原因）。\n\n#### 添加远程仓库\n\n要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用，运行 git remote add [shortname] [url]：\n``` bash\n$ git remote\norigin\n$ git remote add pb git://github.com/paulboone/ticgit.git\n$ git remote -v\norigin\tgit://github.com/schacon/ticgit.git\npb\tgit://github.com/paulboone/ticgit.git\n```\n现在可以用字符串 pb 指代对应的仓库地址了。比如说，要抓取所有 Paul 有的，但本地仓库没有的信息，可以运行 git fetch pb：\n``` bash\n$ git fetch pb\nremote: Counting objects: 58, done.\nremote: Compressing objects: 100% (41/41), done.\nremote: Total 44 (delta 24), reused 1 (delta 0)\nUnpacking objects: 100% (44/44), done.\nFrom git://github.com/paulboone/ticgit\n * [new branch]      master     -> pb/master\n * [new branch]      ticgit     -> pb/ticgit\n```\n\n#### 从远程仓库抓取数据\n\n正如之前所看到的，可以用下面的命令从远程仓库抓取数据到本地：\n``` bash\n$ git fetch [remote-name]\n```\n此命令会到远程仓库中拉取所有你本地仓库中还没有的数据。运行完成后，你就可以在本地访问该远程仓库中的所有分支，将其中某个分支合并到本地，或者只是取出某个分支，一探究竟。（我们会在第三章详细讨论关于分支的概念和操作。）\n\n如果是克隆了一个仓库，此命令会自动将远程仓库归于 origin 名下。所以，git fetch origin 会抓取从你上次克隆以来别人上传到此远程仓库中的所有更新（或是上次 fetch 以来别人提交的更新）。有一点很重要，需要记住，fetch 命令只是将远端的数据拉到本地仓库，并不自动合并到当前工作分支，只有当你确实准备好了，才能手工合并。\n\n如果设置了某个分支用于跟踪某个远端仓库的分支（参见下节及第三章的内容），可以使用 git pull 命令自动抓取数据下来，然后将远端分支自动合并到本地仓库中当前分支。在日常工作中我们经常这么用，既快且好。实际上，默认情况下 git clone 命令本质上就是自动创建了本地的 master 分支用于跟踪远程仓库中的 master 分支（假设远程仓库确实有 master 分支）。所以一般我们运行 git pull，目的都是要从原始克隆的远端仓库中抓取数据后，合并到工作目录中的当前分支。\n\n#### 推送数据到远程仓库\n项目进行到一个阶段，要同别人分享目前的成果，可以将本地仓库中的数据推送到远程仓库。实现这个任务的命令很简单： git push [remote-name] [branch-name]。如果要把本地的 master 分支推送到 origin 服务器上（再次说明下，克隆操作会自动使用默认的 master 和 origin 名字），可以运行下面的命令：\n``` bash\n$ git push origin master\n```\n只有在所克隆的服务器上有写权限，或者同一时刻没有其他人在推数据，这条命令才会如期完成任务。如果在你推数据前，已经有其他人推送了若干更新，那你的推送操作就会被驳回。你必须先把他们的更新抓取到本地，合并到自己的项目中，然后才可以再次推送。有关推送数据到远程仓库的详细内容见第三章。\n\n#### 查看远程仓库信息\n我们可以通过命令 git remote show [remote-name] 查看某个远程仓库的详细信息，比如要看所克隆的 origin 仓库，可以运行：\n``` bash\n$ git remote show origin\n* remote origin\n  URL: git://github.com/schacon/ticgit.git\n  Remote branch merged with 'git pull' while on branch master\n    master\n  Tracked remote branches\n    master\n    ticgit\n```\n除了对应的克隆地址外，它还给出了许多额外的信息。它友善地告诉你如果是在 master 分支，就可以用 git pull 命令抓取数据合并到本地。另外还列出了所有处于跟踪状态中的远端分支。\n\n上面的例子非常简单，而随着使用 Git 的深入，git remote show 给出的信息可能会像这样：\n``` bash\n$ git remote show origin\n* remote origin\n  URL: git@github.com:defunkt/github.git\n  Remote branch merged with 'git pull' while on branch issues\n    issues\n  Remote branch merged with 'git pull' while on branch master\n    master\n  New remote branches (next fetch will store in remotes/origin)\n    caching\n  Stale tracking branches (use 'git remote prune')\n    libwalker\n    walker2\n  Tracked remote branches\n    acl\n    apiv2\n    dashboard2\n    issues\n    master\n    postgres\n  Local branch pushed with 'git push'\n    master:master\n```\n\n#### 远程仓库的删除和重命名\n在新版 Git 中可以用 git remote rename 命令修改某个远程仓库在本地的简称，比如想把 pb 改成 paul，可以这么运行：\n``` bash\n$ git remote rename pb paul\n$ git remote\norigin\npaul\n```\n注意，对远程仓库的重命名，也会使对应的分支名称发生变化，原来的 pb/master 分支现在成了 paul/master。\n\n碰到远端仓库服务器迁移，或者原来的克隆镜像不再使用，又或者某个参与者不再贡献代码，那么需要移除对应的远端仓库，可以运行 git remote rm 命令：\n``` bash\n$ git remote rm paul\n$ git remote\norigin\n```\n\n### 打标签\n同大多数 VCS 一样，Git 也可以对某一时间点上的版本打上标签。人们在发布某个软件版本（比如 v1.0 等等）的时候，经常这么做。本节我们一起来学习如何列出所有可用的标签，如何新建标签，以及各种不同类型标签之间的差别。\n\n#### 列显已有的标签\n列出现有标签的命令非常简单，直接运行 git tag 即可：\n``` bash\n$ git tag\nv0.1\nv1.3\n```\n显示的标签按字母顺序排列，所以标签的先后并不表示重要程度的轻重。\n\n我们可以用特定的搜索模式列出符合条件的标签。在 Git 自身项目仓库中，有着超过 240 个标签，如果你只对 1.4.2 系列的版本感兴趣，可以运行下面的命令：\n``` bash\n$ git tag -l 'v1.4.2.*'\nv1.4.2.1\nv1.4.2.2\nv1.4.2.3\nv1.4.2.4\n```\n\n#### 新建标签\nGit 使用的标签有两种类型：轻量级的（lightweight）和含附注的（annotated）。轻量级标签就像是个不会变化的分支，实际上它就是个指向特定提交对象的引用。而含附注标签，实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，电子邮件地址和日期，以及标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证。一般我们都建议使用含附注型的标签，以便保留相关信息；当然，如果只是临时性加注标签，或者不需要旁注额外信息，用轻量级标签也没问题。\n\n#### 含附注的标签\n创建一个含附注类型的标签非常简单，用 -a （译注：取 annotated 的首字母）指定标签名字即可：\n``` bash\n$ git tag -a v1.4 -m 'my version 1.4'\n$ git tag\nv0.1\nv1.3\nv1.4\n```\n而 -m 选项则指定了对应的标签说明，Git 会将此说明一同保存在标签对象中。如果没有给出该选项，Git 会启动文本编辑软件供你输入标签说明。\n\n可以使用 git show 命令查看相应标签的版本信息，并连同显示打标签时的提交对象。\n\n#### 签署标签\n如果你有自己的私钥，还可以用 GPG 来签署标签，只需要把之前的 -a 改为 -s （译注： 取 signed 的首字母）即可:\n``` bash\n$ git tag -s v1.5 -m 'my signed 1.5 tag'\nYou need a passphrase to unlock the secret key for\nuser: \"Scott Chacon <schacon@gee-mail.com>\"\n1024-bit DSA key, ID F721C45A, created 2009-02-09\n```\n现在再运行 git show 会看到对应的 GPG 签名也附在其内：\n``` bash\n$ git show v1.5\ntag v1.5\nTagger: Scott Chacon <schacon@gee-mail.com>\nDate:   Mon Feb 9 15:22:20 2009 -0800\n\nmy signed 1.5 tag\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.8 (Darwin)\n\niEYEABECAAYFAkmQurIACgkQON3DxfchxFr5cACeIMN+ZxLKggJQf0QYiQBwgySN\nKi0An2JeAVUCAiJ7Ox6ZEtK+NvZAj82/\n=WryJ\n-----END PGP SIGNATURE-----\ncommit 15027957951b64cf874c3557a0f3547bd83b3ff6\nMerge: 4a447f7... a6b4c97...\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Sun Feb 8 19:02:46 2009 -0800\n\n    Merge branch 'experiment'\n```\n现在再运行 git show 会看到对应的 GPG 签名也附在其内：\n``` bash\n$ git show v1.5\ntag v1.5\nTagger: Scott Chacon <schacon@gee-mail.com>\nDate:   Mon Feb 9 15:22:20 2009 -0800\n\nmy signed 1.5 tag\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.8 (Darwin)\n\niEYEABECAAYFAkmQurIACgkQON3DxfchxFr5cACeIMN+ZxLKggJQf0QYiQBwgySN\nKi0An2JeAVUCAiJ7Ox6ZEtK+NvZAj82/\n=WryJ\n-----END PGP SIGNATURE-----\ncommit 15027957951b64cf874c3557a0f3547bd83b3ff6\nMerge: 4a447f7... a6b4c97...\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Sun Feb 8 19:02:46 2009 -0800\n\n    Merge branch 'experiment'\n```\n稍后我们再学习如何验证已经签署的标签。\n\n#### 轻量级标签\n\n轻量级标签实际上就是一个保存着对应提交对象的校验和信息的文件。要创建这样的标签，一个 -a，-s 或 -m 选项都不用，直接给出标签名字即可：\n``` bash\n$ git tag v1.4-lw\n$ git tag\nv0.1\nv1.3\nv1.4\nv1.4-lw\nv1.5\n```\n现在运行 git show 查看此标签信息，就只有相应的提交对象摘要：\n``` bash\n$ git show v1.4-lw\ncommit 15027957951b64cf874c3557a0f3547bd83b3ff6\nMerge: 4a447f7... a6b4c97...\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Sun Feb 8 19:02:46 2009 -0800\n\n    Merge branch 'experiment'\n```\n\n#### 验证标签\n可以使用 git tag -v [tag-name] （译注：取 verify 的首字母）的方式验证已经签署的标签。此命令会调用 GPG 来验证签名，所以你需要有签署者的公钥，存放在 keyring 中，才能验证：\n``` bash\n$ git tag -v v1.4.2.1\nobject 883653babd8ee7ea23e6a5c392bb739348b1eb61\ntype commit\ntag v1.4.2.1\ntagger Junio C Hamano <junkio@cox.net> 1158138501 -0700\n\nGIT 1.4.2.1\n\nMinor fixes since 1.4.2, including git-mv and git-http with alternates.\ngpg: Signature made Wed Sep 13 02:08:25 2006 PDT using DSA key ID F3119B9A\ngpg: Good signature from \"Junio C Hamano <junkio@cox.net>\"\ngpg:                 aka \"[jpeg image of size 1513]\"\nPrimary key fingerprint: 3565 2A26 2040 E066 C9A7  4A7D C0C6 D9A4 F311 9B9A\n```\n若是没有签署者的公钥，会报告类似下面这样的错误：\n``` bash\ngpg: Signature made Wed Sep 13 02:08:25 2006 PDT using DSA key ID F3119B9A\ngpg: Can't check signature: public key not found\nerror: could not verify the tag 'v1.4.2.1'\n```\n\n#### 后期加注标签\n你甚至可以在后期对早先的某次提交加注标签。比如在下面展示的提交历史中：\n``` bash\n$ git log --pretty=oneline\n15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'\na6b4c97498bd301d84096da251c98a07c7723e65 beginning write support\n0d52aaab4479697da7686c15f77a3d64d9165190 one more thing\n6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'\n0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function\n4682c3261057305bdd616e23b64b0857d832627b added a todo file\n166ae0c4d3f420721acbb115cc33848dfcc2121a started write support\n9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile\n964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo\n8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme\n```\n我们忘了在提交 “updated rakefile” 后为此项目打上版本号 v1.2，没关系，现在也能做。只要在打标签的时候跟上对应提交对象的校验和（或前几位字符）即可：\n``` bash\n$ git tag -a v1.2 9fceb02\n```\n可以看到我们已经补上了标签：\n``` bash\n$ git tag\nv0.1\nv1.2\nv1.3\nv1.4\nv1.4-lw\nv1.5\n\n$ git show v1.2\ntag v1.2\nTagger: Scott Chacon <schacon@gee-mail.com>\nDate:   Mon Feb 9 15:32:16 2009 -0800\n\nversion 1.2\ncommit 9fceb02d0ae598e95dc970b74767f19372d61af8\nAuthor: Magnus Chacon <mchacon@gee-mail.com>\nDate:   Sun Apr 27 20:43:35 2008 -0700\n\n    updated rakefile\n...\n```\n\n#### 分享标签\n默认情况下，git push 并不会把标签传送到远端服务器上，只有通过显式命令才能分享标签到远端仓库。其命令格式如同推送分支，运行 git push origin [tagname] 即可：\n``` bash\n$ git push origin v1.5\nCounting objects: 50, done.\nCompressing objects: 100% (38/38), done.\nWriting objects: 100% (44/44), 4.56 KiB, done.\nTotal 44 (delta 18), reused 8 (delta 1)\nTo git@github.com:schacon/simplegit.git\n* [new tag]         v1.5 -> v1.5\n```\n如果要一次推送所有本地新增的标签上去，可以使用 --tags 选项：\n``` bash\n$ git push origin --tags\nCounting objects: 50, done.\nCompressing objects: 100% (38/38), done.\nWriting objects: 100% (44/44), 4.56 KiB, done.\nTotal 44 (delta 18), reused 8 (delta 1)\nTo git@github.com:schacon/simplegit.git\n * [new tag]         v0.1 -> v0.1\n * [new tag]         v1.2 -> v1.2\n * [new tag]         v1.4 -> v1.4\n * [new tag]         v1.4-lw -> v1.4-lw\n * [new tag]         v1.5 -> v1.5\n```\n现在，其他人克隆共享仓库或拉取数据同步后，也会看到这些标签。\n\n### 技巧和窍门\n\n在结束本章之前，我还想和大家分享一些 Git 使用的技巧和窍门。很多使用 Git 的开发者可能根本就没用过这些技巧，我们也不是说在读过本书后非得用这些技巧不可，但至少应该有所了解吧。说实话，有了这些小窍门，我们的工作可以变得更简单，更轻松，更高效。\n\n#### 自动补全\n如果你用的是 Bash shell，可以试试看 Git 提供的自动补全脚本。下载 Git 的源代码，进入 contrib/completion 目录，会看到一个 git-completion.bash 文件。将此文件复制到你自己的用户主目录中（译注：按照下面的示例，还应改名加上点：cp git-completion.bash ~/.git-completion.bash），并把下面一行内容添加到你的 .bashrc 文件中：\n``` bash\nsource ~/.git-completion.bash\n```\n也可以为系统上所有用户都设置默认使用此脚本。Mac 上将此脚本复制到 /opt/local/etc/bash_completion.d 目录中，Linux 上则复制到 /etc/bash_completion.d/ 目录中。这两处目录中的脚本，都会在 Bash 启动时自动加载。\n\n如果在 Windows 上安装了 msysGit，默认使用的 Git Bash 就已经配好了这个自动补全脚本，可以直接使用。\n\n在输入 Git 命令的时候可以敲两次跳格键（Tab），就会看到列出所有匹配的可用命令建议：\n``` bash\n$ git co<tab><tab>\ncommit config\n```\n此例中，键入 git co 然后连按两次 Tab 键，会看到两个相关的建议（命令） commit 和 config。继而输入 m<tab> 会自动完成 git commit 命令的输入。\n\n命令的选项也可以用这种方式自动完成，其实这种情况更实用些。比如运行 git log 的时候忘了相关选项的名字，可以输入开头的几个字母，然后敲 Tab 键看看有哪些匹配的：\n``` bash\n$ git log --s<tab>\n--shortstat  --since=  --src-prefix=  --stat   --summary\n```\n这个技巧不错吧，可以节省很多输入和查阅文档的时间。\n\n#### Git 命令别名\nGit 并不会推断你输入的几个字符将会是哪条命令，不过如果想偷懒，少敲几个命令的字符，可以用 git config 为命令设置别名。来看看下面的例子：\n``` bash\n$ git config --global alias.co checkout\n$ git config --global alias.br branch\n$ git config --global alias.ci commit\n$ git config --global alias.st status\n```\n\n现在，如果要输入 git commit 只需键入 git ci 即可。而随着 Git 使用的深入，会有很多经常要用到的命令，遇到这种情况，不妨建个别名提高效率。\n\n使用这种技术还可以创造出新的命令，比方说取消暂存文件时的输入比较繁琐，可以自己设置一下：\n``` bash\n$ git config --global alias.unstage 'reset HEAD --'\n```\n这样一来，下面的两条命令完全等同：\n``` bash\n$ git unstage fileA\n$ git reset HEAD fileA\n```\n显然，使用别名的方式看起来更清楚。另外，我们还经常设置 last 命令：\n``` bash\n$ git config --global alias.last 'log -1 HEAD'\n```\n然后要看最后一次的提交信息，就变得简单多了：\n``` bash\n$ git last\ncommit 66938dae3329c7aebe598c2246a8e6af90d04646\nAuthor: Josh Goebel <dreamer3@example.com>\nDate:   Tue Aug 26 19:48:51 2008 +0800\n\n    test for current head\n\n    Signed-off-by: Scott Chacon <schacon@example.com>\n```\n可以看出，实际上 Git 只是简单地在命令中替换了你设置的别名。不过有时候我们希望运行某个外部命令，而非 Git 的子命令，这个好办，只需要在命令前加上 ! 就行。如果你自己写了些处理 Git 仓库信息的脚本的话，就可以用这种技术包装起来。作为演示，我们可以设置用 git visual 启动 gitk：\n``` bash\n$ git config --global alias.visual '!gitk'\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/git学习笔记.md","raw":"---\ntitle: git学习笔记(一)\ndate: 2016-08-26 15:25:51\ntags: 笔记 git\n---\n\n## \t起步\n\n### 版本控制\n关于版本控制\n什么是版本控制？我为什么要关心它呢？版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。在本书所展示的例子中，我们仅对保存着软件源代码的文本文件作版本控制管理，但实际上，你可以对任何类型的文件进行版本控制。\n<!--more-->\n### 分布式版本控制系统\n于是分布式版本控制系统（ Distributed Version Control System，简称 DVCS ）面世了。在这类系统中，像 Git，Mercurial，Bazaar 以及 Darcs 等，客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。因为每一次的提取操作，实际上都是一次对代码仓库的完整备份。\n如果你是位图形或网页设计师，可能会需要保存某一幅图片或页面布局文件的所有修订版本（这或许是你非常渴望拥有的功能）。采用版本控制系统（VCS）是个明智的选择。有了它你就可以将某个文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态。你可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而找出导致怪异问题出现的原因，又是谁在何时报告了某个功能缺陷等等。使用版本控制系统通常还意味着，就算你乱来一气把整个项目中的文件改的改删的删，你也照样可以轻松恢复到原先的样子。但额外增加的工作量却微乎其微。\n\n### Git基础\n\n#### 直接记录快照，而非差异比较\nGit 和其他版本控制系统的主要差别在于，Git 只关心文件数据的整体是否发生变化，而大多数其他系统则只关心文件内容的具体差异。这类系统（CVS，Subversion，Perforce，Bazaar 等等）每次记录有哪些文件作了更新，以及都更新了哪些行的什么内容.Git 并不保存这些前后变化的差异数据。实际上，Git 更像是把变化的文件作快照后，记录在一个微型的文件系统中。每次提交更新时，它会纵览一遍所有文件的指纹信息并对文件作一快照，然后保存一个指向这次快照的索引。为提高性能，若文件没有变化，Git 不会再次保存，而只对上次保存的快照作一链接。\n\n#### 近乎所有操作都是本地执行\n在 Git 中的绝大多数操作都只需要访问本地文件和资源，不用连网。但如果用 CVCS 的话，差不多所有操作都需要连接网络。因为 Git 在本地磁盘上就保存着所有当前项目的历史更新，所以处理起来速度飞快。\n\n#### 文件的三种状态\n对于任何一个文件，在 Git 内都只有三种状态：已提交（committed），已修改（modified）和已暂存（staged）。已提交表示该文件已经被安全地保存在本地数据库中了；已修改表示修改了某个文件，但还没有提交保存；已暂存表示把已修改的文件放在下次提交时要保存的清单中。\n\n#### 基本的 Git 工作流程如下：\n在工作目录中修改某些文件。\n对修改后的文件进行快照，然后保存到暂存区域。\n提交更新，将保存在暂存区域的文件快照永久转储到 Git 目录中。\n\n### 安装\n\n#### 从源代码安装\n若是条件允许，从源代码安装有很多好处，至少可以安装最新的版本。Git 的每个版本都在不断尝试改进用户体验，所以能通过源代码自己编译安装最新版本就再好不过了。有些 Linux 版本自带的安装包更新起来并不及时，所以除非你在用最新的 distro 或者 backports，那么从源代码安装其实该算是最佳选择。Git 的工作需要调用 curl，zlib，openssl，expat，libiconv 等库的代码，所以需要先安装这些依赖工具。\n\n#### Linux\n在 Ubuntu 这类 Debian 体系的系统上可以用 apt-get 安装：\n``` bash\n$ apt-get install git\n```\n\n#### Windows\n在 Windows 上安装:[官网](http://msysgit.github.com/)\n给 Windows 用户的敬告：你应该在 msysGit 提供的 Unix 风格的 shell 来运行 Git。在 Unix 风格的 shell 中，可以使用本书中提及的复杂多行的命令。对于那些需要在 Windows 命令行中使用 Git 的用户，必须注意：在参数中间有空格的时候，必须使用双引号将参数括起来（在 Linux 中是单引号）；另外，如果扬抑符（^）作为参数的结尾，并且作为这一行的最后一个字符，则这个参数也需要用双引号括起来。因为扬抑符在 Windows 命令行中表示续行（译注：即下一行为这一行命令的继续）。\n\n\n### 初次运行 Git 前的配置\n一般在新的系统上，我们都需要先配置下自己的 Git 工作环境。配置工作只需一次，以后升级时还会沿用现在的配置。当然，如果需要，你随时可以用相同的命令修改已有的配置。\nGit 提供了一个叫做 git config 的工具（译注：实际是 git-config 命令，只不过可以通过 git 加一个名字来呼叫此命令。），专门用来配置或读取相应的工作环境变量。而正是由这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：\n\n1, /etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 --system 选项，读写的就是这个文件。\n2, ~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用 --global 选项，读写的就是这个文件。\n3, 当前项目的 Git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。\n\n#### 用户信息\n第一个要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：\n``` bash\n$ git config --global user.name \"John Doe\"\n$ git config --global user.email johndoe@example.com\n```\n如果用了 --global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 --global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。\n\n#### 文本编辑器\n接下来要设置的是默认使用的文本编辑器。Git 需要你输入一些额外消息的时候，会自动调用一个外部文本编辑器给你用。默认会使用操作系统指定的默认编辑器，一般可能会是 Vi 或者 Vim。如果你有其他偏好，比如 Emacs 的话，可以重新设置：\n``` bash\n$ git config --global core.editor emacs\n```\n\n#### 差异分析工具\n还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用 vimdiff 的话：\n``` bash\n$ git config --global merge.tool vimdiff\n```\nGit 可以理解 kdiff3，tkdiff，meld，xxdiff，emerge，vimdiff，gvimdiff，ecmerge，和 opendiff 等合并工具的输出信息。当然，你也可以指定使用自己开发的工具，具体怎么做可以参阅第七章。\n\n#### 查看配置信息\n要检查已有的配置信息，可以使用 git config --list 命令：\n``` bash\n$ git config --list\nuser.name=Scott Chacon\nuser.email=schacon@gmail.com\ncolor.status=auto\ncolor.branch=auto\ncolor.interactive=auto\ncolor.diff=auto\n...\n```\n有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 /etc/gitconfig 和 ~/.gitconfig），不过最终 Git 实际采用的是最后一个。\n\n也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：\n``` bash\n$ git config user.name\nScott Chacon\n```\n\n### 获取帮助\n想了解 Git 的各式工具该怎么用，可以阅读它们的使用帮助，方法有三：\n``` bash\n$ git help <verb>\n$ git <verb> --help\n$ man git-<verb>\n```\n我们随时都可以浏览这些帮助信息而无需连网。 不过，要是你觉得还不够，可以到 Freenode IRC 服务器（irc.freenode.net）上的 #git 或 #github 频道寻求他人帮助。这两个频道上总有着上百号人，大多都有着丰富的 Git 知识，并且乐于助人。\n\n## Git基础\n\n### 取得项目的 Git 仓库\n有两种取得 Git 项目仓库的方法。第一种是在现存的目录下，通过导入所有文件来创建新的 Git 仓库。第二种是从已有的 Git 仓库克隆出一个新的镜像仓库来。\n\n#### 在工作目录中初始化新仓库\n要对现有的某个项目开始用 Git 管理，只需到此项目所在的目录，执行：\n``` bash\n$ git init\n```\n初始化后，在当前目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。不过目前，仅仅是按照既有的结构框架初始化好了里边所有的文件和目录，但我们还没有开始跟踪管理项目中的任何一个文件。（在第九章我们会详细说明刚才创建的 .git 目录中究竟有哪些文件，以及都起些什么作用。）\n如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：\n``` bash\n$ git add *.c\n$ git add README\n$ git commit -m 'initial project version'\n```\n\n#### 从现有仓库克隆\n如果想对某个开源项目出一份力，可以先把该项目的 Git 仓库复制一份出来，这就需要用到 git clone 命令。如果你熟悉其他的 VCS 比如 Subversion，你可能已经注意到这里使用的是 clone 而不是 checkout。这是个非常重要的差别，Git 收取的是项目历史的所有数据（每一个文件的每一个版本），服务器上有的数据克隆之后本地也都有了。实际上，即便服务器的磁盘发生故障，用任何一个克隆出来的客户端都可以重建服务器上的仓库，回到当初克隆时的状态（虽然可能会丢失某些服务器端的挂钩设置，但所有版本的数据仍旧还在，有关细节请参考第四章）。\n\n克隆仓库的命令格式为 git clone [url]。比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：\n``` bash\n$ git clone git://github.com/schacon/grit.git\n```\n这会在当前目录下创建一个名为grit的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录，然后从中取出最新版本的文件拷贝。如果进入这个新建的 grit 目录，你会看到项目中的所有文件已经在里边了，准备好后续的开发和使用。如果希望在克隆的时候，自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：\n``` bash\n$ git clone git://github.com/schacon/grit.git mygrit\n```\n唯一的差别就是，现在新建的目录成了 mygrit，其他的都和上边的一样。\n\nGit 支持许多数据传输协议。之前的例子使用的是 git:// 协议，不过你也可以用 http(s):// 或者 user@server:/path.git 表示的 SSH 传输协议。我们会在第四章详细介绍所有这些协议在服务器端该如何配置使用，以及各种方式之间的利弊。\n\n### 记录每次更新到仓库\n\n现在我们手上已经有了一个真实项目的 Git 仓库，并从这个仓库中取出了所有文件的工作拷贝。接下来，对这些文件作些修改，在完成了一个阶段的目标之后，提交本次更新到仓库。\n\n请记住，工作目录下面的所有文件都不外乎这两种状态：已跟踪或未跟踪。已跟踪的文件是指本来就被纳入版本控制管理的文件，在上次快照中有它们的记录，工作一段时间后，它们的状态可能是未更新，已修改或者已放入暂存区。而所有其他文件都属于未跟踪文件。它们既没有上次更新时的快照，也不在当前的暂存区域。初次克隆某个仓库时，工作目录中的所有文件都属于已跟踪文件，且状态为未修改。\n\n在编辑过某些文件之后，Git 将这些文件标为已修改。我们逐步把这些修改过的文件放到暂存区域，直到最后一次性提交所有这些暂存起来的文件，如此重复。\n\n#### 检查当前文件状态\n要确定哪些文件当前处于什么状态，可以用 git status 命令。如果在克隆仓库之后立即执行此命令，会看到类似这样的输出：\n``` bash\n$ git status\nOn branch master\nnothing to commit, working directory clean\n```\n这说明你现在的工作目录相当干净。换句话说，所有已跟踪文件在上次提交后都未被更改过。此外，上面的信息还表明，当前目录下没有出现任何处于未跟踪的新文件，否则 Git 会在这里列出来。最后，该命令还显示了当前所在的分支是 master，这是默认的分支名称，实际是可以修改的，现在先不用考虑。下一章我们就会详细讨论分支和引用。\n\n现在让我们用 vim 创建一个新文件 README，保存退出后运行 git status 会看到该文件出现在未跟踪文件列表中：\n``` bash\n$ vim README\t\t#自学vim编辑器\n$ git status\nOn branch master\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n        README\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n```\n在状态报告中可以看到新建的README文件出现在“Untracked files”下面。未跟踪的文件意味着Git在之前的快照（提交）中没有这些文件；Git 不会自动将之纳入跟踪范围，除非你明明白白地告诉它“我需要跟踪该文件”，因而不用担心把临时文件什么的也归入版本管理。不过现在的例子中，我们确实想要跟踪管理 README 这个文件。\n\n#### 跟踪新文件\n使用命令 git add 开始跟踪一个新文件。所以，要跟踪 README 文件，运行：\n``` bash\n$ git add README\n```\n此时再运行 git status 命令，会看到 README 文件已被跟踪，并处于暂存状态：\n``` bash\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        new file:   README\n\n```\n只要在 “Changes to be committed” 这行下面的，就说明是已暂存状态。如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。你可能会想起之前我们使用 git init 后就运行了 git add 命令，开始跟踪当前目录下的文件。在 git add 后面可以指明要跟踪的文件或目录路径。如果是目录的话，就说明要递归跟踪该目录下的所有文件。（译注：其实 git add 的潜台词就是把目标文件快照放入暂存区域，也就是 add file into staged area，同时未曾跟踪过的文件标记为需要跟踪。这样就好理解后续 add 操作的实际意义了。）\n\n#### 暂存已修改文件\n现在我们修改下之前已跟踪过的文件 benchmarks.rb，然后再次运行 status 命令，会看到这样的状态报告：\n``` bash\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        new file:   README\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   benchmarks.rb\n```\n文件 benchmarks.rb 出现在 “Changes not staged for commit” 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。要暂存这次更新，需要运行 git add 命令（这是个多功能命令，根据目标文件的状态不同，此命令的效果也不同：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等）。现在让我们运行 git add 将 benchmarks.rb 放到暂存区，然后再看看 git status 的输出：\n``` bash\n$ git add benchmarks.rb\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        new file:   README\n        modified:   benchmarks.rb\n```\n现在两个文件都已暂存，下次提交时就会一并记录到仓库。假设此时，你想要在 benchmarks.rb 里再加条注释，重新编辑存盘后，准备好提交。不过且慢，再运行 git status 看看：\n``` bash\n$ vim benchmarks.rb\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        new file:   README\n        modified:   benchmarks.rb\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   benchmarks.rb\n```\n怎么回事？ benchmarks.rb 文件出现了两次！一次算未暂存，一次算已暂存，这怎么可能呢？好吧，实际上 Git 只不过暂存了你运行 git add 命令时的版本，如果现在提交，那么提交的是添加注释前的版本，而非当前工作目录中的版本。所以，运行了 git add 之后又作了修订的文件，需要重新运行 git add 把最新版本重新暂存起来：\n``` bash\n$ git add benchmarks.rb\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        new file:   README\n        modified:   benchmarks.rb\n```\n\n#### 忽略某些文件\n一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式。来看一个实际的例子：\n``` bash\n$ cat .gitignore\n*.[oa]\n*~\n```\n第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件。一般这类对象文件和存档文件都是编译过程中出现的，我们用不着跟踪它们的版本。第二行告诉 Git 忽略所有以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存副本。此外，你可能还需要忽略 log，tmp 或者 pid 目录，以及自动生成的文档等等。要养成一开始就设置好 .gitignore 文件的习惯，以免将来误提交这类无用的文件。\n\n文件 .gitignore 的格式规范如下：\n\n1, 所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。\n2, 可以使用标准的 glob 模式匹配。\n3, 匹配模式最后跟反斜杠（/）说明要忽略的是目录。\n4, 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。\n\n所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。星号（*）匹配零个或多个任意字符；[abc] 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（?）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。\n我们再看一个 .gitignore 文件的例子：\n``` bash\n# 此为注释 – 将被 Git 忽略\n# 忽略所有 .a 结尾的文件\n*.a\n# 但 lib.a 除外\n!lib.a\n# 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO\n/TODO\n# 忽略 build/ 目录下的所有文件\nbuild/\n# 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt\ndoc/*.txt\n# ignore all .txt files in the doc/ directory\ndoc/**/*.txt\n```\nA **/ pattern is available in Git since version 1.8.2.\n\n#### 查看已暂存和未暂存的更新\n实际上 git status 的显示比较简单，仅仅是列出了修改过的文件，如果要查看具体修改了什么地方，可以用 git diff 命令。稍后我们会详细介绍 git diff，不过现在，它已经能回答我们的两个问题了：当前做的哪些更新还没有暂存？有哪些更新已经暂存起来准备好了下次提交？ git diff 会使用文件补丁的格式显示具体添加和删除的行。\n\n假如再次修改 README 文件后暂存，然后编辑 benchmarks.rb 文件后先别暂存，运行 status 命令将会看到：\n``` bash\n$ git diff\ndiff --git a/benchmarks.rb b/benchmarks.rb\nindex 3cb747f..da65585 100644\n--- a/benchmarks.rb\n+++ b/benchmarks.rb\n@@ -36,6 +36,10 @@ def main\n           @commit.parents[0].parents[0].parents[0]\n         end\n\n+        run_code(x, 'commits 1') do\n+          git.commits.size\n+        end\n+\n         run_code(x, 'commits 2') do\n           log = git.commits('master', 15)\n           log.size\n```\n此命令比较的是工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化内容。\n\n若要看已经暂存起来的文件和上次提交时的快照之间的差异，可以用 git diff --cached 命令。（Git 1.6.1 及更高版本还允许使用 git diff --staged，效果是相同的，但更好记些。）来看看实际的效果：\n``` bash\n$ git diff --cached\ndiff --git a/README b/README\nnew file mode 100644\nindex 0000000..03902a1\n--- /dev/null\n+++ b/README2\n@@ -0,0 +1,5 @@\n+grit\n+ by Tom Preston-Werner, Chris Wanstrath\n+ http://github.com/mojombo/grit\n+\n+Grit is a Ruby library for extracting information from a Git repository\n```\n像之前说的，暂存 benchmarks.rb 后再编辑，运行 git status 会看到暂存前后的两个版本：\n``` bash\n$ git add benchmarks.rb\n$ echo '# test line' >> benchmarks.rb\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        modified:   benchmarks.rb\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   benchmarks.rb\n```\n现在运行 git diff 看暂存前后的变化：\n``` bash\n$ git diff\ndiff --git a/benchmarks.rb b/benchmarks.rb\nindex e445e28..86b2f7c 100644\n--- a/benchmarks.rb\n+++ b/benchmarks.rb\n@@ -127,3 +127,4 @@ end\n main()\n\n ##pp Grit::GitRuby.cache_client.stats\n+# test line\n```\n然后用 git diff --cached 查看已经暂存起来的变化：\n``` bash\n$ git diff --cached\ndiff --git a/benchmarks.rb b/benchmarks.rb\nindex 3cb747f..e445e28 100644\n--- a/benchmarks.rb\n+++ b/benchmarks.rb\n@@ -36,6 +36,10 @@ def main\n          @commit.parents[0].parents[0].parents[0]\n        end\n\n+        run_code(x, 'commits 1') do\n+          git.commits.size\n+        end\n+\n        run_code(x, 'commits 2') do\n          log = git.commits('master', 15)\n          log.size\n```\n#### 提交更新\n现在的暂存区域已经准备妥当可以提交了。在此之前，请一定要确认还有什么修改过的或新建的文件还没有 git add 过，否则提交的时候不会记录这些还没暂存起来的变化。所以，每次准备提交前，先用 git status 看下，是不是都已暂存起来了，然后再运行提交命令 git commit：\n``` bash\n$ git commit\n```\n这种方式会启动文本编辑器以便输入本次提交的说明。（默认会启用 shell 的环境变量 $EDITOR 所指定的软件，一般都是 vim 或 emacs。当然也可以按照第一章介绍的方式，使用 git config --global core.editor 命令设定你喜欢的编辑软件。）\n\n编辑器会显示类似下面的文本信息（本例选用 Vim 的屏显方式展示）：\n``` bash\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n# On branch master\n# Changes to be committed:\n#       new file:   README\n#       modified:   benchmarks.rb\n#\n~\n~\n~\n\".git/COMMIT_EDITMSG\" 10L, 283C\n```\n可以看到，默认的提交消息包含最后一次运行 git status 的输出，放在注释行里，另外开头还有一空行，供你输入提交说明。你完全可以去掉这些注释行，不过留着也没关系，多少能帮你回想起这次更新的内容有哪些。（如果觉得这还不够，可以用 -v 选项将修改差异的每一行都包含到注释中来。）退出编辑器时，Git 会丢掉注释行，将说明内容和本次更新提交到仓库。\n\n另外也可以用 -m 参数后跟提交说明的方式，在一行命令中提交更新：\n``` bash\n$ git commit -m \"Story 182: Fix benchmarks for speed\"\n[master 463dc4f] Story 182: Fix benchmarks for speed\n 2 files changed, 3 insertions(+)\n create mode 100644 README\n```\n\n好，现在你已经创建了第一个提交！可以看到，提交后它会告诉你，当前是在哪个分支（master）提交的，本次提交的完整 SHA-1 校验和是什么（463dc4f），以及在本次提交中，有多少文件修订过，多少行添改和删改过。\n\n记住，提交时的记录是放在暂存区域的快照，任何还未暂存的仍然保持已修改状态，可以在下次提交时纳入版本管理。每一次运行提交操作，都是对你项目作一次快照，以后可以回到这个状态，或者进行比较。\n\n### 跳过使用暂存区域\n尽管使用暂存区域的方式可以精心准备要提交的细节，但有时候这么做略显繁琐。Git 提供了一个跳过使用暂存区域的方式，只要在提交的时候，给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤：\n``` bash\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   benchmarks.rb\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n$ git commit -a -m 'added new benchmarks'\n[master 83e38c7] added new benchmarks\n 1 files changed, 5 insertions(+)\n```\n看到了吗？提交之前不再需要 git add 文件 benchmarks.rb 了。\n\n#### 移除文件\n要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。可以用 git rm 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。\n\n如果只是简单地从工作目录中手工删除文件，运行 git status 时就会在 “Changes not staged for commit” 部分（也就是未暂存清单）看到：\n``` bash\n$ rm grit.gemspec\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add/rm <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        deleted:    grit.gemspec\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n然后再运行 git rm 记录此次移除文件的操作：\n``` bash\n$ git rm grit.gemspec\nrm 'grit.gemspec'\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        deleted:    grit.gemspec\n```\n最后提交的时候，该文件就不再纳入版本管理了。如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f（译注：即 force 的首字母），以防误删除文件后丢失修改的内容。\n\n另外一种情况是，我们想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。换句话说，仅是从跟踪清单中删除。比如一些大型日志文件或者一堆 .a 编译文件，不小心纳入仓库后，要移除跟踪但不删除文件，以便稍后在 .gitignore 文件中补上，用 --cached 选项即可：\n``` bash\n$ git rm --cached readme.txt\n```\n后面可以列出文件或者目录的名字，也可以使用 glob 模式。比方说：\n``` bash\n$ git rm log/\\*.log\n```\n注意到星号 * 之前的反斜杠 \\，因为 Git 有它自己的文件模式扩展匹配方式，所以我们不用 shell 来帮忙展开（译注：实际上不加反斜杠也可以运行，只不过按照 shell 扩展的话，仅仅删除指定目录下的文件而不会递归匹配。上面的例子本来就指定了目录，所以效果等同，但下面的例子就会用递归方式匹配，所以必须加反斜杠。）。此命令删除所有 log/ 目录下扩展名为 .log 的文件。类似的比如：\n``` bash\n$ git rm \\*~\n```\n会递归删除当前目录及其子目录中所有 ~ 结尾的文件。\n\n#### 移动文件\n不像其他的 VCS 系统，Git 并不跟踪文件移动操作。如果在 Git 中重命名了某个文件，仓库中存储的元数据并不会体现出这是一次改名操作。不过 Git 非常聪明，它会推断出究竟发生了什么，至于具体是如何做到的，我们稍后再谈。\n\n既然如此，当你看到 Git 的 mv 命令时一定会困惑不已。要在 Git 中对文件改名，可以这么做：\n``` bash\n$ git mv file_from file_to\n```\n它会恰如预期般正常工作。实际上，即便此时查看状态信息，也会明白无误地看到关于重命名操作的说明：\n``` bash\n$ git mv README.txt README\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        renamed:    README.txt -> README\n```\n其实，运行 git mv 就相当于运行了下面三条命令：\n``` bash\n$ mv README.txt README\n$ git rm README.txt\n$ git add README\n```\n如此分开操作，Git 也会意识到这是一次改名，所以不管何种方式都一样。当然，直接用 git mv 轻便得多，不过有时候用其他工具批处理改名的话，要记得在提交前删除老的文件名，再添加新的文件名。\n\n#### 查看提交历史\n在提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，可以使用 git log 命令查看。\n\n接下来的例子会用我专门用于演示的 simplegit 项目，运行下面的命令获取该项目源代码：\n``` bash\ngit clone git://github.com/schacon/simplegit-progit.git\n```\n然后在此项目中运行 git log，应该会看到下面的输出：\n``` bash\n$ git log\ncommit ca82a6dff817ec66f44342007202690a93763949\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Mon Mar 17 21:52:11 2008 -0700\n\n    changed the version number\n\ncommit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Sat Mar 15 16:40:33 2008 -0700\n\n    removed unnecessary test code\n\ncommit a11bef06a3f659402fe7563abf99ad00de2209e6\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Sat Mar 15 10:31:28 2008 -0700\n\n    first commit\n```\n\n默认不用任何参数的话，git log 会按提交时间列出所有的更新，最近的更新排在最上面。看到了吗，每次更新都有一个 SHA-1 校验和、作者的名字和电子邮件地址、提交时间，最后缩进一个段落显示提交说明。\n\ngit log 有许多选项可以帮助你搜寻感兴趣的提交，接下来我们介绍些最常用的。\n\n我们常用 -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新：\n``` bash\n$ git log -p -2\ncommit ca82a6dff817ec66f44342007202690a93763949\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Mon Mar 17 21:52:11 2008 -0700\n\n    changed the version number\n\ndiff --git a/Rakefile b/Rakefile\nindex a874b73..8f94139 100644\n--- a/Rakefile\n+++ b/Rakefile\n@@ -5,5 +5,5 @@ require 'rake/gempackagetask'\n spec = Gem::Specification.new do |s|\n     s.name      =   \"simplegit\"\n-    s.version   =   \"0.1.0\"\n+    s.version   =   \"0.1.1\"\n     s.author    =   \"Scott Chacon\"\n     s.email     =   \"schacon@gee-mail.com\n\ncommit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Sat Mar 15 16:40:33 2008 -0700\n\n    removed unnecessary test code\n\ndiff --git a/lib/simplegit.rb b/lib/simplegit.rb\nindex a0a60ae..47c6340 100644\n--- a/lib/simplegit.rb\n+++ b/lib/simplegit.rb\n@@ -18,8 +18,3 @@ class SimpleGit\n     end\n\n end\n-\n-if $0 == __FILE__\n-  git = SimpleGit.new\n-  puts git.show\n-end\n\\ No newline at end of file\n```\n该选项除了显示基本信息之外，还在附带了每次 commit 的变化。当进行代码审查，或者快速浏览某个搭档提交的 commit 的变化的时候，这个参数就非常有用了。\n\n某些时候，单词层面的对比，比行层面的对比，更加容易观察。Git 提供了 --word-diff 选项。我们可以将其添加到 git log -p 命令的后面，从而获取单词层面上的对比。在程序代码中进行单词层面的对比常常是没什么用的。不过当你需要在书籍、论文这种很大的文本文件上进行对比的时候，这个功能就显出用武之地了。下面是一个简单的例子：\n``` bash\n$ git log -U1 --word-diff\ncommit ca82a6dff817ec66f44342007202690a93763949\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Mon Mar 17 21:52:11 2008 -0700\n\n    changed the version number\n\ndiff --git a/Rakefile b/Rakefile\nindex a874b73..8f94139 100644\n--- a/Rakefile\n+++ b/Rakefile\n@@ -7,3 +7,3 @@ spec = Gem::Specification.new do |s|\n    s.name      =   \"simplegit\"\n    s.version   =   [-\"0.1.0\"-]{+\"0.1.1\"+}\n    s.author    =   \"Scott Chacon\"\n```\n如你所见，这里并没有平常看到的添加行或者删除行的信息。这里的对比显示在行间。新增加的单词被 {+ +} 括起来，被删除的单词被 [- -] 括起来。在进行单词层面的对比的时候，你可能希望上下文（ context ）行数从默认的 3 行，减为 1 行，那么可以使用 -U1 选项。上面的例子中，我们就使用了这个选项。\n\n另外，git log 还提供了许多摘要选项可以用，比如 --stat，仅显示简要的增改行数统计：\n``` bash\n$ git log --stat\ncommit ca82a6dff817ec66f44342007202690a93763949\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Mon Mar 17 21:52:11 2008 -0700\n\n    changed the version number\n\n Rakefile |    2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\ncommit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Sat Mar 15 16:40:33 2008 -0700\n\n    removed unnecessary test code\n\n lib/simplegit.rb |    5 -----\n 1 file changed, 5 deletions(-)\n\ncommit a11bef06a3f659402fe7563abf99ad00de2209e6\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Sat Mar 15 10:31:28 2008 -0700\n\n    first commit\n\n README           |    6 ++++++\n Rakefile         |   23 +++++++++++++++++++++++\n lib/simplegit.rb |   25 +++++++++++++++++++++++++\n 3 files changed, 54 insertions(+)\n```\n每个提交都列出了修改过的文件，以及其中添加和移除的行数，并在最后列出所有增减行数小计。 还有个常用的 --pretty 选项，可以指定使用完全不同于默认格式的方式展示提交历史。比如用 oneline 将每个提交放在一行显示，这在提交数很大时非常有用。另外还有 short，full 和 fuller 可以用，展示的信息或多或少有些不同，请自己动手实践一下看看效果如何。\n``` bash\n$ git log --pretty=oneline\nca82a6dff817ec66f44342007202690a93763949 changed the version number\n085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test code\na11bef06a3f659402fe7563abf99ad00de2209e6 first commit\n```\n但最有意思的是 format，可以定制要显示的记录格式，这样的输出便于后期编程提取分析，像这样：\n``` bash\n$ git log --pretty=format:\"%h - %an, %ar : %s\"\nca82a6d - Scott Chacon, 11 months ago : changed the version number\n085bb3b - Scott Chacon, 11 months ago : removed unnecessary test code\na11bef0 - Scott Chacon, 11 months ago : first commit\n```\n表 2-1 列出了常用的格式占位符写法及其代表的意义。\n\n<!-- Attention to translators: this is a table declaration. The lines must be formatted as follows <TAB><First column text><TAB><Second column text> -->\n``` bash\n选项\t 说明\n%H\t提交对象（commit）的完整哈希字串\n%h\t提交对象的简短哈希字串\n%T\t树对象（tree）的完整哈希字串\n%t\t树对象的简短哈希字串\n%P\t父对象（parent）的完整哈希字串\n%p\t父对象的简短哈希字串\n%an\t作者（author）的名字\n%ae\t作者的电子邮件地址\n%ad\t作者修订日期（可以用 -date= 选项定制格式）\n%ar\t作者修订日期，按多久以前的方式显示\n%cn\t提交者(committer)的名字\n%ce\t提交者的电子邮件地址\n%cd\t提交日期\n%cr\t提交日期，按多久以前的方式显示\n%s\t提交说明\n```\n你一定奇怪作者（author）和提交者（committer）之间究竟有何差别，其实作者指的是实际作出修改的人，提交者指的是最后将此工作成果提交到仓库的人。所以，当你为某个项目发布补丁，然后某个核心成员将你的补丁并入项目时，你就是作者，而那个核心成员就是提交者。我们会在第五章再详细介绍两者之间的细微差别。\n\n用 oneline 或 format 时结合 --graph 选项，可以看到开头多出一些 ASCII 字符串表示的简单图形，形象地展示了每个提交所在的分支及其分化衍合情况。在我们之前提到的 Grit 项目仓库中可以看到：\n``` bash\n$ git log --pretty=format:\"%h %s\" --graph\n* 2d3acf9 ignore errors from SIGCHLD on trap\n*  5e3ee11 Merge branch 'master' of git://github.com/dustin/grit\n|\\\n| * 420eac9 Added a method for getting the current branch.\n* | 30e367c timeout code and tests\n* | 5a09431 add timeout protection to grit\n* | e1193f8 support for heads with slashes in them\n|/\n* d6016bc require time for xmlschema\n*  11d191e Merge branch 'defunkt' into local\n```\n``` bash\n选项\t说明\n-p\t按补丁格式显示每个更新之间的差异。\n--word-diff\t按 word diff 格式显示差异。\n--stat\t显示每次更新的文件修改统计信息。\n--shortstat\t只显示 --stat 中最后的行数修改添加移除统计。\n--name-only\t仅在提交信息后显示已修改的文件清单。\n--name-status\t显示新增、修改、删除的文件清单。\n--abbrev-commit\t仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。\n--relative-date\t使用较短的相对时间显示（比如，“2 weeks ago”）。\n--graph\t显示 ASCII 图形表示的分支合并历史。\n--pretty\t使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。\n--oneline\t`--pretty=oneline --abbrev-commit` 的简化用法。\n```\n\n#### 限制输出长度\n\n除了定制输出格式的选项之外，git log 还有许多非常实用的限制输出长度的选项，也就是只输出部分提交信息。之前我们已经看到过 -2 了，它只显示最近的两条提交，实际上，这是 -<n> 选项的写法，其中的 n 可以是任何自然数，表示仅显示最近的若干条提交。不过实践中我们是不太用这个选项的，Git 在输出所有提交时会自动调用分页程序（less），要看更早的更新只需翻到下页即可。\n\n另外还有按照时间作限制的选项，比如 --since 和 --until。下面的命令列出所有最近两周内的提交：\n``` bash\n$ git log --since=2.weeks\n```\n你可以给出各种时间格式，比如说具体的某一天（“2008-01-15”），或者是多久以前（“2 years 1 day 3 minutes ago”）。\n\n还可以给出若干搜索条件，列出符合的提交。用 --author 选项显示指定作者的提交，用 --grep 选项搜索提交说明中的关键字。（请注意，如果要得到同时满足这两个选项搜索条件的提交，就必须用 --all-match 选项。否则，满足任意一个条件的提交都会被匹配出来）\n\n另一个真正实用的git log选项是路径(path)，如果只关心某些文件或者目录的历史提交，可以在 git log 选项的最后指定它们的路径。因为是放在最后位置上的选项，所以用两个短划线（--）隔开之前的选项和后面限定的路径名。\n\n表 2-3 还列出了其他常用的类似选项。\n\n``` bash\n选项\t说明\n-(n)\t仅显示最近的 n 条提交\n--since, --after\t仅显示指定时间之后的提交。\n--until, --before\t仅显示指定时间之前的提交。\n--author\t仅显示指定作者相关的提交。\n--committer\t仅显示指定提交者相关的提交。\n```\n来看一个实际的例子，如果要查看 Git 仓库中，2008 年 10 月期间，Junio Hamano 提交的但未合并的测试脚本（位于项目的 t/ 目录下的文件），可以用下面的查询命令：\n``` bash\n$ git log --pretty=\"%h - %s\" --author=gitster --since=\"2008-10-01\" \\\n   --before=\"2008-11-01\" --no-merges -- t/\n5610e3b - Fix testcase failure when extended attribute\nacd3b9e - Enhance hold_lock_file_for_{update,append}()\nf563754 - demonstrate breakage of detached checkout wi\nd1a43f2 - reset --hard/read-tree --reset -u: remove un\n51a94af - Fix \"checkout --track -b newbranch\" on detac\nb0ad11e - pull: allow \"git pull origin $something:$cur\n```\nGit 项目有 20,000 多条提交，但我们给出搜索选项后，仅列出了其中满足条件的 6 条。\n\n####使用图形化工具查阅提交历史\n\n有时候图形化工具更容易展示历史提交的变化，随 Git 一同发布的 gitk 就是这样一种工具。它是用 Tcl/Tk 写成的，基本上相当于 git log 命令的可视化版本，凡是 git log 可以用的选项也都能用在 gitk 上。在项目工作目录中输入 gitk 命令后，就会启动图 2-2 所示的界面\n上半个窗口显示的是历次提交的分支祖先图谱，下半个窗口显示当前点选的提交对应的具体差异。\n\n### 撤消操作\n任何时候，你都有可能需要撤消刚才所做的某些操作。接下来，我们会介绍一些基本的撤消操作相关的命令。请注意，有些撤销操作是不可逆的，所以请务必谨慎小心，一旦失误，就有可能丢失部分工作成果。\n\n#### 修改最后一次提交\n有时候我们提交完了才发现漏掉了几个文件没有加，或者提交信息写错了。想要撤消刚才的提交操作，可以使用 --amend 选项重新提交：\n``` bash\n$ git commit --amend\n```\n此命令将使用当前的暂存区域快照提交。如果刚才提交完没有作任何改动，直接运行此命令的话，相当于有机会重新编辑提交说明，但将要提交的文件快照和之前的一样。\n\n启动文本编辑器后，会看到上次提交时的说明，编辑它确认没问题后保存退出，就会使用新的提交说明覆盖刚才失误的提交。\n\n如果刚才提交时忘了暂存某些修改，可以先补上暂存操作，然后再运行 --amend 提交：\n``` bash\n$ git commit -m 'initial commit'\n$ git add forgotten_file\n$ git commit --amend\n```\n上面的三条命令最终只是产生一个提交，第二个提交命令修正了第一个的提交内容。\n\n#### 取消已经暂存的文件\n接下来的两个小节将演示如何取消暂存区域中的文件，以及如何取消工作目录中已修改的文件。不用担心，查看文件状态的时候就提示了该如何撤消，所以不需要死记硬背。来看下面的例子，有两个修改过的文件，我们想要分开提交，但不小心用 git add . 全加到了暂存区域。该如何撤消暂存其中的一个文件呢？其实，git status 的命令输出已经告诉了我们该怎么做：\n``` bash\n$ git add .\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        modified:   README.txt\n        modified:   benchmarks.rb\n```\n就在 “Changes to be committed” 下面，括号中有提示，可以使用 git reset HEAD <file>... 的方式取消暂存。好吧，我们来试试取消暂存 benchmarks.rb 文件：\n``` bash\n$ git reset HEAD benchmarks.rb\nUnstaged changes after reset:\nM       benchmarks.rb\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        modified:   README.txt\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   benchmarks.rb\n```\n这条命令看起来有些古怪，先别管，能用就行。现在 benchmarks.rb 文件又回到了之前已修改未暂存的状态。\n\n#### 取消对文件的修改\n如果觉得刚才对 benchmarks.rb 的修改完全没有必要，该如何取消修改，回到之前的状态（也就是修改之前的版本）呢？git status 同样提示了具体的撤消方法，接着上面的例子，现在未暂存区域看起来像这样：\n``` bash\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   benchmarks.rb\n```\n在第二个括号中，我们看到了抛弃文件修改的命令（至少在 Git 1.6.1 以及更高版本中会这样提示，如果你还在用老版本，我们强烈建议你升级，以获取最佳的用户体验），让我们试试看：\n``` bash\n$ git checkout -- benchmarks.rb \t\t#必须是跟踪的\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        modified:   README.txt\n```\n可以看到，该文件已经恢复到修改前的版本。你可能已经意识到了，这条命令有些危险，所有对文件的修改都没有了，因为我们刚刚把之前版本的文件复制过来重写了此文件。所以在用这条命令前，请务必确定真的不再需要保留刚才的修改。如果只是想回退版本，同时保留刚才的修改以便将来继续工作，可以用下章介绍的 stashing 和分支来处理，应该会更好些。\n\n记住，任何已经提交到 Git 的都可以被恢复。即便在已经删除的分支中的提交，或者用 --amend 重新改写的提交，都可以被恢复（关于数据恢复的内容见第九章）。所以，你可能失去的数据，仅限于没有提交过的，对 Git 来说它们就像从未存在过一样。\n\n### 远程仓库的使用\n\n要参与任何一个 Git 项目的协作，必须要了解该如何管理远程仓库。远程仓库是指托管在网络上的项目仓库，可能会有好多个，其中有些你只能读，另外有些可以写。同他人协作开发某个项目时，需要管理这些远程仓库，以便推送或拉取数据，分享各自的工作进展。 管理远程仓库的工作，包括添加远程库，移除废弃的远程库，管理各式远程库分支，定义是否跟踪这些分支，等等。本节我们将详细讨论远程库的管理和使用。\n\n#### 查看当前的远程库\n要查看当前配置有哪些远程仓库，可以用 git remote 命令，它会列出每个远程库的简短名字。在克隆完某个项目后，至少可以看到一个名为 origin 的远程库，Git 默认使用这个名字来标识你所克隆的原始仓库：\n``` bash\n$ git clone git://github.com/schacon/ticgit.git\nCloning into 'ticgit'...\nremote: Reusing existing pack: 1857, done.\nremote: Total 1857 (delta 0), reused 0 (delta 0)\nReceiving objects: 100% (1857/1857), 374.35 KiB | 193.00 KiB/s, done.\nResolving deltas: 100% (772/772), done.\nChecking connectivity... done.\n$ cd ticgit\n$ git remote\norigin\n```\n也可以加上 -v 选项（译注：此为 --verbose 的简写，取首字母），显示对应的克隆地址：\n``` bash\n$ git remote -v\norigin  git://github.com/schacon/ticgit.git (fetch)\norigin  git://github.com/schacon/ticgit.git (push)\n```\n如果有多个远程仓库，此命令将全部列出。比如在我的 Grit 项目中，可以看到：\n``` bash\n$ cd grit\n$ git remote -v\nbakkdoor  git://github.com/bakkdoor/grit.git\ncho45     git://github.com/cho45/grit.git\ndefunkt   git://github.com/defunkt/grit.git\nkoke      git://github.com/koke/grit.git\norigin    git@github.com:mojombo/grit.git\n```\n这样一来，我就可以非常轻松地从这些用户的仓库中，拉取他们的提交到本地。请注意，上面列出的地址只有 origin 用的是 SSH URL 链接，所以也只有这个仓库我能推送数据上去（我们会在第四章解释原因）。\n\n#### 添加远程仓库\n\n要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用，运行 git remote add [shortname] [url]：\n``` bash\n$ git remote\norigin\n$ git remote add pb git://github.com/paulboone/ticgit.git\n$ git remote -v\norigin\tgit://github.com/schacon/ticgit.git\npb\tgit://github.com/paulboone/ticgit.git\n```\n现在可以用字符串 pb 指代对应的仓库地址了。比如说，要抓取所有 Paul 有的，但本地仓库没有的信息，可以运行 git fetch pb：\n``` bash\n$ git fetch pb\nremote: Counting objects: 58, done.\nremote: Compressing objects: 100% (41/41), done.\nremote: Total 44 (delta 24), reused 1 (delta 0)\nUnpacking objects: 100% (44/44), done.\nFrom git://github.com/paulboone/ticgit\n * [new branch]      master     -> pb/master\n * [new branch]      ticgit     -> pb/ticgit\n```\n\n#### 从远程仓库抓取数据\n\n正如之前所看到的，可以用下面的命令从远程仓库抓取数据到本地：\n``` bash\n$ git fetch [remote-name]\n```\n此命令会到远程仓库中拉取所有你本地仓库中还没有的数据。运行完成后，你就可以在本地访问该远程仓库中的所有分支，将其中某个分支合并到本地，或者只是取出某个分支，一探究竟。（我们会在第三章详细讨论关于分支的概念和操作。）\n\n如果是克隆了一个仓库，此命令会自动将远程仓库归于 origin 名下。所以，git fetch origin 会抓取从你上次克隆以来别人上传到此远程仓库中的所有更新（或是上次 fetch 以来别人提交的更新）。有一点很重要，需要记住，fetch 命令只是将远端的数据拉到本地仓库，并不自动合并到当前工作分支，只有当你确实准备好了，才能手工合并。\n\n如果设置了某个分支用于跟踪某个远端仓库的分支（参见下节及第三章的内容），可以使用 git pull 命令自动抓取数据下来，然后将远端分支自动合并到本地仓库中当前分支。在日常工作中我们经常这么用，既快且好。实际上，默认情况下 git clone 命令本质上就是自动创建了本地的 master 分支用于跟踪远程仓库中的 master 分支（假设远程仓库确实有 master 分支）。所以一般我们运行 git pull，目的都是要从原始克隆的远端仓库中抓取数据后，合并到工作目录中的当前分支。\n\n#### 推送数据到远程仓库\n项目进行到一个阶段，要同别人分享目前的成果，可以将本地仓库中的数据推送到远程仓库。实现这个任务的命令很简单： git push [remote-name] [branch-name]。如果要把本地的 master 分支推送到 origin 服务器上（再次说明下，克隆操作会自动使用默认的 master 和 origin 名字），可以运行下面的命令：\n``` bash\n$ git push origin master\n```\n只有在所克隆的服务器上有写权限，或者同一时刻没有其他人在推数据，这条命令才会如期完成任务。如果在你推数据前，已经有其他人推送了若干更新，那你的推送操作就会被驳回。你必须先把他们的更新抓取到本地，合并到自己的项目中，然后才可以再次推送。有关推送数据到远程仓库的详细内容见第三章。\n\n#### 查看远程仓库信息\n我们可以通过命令 git remote show [remote-name] 查看某个远程仓库的详细信息，比如要看所克隆的 origin 仓库，可以运行：\n``` bash\n$ git remote show origin\n* remote origin\n  URL: git://github.com/schacon/ticgit.git\n  Remote branch merged with 'git pull' while on branch master\n    master\n  Tracked remote branches\n    master\n    ticgit\n```\n除了对应的克隆地址外，它还给出了许多额外的信息。它友善地告诉你如果是在 master 分支，就可以用 git pull 命令抓取数据合并到本地。另外还列出了所有处于跟踪状态中的远端分支。\n\n上面的例子非常简单，而随着使用 Git 的深入，git remote show 给出的信息可能会像这样：\n``` bash\n$ git remote show origin\n* remote origin\n  URL: git@github.com:defunkt/github.git\n  Remote branch merged with 'git pull' while on branch issues\n    issues\n  Remote branch merged with 'git pull' while on branch master\n    master\n  New remote branches (next fetch will store in remotes/origin)\n    caching\n  Stale tracking branches (use 'git remote prune')\n    libwalker\n    walker2\n  Tracked remote branches\n    acl\n    apiv2\n    dashboard2\n    issues\n    master\n    postgres\n  Local branch pushed with 'git push'\n    master:master\n```\n\n#### 远程仓库的删除和重命名\n在新版 Git 中可以用 git remote rename 命令修改某个远程仓库在本地的简称，比如想把 pb 改成 paul，可以这么运行：\n``` bash\n$ git remote rename pb paul\n$ git remote\norigin\npaul\n```\n注意，对远程仓库的重命名，也会使对应的分支名称发生变化，原来的 pb/master 分支现在成了 paul/master。\n\n碰到远端仓库服务器迁移，或者原来的克隆镜像不再使用，又或者某个参与者不再贡献代码，那么需要移除对应的远端仓库，可以运行 git remote rm 命令：\n``` bash\n$ git remote rm paul\n$ git remote\norigin\n```\n\n### 打标签\n同大多数 VCS 一样，Git 也可以对某一时间点上的版本打上标签。人们在发布某个软件版本（比如 v1.0 等等）的时候，经常这么做。本节我们一起来学习如何列出所有可用的标签，如何新建标签，以及各种不同类型标签之间的差别。\n\n#### 列显已有的标签\n列出现有标签的命令非常简单，直接运行 git tag 即可：\n``` bash\n$ git tag\nv0.1\nv1.3\n```\n显示的标签按字母顺序排列，所以标签的先后并不表示重要程度的轻重。\n\n我们可以用特定的搜索模式列出符合条件的标签。在 Git 自身项目仓库中，有着超过 240 个标签，如果你只对 1.4.2 系列的版本感兴趣，可以运行下面的命令：\n``` bash\n$ git tag -l 'v1.4.2.*'\nv1.4.2.1\nv1.4.2.2\nv1.4.2.3\nv1.4.2.4\n```\n\n#### 新建标签\nGit 使用的标签有两种类型：轻量级的（lightweight）和含附注的（annotated）。轻量级标签就像是个不会变化的分支，实际上它就是个指向特定提交对象的引用。而含附注标签，实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，电子邮件地址和日期，以及标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证。一般我们都建议使用含附注型的标签，以便保留相关信息；当然，如果只是临时性加注标签，或者不需要旁注额外信息，用轻量级标签也没问题。\n\n#### 含附注的标签\n创建一个含附注类型的标签非常简单，用 -a （译注：取 annotated 的首字母）指定标签名字即可：\n``` bash\n$ git tag -a v1.4 -m 'my version 1.4'\n$ git tag\nv0.1\nv1.3\nv1.4\n```\n而 -m 选项则指定了对应的标签说明，Git 会将此说明一同保存在标签对象中。如果没有给出该选项，Git 会启动文本编辑软件供你输入标签说明。\n\n可以使用 git show 命令查看相应标签的版本信息，并连同显示打标签时的提交对象。\n\n#### 签署标签\n如果你有自己的私钥，还可以用 GPG 来签署标签，只需要把之前的 -a 改为 -s （译注： 取 signed 的首字母）即可:\n``` bash\n$ git tag -s v1.5 -m 'my signed 1.5 tag'\nYou need a passphrase to unlock the secret key for\nuser: \"Scott Chacon <schacon@gee-mail.com>\"\n1024-bit DSA key, ID F721C45A, created 2009-02-09\n```\n现在再运行 git show 会看到对应的 GPG 签名也附在其内：\n``` bash\n$ git show v1.5\ntag v1.5\nTagger: Scott Chacon <schacon@gee-mail.com>\nDate:   Mon Feb 9 15:22:20 2009 -0800\n\nmy signed 1.5 tag\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.8 (Darwin)\n\niEYEABECAAYFAkmQurIACgkQON3DxfchxFr5cACeIMN+ZxLKggJQf0QYiQBwgySN\nKi0An2JeAVUCAiJ7Ox6ZEtK+NvZAj82/\n=WryJ\n-----END PGP SIGNATURE-----\ncommit 15027957951b64cf874c3557a0f3547bd83b3ff6\nMerge: 4a447f7... a6b4c97...\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Sun Feb 8 19:02:46 2009 -0800\n\n    Merge branch 'experiment'\n```\n现在再运行 git show 会看到对应的 GPG 签名也附在其内：\n``` bash\n$ git show v1.5\ntag v1.5\nTagger: Scott Chacon <schacon@gee-mail.com>\nDate:   Mon Feb 9 15:22:20 2009 -0800\n\nmy signed 1.5 tag\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.8 (Darwin)\n\niEYEABECAAYFAkmQurIACgkQON3DxfchxFr5cACeIMN+ZxLKggJQf0QYiQBwgySN\nKi0An2JeAVUCAiJ7Ox6ZEtK+NvZAj82/\n=WryJ\n-----END PGP SIGNATURE-----\ncommit 15027957951b64cf874c3557a0f3547bd83b3ff6\nMerge: 4a447f7... a6b4c97...\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Sun Feb 8 19:02:46 2009 -0800\n\n    Merge branch 'experiment'\n```\n稍后我们再学习如何验证已经签署的标签。\n\n#### 轻量级标签\n\n轻量级标签实际上就是一个保存着对应提交对象的校验和信息的文件。要创建这样的标签，一个 -a，-s 或 -m 选项都不用，直接给出标签名字即可：\n``` bash\n$ git tag v1.4-lw\n$ git tag\nv0.1\nv1.3\nv1.4\nv1.4-lw\nv1.5\n```\n现在运行 git show 查看此标签信息，就只有相应的提交对象摘要：\n``` bash\n$ git show v1.4-lw\ncommit 15027957951b64cf874c3557a0f3547bd83b3ff6\nMerge: 4a447f7... a6b4c97...\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Sun Feb 8 19:02:46 2009 -0800\n\n    Merge branch 'experiment'\n```\n\n#### 验证标签\n可以使用 git tag -v [tag-name] （译注：取 verify 的首字母）的方式验证已经签署的标签。此命令会调用 GPG 来验证签名，所以你需要有签署者的公钥，存放在 keyring 中，才能验证：\n``` bash\n$ git tag -v v1.4.2.1\nobject 883653babd8ee7ea23e6a5c392bb739348b1eb61\ntype commit\ntag v1.4.2.1\ntagger Junio C Hamano <junkio@cox.net> 1158138501 -0700\n\nGIT 1.4.2.1\n\nMinor fixes since 1.4.2, including git-mv and git-http with alternates.\ngpg: Signature made Wed Sep 13 02:08:25 2006 PDT using DSA key ID F3119B9A\ngpg: Good signature from \"Junio C Hamano <junkio@cox.net>\"\ngpg:                 aka \"[jpeg image of size 1513]\"\nPrimary key fingerprint: 3565 2A26 2040 E066 C9A7  4A7D C0C6 D9A4 F311 9B9A\n```\n若是没有签署者的公钥，会报告类似下面这样的错误：\n``` bash\ngpg: Signature made Wed Sep 13 02:08:25 2006 PDT using DSA key ID F3119B9A\ngpg: Can't check signature: public key not found\nerror: could not verify the tag 'v1.4.2.1'\n```\n\n#### 后期加注标签\n你甚至可以在后期对早先的某次提交加注标签。比如在下面展示的提交历史中：\n``` bash\n$ git log --pretty=oneline\n15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'\na6b4c97498bd301d84096da251c98a07c7723e65 beginning write support\n0d52aaab4479697da7686c15f77a3d64d9165190 one more thing\n6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'\n0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function\n4682c3261057305bdd616e23b64b0857d832627b added a todo file\n166ae0c4d3f420721acbb115cc33848dfcc2121a started write support\n9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile\n964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo\n8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme\n```\n我们忘了在提交 “updated rakefile” 后为此项目打上版本号 v1.2，没关系，现在也能做。只要在打标签的时候跟上对应提交对象的校验和（或前几位字符）即可：\n``` bash\n$ git tag -a v1.2 9fceb02\n```\n可以看到我们已经补上了标签：\n``` bash\n$ git tag\nv0.1\nv1.2\nv1.3\nv1.4\nv1.4-lw\nv1.5\n\n$ git show v1.2\ntag v1.2\nTagger: Scott Chacon <schacon@gee-mail.com>\nDate:   Mon Feb 9 15:32:16 2009 -0800\n\nversion 1.2\ncommit 9fceb02d0ae598e95dc970b74767f19372d61af8\nAuthor: Magnus Chacon <mchacon@gee-mail.com>\nDate:   Sun Apr 27 20:43:35 2008 -0700\n\n    updated rakefile\n...\n```\n\n#### 分享标签\n默认情况下，git push 并不会把标签传送到远端服务器上，只有通过显式命令才能分享标签到远端仓库。其命令格式如同推送分支，运行 git push origin [tagname] 即可：\n``` bash\n$ git push origin v1.5\nCounting objects: 50, done.\nCompressing objects: 100% (38/38), done.\nWriting objects: 100% (44/44), 4.56 KiB, done.\nTotal 44 (delta 18), reused 8 (delta 1)\nTo git@github.com:schacon/simplegit.git\n* [new tag]         v1.5 -> v1.5\n```\n如果要一次推送所有本地新增的标签上去，可以使用 --tags 选项：\n``` bash\n$ git push origin --tags\nCounting objects: 50, done.\nCompressing objects: 100% (38/38), done.\nWriting objects: 100% (44/44), 4.56 KiB, done.\nTotal 44 (delta 18), reused 8 (delta 1)\nTo git@github.com:schacon/simplegit.git\n * [new tag]         v0.1 -> v0.1\n * [new tag]         v1.2 -> v1.2\n * [new tag]         v1.4 -> v1.4\n * [new tag]         v1.4-lw -> v1.4-lw\n * [new tag]         v1.5 -> v1.5\n```\n现在，其他人克隆共享仓库或拉取数据同步后，也会看到这些标签。\n\n### 技巧和窍门\n\n在结束本章之前，我还想和大家分享一些 Git 使用的技巧和窍门。很多使用 Git 的开发者可能根本就没用过这些技巧，我们也不是说在读过本书后非得用这些技巧不可，但至少应该有所了解吧。说实话，有了这些小窍门，我们的工作可以变得更简单，更轻松，更高效。\n\n#### 自动补全\n如果你用的是 Bash shell，可以试试看 Git 提供的自动补全脚本。下载 Git 的源代码，进入 contrib/completion 目录，会看到一个 git-completion.bash 文件。将此文件复制到你自己的用户主目录中（译注：按照下面的示例，还应改名加上点：cp git-completion.bash ~/.git-completion.bash），并把下面一行内容添加到你的 .bashrc 文件中：\n``` bash\nsource ~/.git-completion.bash\n```\n也可以为系统上所有用户都设置默认使用此脚本。Mac 上将此脚本复制到 /opt/local/etc/bash_completion.d 目录中，Linux 上则复制到 /etc/bash_completion.d/ 目录中。这两处目录中的脚本，都会在 Bash 启动时自动加载。\n\n如果在 Windows 上安装了 msysGit，默认使用的 Git Bash 就已经配好了这个自动补全脚本，可以直接使用。\n\n在输入 Git 命令的时候可以敲两次跳格键（Tab），就会看到列出所有匹配的可用命令建议：\n``` bash\n$ git co<tab><tab>\ncommit config\n```\n此例中，键入 git co 然后连按两次 Tab 键，会看到两个相关的建议（命令） commit 和 config。继而输入 m<tab> 会自动完成 git commit 命令的输入。\n\n命令的选项也可以用这种方式自动完成，其实这种情况更实用些。比如运行 git log 的时候忘了相关选项的名字，可以输入开头的几个字母，然后敲 Tab 键看看有哪些匹配的：\n``` bash\n$ git log --s<tab>\n--shortstat  --since=  --src-prefix=  --stat   --summary\n```\n这个技巧不错吧，可以节省很多输入和查阅文档的时间。\n\n#### Git 命令别名\nGit 并不会推断你输入的几个字符将会是哪条命令，不过如果想偷懒，少敲几个命令的字符，可以用 git config 为命令设置别名。来看看下面的例子：\n``` bash\n$ git config --global alias.co checkout\n$ git config --global alias.br branch\n$ git config --global alias.ci commit\n$ git config --global alias.st status\n```\n\n现在，如果要输入 git commit 只需键入 git ci 即可。而随着 Git 使用的深入，会有很多经常要用到的命令，遇到这种情况，不妨建个别名提高效率。\n\n使用这种技术还可以创造出新的命令，比方说取消暂存文件时的输入比较繁琐，可以自己设置一下：\n``` bash\n$ git config --global alias.unstage 'reset HEAD --'\n```\n这样一来，下面的两条命令完全等同：\n``` bash\n$ git unstage fileA\n$ git reset HEAD fileA\n```\n显然，使用别名的方式看起来更清楚。另外，我们还经常设置 last 命令：\n``` bash\n$ git config --global alias.last 'log -1 HEAD'\n```\n然后要看最后一次的提交信息，就变得简单多了：\n``` bash\n$ git last\ncommit 66938dae3329c7aebe598c2246a8e6af90d04646\nAuthor: Josh Goebel <dreamer3@example.com>\nDate:   Tue Aug 26 19:48:51 2008 +0800\n\n    test for current head\n\n    Signed-off-by: Scott Chacon <schacon@example.com>\n```\n可以看出，实际上 Git 只是简单地在命令中替换了你设置的别名。不过有时候我们希望运行某个外部命令，而非 Git 的子命令，这个好办，只需要在命令前加上 ! 就行。如果你自己写了些处理 Git 仓库信息的脚本的话，就可以用这种技术包装起来。作为演示，我们可以设置用 git visual 启动 gitk：\n``` bash\n$ git config --global alias.visual '!gitk'\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"git学习笔记","published":1,"updated":"2016-10-31T03:55:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuy6rzk7000dmsq4kktektga","content":"<h2 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h2><h3 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h3><p>关于版本控制<br>什么是版本控制？我为什么要关心它呢？版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。在本书所展示的例子中，我们仅对保存着软件源代码的文本文件作版本控制管理，但实际上，你可以对任何类型的文件进行版本控制。<br><a id=\"more\"></a></p>\n<h3 id=\"分布式版本控制系统\"><a href=\"#分布式版本控制系统\" class=\"headerlink\" title=\"分布式版本控制系统\"></a>分布式版本控制系统</h3><p>于是分布式版本控制系统（ Distributed Version Control System，简称 DVCS ）面世了。在这类系统中，像 Git，Mercurial，Bazaar 以及 Darcs 等，客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。因为每一次的提取操作，实际上都是一次对代码仓库的完整备份。<br>如果你是位图形或网页设计师，可能会需要保存某一幅图片或页面布局文件的所有修订版本（这或许是你非常渴望拥有的功能）。采用版本控制系统（VCS）是个明智的选择。有了它你就可以将某个文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态。你可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而找出导致怪异问题出现的原因，又是谁在何时报告了某个功能缺陷等等。使用版本控制系统通常还意味着，就算你乱来一气把整个项目中的文件改的改删的删，你也照样可以轻松恢复到原先的样子。但额外增加的工作量却微乎其微。</p>\n<h3 id=\"Git基础\"><a href=\"#Git基础\" class=\"headerlink\" title=\"Git基础\"></a>Git基础</h3><h4 id=\"直接记录快照，而非差异比较\"><a href=\"#直接记录快照，而非差异比较\" class=\"headerlink\" title=\"直接记录快照，而非差异比较\"></a>直接记录快照，而非差异比较</h4><p>Git 和其他版本控制系统的主要差别在于，Git 只关心文件数据的整体是否发生变化，而大多数其他系统则只关心文件内容的具体差异。这类系统（CVS，Subversion，Perforce，Bazaar 等等）每次记录有哪些文件作了更新，以及都更新了哪些行的什么内容.Git 并不保存这些前后变化的差异数据。实际上，Git 更像是把变化的文件作快照后，记录在一个微型的文件系统中。每次提交更新时，它会纵览一遍所有文件的指纹信息并对文件作一快照，然后保存一个指向这次快照的索引。为提高性能，若文件没有变化，Git 不会再次保存，而只对上次保存的快照作一链接。</p>\n<h4 id=\"近乎所有操作都是本地执行\"><a href=\"#近乎所有操作都是本地执行\" class=\"headerlink\" title=\"近乎所有操作都是本地执行\"></a>近乎所有操作都是本地执行</h4><p>在 Git 中的绝大多数操作都只需要访问本地文件和资源，不用连网。但如果用 CVCS 的话，差不多所有操作都需要连接网络。因为 Git 在本地磁盘上就保存着所有当前项目的历史更新，所以处理起来速度飞快。</p>\n<h4 id=\"文件的三种状态\"><a href=\"#文件的三种状态\" class=\"headerlink\" title=\"文件的三种状态\"></a>文件的三种状态</h4><p>对于任何一个文件，在 Git 内都只有三种状态：已提交（committed），已修改（modified）和已暂存（staged）。已提交表示该文件已经被安全地保存在本地数据库中了；已修改表示修改了某个文件，但还没有提交保存；已暂存表示把已修改的文件放在下次提交时要保存的清单中。</p>\n<h4 id=\"基本的-Git-工作流程如下：\"><a href=\"#基本的-Git-工作流程如下：\" class=\"headerlink\" title=\"基本的 Git 工作流程如下：\"></a>基本的 Git 工作流程如下：</h4><p>在工作目录中修改某些文件。<br>对修改后的文件进行快照，然后保存到暂存区域。<br>提交更新，将保存在暂存区域的文件快照永久转储到 Git 目录中。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><h4 id=\"从源代码安装\"><a href=\"#从源代码安装\" class=\"headerlink\" title=\"从源代码安装\"></a>从源代码安装</h4><p>若是条件允许，从源代码安装有很多好处，至少可以安装最新的版本。Git 的每个版本都在不断尝试改进用户体验，所以能通过源代码自己编译安装最新版本就再好不过了。有些 Linux 版本自带的安装包更新起来并不及时，所以除非你在用最新的 distro 或者 backports，那么从源代码安装其实该算是最佳选择。Git 的工作需要调用 curl，zlib，openssl，expat，libiconv 等库的代码，所以需要先安装这些依赖工具。</p>\n<h4 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h4><p>在 Ubuntu 这类 Debian 体系的系统上可以用 apt-get 安装：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ apt-get install git</div></pre></td></tr></table></figure></p>\n<h4 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h4><p>在 Windows 上安装:<a href=\"http://msysgit.github.com/\" target=\"_blank\" rel=\"external\">官网</a><br>给 Windows 用户的敬告：你应该在 msysGit 提供的 Unix 风格的 shell 来运行 Git。在 Unix 风格的 shell 中，可以使用本书中提及的复杂多行的命令。对于那些需要在 Windows 命令行中使用 Git 的用户，必须注意：在参数中间有空格的时候，必须使用双引号将参数括起来（在 Linux 中是单引号）；另外，如果扬抑符（^）作为参数的结尾，并且作为这一行的最后一个字符，则这个参数也需要用双引号括起来。因为扬抑符在 Windows 命令行中表示续行（译注：即下一行为这一行命令的继续）。</p>\n<h3 id=\"初次运行-Git-前的配置\"><a href=\"#初次运行-Git-前的配置\" class=\"headerlink\" title=\"初次运行 Git 前的配置\"></a>初次运行 Git 前的配置</h3><p>一般在新的系统上，我们都需要先配置下自己的 Git 工作环境。配置工作只需一次，以后升级时还会沿用现在的配置。当然，如果需要，你随时可以用相同的命令修改已有的配置。<br>Git 提供了一个叫做 git config 的工具（译注：实际是 git-config 命令，只不过可以通过 git 加一个名字来呼叫此命令。），专门用来配置或读取相应的工作环境变量。而正是由这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：</p>\n<p>1, /etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 –system 选项，读写的就是这个文件。<br>2, ~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用 –global 选项，读写的就是这个文件。<br>3, 当前项目的 Git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。</p>\n<h4 id=\"用户信息\"><a href=\"#用户信息\" class=\"headerlink\" title=\"用户信息\"></a>用户信息</h4><p>第一个要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name <span class=\"string\">\"John Doe\"</span></div><div class=\"line\">$ git config --global user.email johndoe@example.com</div></pre></td></tr></table></figure></p>\n<p>如果用了 –global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 –global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。</p>\n<h4 id=\"文本编辑器\"><a href=\"#文本编辑器\" class=\"headerlink\" title=\"文本编辑器\"></a>文本编辑器</h4><p>接下来要设置的是默认使用的文本编辑器。Git 需要你输入一些额外消息的时候，会自动调用一个外部文本编辑器给你用。默认会使用操作系统指定的默认编辑器，一般可能会是 Vi 或者 Vim。如果你有其他偏好，比如 Emacs 的话，可以重新设置：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git config --global core.editor emacs</div></pre></td></tr></table></figure></p>\n<h4 id=\"差异分析工具\"><a href=\"#差异分析工具\" class=\"headerlink\" title=\"差异分析工具\"></a>差异分析工具</h4><p>还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用 vimdiff 的话：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git config --global merge.tool vimdiff</div></pre></td></tr></table></figure></p>\n<p>Git 可以理解 kdiff3，tkdiff，meld，xxdiff，emerge，vimdiff，gvimdiff，ecmerge，和 opendiff 等合并工具的输出信息。当然，你也可以指定使用自己开发的工具，具体怎么做可以参阅第七章。</p>\n<h4 id=\"查看配置信息\"><a href=\"#查看配置信息\" class=\"headerlink\" title=\"查看配置信息\"></a>查看配置信息</h4><p>要检查已有的配置信息，可以使用 git config –list 命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git config --list</div><div class=\"line\">user.name=Scott Chacon</div><div class=\"line\">user.email=schacon@gmail.com</div><div class=\"line\">color.status=auto</div><div class=\"line\">color.branch=auto</div><div class=\"line\">color.interactive=auto</div><div class=\"line\">color.diff=auto</div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<p>有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 /etc/gitconfig 和 ~/.gitconfig），不过最终 Git 实际采用的是最后一个。</p>\n<p>也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git config user.name</div><div class=\"line\">Scott Chacon</div></pre></td></tr></table></figure></p>\n<h3 id=\"获取帮助\"><a href=\"#获取帮助\" class=\"headerlink\" title=\"获取帮助\"></a>获取帮助</h3><p>想了解 Git 的各式工具该怎么用，可以阅读它们的使用帮助，方法有三：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">help</span> &lt;verb&gt;</div><div class=\"line\">$ git &lt;verb&gt; --help</div><div class=\"line\">$ man git-&lt;verb&gt;</div></pre></td></tr></table></figure></p>\n<p>我们随时都可以浏览这些帮助信息而无需连网。 不过，要是你觉得还不够，可以到 Freenode IRC 服务器（irc.freenode.net）上的 #git 或 #github 频道寻求他人帮助。这两个频道上总有着上百号人，大多都有着丰富的 Git 知识，并且乐于助人。</p>\n<h2 id=\"Git基础-1\"><a href=\"#Git基础-1\" class=\"headerlink\" title=\"Git基础\"></a>Git基础</h2><h3 id=\"取得项目的-Git-仓库\"><a href=\"#取得项目的-Git-仓库\" class=\"headerlink\" title=\"取得项目的 Git 仓库\"></a>取得项目的 Git 仓库</h3><p>有两种取得 Git 项目仓库的方法。第一种是在现存的目录下，通过导入所有文件来创建新的 Git 仓库。第二种是从已有的 Git 仓库克隆出一个新的镜像仓库来。</p>\n<h4 id=\"在工作目录中初始化新仓库\"><a href=\"#在工作目录中初始化新仓库\" class=\"headerlink\" title=\"在工作目录中初始化新仓库\"></a>在工作目录中初始化新仓库</h4><p>要对现有的某个项目开始用 Git 管理，只需到此项目所在的目录，执行：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git init</div></pre></td></tr></table></figure></p>\n<p>初始化后，在当前目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。不过目前，仅仅是按照既有的结构框架初始化好了里边所有的文件和目录，但我们还没有开始跟踪管理项目中的任何一个文件。（在第九章我们会详细说明刚才创建的 .git 目录中究竟有哪些文件，以及都起些什么作用。）<br>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git add *.c</div><div class=\"line\">$ git add README</div><div class=\"line\">$ git commit -m <span class=\"string\">'initial project version'</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"从现有仓库克隆\"><a href=\"#从现有仓库克隆\" class=\"headerlink\" title=\"从现有仓库克隆\"></a>从现有仓库克隆</h4><p>如果想对某个开源项目出一份力，可以先把该项目的 Git 仓库复制一份出来，这就需要用到 git clone 命令。如果你熟悉其他的 VCS 比如 Subversion，你可能已经注意到这里使用的是 clone 而不是 checkout。这是个非常重要的差别，Git 收取的是项目历史的所有数据（每一个文件的每一个版本），服务器上有的数据克隆之后本地也都有了。实际上，即便服务器的磁盘发生故障，用任何一个克隆出来的客户端都可以重建服务器上的仓库，回到当初克隆时的状态（虽然可能会丢失某些服务器端的挂钩设置，但所有版本的数据仍旧还在，有关细节请参考第四章）。</p>\n<p>克隆仓库的命令格式为 git clone [url]。比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> git://github.com/schacon/grit.git</div></pre></td></tr></table></figure></p>\n<p>这会在当前目录下创建一个名为grit的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录，然后从中取出最新版本的文件拷贝。如果进入这个新建的 grit 目录，你会看到项目中的所有文件已经在里边了，准备好后续的开发和使用。如果希望在克隆的时候，自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> git://github.com/schacon/grit.git mygrit</div></pre></td></tr></table></figure></p>\n<p>唯一的差别就是，现在新建的目录成了 mygrit，其他的都和上边的一样。</p>\n<p>Git 支持许多数据传输协议。之前的例子使用的是 git:// 协议，不过你也可以用 http(s):// 或者 user@server:/path.git 表示的 SSH 传输协议。我们会在第四章详细介绍所有这些协议在服务器端该如何配置使用，以及各种方式之间的利弊。</p>\n<h3 id=\"记录每次更新到仓库\"><a href=\"#记录每次更新到仓库\" class=\"headerlink\" title=\"记录每次更新到仓库\"></a>记录每次更新到仓库</h3><p>现在我们手上已经有了一个真实项目的 Git 仓库，并从这个仓库中取出了所有文件的工作拷贝。接下来，对这些文件作些修改，在完成了一个阶段的目标之后，提交本次更新到仓库。</p>\n<p>请记住，工作目录下面的所有文件都不外乎这两种状态：已跟踪或未跟踪。已跟踪的文件是指本来就被纳入版本控制管理的文件，在上次快照中有它们的记录，工作一段时间后，它们的状态可能是未更新，已修改或者已放入暂存区。而所有其他文件都属于未跟踪文件。它们既没有上次更新时的快照，也不在当前的暂存区域。初次克隆某个仓库时，工作目录中的所有文件都属于已跟踪文件，且状态为未修改。</p>\n<p>在编辑过某些文件之后，Git 将这些文件标为已修改。我们逐步把这些修改过的文件放到暂存区域，直到最后一次性提交所有这些暂存起来的文件，如此重复。</p>\n<h4 id=\"检查当前文件状态\"><a href=\"#检查当前文件状态\" class=\"headerlink\" title=\"检查当前文件状态\"></a>检查当前文件状态</h4><p>要确定哪些文件当前处于什么状态，可以用 git status 命令。如果在克隆仓库之后立即执行此命令，会看到类似这样的输出：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">nothing to commit, working directory clean</div></pre></td></tr></table></figure></p>\n<p>这说明你现在的工作目录相当干净。换句话说，所有已跟踪文件在上次提交后都未被更改过。此外，上面的信息还表明，当前目录下没有出现任何处于未跟踪的新文件，否则 Git 会在这里列出来。最后，该命令还显示了当前所在的分支是 master，这是默认的分支名称，实际是可以修改的，现在先不用考虑。下一章我们就会详细讨论分支和引用。</p>\n<p>现在让我们用 vim 创建一个新文件 README，保存退出后运行 git status 会看到该文件出现在未跟踪文件列表中：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ vim README\t\t<span class=\"comment\">#自学vim编辑器</span></div><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Untracked files:</div><div class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to include <span class=\"keyword\">in</span> what will be committed)</div><div class=\"line\"></div><div class=\"line\">        README</div><div class=\"line\"></div><div class=\"line\">nothing added to commit but untracked files present (use <span class=\"string\">\"git add\"</span> to track)</div></pre></td></tr></table></figure></p>\n<p>在状态报告中可以看到新建的README文件出现在“Untracked files”下面。未跟踪的文件意味着Git在之前的快照（提交）中没有这些文件；Git 不会自动将之纳入跟踪范围，除非你明明白白地告诉它“我需要跟踪该文件”，因而不用担心把临时文件什么的也归入版本管理。不过现在的例子中，我们确实想要跟踪管理 README 这个文件。</p>\n<h4 id=\"跟踪新文件\"><a href=\"#跟踪新文件\" class=\"headerlink\" title=\"跟踪新文件\"></a>跟踪新文件</h4><p>使用命令 git add 开始跟踪一个新文件。所以，要跟踪 README 文件，运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git add README</div></pre></td></tr></table></figure></p>\n<p>此时再运行 git status 命令，会看到 README 文件已被跟踪，并处于暂存状态：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Changes to be committed:</div><div class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</div><div class=\"line\"></div><div class=\"line\">        new file:   README</div></pre></td></tr></table></figure></p>\n<p>只要在 “Changes to be committed” 这行下面的，就说明是已暂存状态。如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。你可能会想起之前我们使用 git init 后就运行了 git add 命令，开始跟踪当前目录下的文件。在 git add 后面可以指明要跟踪的文件或目录路径。如果是目录的话，就说明要递归跟踪该目录下的所有文件。（译注：其实 git add 的潜台词就是把目标文件快照放入暂存区域，也就是 add file into staged area，同时未曾跟踪过的文件标记为需要跟踪。这样就好理解后续 add 操作的实际意义了。）</p>\n<h4 id=\"暂存已修改文件\"><a href=\"#暂存已修改文件\" class=\"headerlink\" title=\"暂存已修改文件\"></a>暂存已修改文件</h4><p>现在我们修改下之前已跟踪过的文件 benchmarks.rb，然后再次运行 status 命令，会看到这样的状态报告：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Changes to be committed:</div><div class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</div><div class=\"line\"></div><div class=\"line\">        new file:   README</div><div class=\"line\"></div><div class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</div><div class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to update what will be committed)</div><div class=\"line\">  (use <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"keyword\">in</span> working directory)</div><div class=\"line\"></div><div class=\"line\">        modified:   benchmarks.rb</div></pre></td></tr></table></figure></p>\n<p>文件 benchmarks.rb 出现在 “Changes not staged for commit” 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。要暂存这次更新，需要运行 git add 命令（这是个多功能命令，根据目标文件的状态不同，此命令的效果也不同：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等）。现在让我们运行 git add 将 benchmarks.rb 放到暂存区，然后再看看 git status 的输出：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git add benchmarks.rb</div><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Changes to be committed:</div><div class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</div><div class=\"line\"></div><div class=\"line\">        new file:   README</div><div class=\"line\">        modified:   benchmarks.rb</div></pre></td></tr></table></figure></p>\n<p>现在两个文件都已暂存，下次提交时就会一并记录到仓库。假设此时，你想要在 benchmarks.rb 里再加条注释，重新编辑存盘后，准备好提交。不过且慢，再运行 git status 看看：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ vim benchmarks.rb</div><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Changes to be committed:</div><div class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</div><div class=\"line\"></div><div class=\"line\">        new file:   README</div><div class=\"line\">        modified:   benchmarks.rb</div><div class=\"line\"></div><div class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</div><div class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to update what will be committed)</div><div class=\"line\">  (use <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"keyword\">in</span> working directory)</div><div class=\"line\"></div><div class=\"line\">        modified:   benchmarks.rb</div></pre></td></tr></table></figure></p>\n<p>怎么回事？ benchmarks.rb 文件出现了两次！一次算未暂存，一次算已暂存，这怎么可能呢？好吧，实际上 Git 只不过暂存了你运行 git add 命令时的版本，如果现在提交，那么提交的是添加注释前的版本，而非当前工作目录中的版本。所以，运行了 git add 之后又作了修订的文件，需要重新运行 git add 把最新版本重新暂存起来：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git add benchmarks.rb</div><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Changes to be committed:</div><div class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</div><div class=\"line\"></div><div class=\"line\">        new file:   README</div><div class=\"line\">        modified:   benchmarks.rb</div></pre></td></tr></table></figure></p>\n<h4 id=\"忽略某些文件\"><a href=\"#忽略某些文件\" class=\"headerlink\" title=\"忽略某些文件\"></a>忽略某些文件</h4><p>一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式。来看一个实际的例子：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ cat .gitignore</div><div class=\"line\">*.[oa]</div><div class=\"line\">*~</div></pre></td></tr></table></figure></p>\n<p>第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件。一般这类对象文件和存档文件都是编译过程中出现的，我们用不着跟踪它们的版本。第二行告诉 Git 忽略所有以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存副本。此外，你可能还需要忽略 log，tmp 或者 pid 目录，以及自动生成的文档等等。要养成一开始就设置好 .gitignore 文件的习惯，以免将来误提交这类无用的文件。</p>\n<p>文件 .gitignore 的格式规范如下：</p>\n<p>1, 所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。<br>2, 可以使用标准的 glob 模式匹配。<br>3, 匹配模式最后跟反斜杠（/）说明要忽略的是目录。<br>4, 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。</p>\n<p>所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。星号（*）匹配零个或多个任意字符；[abc] 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（?）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。<br>我们再看一个 .gitignore 文件的例子：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 此为注释 – 将被 Git 忽略</span></div><div class=\"line\"><span class=\"comment\"># 忽略所有 .a 结尾的文件</span></div><div class=\"line\">*.a</div><div class=\"line\"><span class=\"comment\"># 但 lib.a 除外</span></div><div class=\"line\">!lib.a</div><div class=\"line\"><span class=\"comment\"># 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</span></div><div class=\"line\">/TODO</div><div class=\"line\"><span class=\"comment\"># 忽略 build/ 目录下的所有文件</span></div><div class=\"line\">build/</div><div class=\"line\"><span class=\"comment\"># 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></div><div class=\"line\">doc/*.txt</div><div class=\"line\"><span class=\"comment\"># ignore all .txt files in the doc/ directory</span></div><div class=\"line\">doc/**/*.txt</div></pre></td></tr></table></figure></p>\n<p>A **/ pattern is available in Git since version 1.8.2.</p>\n<h4 id=\"查看已暂存和未暂存的更新\"><a href=\"#查看已暂存和未暂存的更新\" class=\"headerlink\" title=\"查看已暂存和未暂存的更新\"></a>查看已暂存和未暂存的更新</h4><p>实际上 git status 的显示比较简单，仅仅是列出了修改过的文件，如果要查看具体修改了什么地方，可以用 git diff 命令。稍后我们会详细介绍 git diff，不过现在，它已经能回答我们的两个问题了：当前做的哪些更新还没有暂存？有哪些更新已经暂存起来准备好了下次提交？ git diff 会使用文件补丁的格式显示具体添加和删除的行。</p>\n<p>假如再次修改 README 文件后暂存，然后编辑 benchmarks.rb 文件后先别暂存，运行 status 命令将会看到：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git diff</div><div class=\"line\">diff --git a/benchmarks.rb b/benchmarks.rb</div><div class=\"line\">index 3cb747f..da65585 100644</div><div class=\"line\">--- a/benchmarks.rb</div><div class=\"line\">+++ b/benchmarks.rb</div><div class=\"line\">@@ -36,6 +36,10 @@ def main</div><div class=\"line\">           @commit.parents[0].parents[0].parents[0]</div><div class=\"line\">         end</div><div class=\"line\"></div><div class=\"line\">+        run_code(x, <span class=\"string\">'commits 1'</span>) <span class=\"keyword\">do</span></div><div class=\"line\">+          git.commits.size</div><div class=\"line\">+        end</div><div class=\"line\">+</div><div class=\"line\">         run_code(x, <span class=\"string\">'commits 2'</span>) <span class=\"keyword\">do</span></div><div class=\"line\">           <span class=\"built_in\">log</span> = git.commits(<span class=\"string\">'master'</span>, 15)</div><div class=\"line\">           log.size</div></pre></td></tr></table></figure></p>\n<p>此命令比较的是工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化内容。</p>\n<p>若要看已经暂存起来的文件和上次提交时的快照之间的差异，可以用 git diff –cached 命令。（Git 1.6.1 及更高版本还允许使用 git diff –staged，效果是相同的，但更好记些。）来看看实际的效果：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git diff --cached</div><div class=\"line\">diff --git a/README b/README</div><div class=\"line\">new file mode 100644</div><div class=\"line\">index 0000000..03902a1</div><div class=\"line\">--- /dev/null</div><div class=\"line\">+++ b/README2</div><div class=\"line\">@@ -0,0 +1,5 @@</div><div class=\"line\">+grit</div><div class=\"line\">+ by Tom Preston-Werner, Chris Wanstrath</div><div class=\"line\">+ http://github.com/mojombo/grit</div><div class=\"line\">+</div><div class=\"line\">+Grit is a Ruby library <span class=\"keyword\">for</span> extracting information from a Git repository</div></pre></td></tr></table></figure></p>\n<p>像之前说的，暂存 benchmarks.rb 后再编辑，运行 git status 会看到暂存前后的两个版本：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git add benchmarks.rb</div><div class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'# test line'</span> &gt;&gt; benchmarks.rb</div><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Changes to be committed:</div><div class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</div><div class=\"line\"></div><div class=\"line\">        modified:   benchmarks.rb</div><div class=\"line\"></div><div class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</div><div class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to update what will be committed)</div><div class=\"line\">  (use <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"keyword\">in</span> working directory)</div><div class=\"line\"></div><div class=\"line\">        modified:   benchmarks.rb</div></pre></td></tr></table></figure></p>\n<p>现在运行 git diff 看暂存前后的变化：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git diff</div><div class=\"line\">diff --git a/benchmarks.rb b/benchmarks.rb</div><div class=\"line\">index e445e28..86b2f7c 100644</div><div class=\"line\">--- a/benchmarks.rb</div><div class=\"line\">+++ b/benchmarks.rb</div><div class=\"line\">@@ -127,3 +127,4 @@ end</div><div class=\"line\"> main()</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">##pp Grit::GitRuby.cache_client.stats</span></div><div class=\"line\">+<span class=\"comment\"># test line</span></div></pre></td></tr></table></figure></p>\n<p>然后用 git diff –cached 查看已经暂存起来的变化：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git diff --cached</div><div class=\"line\">diff --git a/benchmarks.rb b/benchmarks.rb</div><div class=\"line\">index 3cb747f..e445e28 100644</div><div class=\"line\">--- a/benchmarks.rb</div><div class=\"line\">+++ b/benchmarks.rb</div><div class=\"line\">@@ -36,6 +36,10 @@ def main</div><div class=\"line\">          @commit.parents[0].parents[0].parents[0]</div><div class=\"line\">        end</div><div class=\"line\"></div><div class=\"line\">+        run_code(x, <span class=\"string\">'commits 1'</span>) <span class=\"keyword\">do</span></div><div class=\"line\">+          git.commits.size</div><div class=\"line\">+        end</div><div class=\"line\">+</div><div class=\"line\">        run_code(x, <span class=\"string\">'commits 2'</span>) <span class=\"keyword\">do</span></div><div class=\"line\">          <span class=\"built_in\">log</span> = git.commits(<span class=\"string\">'master'</span>, 15)</div><div class=\"line\">          log.size</div></pre></td></tr></table></figure></p>\n<h4 id=\"提交更新\"><a href=\"#提交更新\" class=\"headerlink\" title=\"提交更新\"></a>提交更新</h4><p>现在的暂存区域已经准备妥当可以提交了。在此之前，请一定要确认还有什么修改过的或新建的文件还没有 git add 过，否则提交的时候不会记录这些还没暂存起来的变化。所以，每次准备提交前，先用 git status 看下，是不是都已暂存起来了，然后再运行提交命令 git commit：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git commit</div></pre></td></tr></table></figure></p>\n<p>这种方式会启动文本编辑器以便输入本次提交的说明。（默认会启用 shell 的环境变量 $EDITOR 所指定的软件，一般都是 vim 或 emacs。当然也可以按照第一章介绍的方式，使用 git config –global core.editor 命令设定你喜欢的编辑软件。）</p>\n<p>编辑器会显示类似下面的文本信息（本例选用 Vim 的屏显方式展示）：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Please enter the commit message for your changes. Lines starting</span></div><div class=\"line\"><span class=\"comment\"># with '#' will be ignored, and an empty message aborts the commit.</span></div><div class=\"line\"><span class=\"comment\"># On branch master</span></div><div class=\"line\"><span class=\"comment\"># Changes to be committed:</span></div><div class=\"line\"><span class=\"comment\">#       new file:   README</span></div><div class=\"line\"><span class=\"comment\">#       modified:   benchmarks.rb</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\">~</div><div class=\"line\">~</div><div class=\"line\">~</div><div class=\"line\"><span class=\"string\">\".git/COMMIT_EDITMSG\"</span> 10L, 283C</div></pre></td></tr></table></figure></p>\n<p>可以看到，默认的提交消息包含最后一次运行 git status 的输出，放在注释行里，另外开头还有一空行，供你输入提交说明。你完全可以去掉这些注释行，不过留着也没关系，多少能帮你回想起这次更新的内容有哪些。（如果觉得这还不够，可以用 -v 选项将修改差异的每一行都包含到注释中来。）退出编辑器时，Git 会丢掉注释行，将说明内容和本次更新提交到仓库。</p>\n<p>另外也可以用 -m 参数后跟提交说明的方式，在一行命令中提交更新：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git commit -m <span class=\"string\">\"Story 182: Fix benchmarks for speed\"</span></div><div class=\"line\">[master 463dc4f] Story 182: Fix benchmarks <span class=\"keyword\">for</span> speed</div><div class=\"line\"> 2 files changed, 3 insertions(+)</div><div class=\"line\"> create mode 100644 README</div></pre></td></tr></table></figure></p>\n<p>好，现在你已经创建了第一个提交！可以看到，提交后它会告诉你，当前是在哪个分支（master）提交的，本次提交的完整 SHA-1 校验和是什么（463dc4f），以及在本次提交中，有多少文件修订过，多少行添改和删改过。</p>\n<p>记住，提交时的记录是放在暂存区域的快照，任何还未暂存的仍然保持已修改状态，可以在下次提交时纳入版本管理。每一次运行提交操作，都是对你项目作一次快照，以后可以回到这个状态，或者进行比较。</p>\n<h3 id=\"跳过使用暂存区域\"><a href=\"#跳过使用暂存区域\" class=\"headerlink\" title=\"跳过使用暂存区域\"></a>跳过使用暂存区域</h3><p>尽管使用暂存区域的方式可以精心准备要提交的细节，但有时候这么做略显繁琐。Git 提供了一个跳过使用暂存区域的方式，只要在提交的时候，给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</div><div class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to update what will be committed)</div><div class=\"line\">  (use <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"keyword\">in</span> working directory)</div><div class=\"line\"></div><div class=\"line\">        modified:   benchmarks.rb</div><div class=\"line\"></div><div class=\"line\">no changes added to commit (use <span class=\"string\">\"git add\"</span> and/or <span class=\"string\">\"git commit -a\"</span>)</div><div class=\"line\">$ git commit <span class=\"_\">-a</span> -m <span class=\"string\">'added new benchmarks'</span></div><div class=\"line\">[master 83e38c7] added new benchmarks</div><div class=\"line\"> 1 files changed, 5 insertions(+)</div></pre></td></tr></table></figure></p>\n<p>看到了吗？提交之前不再需要 git add 文件 benchmarks.rb 了。</p>\n<h4 id=\"移除文件\"><a href=\"#移除文件\" class=\"headerlink\" title=\"移除文件\"></a>移除文件</h4><p>要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。可以用 git rm 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。</p>\n<p>如果只是简单地从工作目录中手工删除文件，运行 git status 时就会在 “Changes not staged for commit” 部分（也就是未暂存清单）看到：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ rm grit.gemspec</div><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</div><div class=\"line\">  (use <span class=\"string\">\"git add/rm &lt;file&gt;...\"</span> to update what will be committed)</div><div class=\"line\">  (use <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"keyword\">in</span> working directory)</div><div class=\"line\"></div><div class=\"line\">        deleted:    grit.gemspec</div><div class=\"line\"></div><div class=\"line\">no changes added to commit (use <span class=\"string\">\"git add\"</span> and/or <span class=\"string\">\"git commit -a\"</span>)</div></pre></td></tr></table></figure></p>\n<p>然后再运行 git rm 记录此次移除文件的操作：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git rm grit.gemspec</div><div class=\"line\">rm <span class=\"string\">'grit.gemspec'</span></div><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Changes to be committed:</div><div class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</div><div class=\"line\"></div><div class=\"line\">        deleted:    grit.gemspec</div></pre></td></tr></table></figure></p>\n<p>最后提交的时候，该文件就不再纳入版本管理了。如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f（译注：即 force 的首字母），以防误删除文件后丢失修改的内容。</p>\n<p>另外一种情况是，我们想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。换句话说，仅是从跟踪清单中删除。比如一些大型日志文件或者一堆 .a 编译文件，不小心纳入仓库后，要移除跟踪但不删除文件，以便稍后在 .gitignore 文件中补上，用 –cached 选项即可：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git rm --cached readme.txt</div></pre></td></tr></table></figure></p>\n<p>后面可以列出文件或者目录的名字，也可以使用 glob 模式。比方说：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git rm <span class=\"built_in\">log</span>/\\*.log</div></pre></td></tr></table></figure></p>\n<p>注意到星号 * 之前的反斜杠 \\，因为 Git 有它自己的文件模式扩展匹配方式，所以我们不用 shell 来帮忙展开（译注：实际上不加反斜杠也可以运行，只不过按照 shell 扩展的话，仅仅删除指定目录下的文件而不会递归匹配。上面的例子本来就指定了目录，所以效果等同，但下面的例子就会用递归方式匹配，所以必须加反斜杠。）。此命令删除所有 log/ 目录下扩展名为 .log 的文件。类似的比如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git rm \\*~</div></pre></td></tr></table></figure></p>\n<p>会递归删除当前目录及其子目录中所有 ~ 结尾的文件。</p>\n<h4 id=\"移动文件\"><a href=\"#移动文件\" class=\"headerlink\" title=\"移动文件\"></a>移动文件</h4><p>不像其他的 VCS 系统，Git 并不跟踪文件移动操作。如果在 Git 中重命名了某个文件，仓库中存储的元数据并不会体现出这是一次改名操作。不过 Git 非常聪明，它会推断出究竟发生了什么，至于具体是如何做到的，我们稍后再谈。</p>\n<p>既然如此，当你看到 Git 的 mv 命令时一定会困惑不已。要在 Git 中对文件改名，可以这么做：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git mv file_from file_to</div></pre></td></tr></table></figure></p>\n<p>它会恰如预期般正常工作。实际上，即便此时查看状态信息，也会明白无误地看到关于重命名操作的说明：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git mv README.txt README</div><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Changes to be committed:</div><div class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</div><div class=\"line\"></div><div class=\"line\">        renamed:    README.txt -&gt; README</div></pre></td></tr></table></figure></p>\n<p>其实，运行 git mv 就相当于运行了下面三条命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ mv README.txt README</div><div class=\"line\">$ git rm README.txt</div><div class=\"line\">$ git add README</div></pre></td></tr></table></figure></p>\n<p>如此分开操作，Git 也会意识到这是一次改名，所以不管何种方式都一样。当然，直接用 git mv 轻便得多，不过有时候用其他工具批处理改名的话，要记得在提交前删除老的文件名，再添加新的文件名。</p>\n<h4 id=\"查看提交历史\"><a href=\"#查看提交历史\" class=\"headerlink\" title=\"查看提交历史\"></a>查看提交历史</h4><p>在提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，可以使用 git log 命令查看。</p>\n<p>接下来的例子会用我专门用于演示的 simplegit 项目，运行下面的命令获取该项目源代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/schacon/simplegit-progit.git</div></pre></td></tr></table></figure></p>\n<p>然后在此项目中运行 git log，应该会看到下面的输出：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span></div><div class=\"line\">commit ca82a6dff817ec66f44342007202690a93763949</div><div class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Mon Mar 17 21:52:11 2008 -0700</div><div class=\"line\"></div><div class=\"line\">    changed the version number</div><div class=\"line\"></div><div class=\"line\">commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7</div><div class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Sat Mar 15 16:40:33 2008 -0700</div><div class=\"line\"></div><div class=\"line\">    removed unnecessary <span class=\"built_in\">test</span> code</div><div class=\"line\"></div><div class=\"line\">commit a11bef06a3f659402fe7563abf99ad00de2209e6</div><div class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Sat Mar 15 10:31:28 2008 -0700</div><div class=\"line\"></div><div class=\"line\">    first commit</div></pre></td></tr></table></figure></p>\n<p>默认不用任何参数的话，git log 会按提交时间列出所有的更新，最近的更新排在最上面。看到了吗，每次更新都有一个 SHA-1 校验和、作者的名字和电子邮件地址、提交时间，最后缩进一个段落显示提交说明。</p>\n<p>git log 有许多选项可以帮助你搜寻感兴趣的提交，接下来我们介绍些最常用的。</p>\n<p>我们常用 -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span> -p -2</div><div class=\"line\">commit ca82a6dff817ec66f44342007202690a93763949</div><div class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Mon Mar 17 21:52:11 2008 -0700</div><div class=\"line\"></div><div class=\"line\">    changed the version number</div><div class=\"line\"></div><div class=\"line\">diff --git a/Rakefile b/Rakefile</div><div class=\"line\">index a874b73..8f94139 100644</div><div class=\"line\">--- a/Rakefile</div><div class=\"line\">+++ b/Rakefile</div><div class=\"line\">@@ -5,5 +5,5 @@ require <span class=\"string\">'rake/gempackagetask'</span></div><div class=\"line\"> spec = Gem::Specification.new <span class=\"keyword\">do</span> |s|</div><div class=\"line\">     s.name      =   <span class=\"string\">\"simplegit\"</span></div><div class=\"line\">-    s.version   =   <span class=\"string\">\"0.1.0\"</span></div><div class=\"line\">+    s.version   =   <span class=\"string\">\"0.1.1\"</span></div><div class=\"line\">     s.author    =   <span class=\"string\">\"Scott Chacon\"</span></div><div class=\"line\">     s.email     =   <span class=\"string\">\"schacon@gee-mail.com</span></div><div class=\"line\"></div><div class=\"line\">commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7</div><div class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Sat Mar 15 16:40:33 2008 -0700</div><div class=\"line\"></div><div class=\"line\">    removed unnecessary test code</div><div class=\"line\"></div><div class=\"line\">diff --git a/lib/simplegit.rb b/lib/simplegit.rb</div><div class=\"line\">index a0a60ae..47c6340 100644</div><div class=\"line\">--- a/lib/simplegit.rb</div><div class=\"line\">+++ b/lib/simplegit.rb</div><div class=\"line\">@@ -18,8 +18,3 @@ class SimpleGit</div><div class=\"line\">     end</div><div class=\"line\"></div><div class=\"line\"> end</div><div class=\"line\">-</div><div class=\"line\">-if <span class=\"variable\">$0</span> == __FILE__</div><div class=\"line\">-  git = SimpleGit.new</div><div class=\"line\">-  puts git.show</div><div class=\"line\">-end</div><div class=\"line\">\\ No newline at end of file</div></pre></td></tr></table></figure></p>\n<p>该选项除了显示基本信息之外，还在附带了每次 commit 的变化。当进行代码审查，或者快速浏览某个搭档提交的 commit 的变化的时候，这个参数就非常有用了。</p>\n<p>某些时候，单词层面的对比，比行层面的对比，更加容易观察。Git 提供了 –word-diff 选项。我们可以将其添加到 git log -p 命令的后面，从而获取单词层面上的对比。在程序代码中进行单词层面的对比常常是没什么用的。不过当你需要在书籍、论文这种很大的文本文件上进行对比的时候，这个功能就显出用武之地了。下面是一个简单的例子：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span> -U1 --word-diff</div><div class=\"line\">commit ca82a6dff817ec66f44342007202690a93763949</div><div class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Mon Mar 17 21:52:11 2008 -0700</div><div class=\"line\"></div><div class=\"line\">    changed the version number</div><div class=\"line\"></div><div class=\"line\">diff --git a/Rakefile b/Rakefile</div><div class=\"line\">index a874b73..8f94139 100644</div><div class=\"line\">--- a/Rakefile</div><div class=\"line\">+++ b/Rakefile</div><div class=\"line\">@@ -7,3 +7,3 @@ spec = Gem::Specification.new <span class=\"keyword\">do</span> |s|</div><div class=\"line\">    s.name      =   <span class=\"string\">\"simplegit\"</span></div><div class=\"line\">    s.version   =   [-<span class=\"string\">\"0.1.0\"</span>-]&#123;+<span class=\"string\">\"0.1.1\"</span>+&#125;</div><div class=\"line\">    s.author    =   <span class=\"string\">\"Scott Chacon\"</span></div></pre></td></tr></table></figure></p>\n<p>如你所见，这里并没有平常看到的添加行或者删除行的信息。这里的对比显示在行间。新增加的单词被 {+ +} 括起来，被删除的单词被 [- -] 括起来。在进行单词层面的对比的时候，你可能希望上下文（ context ）行数从默认的 3 行，减为 1 行，那么可以使用 -U1 选项。上面的例子中，我们就使用了这个选项。</p>\n<p>另外，git log 还提供了许多摘要选项可以用，比如 –stat，仅显示简要的增改行数统计：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span> --stat</div><div class=\"line\">commit ca82a6dff817ec66f44342007202690a93763949</div><div class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Mon Mar 17 21:52:11 2008 -0700</div><div class=\"line\"></div><div class=\"line\">    changed the version number</div><div class=\"line\"></div><div class=\"line\"> Rakefile |    2 +-</div><div class=\"line\"> 1 file changed, 1 insertion(+), 1 deletion(-)</div><div class=\"line\"></div><div class=\"line\">commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7</div><div class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Sat Mar 15 16:40:33 2008 -0700</div><div class=\"line\"></div><div class=\"line\">    removed unnecessary <span class=\"built_in\">test</span> code</div><div class=\"line\"></div><div class=\"line\"> lib/simplegit.rb |    5 -----</div><div class=\"line\"> 1 file changed, 5 deletions(-)</div><div class=\"line\"></div><div class=\"line\">commit a11bef06a3f659402fe7563abf99ad00de2209e6</div><div class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Sat Mar 15 10:31:28 2008 -0700</div><div class=\"line\"></div><div class=\"line\">    first commit</div><div class=\"line\"></div><div class=\"line\"> README           |    6 ++++++</div><div class=\"line\"> Rakefile         |   23 +++++++++++++++++++++++</div><div class=\"line\"> lib/simplegit.rb |   25 +++++++++++++++++++++++++</div><div class=\"line\"> 3 files changed, 54 insertions(+)</div></pre></td></tr></table></figure></p>\n<p>每个提交都列出了修改过的文件，以及其中添加和移除的行数，并在最后列出所有增减行数小计。 还有个常用的 –pretty 选项，可以指定使用完全不同于默认格式的方式展示提交历史。比如用 oneline 将每个提交放在一行显示，这在提交数很大时非常有用。另外还有 short，full 和 fuller 可以用，展示的信息或多或少有些不同，请自己动手实践一下看看效果如何。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span> --pretty=oneline</div><div class=\"line\">ca82a6dff817ec66f44342007202690a93763949 changed the version number</div><div class=\"line\">085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary <span class=\"built_in\">test</span> code</div><div class=\"line\">a11bef06a3f659402fe7563abf99ad00de2209e6 first commit</div></pre></td></tr></table></figure></p>\n<p>但最有意思的是 format，可以定制要显示的记录格式，这样的输出便于后期编程提取分析，像这样：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span> --pretty=format:<span class=\"string\">\"%h - %an, %ar : %s\"</span></div><div class=\"line\">ca82a6d - Scott Chacon, 11 months ago : changed the version number</div><div class=\"line\">085bb3b - Scott Chacon, 11 months ago : removed unnecessary <span class=\"built_in\">test</span> code</div><div class=\"line\">a11bef0 - Scott Chacon, 11 months ago : first commit</div></pre></td></tr></table></figure></p>\n<p>表 2-1 列出了常用的格式占位符写法及其代表的意义。</p>\n<!-- Attention to translators: this is a table declaration. The lines must be formatted as follows <TAB><First column text><TAB><Second column text> -->\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">选项\t 说明</div><div class=\"line\">%H\t提交对象（commit）的完整哈希字串</div><div class=\"line\">%h\t提交对象的简短哈希字串</div><div class=\"line\">%T\t树对象（tree）的完整哈希字串</div><div class=\"line\">%t\t树对象的简短哈希字串</div><div class=\"line\">%P\t父对象（parent）的完整哈希字串</div><div class=\"line\">%p\t父对象的简短哈希字串</div><div class=\"line\">%an\t作者（author）的名字</div><div class=\"line\">%ae\t作者的电子邮件地址</div><div class=\"line\">%ad\t作者修订日期（可以用 -date= 选项定制格式）</div><div class=\"line\">%ar\t作者修订日期，按多久以前的方式显示</div><div class=\"line\">%cn\t提交者(committer)的名字</div><div class=\"line\">%ce\t提交者的电子邮件地址</div><div class=\"line\">%<span class=\"built_in\">cd</span>\t提交日期</div><div class=\"line\">%cr\t提交日期，按多久以前的方式显示</div><div class=\"line\">%s\t提交说明</div></pre></td></tr></table></figure>\n<p>你一定奇怪作者（author）和提交者（committer）之间究竟有何差别，其实作者指的是实际作出修改的人，提交者指的是最后将此工作成果提交到仓库的人。所以，当你为某个项目发布补丁，然后某个核心成员将你的补丁并入项目时，你就是作者，而那个核心成员就是提交者。我们会在第五章再详细介绍两者之间的细微差别。</p>\n<p>用 oneline 或 format 时结合 –graph 选项，可以看到开头多出一些 ASCII 字符串表示的简单图形，形象地展示了每个提交所在的分支及其分化衍合情况。在我们之前提到的 Grit 项目仓库中可以看到：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span> --pretty=format:<span class=\"string\">\"%h %s\"</span> --graph</div><div class=\"line\">* 2d3acf9 ignore errors from SIGCHLD on <span class=\"built_in\">trap</span></div><div class=\"line\">*  5e3ee11 Merge branch <span class=\"string\">'master'</span> of git://github.com/dustin/grit</div><div class=\"line\">|\\</div><div class=\"line\">| * 420eac9 Added a method <span class=\"keyword\">for</span> getting the current branch.</div><div class=\"line\">* | 30e367c timeout code and tests</div><div class=\"line\">* | 5a09431 add timeout protection to grit</div><div class=\"line\">* | e1193f8 support <span class=\"keyword\">for</span> heads with slashes <span class=\"keyword\">in</span> them</div><div class=\"line\">|/</div><div class=\"line\">* d6016bc require time <span class=\"keyword\">for</span> xmlschema</div><div class=\"line\">*  11d191e Merge branch <span class=\"string\">'defunkt'</span> into <span class=\"built_in\">local</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">选项\t说明</div><div class=\"line\">-p\t按补丁格式显示每个更新之间的差异。</div><div class=\"line\">--word-diff\t按 word diff 格式显示差异。</div><div class=\"line\">--stat\t显示每次更新的文件修改统计信息。</div><div class=\"line\">--shortstat\t只显示 --stat 中最后的行数修改添加移除统计。</div><div class=\"line\">--name-only\t仅在提交信息后显示已修改的文件清单。</div><div class=\"line\">--name-status\t显示新增、修改、删除的文件清单。</div><div class=\"line\">--abbrev-commit\t仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。</div><div class=\"line\">--relative-date\t使用较短的相对时间显示（比如，“2 weeks ago”）。</div><div class=\"line\">--graph\t显示 ASCII 图形表示的分支合并历史。</div><div class=\"line\">--pretty\t使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。</div><div class=\"line\">--oneline\t`--pretty=oneline --abbrev-commit` 的简化用法。</div></pre></td></tr></table></figure>\n<h4 id=\"限制输出长度\"><a href=\"#限制输出长度\" class=\"headerlink\" title=\"限制输出长度\"></a>限制输出长度</h4><p>除了定制输出格式的选项之外，git log 还有许多非常实用的限制输出长度的选项，也就是只输出部分提交信息。之前我们已经看到过 -2 了，它只显示最近的两条提交，实际上，这是 -<n> 选项的写法，其中的 n 可以是任何自然数，表示仅显示最近的若干条提交。不过实践中我们是不太用这个选项的，Git 在输出所有提交时会自动调用分页程序（less），要看更早的更新只需翻到下页即可。</n></p>\n<p>另外还有按照时间作限制的选项，比如 –since 和 –until。下面的命令列出所有最近两周内的提交：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span> --since=2.weeks</div></pre></td></tr></table></figure></p>\n<p>你可以给出各种时间格式，比如说具体的某一天（“2008-01-15”），或者是多久以前（“2 years 1 day 3 minutes ago”）。</p>\n<p>还可以给出若干搜索条件，列出符合的提交。用 –author 选项显示指定作者的提交，用 –grep 选项搜索提交说明中的关键字。（请注意，如果要得到同时满足这两个选项搜索条件的提交，就必须用 –all-match 选项。否则，满足任意一个条件的提交都会被匹配出来）</p>\n<p>另一个真正实用的git log选项是路径(path)，如果只关心某些文件或者目录的历史提交，可以在 git log 选项的最后指定它们的路径。因为是放在最后位置上的选项，所以用两个短划线（–）隔开之前的选项和后面限定的路径名。</p>\n<p>表 2-3 还列出了其他常用的类似选项。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">选项\t说明</div><div class=\"line\">-(n)\t仅显示最近的 n 条提交</div><div class=\"line\">--since, --after\t仅显示指定时间之后的提交。</div><div class=\"line\">--until, --before\t仅显示指定时间之前的提交。</div><div class=\"line\">--author\t仅显示指定作者相关的提交。</div><div class=\"line\">--committer\t仅显示指定提交者相关的提交。</div></pre></td></tr></table></figure>\n<p>来看一个实际的例子，如果要查看 Git 仓库中，2008 年 10 月期间，Junio Hamano 提交的但未合并的测试脚本（位于项目的 t/ 目录下的文件），可以用下面的查询命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span> --pretty=<span class=\"string\">\"%h - %s\"</span> --author=gitster --since=<span class=\"string\">\"2008-10-01\"</span> \\</div><div class=\"line\">   --before=<span class=\"string\">\"2008-11-01\"</span> --no-merges -- t/</div><div class=\"line\">5610e3b - Fix testcase failure when extended attribute</div><div class=\"line\">acd3b9e - Enhance hold_lock_file_for_&#123;update,append&#125;()</div><div class=\"line\">f563754 - demonstrate breakage of detached checkout wi</div><div class=\"line\">d1a43f2 - reset --hard/<span class=\"built_in\">read</span>-tree --reset -u: remove un</div><div class=\"line\">51a94af - Fix <span class=\"string\">\"checkout --track -b newbranch\"</span> on detac</div><div class=\"line\">b0ad11e - pull: allow <span class=\"string\">\"git pull origin <span class=\"variable\">$something</span>:<span class=\"variable\">$cur</span></span></div></pre></td></tr></table></figure></p>\n<p>Git 项目有 20,000 多条提交，但我们给出搜索选项后，仅列出了其中满足条件的 6 条。</p>\n<p>####使用图形化工具查阅提交历史</p>\n<p>有时候图形化工具更容易展示历史提交的变化，随 Git 一同发布的 gitk 就是这样一种工具。它是用 Tcl/Tk 写成的，基本上相当于 git log 命令的可视化版本，凡是 git log 可以用的选项也都能用在 gitk 上。在项目工作目录中输入 gitk 命令后，就会启动图 2-2 所示的界面<br>上半个窗口显示的是历次提交的分支祖先图谱，下半个窗口显示当前点选的提交对应的具体差异。</p>\n<h3 id=\"撤消操作\"><a href=\"#撤消操作\" class=\"headerlink\" title=\"撤消操作\"></a>撤消操作</h3><p>任何时候，你都有可能需要撤消刚才所做的某些操作。接下来，我们会介绍一些基本的撤消操作相关的命令。请注意，有些撤销操作是不可逆的，所以请务必谨慎小心，一旦失误，就有可能丢失部分工作成果。</p>\n<h4 id=\"修改最后一次提交\"><a href=\"#修改最后一次提交\" class=\"headerlink\" title=\"修改最后一次提交\"></a>修改最后一次提交</h4><p>有时候我们提交完了才发现漏掉了几个文件没有加，或者提交信息写错了。想要撤消刚才的提交操作，可以使用 –amend 选项重新提交：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git commit --amend</div></pre></td></tr></table></figure></p>\n<p>此命令将使用当前的暂存区域快照提交。如果刚才提交完没有作任何改动，直接运行此命令的话，相当于有机会重新编辑提交说明，但将要提交的文件快照和之前的一样。</p>\n<p>启动文本编辑器后，会看到上次提交时的说明，编辑它确认没问题后保存退出，就会使用新的提交说明覆盖刚才失误的提交。</p>\n<p>如果刚才提交时忘了暂存某些修改，可以先补上暂存操作，然后再运行 –amend 提交：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git commit -m <span class=\"string\">'initial commit'</span></div><div class=\"line\">$ git add forgotten_file</div><div class=\"line\">$ git commit --amend</div></pre></td></tr></table></figure></p>\n<p>上面的三条命令最终只是产生一个提交，第二个提交命令修正了第一个的提交内容。</p>\n<h4 id=\"取消已经暂存的文件\"><a href=\"#取消已经暂存的文件\" class=\"headerlink\" title=\"取消已经暂存的文件\"></a>取消已经暂存的文件</h4><p>接下来的两个小节将演示如何取消暂存区域中的文件，以及如何取消工作目录中已修改的文件。不用担心，查看文件状态的时候就提示了该如何撤消，所以不需要死记硬背。来看下面的例子，有两个修改过的文件，我们想要分开提交，但不小心用 git add . 全加到了暂存区域。该如何撤消暂存其中的一个文件呢？其实，git status 的命令输出已经告诉了我们该怎么做：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git add .</div><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Changes to be committed:</div><div class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</div><div class=\"line\"></div><div class=\"line\">        modified:   README.txt</div><div class=\"line\">        modified:   benchmarks.rb</div></pre></td></tr></table></figure></p>\n<p>就在 “Changes to be committed” 下面，括号中有提示，可以使用 git reset HEAD <file>… 的方式取消暂存。好吧，我们来试试取消暂存 benchmarks.rb 文件：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git reset HEAD benchmarks.rb</div><div class=\"line\">Unstaged changes after reset:</div><div class=\"line\">M       benchmarks.rb</div><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Changes to be committed:</div><div class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</div><div class=\"line\"></div><div class=\"line\">        modified:   README.txt</div><div class=\"line\"></div><div class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</div><div class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to update what will be committed)</div><div class=\"line\">  (use <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"keyword\">in</span> working directory)</div><div class=\"line\"></div><div class=\"line\">        modified:   benchmarks.rb</div></pre></td></tr></table></figure></file></p>\n<p>这条命令看起来有些古怪，先别管，能用就行。现在 benchmarks.rb 文件又回到了之前已修改未暂存的状态。</p>\n<h4 id=\"取消对文件的修改\"><a href=\"#取消对文件的修改\" class=\"headerlink\" title=\"取消对文件的修改\"></a>取消对文件的修改</h4><p>如果觉得刚才对 benchmarks.rb 的修改完全没有必要，该如何取消修改，回到之前的状态（也就是修改之前的版本）呢？git status 同样提示了具体的撤消方法，接着上面的例子，现在未暂存区域看起来像这样：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</div><div class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to update what will be committed)</div><div class=\"line\">  (use <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"keyword\">in</span> working directory)</div><div class=\"line\"></div><div class=\"line\">        modified:   benchmarks.rb</div></pre></td></tr></table></figure></p>\n<p>在第二个括号中，我们看到了抛弃文件修改的命令（至少在 Git 1.6.1 以及更高版本中会这样提示，如果你还在用老版本，我们强烈建议你升级，以获取最佳的用户体验），让我们试试看：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git checkout -- benchmarks.rb \t\t<span class=\"comment\">#必须是跟踪的</span></div><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Changes to be committed:</div><div class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</div><div class=\"line\"></div><div class=\"line\">        modified:   README.txt</div></pre></td></tr></table></figure></p>\n<p>可以看到，该文件已经恢复到修改前的版本。你可能已经意识到了，这条命令有些危险，所有对文件的修改都没有了，因为我们刚刚把之前版本的文件复制过来重写了此文件。所以在用这条命令前，请务必确定真的不再需要保留刚才的修改。如果只是想回退版本，同时保留刚才的修改以便将来继续工作，可以用下章介绍的 stashing 和分支来处理，应该会更好些。</p>\n<p>记住，任何已经提交到 Git 的都可以被恢复。即便在已经删除的分支中的提交，或者用 –amend 重新改写的提交，都可以被恢复（关于数据恢复的内容见第九章）。所以，你可能失去的数据，仅限于没有提交过的，对 Git 来说它们就像从未存在过一样。</p>\n<h3 id=\"远程仓库的使用\"><a href=\"#远程仓库的使用\" class=\"headerlink\" title=\"远程仓库的使用\"></a>远程仓库的使用</h3><p>要参与任何一个 Git 项目的协作，必须要了解该如何管理远程仓库。远程仓库是指托管在网络上的项目仓库，可能会有好多个，其中有些你只能读，另外有些可以写。同他人协作开发某个项目时，需要管理这些远程仓库，以便推送或拉取数据，分享各自的工作进展。 管理远程仓库的工作，包括添加远程库，移除废弃的远程库，管理各式远程库分支，定义是否跟踪这些分支，等等。本节我们将详细讨论远程库的管理和使用。</p>\n<h4 id=\"查看当前的远程库\"><a href=\"#查看当前的远程库\" class=\"headerlink\" title=\"查看当前的远程库\"></a>查看当前的远程库</h4><p>要查看当前配置有哪些远程仓库，可以用 git remote 命令，它会列出每个远程库的简短名字。在克隆完某个项目后，至少可以看到一个名为 origin 的远程库，Git 默认使用这个名字来标识你所克隆的原始仓库：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> git://github.com/schacon/ticgit.git</div><div class=\"line\">Cloning into <span class=\"string\">'ticgit'</span>...</div><div class=\"line\">remote: Reusing existing pack: 1857, done.</div><div class=\"line\">remote: Total 1857 (delta 0), reused 0 (delta 0)</div><div class=\"line\">Receiving objects: 100% (1857/1857), 374.35 KiB | 193.00 KiB/s, done.</div><div class=\"line\">Resolving deltas: 100% (772/772), done.</div><div class=\"line\">Checking connectivity... done.</div><div class=\"line\">$ <span class=\"built_in\">cd</span> ticgit</div><div class=\"line\">$ git remote</div><div class=\"line\">origin</div></pre></td></tr></table></figure></p>\n<p>也可以加上 -v 选项（译注：此为 –verbose 的简写，取首字母），显示对应的克隆地址：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git remote -v</div><div class=\"line\">origin  git://github.com/schacon/ticgit.git (fetch)</div><div class=\"line\">origin  git://github.com/schacon/ticgit.git (push)</div></pre></td></tr></table></figure></p>\n<p>如果有多个远程仓库，此命令将全部列出。比如在我的 Grit 项目中，可以看到：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> grit</div><div class=\"line\">$ git remote -v</div><div class=\"line\">bakkdoor  git://github.com/bakkdoor/grit.git</div><div class=\"line\">cho45     git://github.com/cho45/grit.git</div><div class=\"line\">defunkt   git://github.com/defunkt/grit.git</div><div class=\"line\">koke      git://github.com/koke/grit.git</div><div class=\"line\">origin    git@github.com:mojombo/grit.git</div></pre></td></tr></table></figure></p>\n<p>这样一来，我就可以非常轻松地从这些用户的仓库中，拉取他们的提交到本地。请注意，上面列出的地址只有 origin 用的是 SSH URL 链接，所以也只有这个仓库我能推送数据上去（我们会在第四章解释原因）。</p>\n<h4 id=\"添加远程仓库\"><a href=\"#添加远程仓库\" class=\"headerlink\" title=\"添加远程仓库\"></a>添加远程仓库</h4><p>要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用，运行 git remote add [shortname] [url]：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git remote</div><div class=\"line\">origin</div><div class=\"line\">$ git remote add pb git://github.com/paulboone/ticgit.git</div><div class=\"line\">$ git remote -v</div><div class=\"line\">origin\tgit://github.com/schacon/ticgit.git</div><div class=\"line\">pb\tgit://github.com/paulboone/ticgit.git</div></pre></td></tr></table></figure></p>\n<p>现在可以用字符串 pb 指代对应的仓库地址了。比如说，要抓取所有 Paul 有的，但本地仓库没有的信息，可以运行 git fetch pb：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git fetch pb</div><div class=\"line\">remote: Counting objects: 58, done.</div><div class=\"line\">remote: Compressing objects: 100% (41/41), done.</div><div class=\"line\">remote: Total 44 (delta 24), reused 1 (delta 0)</div><div class=\"line\">Unpacking objects: 100% (44/44), done.</div><div class=\"line\">From git://github.com/paulboone/ticgit</div><div class=\"line\"> * [new branch]      master     -&gt; pb/master</div><div class=\"line\"> * [new branch]      ticgit     -&gt; pb/ticgit</div></pre></td></tr></table></figure></p>\n<h4 id=\"从远程仓库抓取数据\"><a href=\"#从远程仓库抓取数据\" class=\"headerlink\" title=\"从远程仓库抓取数据\"></a>从远程仓库抓取数据</h4><p>正如之前所看到的，可以用下面的命令从远程仓库抓取数据到本地：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git fetch [remote-name]</div></pre></td></tr></table></figure></p>\n<p>此命令会到远程仓库中拉取所有你本地仓库中还没有的数据。运行完成后，你就可以在本地访问该远程仓库中的所有分支，将其中某个分支合并到本地，或者只是取出某个分支，一探究竟。（我们会在第三章详细讨论关于分支的概念和操作。）</p>\n<p>如果是克隆了一个仓库，此命令会自动将远程仓库归于 origin 名下。所以，git fetch origin 会抓取从你上次克隆以来别人上传到此远程仓库中的所有更新（或是上次 fetch 以来别人提交的更新）。有一点很重要，需要记住，fetch 命令只是将远端的数据拉到本地仓库，并不自动合并到当前工作分支，只有当你确实准备好了，才能手工合并。</p>\n<p>如果设置了某个分支用于跟踪某个远端仓库的分支（参见下节及第三章的内容），可以使用 git pull 命令自动抓取数据下来，然后将远端分支自动合并到本地仓库中当前分支。在日常工作中我们经常这么用，既快且好。实际上，默认情况下 git clone 命令本质上就是自动创建了本地的 master 分支用于跟踪远程仓库中的 master 分支（假设远程仓库确实有 master 分支）。所以一般我们运行 git pull，目的都是要从原始克隆的远端仓库中抓取数据后，合并到工作目录中的当前分支。</p>\n<h4 id=\"推送数据到远程仓库\"><a href=\"#推送数据到远程仓库\" class=\"headerlink\" title=\"推送数据到远程仓库\"></a>推送数据到远程仓库</h4><p>项目进行到一个阶段，要同别人分享目前的成果，可以将本地仓库中的数据推送到远程仓库。实现这个任务的命令很简单： git push [remote-name] [branch-name]。如果要把本地的 master 分支推送到 origin 服务器上（再次说明下，克隆操作会自动使用默认的 master 和 origin 名字），可以运行下面的命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git push origin master</div></pre></td></tr></table></figure></p>\n<p>只有在所克隆的服务器上有写权限，或者同一时刻没有其他人在推数据，这条命令才会如期完成任务。如果在你推数据前，已经有其他人推送了若干更新，那你的推送操作就会被驳回。你必须先把他们的更新抓取到本地，合并到自己的项目中，然后才可以再次推送。有关推送数据到远程仓库的详细内容见第三章。</p>\n<h4 id=\"查看远程仓库信息\"><a href=\"#查看远程仓库信息\" class=\"headerlink\" title=\"查看远程仓库信息\"></a>查看远程仓库信息</h4><p>我们可以通过命令 git remote show [remote-name] 查看某个远程仓库的详细信息，比如要看所克隆的 origin 仓库，可以运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git remote show origin</div><div class=\"line\">* remote origin</div><div class=\"line\">  URL: git://github.com/schacon/ticgit.git</div><div class=\"line\">  Remote branch merged with <span class=\"string\">'git pull'</span> <span class=\"keyword\">while</span> on branch master</div><div class=\"line\">    master</div><div class=\"line\">  Tracked remote branches</div><div class=\"line\">    master</div><div class=\"line\">    ticgit</div></pre></td></tr></table></figure></p>\n<p>除了对应的克隆地址外，它还给出了许多额外的信息。它友善地告诉你如果是在 master 分支，就可以用 git pull 命令抓取数据合并到本地。另外还列出了所有处于跟踪状态中的远端分支。</p>\n<p>上面的例子非常简单，而随着使用 Git 的深入，git remote show 给出的信息可能会像这样：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git remote show origin</div><div class=\"line\">* remote origin</div><div class=\"line\">  URL: git@github.com:defunkt/github.git</div><div class=\"line\">  Remote branch merged with <span class=\"string\">'git pull'</span> <span class=\"keyword\">while</span> on branch issues</div><div class=\"line\">    issues</div><div class=\"line\">  Remote branch merged with <span class=\"string\">'git pull'</span> <span class=\"keyword\">while</span> on branch master</div><div class=\"line\">    master</div><div class=\"line\">  New remote branches (next fetch will store <span class=\"keyword\">in</span> remotes/origin)</div><div class=\"line\">    caching</div><div class=\"line\">  Stale tracking branches (use <span class=\"string\">'git remote prune'</span>)</div><div class=\"line\">    libwalker</div><div class=\"line\">    walker2</div><div class=\"line\">  Tracked remote branches</div><div class=\"line\">    acl</div><div class=\"line\">    apiv2</div><div class=\"line\">    dashboard2</div><div class=\"line\">    issues</div><div class=\"line\">    master</div><div class=\"line\">    postgres</div><div class=\"line\">  Local branch pushed with <span class=\"string\">'git push'</span></div><div class=\"line\">    master:master</div></pre></td></tr></table></figure></p>\n<h4 id=\"远程仓库的删除和重命名\"><a href=\"#远程仓库的删除和重命名\" class=\"headerlink\" title=\"远程仓库的删除和重命名\"></a>远程仓库的删除和重命名</h4><p>在新版 Git 中可以用 git remote rename 命令修改某个远程仓库在本地的简称，比如想把 pb 改成 paul，可以这么运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git remote rename pb paul</div><div class=\"line\">$ git remote</div><div class=\"line\">origin</div><div class=\"line\">paul</div></pre></td></tr></table></figure></p>\n<p>注意，对远程仓库的重命名，也会使对应的分支名称发生变化，原来的 pb/master 分支现在成了 paul/master。</p>\n<p>碰到远端仓库服务器迁移，或者原来的克隆镜像不再使用，又或者某个参与者不再贡献代码，那么需要移除对应的远端仓库，可以运行 git remote rm 命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git remote rm paul</div><div class=\"line\">$ git remote</div><div class=\"line\">origin</div></pre></td></tr></table></figure></p>\n<h3 id=\"打标签\"><a href=\"#打标签\" class=\"headerlink\" title=\"打标签\"></a>打标签</h3><p>同大多数 VCS 一样，Git 也可以对某一时间点上的版本打上标签。人们在发布某个软件版本（比如 v1.0 等等）的时候，经常这么做。本节我们一起来学习如何列出所有可用的标签，如何新建标签，以及各种不同类型标签之间的差别。</p>\n<h4 id=\"列显已有的标签\"><a href=\"#列显已有的标签\" class=\"headerlink\" title=\"列显已有的标签\"></a>列显已有的标签</h4><p>列出现有标签的命令非常简单，直接运行 git tag 即可：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git tag</div><div class=\"line\">v0.1</div><div class=\"line\">v1.3</div></pre></td></tr></table></figure></p>\n<p>显示的标签按字母顺序排列，所以标签的先后并不表示重要程度的轻重。</p>\n<p>我们可以用特定的搜索模式列出符合条件的标签。在 Git 自身项目仓库中，有着超过 240 个标签，如果你只对 1.4.2 系列的版本感兴趣，可以运行下面的命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git tag <span class=\"_\">-l</span> <span class=\"string\">'v1.4.2.*'</span></div><div class=\"line\">v1.4.2.1</div><div class=\"line\">v1.4.2.2</div><div class=\"line\">v1.4.2.3</div><div class=\"line\">v1.4.2.4</div></pre></td></tr></table></figure></p>\n<h4 id=\"新建标签\"><a href=\"#新建标签\" class=\"headerlink\" title=\"新建标签\"></a>新建标签</h4><p>Git 使用的标签有两种类型：轻量级的（lightweight）和含附注的（annotated）。轻量级标签就像是个不会变化的分支，实际上它就是个指向特定提交对象的引用。而含附注标签，实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，电子邮件地址和日期，以及标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证。一般我们都建议使用含附注型的标签，以便保留相关信息；当然，如果只是临时性加注标签，或者不需要旁注额外信息，用轻量级标签也没问题。</p>\n<h4 id=\"含附注的标签\"><a href=\"#含附注的标签\" class=\"headerlink\" title=\"含附注的标签\"></a>含附注的标签</h4><p>创建一个含附注类型的标签非常简单，用 -a （译注：取 annotated 的首字母）指定标签名字即可：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git tag <span class=\"_\">-a</span> v1.4 -m <span class=\"string\">'my version 1.4'</span></div><div class=\"line\">$ git tag</div><div class=\"line\">v0.1</div><div class=\"line\">v1.3</div><div class=\"line\">v1.4</div></pre></td></tr></table></figure></p>\n<p>而 -m 选项则指定了对应的标签说明，Git 会将此说明一同保存在标签对象中。如果没有给出该选项，Git 会启动文本编辑软件供你输入标签说明。</p>\n<p>可以使用 git show 命令查看相应标签的版本信息，并连同显示打标签时的提交对象。</p>\n<h4 id=\"签署标签\"><a href=\"#签署标签\" class=\"headerlink\" title=\"签署标签\"></a>签署标签</h4><p>如果你有自己的私钥，还可以用 GPG 来签署标签，只需要把之前的 -a 改为 -s （译注： 取 signed 的首字母）即可:<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git tag <span class=\"_\">-s</span> v1.5 -m <span class=\"string\">'my signed 1.5 tag'</span></div><div class=\"line\">You need a passphrase to unlock the secret key <span class=\"keyword\">for</span></div><div class=\"line\">user: <span class=\"string\">\"Scott Chacon &lt;schacon@gee-mail.com&gt;\"</span></div><div class=\"line\">1024-bit DSA key, ID F721C45A, created 2009-02-09</div></pre></td></tr></table></figure></p>\n<p>现在再运行 git show 会看到对应的 GPG 签名也附在其内：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git show v1.5</div><div class=\"line\">tag v1.5</div><div class=\"line\">Tagger: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Mon Feb 9 15:22:20 2009 -0800</div><div class=\"line\"></div><div class=\"line\">my signed 1.5 tag</div><div class=\"line\">-----BEGIN PGP SIGNATURE-----</div><div class=\"line\">Version: GnuPG v1.4.8 (Darwin)</div><div class=\"line\"></div><div class=\"line\">iEYEABECAAYFAkmQurIACgkQON3DxfchxFr5cACeIMN+ZxLKggJQf0QYiQBwgySN</div><div class=\"line\">Ki0An2JeAVUCAiJ7Ox6ZEtK+NvZAj82/</div><div class=\"line\">=WryJ</div><div class=\"line\">-----END PGP SIGNATURE-----</div><div class=\"line\">commit 15027957951b64cf874c3557a0f3547bd83b3ff6</div><div class=\"line\">Merge: 4a447f7... a6b4c97...</div><div class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Sun Feb 8 19:02:46 2009 -0800</div><div class=\"line\"></div><div class=\"line\">    Merge branch <span class=\"string\">'experiment'</span></div></pre></td></tr></table></figure></p>\n<p>现在再运行 git show 会看到对应的 GPG 签名也附在其内：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git show v1.5</div><div class=\"line\">tag v1.5</div><div class=\"line\">Tagger: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Mon Feb 9 15:22:20 2009 -0800</div><div class=\"line\"></div><div class=\"line\">my signed 1.5 tag</div><div class=\"line\">-----BEGIN PGP SIGNATURE-----</div><div class=\"line\">Version: GnuPG v1.4.8 (Darwin)</div><div class=\"line\"></div><div class=\"line\">iEYEABECAAYFAkmQurIACgkQON3DxfchxFr5cACeIMN+ZxLKggJQf0QYiQBwgySN</div><div class=\"line\">Ki0An2JeAVUCAiJ7Ox6ZEtK+NvZAj82/</div><div class=\"line\">=WryJ</div><div class=\"line\">-----END PGP SIGNATURE-----</div><div class=\"line\">commit 15027957951b64cf874c3557a0f3547bd83b3ff6</div><div class=\"line\">Merge: 4a447f7... a6b4c97...</div><div class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Sun Feb 8 19:02:46 2009 -0800</div><div class=\"line\"></div><div class=\"line\">    Merge branch <span class=\"string\">'experiment'</span></div></pre></td></tr></table></figure></p>\n<p>稍后我们再学习如何验证已经签署的标签。</p>\n<h4 id=\"轻量级标签\"><a href=\"#轻量级标签\" class=\"headerlink\" title=\"轻量级标签\"></a>轻量级标签</h4><p>轻量级标签实际上就是一个保存着对应提交对象的校验和信息的文件。要创建这样的标签，一个 -a，-s 或 -m 选项都不用，直接给出标签名字即可：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git tag v1.4-lw</div><div class=\"line\">$ git tag</div><div class=\"line\">v0.1</div><div class=\"line\">v1.3</div><div class=\"line\">v1.4</div><div class=\"line\">v1.4-lw</div><div class=\"line\">v1.5</div></pre></td></tr></table></figure></p>\n<p>现在运行 git show 查看此标签信息，就只有相应的提交对象摘要：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git show v1.4-lw</div><div class=\"line\">commit 15027957951b64cf874c3557a0f3547bd83b3ff6</div><div class=\"line\">Merge: 4a447f7... a6b4c97...</div><div class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Sun Feb 8 19:02:46 2009 -0800</div><div class=\"line\"></div><div class=\"line\">    Merge branch <span class=\"string\">'experiment'</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"验证标签\"><a href=\"#验证标签\" class=\"headerlink\" title=\"验证标签\"></a>验证标签</h4><p>可以使用 git tag -v [tag-name] （译注：取 verify 的首字母）的方式验证已经签署的标签。此命令会调用 GPG 来验证签名，所以你需要有签署者的公钥，存放在 keyring 中，才能验证：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git tag -v v1.4.2.1</div><div class=\"line\">object 883653babd8ee7ea23e6a5c392bb739348b1eb61</div><div class=\"line\"><span class=\"built_in\">type</span> commit</div><div class=\"line\">tag v1.4.2.1</div><div class=\"line\">tagger Junio C Hamano &lt;junkio@cox.net&gt; 1158138501 -0700</div><div class=\"line\"></div><div class=\"line\">GIT 1.4.2.1</div><div class=\"line\"></div><div class=\"line\">Minor fixes since 1.4.2, including git-mv and git-http with alternates.</div><div class=\"line\">gpg: Signature made Wed Sep 13 02:08:25 2006 PDT using DSA key ID F3119B9A</div><div class=\"line\">gpg: Good signature from <span class=\"string\">\"Junio C Hamano &lt;junkio@cox.net&gt;\"</span></div><div class=\"line\">gpg:                 aka <span class=\"string\">\"[jpeg image of size 1513]\"</span></div><div class=\"line\">Primary key fingerprint: 3565 2A26 2040 E066 C9A7  4A7D C0C6 D9A4 F311 9B9A</div></pre></td></tr></table></figure></p>\n<p>若是没有签署者的公钥，会报告类似下面这样的错误：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">gpg: Signature made Wed Sep 13 02:08:25 2006 PDT using DSA key ID F3119B9A</div><div class=\"line\">gpg: Can<span class=\"string\">'t check signature: public key not found</span></div><div class=\"line\">error: could not verify the tag 'v1.4.2.1<span class=\"string\">'</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"后期加注标签\"><a href=\"#后期加注标签\" class=\"headerlink\" title=\"后期加注标签\"></a>后期加注标签</h4><p>你甚至可以在后期对早先的某次提交加注标签。比如在下面展示的提交历史中：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span> --pretty=oneline</div><div class=\"line\">15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch <span class=\"string\">'experiment'</span></div><div class=\"line\">a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support</div><div class=\"line\">0d52aaab4479697da7686c15f77a3d64d9165190 one more thing</div><div class=\"line\">6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch <span class=\"string\">'experiment'</span></div><div class=\"line\">0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit <span class=\"keyword\">function</span></div><div class=\"line\">4682c3261057305bdd616e23b64b0857d832627b added a todo file</div><div class=\"line\">166ae0c4d3f420721acbb115cc33848dfcc2121a started write support</div><div class=\"line\">9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile</div><div class=\"line\">964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo</div><div class=\"line\">8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme</div></pre></td></tr></table></figure></p>\n<p>我们忘了在提交 “updated rakefile” 后为此项目打上版本号 v1.2，没关系，现在也能做。只要在打标签的时候跟上对应提交对象的校验和（或前几位字符）即可：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git tag <span class=\"_\">-a</span> v1.2 9fceb02</div></pre></td></tr></table></figure></p>\n<p>可以看到我们已经补上了标签：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git tag</div><div class=\"line\">v0.1</div><div class=\"line\">v1.2</div><div class=\"line\">v1.3</div><div class=\"line\">v1.4</div><div class=\"line\">v1.4-lw</div><div class=\"line\">v1.5</div><div class=\"line\"></div><div class=\"line\">$ git show v1.2</div><div class=\"line\">tag v1.2</div><div class=\"line\">Tagger: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Mon Feb 9 15:32:16 2009 -0800</div><div class=\"line\"></div><div class=\"line\">version 1.2</div><div class=\"line\">commit 9fceb02d0ae598e95dc970b74767f19372d61af8</div><div class=\"line\">Author: Magnus Chacon &lt;mchacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Sun Apr 27 20:43:35 2008 -0700</div><div class=\"line\"></div><div class=\"line\">    updated rakefile</div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<h4 id=\"分享标签\"><a href=\"#分享标签\" class=\"headerlink\" title=\"分享标签\"></a>分享标签</h4><p>默认情况下，git push 并不会把标签传送到远端服务器上，只有通过显式命令才能分享标签到远端仓库。其命令格式如同推送分支，运行 git push origin [tagname] 即可：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git push origin v1.5</div><div class=\"line\">Counting objects: 50, done.</div><div class=\"line\">Compressing objects: 100% (38/38), done.</div><div class=\"line\">Writing objects: 100% (44/44), 4.56 KiB, done.</div><div class=\"line\">Total 44 (delta 18), reused 8 (delta 1)</div><div class=\"line\">To git@github.com:schacon/simplegit.git</div><div class=\"line\">* [new tag]         v1.5 -&gt; v1.5</div></pre></td></tr></table></figure></p>\n<p>如果要一次推送所有本地新增的标签上去，可以使用 –tags 选项：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git push origin --tags</div><div class=\"line\">Counting objects: 50, done.</div><div class=\"line\">Compressing objects: 100% (38/38), done.</div><div class=\"line\">Writing objects: 100% (44/44), 4.56 KiB, done.</div><div class=\"line\">Total 44 (delta 18), reused 8 (delta 1)</div><div class=\"line\">To git@github.com:schacon/simplegit.git</div><div class=\"line\"> * [new tag]         v0.1 -&gt; v0.1</div><div class=\"line\"> * [new tag]         v1.2 -&gt; v1.2</div><div class=\"line\"> * [new tag]         v1.4 -&gt; v1.4</div><div class=\"line\"> * [new tag]         v1.4-lw -&gt; v1.4-lw</div><div class=\"line\"> * [new tag]         v1.5 -&gt; v1.5</div></pre></td></tr></table></figure></p>\n<p>现在，其他人克隆共享仓库或拉取数据同步后，也会看到这些标签。</p>\n<h3 id=\"技巧和窍门\"><a href=\"#技巧和窍门\" class=\"headerlink\" title=\"技巧和窍门\"></a>技巧和窍门</h3><p>在结束本章之前，我还想和大家分享一些 Git 使用的技巧和窍门。很多使用 Git 的开发者可能根本就没用过这些技巧，我们也不是说在读过本书后非得用这些技巧不可，但至少应该有所了解吧。说实话，有了这些小窍门，我们的工作可以变得更简单，更轻松，更高效。</p>\n<h4 id=\"自动补全\"><a href=\"#自动补全\" class=\"headerlink\" title=\"自动补全\"></a>自动补全</h4><p>如果你用的是 Bash shell，可以试试看 Git 提供的自动补全脚本。下载 Git 的源代码，进入 contrib/completion 目录，会看到一个 git-completion.bash 文件。将此文件复制到你自己的用户主目录中（译注：按照下面的示例，还应改名加上点：cp git-completion.bash ~/.git-completion.bash），并把下面一行内容添加到你的 .bashrc 文件中：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">source</span> ~/.git-completion.bash</div></pre></td></tr></table></figure></p>\n<p>也可以为系统上所有用户都设置默认使用此脚本。Mac 上将此脚本复制到 /opt/local/etc/bash_completion.d 目录中，Linux 上则复制到 /etc/bash_completion.d/ 目录中。这两处目录中的脚本，都会在 Bash 启动时自动加载。</p>\n<p>如果在 Windows 上安装了 msysGit，默认使用的 Git Bash 就已经配好了这个自动补全脚本，可以直接使用。</p>\n<p>在输入 Git 命令的时候可以敲两次跳格键（Tab），就会看到列出所有匹配的可用命令建议：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git co&lt;tab&gt;&lt;tab&gt;</div><div class=\"line\">commit config</div></pre></td></tr></table></figure></p>\n<p>此例中，键入 git co 然后连按两次 Tab 键，会看到两个相关的建议（命令） commit 和 config。继而输入 m<tab> 会自动完成 git commit 命令的输入。</tab></p>\n<p>命令的选项也可以用这种方式自动完成，其实这种情况更实用些。比如运行 git log 的时候忘了相关选项的名字，可以输入开头的几个字母，然后敲 Tab 键看看有哪些匹配的：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span> -<span class=\"_\">-s</span>&lt;tab&gt;</div><div class=\"line\">--shortstat  --since=  --src-prefix=  --stat   --summary</div></pre></td></tr></table></figure></p>\n<p>这个技巧不错吧，可以节省很多输入和查阅文档的时间。</p>\n<h4 id=\"Git-命令别名\"><a href=\"#Git-命令别名\" class=\"headerlink\" title=\"Git 命令别名\"></a>Git 命令别名</h4><p>Git 并不会推断你输入的几个字符将会是哪条命令，不过如果想偷懒，少敲几个命令的字符，可以用 git config 为命令设置别名。来看看下面的例子：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git config --global alias.co checkout</div><div class=\"line\">$ git config --global alias.br branch</div><div class=\"line\">$ git config --global alias.ci commit</div><div class=\"line\">$ git config --global alias.st status</div></pre></td></tr></table></figure></p>\n<p>现在，如果要输入 git commit 只需键入 git ci 即可。而随着 Git 使用的深入，会有很多经常要用到的命令，遇到这种情况，不妨建个别名提高效率。</p>\n<p>使用这种技术还可以创造出新的命令，比方说取消暂存文件时的输入比较繁琐，可以自己设置一下：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git config --global alias.unstage <span class=\"string\">'reset HEAD --'</span></div></pre></td></tr></table></figure></p>\n<p>这样一来，下面的两条命令完全等同：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git unstage fileA</div><div class=\"line\">$ git reset HEAD fileA</div></pre></td></tr></table></figure></p>\n<p>显然，使用别名的方式看起来更清楚。另外，我们还经常设置 last 命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git config --global alias.last <span class=\"string\">'log -1 HEAD'</span></div></pre></td></tr></table></figure></p>\n<p>然后要看最后一次的提交信息，就变得简单多了：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git last</div><div class=\"line\">commit 66938dae3329c7aebe598c2246a8e6af90d04646</div><div class=\"line\">Author: Josh Goebel &lt;dreamer3@example.com&gt;</div><div class=\"line\">Date:   Tue Aug 26 19:48:51 2008 +0800</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">test</span> <span class=\"keyword\">for</span> current head</div><div class=\"line\"></div><div class=\"line\">    Signed-off-by: Scott Chacon &lt;schacon@example.com&gt;</div></pre></td></tr></table></figure></p>\n<p>可以看出，实际上 Git 只是简单地在命令中替换了你设置的别名。不过有时候我们希望运行某个外部命令，而非 Git 的子命令，这个好办，只需要在命令前加上 ! 就行。如果你自己写了些处理 Git 仓库信息的脚本的话，就可以用这种技术包装起来。作为演示，我们可以设置用 git visual 启动 gitk：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git config --global alias.visual <span class=\"string\">'!gitk'</span></div></pre></td></tr></table></figure></p>\n","excerpt":"<h2 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h2><h3 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h3><p>关于版本控制<br>什么是版本控制？我为什么要关心它呢？版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。在本书所展示的例子中，我们仅对保存着软件源代码的文本文件作版本控制管理，但实际上，你可以对任何类型的文件进行版本控制。<br>","more":"</p>\n<h3 id=\"分布式版本控制系统\"><a href=\"#分布式版本控制系统\" class=\"headerlink\" title=\"分布式版本控制系统\"></a>分布式版本控制系统</h3><p>于是分布式版本控制系统（ Distributed Version Control System，简称 DVCS ）面世了。在这类系统中，像 Git，Mercurial，Bazaar 以及 Darcs 等，客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。因为每一次的提取操作，实际上都是一次对代码仓库的完整备份。<br>如果你是位图形或网页设计师，可能会需要保存某一幅图片或页面布局文件的所有修订版本（这或许是你非常渴望拥有的功能）。采用版本控制系统（VCS）是个明智的选择。有了它你就可以将某个文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态。你可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而找出导致怪异问题出现的原因，又是谁在何时报告了某个功能缺陷等等。使用版本控制系统通常还意味着，就算你乱来一气把整个项目中的文件改的改删的删，你也照样可以轻松恢复到原先的样子。但额外增加的工作量却微乎其微。</p>\n<h3 id=\"Git基础\"><a href=\"#Git基础\" class=\"headerlink\" title=\"Git基础\"></a>Git基础</h3><h4 id=\"直接记录快照，而非差异比较\"><a href=\"#直接记录快照，而非差异比较\" class=\"headerlink\" title=\"直接记录快照，而非差异比较\"></a>直接记录快照，而非差异比较</h4><p>Git 和其他版本控制系统的主要差别在于，Git 只关心文件数据的整体是否发生变化，而大多数其他系统则只关心文件内容的具体差异。这类系统（CVS，Subversion，Perforce，Bazaar 等等）每次记录有哪些文件作了更新，以及都更新了哪些行的什么内容.Git 并不保存这些前后变化的差异数据。实际上，Git 更像是把变化的文件作快照后，记录在一个微型的文件系统中。每次提交更新时，它会纵览一遍所有文件的指纹信息并对文件作一快照，然后保存一个指向这次快照的索引。为提高性能，若文件没有变化，Git 不会再次保存，而只对上次保存的快照作一链接。</p>\n<h4 id=\"近乎所有操作都是本地执行\"><a href=\"#近乎所有操作都是本地执行\" class=\"headerlink\" title=\"近乎所有操作都是本地执行\"></a>近乎所有操作都是本地执行</h4><p>在 Git 中的绝大多数操作都只需要访问本地文件和资源，不用连网。但如果用 CVCS 的话，差不多所有操作都需要连接网络。因为 Git 在本地磁盘上就保存着所有当前项目的历史更新，所以处理起来速度飞快。</p>\n<h4 id=\"文件的三种状态\"><a href=\"#文件的三种状态\" class=\"headerlink\" title=\"文件的三种状态\"></a>文件的三种状态</h4><p>对于任何一个文件，在 Git 内都只有三种状态：已提交（committed），已修改（modified）和已暂存（staged）。已提交表示该文件已经被安全地保存在本地数据库中了；已修改表示修改了某个文件，但还没有提交保存；已暂存表示把已修改的文件放在下次提交时要保存的清单中。</p>\n<h4 id=\"基本的-Git-工作流程如下：\"><a href=\"#基本的-Git-工作流程如下：\" class=\"headerlink\" title=\"基本的 Git 工作流程如下：\"></a>基本的 Git 工作流程如下：</h4><p>在工作目录中修改某些文件。<br>对修改后的文件进行快照，然后保存到暂存区域。<br>提交更新，将保存在暂存区域的文件快照永久转储到 Git 目录中。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><h4 id=\"从源代码安装\"><a href=\"#从源代码安装\" class=\"headerlink\" title=\"从源代码安装\"></a>从源代码安装</h4><p>若是条件允许，从源代码安装有很多好处，至少可以安装最新的版本。Git 的每个版本都在不断尝试改进用户体验，所以能通过源代码自己编译安装最新版本就再好不过了。有些 Linux 版本自带的安装包更新起来并不及时，所以除非你在用最新的 distro 或者 backports，那么从源代码安装其实该算是最佳选择。Git 的工作需要调用 curl，zlib，openssl，expat，libiconv 等库的代码，所以需要先安装这些依赖工具。</p>\n<h4 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h4><p>在 Ubuntu 这类 Debian 体系的系统上可以用 apt-get 安装：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ apt-get install git</div></pre></td></tr></table></figure></p>\n<h4 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h4><p>在 Windows 上安装:<a href=\"http://msysgit.github.com/\">官网</a><br>给 Windows 用户的敬告：你应该在 msysGit 提供的 Unix 风格的 shell 来运行 Git。在 Unix 风格的 shell 中，可以使用本书中提及的复杂多行的命令。对于那些需要在 Windows 命令行中使用 Git 的用户，必须注意：在参数中间有空格的时候，必须使用双引号将参数括起来（在 Linux 中是单引号）；另外，如果扬抑符（^）作为参数的结尾，并且作为这一行的最后一个字符，则这个参数也需要用双引号括起来。因为扬抑符在 Windows 命令行中表示续行（译注：即下一行为这一行命令的继续）。</p>\n<h3 id=\"初次运行-Git-前的配置\"><a href=\"#初次运行-Git-前的配置\" class=\"headerlink\" title=\"初次运行 Git 前的配置\"></a>初次运行 Git 前的配置</h3><p>一般在新的系统上，我们都需要先配置下自己的 Git 工作环境。配置工作只需一次，以后升级时还会沿用现在的配置。当然，如果需要，你随时可以用相同的命令修改已有的配置。<br>Git 提供了一个叫做 git config 的工具（译注：实际是 git-config 命令，只不过可以通过 git 加一个名字来呼叫此命令。），专门用来配置或读取相应的工作环境变量。而正是由这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：</p>\n<p>1, /etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 –system 选项，读写的就是这个文件。<br>2, ~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用 –global 选项，读写的就是这个文件。<br>3, 当前项目的 Git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。</p>\n<h4 id=\"用户信息\"><a href=\"#用户信息\" class=\"headerlink\" title=\"用户信息\"></a>用户信息</h4><p>第一个要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name <span class=\"string\">\"John Doe\"</span></div><div class=\"line\">$ git config --global user.email johndoe@example.com</div></pre></td></tr></table></figure></p>\n<p>如果用了 –global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 –global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。</p>\n<h4 id=\"文本编辑器\"><a href=\"#文本编辑器\" class=\"headerlink\" title=\"文本编辑器\"></a>文本编辑器</h4><p>接下来要设置的是默认使用的文本编辑器。Git 需要你输入一些额外消息的时候，会自动调用一个外部文本编辑器给你用。默认会使用操作系统指定的默认编辑器，一般可能会是 Vi 或者 Vim。如果你有其他偏好，比如 Emacs 的话，可以重新设置：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git config --global core.editor emacs</div></pre></td></tr></table></figure></p>\n<h4 id=\"差异分析工具\"><a href=\"#差异分析工具\" class=\"headerlink\" title=\"差异分析工具\"></a>差异分析工具</h4><p>还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用 vimdiff 的话：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git config --global merge.tool vimdiff</div></pre></td></tr></table></figure></p>\n<p>Git 可以理解 kdiff3，tkdiff，meld，xxdiff，emerge，vimdiff，gvimdiff，ecmerge，和 opendiff 等合并工具的输出信息。当然，你也可以指定使用自己开发的工具，具体怎么做可以参阅第七章。</p>\n<h4 id=\"查看配置信息\"><a href=\"#查看配置信息\" class=\"headerlink\" title=\"查看配置信息\"></a>查看配置信息</h4><p>要检查已有的配置信息，可以使用 git config –list 命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git config --list</div><div class=\"line\">user.name=Scott Chacon</div><div class=\"line\">user.email=schacon@gmail.com</div><div class=\"line\">color.status=auto</div><div class=\"line\">color.branch=auto</div><div class=\"line\">color.interactive=auto</div><div class=\"line\">color.diff=auto</div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<p>有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 /etc/gitconfig 和 ~/.gitconfig），不过最终 Git 实际采用的是最后一个。</p>\n<p>也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git config user.name</div><div class=\"line\">Scott Chacon</div></pre></td></tr></table></figure></p>\n<h3 id=\"获取帮助\"><a href=\"#获取帮助\" class=\"headerlink\" title=\"获取帮助\"></a>获取帮助</h3><p>想了解 Git 的各式工具该怎么用，可以阅读它们的使用帮助，方法有三：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">help</span> &lt;verb&gt;</div><div class=\"line\">$ git &lt;verb&gt; --help</div><div class=\"line\">$ man git-&lt;verb&gt;</div></pre></td></tr></table></figure></p>\n<p>我们随时都可以浏览这些帮助信息而无需连网。 不过，要是你觉得还不够，可以到 Freenode IRC 服务器（irc.freenode.net）上的 #git 或 #github 频道寻求他人帮助。这两个频道上总有着上百号人，大多都有着丰富的 Git 知识，并且乐于助人。</p>\n<h2 id=\"Git基础-1\"><a href=\"#Git基础-1\" class=\"headerlink\" title=\"Git基础\"></a>Git基础</h2><h3 id=\"取得项目的-Git-仓库\"><a href=\"#取得项目的-Git-仓库\" class=\"headerlink\" title=\"取得项目的 Git 仓库\"></a>取得项目的 Git 仓库</h3><p>有两种取得 Git 项目仓库的方法。第一种是在现存的目录下，通过导入所有文件来创建新的 Git 仓库。第二种是从已有的 Git 仓库克隆出一个新的镜像仓库来。</p>\n<h4 id=\"在工作目录中初始化新仓库\"><a href=\"#在工作目录中初始化新仓库\" class=\"headerlink\" title=\"在工作目录中初始化新仓库\"></a>在工作目录中初始化新仓库</h4><p>要对现有的某个项目开始用 Git 管理，只需到此项目所在的目录，执行：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git init</div></pre></td></tr></table></figure></p>\n<p>初始化后，在当前目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。不过目前，仅仅是按照既有的结构框架初始化好了里边所有的文件和目录，但我们还没有开始跟踪管理项目中的任何一个文件。（在第九章我们会详细说明刚才创建的 .git 目录中究竟有哪些文件，以及都起些什么作用。）<br>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git add *.c</div><div class=\"line\">$ git add README</div><div class=\"line\">$ git commit -m <span class=\"string\">'initial project version'</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"从现有仓库克隆\"><a href=\"#从现有仓库克隆\" class=\"headerlink\" title=\"从现有仓库克隆\"></a>从现有仓库克隆</h4><p>如果想对某个开源项目出一份力，可以先把该项目的 Git 仓库复制一份出来，这就需要用到 git clone 命令。如果你熟悉其他的 VCS 比如 Subversion，你可能已经注意到这里使用的是 clone 而不是 checkout。这是个非常重要的差别，Git 收取的是项目历史的所有数据（每一个文件的每一个版本），服务器上有的数据克隆之后本地也都有了。实际上，即便服务器的磁盘发生故障，用任何一个克隆出来的客户端都可以重建服务器上的仓库，回到当初克隆时的状态（虽然可能会丢失某些服务器端的挂钩设置，但所有版本的数据仍旧还在，有关细节请参考第四章）。</p>\n<p>克隆仓库的命令格式为 git clone [url]。比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> git://github.com/schacon/grit.git</div></pre></td></tr></table></figure></p>\n<p>这会在当前目录下创建一个名为grit的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录，然后从中取出最新版本的文件拷贝。如果进入这个新建的 grit 目录，你会看到项目中的所有文件已经在里边了，准备好后续的开发和使用。如果希望在克隆的时候，自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> git://github.com/schacon/grit.git mygrit</div></pre></td></tr></table></figure></p>\n<p>唯一的差别就是，现在新建的目录成了 mygrit，其他的都和上边的一样。</p>\n<p>Git 支持许多数据传输协议。之前的例子使用的是 git:// 协议，不过你也可以用 http(s):// 或者 user@server:/path.git 表示的 SSH 传输协议。我们会在第四章详细介绍所有这些协议在服务器端该如何配置使用，以及各种方式之间的利弊。</p>\n<h3 id=\"记录每次更新到仓库\"><a href=\"#记录每次更新到仓库\" class=\"headerlink\" title=\"记录每次更新到仓库\"></a>记录每次更新到仓库</h3><p>现在我们手上已经有了一个真实项目的 Git 仓库，并从这个仓库中取出了所有文件的工作拷贝。接下来，对这些文件作些修改，在完成了一个阶段的目标之后，提交本次更新到仓库。</p>\n<p>请记住，工作目录下面的所有文件都不外乎这两种状态：已跟踪或未跟踪。已跟踪的文件是指本来就被纳入版本控制管理的文件，在上次快照中有它们的记录，工作一段时间后，它们的状态可能是未更新，已修改或者已放入暂存区。而所有其他文件都属于未跟踪文件。它们既没有上次更新时的快照，也不在当前的暂存区域。初次克隆某个仓库时，工作目录中的所有文件都属于已跟踪文件，且状态为未修改。</p>\n<p>在编辑过某些文件之后，Git 将这些文件标为已修改。我们逐步把这些修改过的文件放到暂存区域，直到最后一次性提交所有这些暂存起来的文件，如此重复。</p>\n<h4 id=\"检查当前文件状态\"><a href=\"#检查当前文件状态\" class=\"headerlink\" title=\"检查当前文件状态\"></a>检查当前文件状态</h4><p>要确定哪些文件当前处于什么状态，可以用 git status 命令。如果在克隆仓库之后立即执行此命令，会看到类似这样的输出：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">nothing to commit, working directory clean</div></pre></td></tr></table></figure></p>\n<p>这说明你现在的工作目录相当干净。换句话说，所有已跟踪文件在上次提交后都未被更改过。此外，上面的信息还表明，当前目录下没有出现任何处于未跟踪的新文件，否则 Git 会在这里列出来。最后，该命令还显示了当前所在的分支是 master，这是默认的分支名称，实际是可以修改的，现在先不用考虑。下一章我们就会详细讨论分支和引用。</p>\n<p>现在让我们用 vim 创建一个新文件 README，保存退出后运行 git status 会看到该文件出现在未跟踪文件列表中：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ vim README\t\t<span class=\"comment\">#自学vim编辑器</span></div><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Untracked files:</div><div class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to include <span class=\"keyword\">in</span> what will be committed)</div><div class=\"line\"></div><div class=\"line\">        README</div><div class=\"line\"></div><div class=\"line\">nothing added to commit but untracked files present (use <span class=\"string\">\"git add\"</span> to track)</div></pre></td></tr></table></figure></p>\n<p>在状态报告中可以看到新建的README文件出现在“Untracked files”下面。未跟踪的文件意味着Git在之前的快照（提交）中没有这些文件；Git 不会自动将之纳入跟踪范围，除非你明明白白地告诉它“我需要跟踪该文件”，因而不用担心把临时文件什么的也归入版本管理。不过现在的例子中，我们确实想要跟踪管理 README 这个文件。</p>\n<h4 id=\"跟踪新文件\"><a href=\"#跟踪新文件\" class=\"headerlink\" title=\"跟踪新文件\"></a>跟踪新文件</h4><p>使用命令 git add 开始跟踪一个新文件。所以，要跟踪 README 文件，运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git add README</div></pre></td></tr></table></figure></p>\n<p>此时再运行 git status 命令，会看到 README 文件已被跟踪，并处于暂存状态：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Changes to be committed:</div><div class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</div><div class=\"line\"></div><div class=\"line\">        new file:   README</div></pre></td></tr></table></figure></p>\n<p>只要在 “Changes to be committed” 这行下面的，就说明是已暂存状态。如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。你可能会想起之前我们使用 git init 后就运行了 git add 命令，开始跟踪当前目录下的文件。在 git add 后面可以指明要跟踪的文件或目录路径。如果是目录的话，就说明要递归跟踪该目录下的所有文件。（译注：其实 git add 的潜台词就是把目标文件快照放入暂存区域，也就是 add file into staged area，同时未曾跟踪过的文件标记为需要跟踪。这样就好理解后续 add 操作的实际意义了。）</p>\n<h4 id=\"暂存已修改文件\"><a href=\"#暂存已修改文件\" class=\"headerlink\" title=\"暂存已修改文件\"></a>暂存已修改文件</h4><p>现在我们修改下之前已跟踪过的文件 benchmarks.rb，然后再次运行 status 命令，会看到这样的状态报告：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Changes to be committed:</div><div class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</div><div class=\"line\"></div><div class=\"line\">        new file:   README</div><div class=\"line\"></div><div class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</div><div class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to update what will be committed)</div><div class=\"line\">  (use <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"keyword\">in</span> working directory)</div><div class=\"line\"></div><div class=\"line\">        modified:   benchmarks.rb</div></pre></td></tr></table></figure></p>\n<p>文件 benchmarks.rb 出现在 “Changes not staged for commit” 这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。要暂存这次更新，需要运行 git add 命令（这是个多功能命令，根据目标文件的状态不同，此命令的效果也不同：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等）。现在让我们运行 git add 将 benchmarks.rb 放到暂存区，然后再看看 git status 的输出：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git add benchmarks.rb</div><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Changes to be committed:</div><div class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</div><div class=\"line\"></div><div class=\"line\">        new file:   README</div><div class=\"line\">        modified:   benchmarks.rb</div></pre></td></tr></table></figure></p>\n<p>现在两个文件都已暂存，下次提交时就会一并记录到仓库。假设此时，你想要在 benchmarks.rb 里再加条注释，重新编辑存盘后，准备好提交。不过且慢，再运行 git status 看看：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ vim benchmarks.rb</div><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Changes to be committed:</div><div class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</div><div class=\"line\"></div><div class=\"line\">        new file:   README</div><div class=\"line\">        modified:   benchmarks.rb</div><div class=\"line\"></div><div class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</div><div class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to update what will be committed)</div><div class=\"line\">  (use <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"keyword\">in</span> working directory)</div><div class=\"line\"></div><div class=\"line\">        modified:   benchmarks.rb</div></pre></td></tr></table></figure></p>\n<p>怎么回事？ benchmarks.rb 文件出现了两次！一次算未暂存，一次算已暂存，这怎么可能呢？好吧，实际上 Git 只不过暂存了你运行 git add 命令时的版本，如果现在提交，那么提交的是添加注释前的版本，而非当前工作目录中的版本。所以，运行了 git add 之后又作了修订的文件，需要重新运行 git add 把最新版本重新暂存起来：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git add benchmarks.rb</div><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Changes to be committed:</div><div class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</div><div class=\"line\"></div><div class=\"line\">        new file:   README</div><div class=\"line\">        modified:   benchmarks.rb</div></pre></td></tr></table></figure></p>\n<h4 id=\"忽略某些文件\"><a href=\"#忽略某些文件\" class=\"headerlink\" title=\"忽略某些文件\"></a>忽略某些文件</h4><p>一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式。来看一个实际的例子：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ cat .gitignore</div><div class=\"line\">*.[oa]</div><div class=\"line\">*~</div></pre></td></tr></table></figure></p>\n<p>第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件。一般这类对象文件和存档文件都是编译过程中出现的，我们用不着跟踪它们的版本。第二行告诉 Git 忽略所有以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存副本。此外，你可能还需要忽略 log，tmp 或者 pid 目录，以及自动生成的文档等等。要养成一开始就设置好 .gitignore 文件的习惯，以免将来误提交这类无用的文件。</p>\n<p>文件 .gitignore 的格式规范如下：</p>\n<p>1, 所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。<br>2, 可以使用标准的 glob 模式匹配。<br>3, 匹配模式最后跟反斜杠（/）说明要忽略的是目录。<br>4, 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。</p>\n<p>所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。星号（*）匹配零个或多个任意字符；[abc] 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（?）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。<br>我们再看一个 .gitignore 文件的例子：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 此为注释 – 将被 Git 忽略</span></div><div class=\"line\"><span class=\"comment\"># 忽略所有 .a 结尾的文件</span></div><div class=\"line\">*.a</div><div class=\"line\"><span class=\"comment\"># 但 lib.a 除外</span></div><div class=\"line\">!lib.a</div><div class=\"line\"><span class=\"comment\"># 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</span></div><div class=\"line\">/TODO</div><div class=\"line\"><span class=\"comment\"># 忽略 build/ 目录下的所有文件</span></div><div class=\"line\">build/</div><div class=\"line\"><span class=\"comment\"># 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></div><div class=\"line\">doc/*.txt</div><div class=\"line\"><span class=\"comment\"># ignore all .txt files in the doc/ directory</span></div><div class=\"line\">doc/**/*.txt</div></pre></td></tr></table></figure></p>\n<p>A **/ pattern is available in Git since version 1.8.2.</p>\n<h4 id=\"查看已暂存和未暂存的更新\"><a href=\"#查看已暂存和未暂存的更新\" class=\"headerlink\" title=\"查看已暂存和未暂存的更新\"></a>查看已暂存和未暂存的更新</h4><p>实际上 git status 的显示比较简单，仅仅是列出了修改过的文件，如果要查看具体修改了什么地方，可以用 git diff 命令。稍后我们会详细介绍 git diff，不过现在，它已经能回答我们的两个问题了：当前做的哪些更新还没有暂存？有哪些更新已经暂存起来准备好了下次提交？ git diff 会使用文件补丁的格式显示具体添加和删除的行。</p>\n<p>假如再次修改 README 文件后暂存，然后编辑 benchmarks.rb 文件后先别暂存，运行 status 命令将会看到：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git diff</div><div class=\"line\">diff --git a/benchmarks.rb b/benchmarks.rb</div><div class=\"line\">index 3cb747f..da65585 100644</div><div class=\"line\">--- a/benchmarks.rb</div><div class=\"line\">+++ b/benchmarks.rb</div><div class=\"line\">@@ -36,6 +36,10 @@ def main</div><div class=\"line\">           @commit.parents[0].parents[0].parents[0]</div><div class=\"line\">         end</div><div class=\"line\"></div><div class=\"line\">+        run_code(x, <span class=\"string\">'commits 1'</span>) <span class=\"keyword\">do</span></div><div class=\"line\">+          git.commits.size</div><div class=\"line\">+        end</div><div class=\"line\">+</div><div class=\"line\">         run_code(x, <span class=\"string\">'commits 2'</span>) <span class=\"keyword\">do</span></div><div class=\"line\">           <span class=\"built_in\">log</span> = git.commits(<span class=\"string\">'master'</span>, 15)</div><div class=\"line\">           log.size</div></pre></td></tr></table></figure></p>\n<p>此命令比较的是工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化内容。</p>\n<p>若要看已经暂存起来的文件和上次提交时的快照之间的差异，可以用 git diff –cached 命令。（Git 1.6.1 及更高版本还允许使用 git diff –staged，效果是相同的，但更好记些。）来看看实际的效果：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git diff --cached</div><div class=\"line\">diff --git a/README b/README</div><div class=\"line\">new file mode 100644</div><div class=\"line\">index 0000000..03902a1</div><div class=\"line\">--- /dev/null</div><div class=\"line\">+++ b/README2</div><div class=\"line\">@@ -0,0 +1,5 @@</div><div class=\"line\">+grit</div><div class=\"line\">+ by Tom Preston-Werner, Chris Wanstrath</div><div class=\"line\">+ http://github.com/mojombo/grit</div><div class=\"line\">+</div><div class=\"line\">+Grit is a Ruby library <span class=\"keyword\">for</span> extracting information from a Git repository</div></pre></td></tr></table></figure></p>\n<p>像之前说的，暂存 benchmarks.rb 后再编辑，运行 git status 会看到暂存前后的两个版本：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git add benchmarks.rb</div><div class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">'# test line'</span> &gt;&gt; benchmarks.rb</div><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Changes to be committed:</div><div class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</div><div class=\"line\"></div><div class=\"line\">        modified:   benchmarks.rb</div><div class=\"line\"></div><div class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</div><div class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to update what will be committed)</div><div class=\"line\">  (use <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"keyword\">in</span> working directory)</div><div class=\"line\"></div><div class=\"line\">        modified:   benchmarks.rb</div></pre></td></tr></table></figure></p>\n<p>现在运行 git diff 看暂存前后的变化：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git diff</div><div class=\"line\">diff --git a/benchmarks.rb b/benchmarks.rb</div><div class=\"line\">index e445e28..86b2f7c 100644</div><div class=\"line\">--- a/benchmarks.rb</div><div class=\"line\">+++ b/benchmarks.rb</div><div class=\"line\">@@ -127,3 +127,4 @@ end</div><div class=\"line\"> main()</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">##pp Grit::GitRuby.cache_client.stats</span></div><div class=\"line\">+<span class=\"comment\"># test line</span></div></pre></td></tr></table></figure></p>\n<p>然后用 git diff –cached 查看已经暂存起来的变化：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git diff --cached</div><div class=\"line\">diff --git a/benchmarks.rb b/benchmarks.rb</div><div class=\"line\">index 3cb747f..e445e28 100644</div><div class=\"line\">--- a/benchmarks.rb</div><div class=\"line\">+++ b/benchmarks.rb</div><div class=\"line\">@@ -36,6 +36,10 @@ def main</div><div class=\"line\">          @commit.parents[0].parents[0].parents[0]</div><div class=\"line\">        end</div><div class=\"line\"></div><div class=\"line\">+        run_code(x, <span class=\"string\">'commits 1'</span>) <span class=\"keyword\">do</span></div><div class=\"line\">+          git.commits.size</div><div class=\"line\">+        end</div><div class=\"line\">+</div><div class=\"line\">        run_code(x, <span class=\"string\">'commits 2'</span>) <span class=\"keyword\">do</span></div><div class=\"line\">          <span class=\"built_in\">log</span> = git.commits(<span class=\"string\">'master'</span>, 15)</div><div class=\"line\">          log.size</div></pre></td></tr></table></figure></p>\n<h4 id=\"提交更新\"><a href=\"#提交更新\" class=\"headerlink\" title=\"提交更新\"></a>提交更新</h4><p>现在的暂存区域已经准备妥当可以提交了。在此之前，请一定要确认还有什么修改过的或新建的文件还没有 git add 过，否则提交的时候不会记录这些还没暂存起来的变化。所以，每次准备提交前，先用 git status 看下，是不是都已暂存起来了，然后再运行提交命令 git commit：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git commit</div></pre></td></tr></table></figure></p>\n<p>这种方式会启动文本编辑器以便输入本次提交的说明。（默认会启用 shell 的环境变量 $EDITOR 所指定的软件，一般都是 vim 或 emacs。当然也可以按照第一章介绍的方式，使用 git config –global core.editor 命令设定你喜欢的编辑软件。）</p>\n<p>编辑器会显示类似下面的文本信息（本例选用 Vim 的屏显方式展示）：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Please enter the commit message for your changes. Lines starting</span></div><div class=\"line\"><span class=\"comment\"># with '#' will be ignored, and an empty message aborts the commit.</span></div><div class=\"line\"><span class=\"comment\"># On branch master</span></div><div class=\"line\"><span class=\"comment\"># Changes to be committed:</span></div><div class=\"line\"><span class=\"comment\">#       new file:   README</span></div><div class=\"line\"><span class=\"comment\">#       modified:   benchmarks.rb</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\">~</div><div class=\"line\">~</div><div class=\"line\">~</div><div class=\"line\"><span class=\"string\">\".git/COMMIT_EDITMSG\"</span> 10L, 283C</div></pre></td></tr></table></figure></p>\n<p>可以看到，默认的提交消息包含最后一次运行 git status 的输出，放在注释行里，另外开头还有一空行，供你输入提交说明。你完全可以去掉这些注释行，不过留着也没关系，多少能帮你回想起这次更新的内容有哪些。（如果觉得这还不够，可以用 -v 选项将修改差异的每一行都包含到注释中来。）退出编辑器时，Git 会丢掉注释行，将说明内容和本次更新提交到仓库。</p>\n<p>另外也可以用 -m 参数后跟提交说明的方式，在一行命令中提交更新：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git commit -m <span class=\"string\">\"Story 182: Fix benchmarks for speed\"</span></div><div class=\"line\">[master 463dc4f] Story 182: Fix benchmarks <span class=\"keyword\">for</span> speed</div><div class=\"line\"> 2 files changed, 3 insertions(+)</div><div class=\"line\"> create mode 100644 README</div></pre></td></tr></table></figure></p>\n<p>好，现在你已经创建了第一个提交！可以看到，提交后它会告诉你，当前是在哪个分支（master）提交的，本次提交的完整 SHA-1 校验和是什么（463dc4f），以及在本次提交中，有多少文件修订过，多少行添改和删改过。</p>\n<p>记住，提交时的记录是放在暂存区域的快照，任何还未暂存的仍然保持已修改状态，可以在下次提交时纳入版本管理。每一次运行提交操作，都是对你项目作一次快照，以后可以回到这个状态，或者进行比较。</p>\n<h3 id=\"跳过使用暂存区域\"><a href=\"#跳过使用暂存区域\" class=\"headerlink\" title=\"跳过使用暂存区域\"></a>跳过使用暂存区域</h3><p>尽管使用暂存区域的方式可以精心准备要提交的细节，但有时候这么做略显繁琐。Git 提供了一个跳过使用暂存区域的方式，只要在提交的时候，给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</div><div class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to update what will be committed)</div><div class=\"line\">  (use <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"keyword\">in</span> working directory)</div><div class=\"line\"></div><div class=\"line\">        modified:   benchmarks.rb</div><div class=\"line\"></div><div class=\"line\">no changes added to commit (use <span class=\"string\">\"git add\"</span> and/or <span class=\"string\">\"git commit -a\"</span>)</div><div class=\"line\">$ git commit <span class=\"_\">-a</span> -m <span class=\"string\">'added new benchmarks'</span></div><div class=\"line\">[master 83e38c7] added new benchmarks</div><div class=\"line\"> 1 files changed, 5 insertions(+)</div></pre></td></tr></table></figure></p>\n<p>看到了吗？提交之前不再需要 git add 文件 benchmarks.rb 了。</p>\n<h4 id=\"移除文件\"><a href=\"#移除文件\" class=\"headerlink\" title=\"移除文件\"></a>移除文件</h4><p>要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。可以用 git rm 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。</p>\n<p>如果只是简单地从工作目录中手工删除文件，运行 git status 时就会在 “Changes not staged for commit” 部分（也就是未暂存清单）看到：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ rm grit.gemspec</div><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</div><div class=\"line\">  (use <span class=\"string\">\"git add/rm &lt;file&gt;...\"</span> to update what will be committed)</div><div class=\"line\">  (use <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"keyword\">in</span> working directory)</div><div class=\"line\"></div><div class=\"line\">        deleted:    grit.gemspec</div><div class=\"line\"></div><div class=\"line\">no changes added to commit (use <span class=\"string\">\"git add\"</span> and/or <span class=\"string\">\"git commit -a\"</span>)</div></pre></td></tr></table></figure></p>\n<p>然后再运行 git rm 记录此次移除文件的操作：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git rm grit.gemspec</div><div class=\"line\">rm <span class=\"string\">'grit.gemspec'</span></div><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Changes to be committed:</div><div class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</div><div class=\"line\"></div><div class=\"line\">        deleted:    grit.gemspec</div></pre></td></tr></table></figure></p>\n<p>最后提交的时候，该文件就不再纳入版本管理了。如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f（译注：即 force 的首字母），以防误删除文件后丢失修改的内容。</p>\n<p>另外一种情况是，我们想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。换句话说，仅是从跟踪清单中删除。比如一些大型日志文件或者一堆 .a 编译文件，不小心纳入仓库后，要移除跟踪但不删除文件，以便稍后在 .gitignore 文件中补上，用 –cached 选项即可：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git rm --cached readme.txt</div></pre></td></tr></table></figure></p>\n<p>后面可以列出文件或者目录的名字，也可以使用 glob 模式。比方说：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git rm <span class=\"built_in\">log</span>/\\*.log</div></pre></td></tr></table></figure></p>\n<p>注意到星号 * 之前的反斜杠 \\，因为 Git 有它自己的文件模式扩展匹配方式，所以我们不用 shell 来帮忙展开（译注：实际上不加反斜杠也可以运行，只不过按照 shell 扩展的话，仅仅删除指定目录下的文件而不会递归匹配。上面的例子本来就指定了目录，所以效果等同，但下面的例子就会用递归方式匹配，所以必须加反斜杠。）。此命令删除所有 log/ 目录下扩展名为 .log 的文件。类似的比如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git rm \\*~</div></pre></td></tr></table></figure></p>\n<p>会递归删除当前目录及其子目录中所有 ~ 结尾的文件。</p>\n<h4 id=\"移动文件\"><a href=\"#移动文件\" class=\"headerlink\" title=\"移动文件\"></a>移动文件</h4><p>不像其他的 VCS 系统，Git 并不跟踪文件移动操作。如果在 Git 中重命名了某个文件，仓库中存储的元数据并不会体现出这是一次改名操作。不过 Git 非常聪明，它会推断出究竟发生了什么，至于具体是如何做到的，我们稍后再谈。</p>\n<p>既然如此，当你看到 Git 的 mv 命令时一定会困惑不已。要在 Git 中对文件改名，可以这么做：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git mv file_from file_to</div></pre></td></tr></table></figure></p>\n<p>它会恰如预期般正常工作。实际上，即便此时查看状态信息，也会明白无误地看到关于重命名操作的说明：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git mv README.txt README</div><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Changes to be committed:</div><div class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</div><div class=\"line\"></div><div class=\"line\">        renamed:    README.txt -&gt; README</div></pre></td></tr></table></figure></p>\n<p>其实，运行 git mv 就相当于运行了下面三条命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ mv README.txt README</div><div class=\"line\">$ git rm README.txt</div><div class=\"line\">$ git add README</div></pre></td></tr></table></figure></p>\n<p>如此分开操作，Git 也会意识到这是一次改名，所以不管何种方式都一样。当然，直接用 git mv 轻便得多，不过有时候用其他工具批处理改名的话，要记得在提交前删除老的文件名，再添加新的文件名。</p>\n<h4 id=\"查看提交历史\"><a href=\"#查看提交历史\" class=\"headerlink\" title=\"查看提交历史\"></a>查看提交历史</h4><p>在提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，可以使用 git log 命令查看。</p>\n<p>接下来的例子会用我专门用于演示的 simplegit 项目，运行下面的命令获取该项目源代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/schacon/simplegit-progit.git</div></pre></td></tr></table></figure></p>\n<p>然后在此项目中运行 git log，应该会看到下面的输出：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span></div><div class=\"line\">commit ca82a6dff817ec66f44342007202690a93763949</div><div class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Mon Mar 17 21:52:11 2008 -0700</div><div class=\"line\"></div><div class=\"line\">    changed the version number</div><div class=\"line\"></div><div class=\"line\">commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7</div><div class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Sat Mar 15 16:40:33 2008 -0700</div><div class=\"line\"></div><div class=\"line\">    removed unnecessary <span class=\"built_in\">test</span> code</div><div class=\"line\"></div><div class=\"line\">commit a11bef06a3f659402fe7563abf99ad00de2209e6</div><div class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Sat Mar 15 10:31:28 2008 -0700</div><div class=\"line\"></div><div class=\"line\">    first commit</div></pre></td></tr></table></figure></p>\n<p>默认不用任何参数的话，git log 会按提交时间列出所有的更新，最近的更新排在最上面。看到了吗，每次更新都有一个 SHA-1 校验和、作者的名字和电子邮件地址、提交时间，最后缩进一个段落显示提交说明。</p>\n<p>git log 有许多选项可以帮助你搜寻感兴趣的提交，接下来我们介绍些最常用的。</p>\n<p>我们常用 -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span> -p -2</div><div class=\"line\">commit ca82a6dff817ec66f44342007202690a93763949</div><div class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Mon Mar 17 21:52:11 2008 -0700</div><div class=\"line\"></div><div class=\"line\">    changed the version number</div><div class=\"line\"></div><div class=\"line\">diff --git a/Rakefile b/Rakefile</div><div class=\"line\">index a874b73..8f94139 100644</div><div class=\"line\">--- a/Rakefile</div><div class=\"line\">+++ b/Rakefile</div><div class=\"line\">@@ -5,5 +5,5 @@ require <span class=\"string\">'rake/gempackagetask'</span></div><div class=\"line\"> spec = Gem::Specification.new <span class=\"keyword\">do</span> |s|</div><div class=\"line\">     s.name      =   <span class=\"string\">\"simplegit\"</span></div><div class=\"line\">-    s.version   =   <span class=\"string\">\"0.1.0\"</span></div><div class=\"line\">+    s.version   =   <span class=\"string\">\"0.1.1\"</span></div><div class=\"line\">     s.author    =   <span class=\"string\">\"Scott Chacon\"</span></div><div class=\"line\">     s.email     =   <span class=\"string\">\"schacon@gee-mail.com</div><div class=\"line\"></div><div class=\"line\">commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7</div><div class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Sat Mar 15 16:40:33 2008 -0700</div><div class=\"line\"></div><div class=\"line\">    removed unnecessary test code</div><div class=\"line\"></div><div class=\"line\">diff --git a/lib/simplegit.rb b/lib/simplegit.rb</div><div class=\"line\">index a0a60ae..47c6340 100644</div><div class=\"line\">--- a/lib/simplegit.rb</div><div class=\"line\">+++ b/lib/simplegit.rb</div><div class=\"line\">@@ -18,8 +18,3 @@ class SimpleGit</div><div class=\"line\">     end</div><div class=\"line\"></div><div class=\"line\"> end</div><div class=\"line\">-</div><div class=\"line\">-if <span class=\"variable\">$0</span> == __FILE__</div><div class=\"line\">-  git = SimpleGit.new</div><div class=\"line\">-  puts git.show</div><div class=\"line\">-end</div><div class=\"line\">\\ No newline at end of file</span></div></pre></td></tr></table></figure></p>\n<p>该选项除了显示基本信息之外，还在附带了每次 commit 的变化。当进行代码审查，或者快速浏览某个搭档提交的 commit 的变化的时候，这个参数就非常有用了。</p>\n<p>某些时候，单词层面的对比，比行层面的对比，更加容易观察。Git 提供了 –word-diff 选项。我们可以将其添加到 git log -p 命令的后面，从而获取单词层面上的对比。在程序代码中进行单词层面的对比常常是没什么用的。不过当你需要在书籍、论文这种很大的文本文件上进行对比的时候，这个功能就显出用武之地了。下面是一个简单的例子：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span> -U1 --word-diff</div><div class=\"line\">commit ca82a6dff817ec66f44342007202690a93763949</div><div class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Mon Mar 17 21:52:11 2008 -0700</div><div class=\"line\"></div><div class=\"line\">    changed the version number</div><div class=\"line\"></div><div class=\"line\">diff --git a/Rakefile b/Rakefile</div><div class=\"line\">index a874b73..8f94139 100644</div><div class=\"line\">--- a/Rakefile</div><div class=\"line\">+++ b/Rakefile</div><div class=\"line\">@@ -7,3 +7,3 @@ spec = Gem::Specification.new <span class=\"keyword\">do</span> |s|</div><div class=\"line\">    s.name      =   <span class=\"string\">\"simplegit\"</span></div><div class=\"line\">    s.version   =   [-<span class=\"string\">\"0.1.0\"</span>-]&#123;+<span class=\"string\">\"0.1.1\"</span>+&#125;</div><div class=\"line\">    s.author    =   <span class=\"string\">\"Scott Chacon\"</span></div></pre></td></tr></table></figure></p>\n<p>如你所见，这里并没有平常看到的添加行或者删除行的信息。这里的对比显示在行间。新增加的单词被 {+ +} 括起来，被删除的单词被 [- -] 括起来。在进行单词层面的对比的时候，你可能希望上下文（ context ）行数从默认的 3 行，减为 1 行，那么可以使用 -U1 选项。上面的例子中，我们就使用了这个选项。</p>\n<p>另外，git log 还提供了许多摘要选项可以用，比如 –stat，仅显示简要的增改行数统计：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span> --stat</div><div class=\"line\">commit ca82a6dff817ec66f44342007202690a93763949</div><div class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Mon Mar 17 21:52:11 2008 -0700</div><div class=\"line\"></div><div class=\"line\">    changed the version number</div><div class=\"line\"></div><div class=\"line\"> Rakefile |    2 +-</div><div class=\"line\"> 1 file changed, 1 insertion(+), 1 deletion(-)</div><div class=\"line\"></div><div class=\"line\">commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7</div><div class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Sat Mar 15 16:40:33 2008 -0700</div><div class=\"line\"></div><div class=\"line\">    removed unnecessary <span class=\"built_in\">test</span> code</div><div class=\"line\"></div><div class=\"line\"> lib/simplegit.rb |    5 -----</div><div class=\"line\"> 1 file changed, 5 deletions(-)</div><div class=\"line\"></div><div class=\"line\">commit a11bef06a3f659402fe7563abf99ad00de2209e6</div><div class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Sat Mar 15 10:31:28 2008 -0700</div><div class=\"line\"></div><div class=\"line\">    first commit</div><div class=\"line\"></div><div class=\"line\"> README           |    6 ++++++</div><div class=\"line\"> Rakefile         |   23 +++++++++++++++++++++++</div><div class=\"line\"> lib/simplegit.rb |   25 +++++++++++++++++++++++++</div><div class=\"line\"> 3 files changed, 54 insertions(+)</div></pre></td></tr></table></figure></p>\n<p>每个提交都列出了修改过的文件，以及其中添加和移除的行数，并在最后列出所有增减行数小计。 还有个常用的 –pretty 选项，可以指定使用完全不同于默认格式的方式展示提交历史。比如用 oneline 将每个提交放在一行显示，这在提交数很大时非常有用。另外还有 short，full 和 fuller 可以用，展示的信息或多或少有些不同，请自己动手实践一下看看效果如何。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span> --pretty=oneline</div><div class=\"line\">ca82a6dff817ec66f44342007202690a93763949 changed the version number</div><div class=\"line\">085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary <span class=\"built_in\">test</span> code</div><div class=\"line\">a11bef06a3f659402fe7563abf99ad00de2209e6 first commit</div></pre></td></tr></table></figure></p>\n<p>但最有意思的是 format，可以定制要显示的记录格式，这样的输出便于后期编程提取分析，像这样：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span> --pretty=format:<span class=\"string\">\"%h - %an, %ar : %s\"</span></div><div class=\"line\">ca82a6d - Scott Chacon, 11 months ago : changed the version number</div><div class=\"line\">085bb3b - Scott Chacon, 11 months ago : removed unnecessary <span class=\"built_in\">test</span> code</div><div class=\"line\">a11bef0 - Scott Chacon, 11 months ago : first commit</div></pre></td></tr></table></figure></p>\n<p>表 2-1 列出了常用的格式占位符写法及其代表的意义。</p>\n<!-- Attention to translators: this is a table declaration. The lines must be formatted as follows <TAB><First column text><TAB><Second column text> -->\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">选项\t 说明</div><div class=\"line\">%H\t提交对象（commit）的完整哈希字串</div><div class=\"line\">%h\t提交对象的简短哈希字串</div><div class=\"line\">%T\t树对象（tree）的完整哈希字串</div><div class=\"line\">%t\t树对象的简短哈希字串</div><div class=\"line\">%P\t父对象（parent）的完整哈希字串</div><div class=\"line\">%p\t父对象的简短哈希字串</div><div class=\"line\">%an\t作者（author）的名字</div><div class=\"line\">%ae\t作者的电子邮件地址</div><div class=\"line\">%ad\t作者修订日期（可以用 -date= 选项定制格式）</div><div class=\"line\">%ar\t作者修订日期，按多久以前的方式显示</div><div class=\"line\">%cn\t提交者(committer)的名字</div><div class=\"line\">%ce\t提交者的电子邮件地址</div><div class=\"line\">%<span class=\"built_in\">cd</span>\t提交日期</div><div class=\"line\">%cr\t提交日期，按多久以前的方式显示</div><div class=\"line\">%s\t提交说明</div></pre></td></tr></table></figure>\n<p>你一定奇怪作者（author）和提交者（committer）之间究竟有何差别，其实作者指的是实际作出修改的人，提交者指的是最后将此工作成果提交到仓库的人。所以，当你为某个项目发布补丁，然后某个核心成员将你的补丁并入项目时，你就是作者，而那个核心成员就是提交者。我们会在第五章再详细介绍两者之间的细微差别。</p>\n<p>用 oneline 或 format 时结合 –graph 选项，可以看到开头多出一些 ASCII 字符串表示的简单图形，形象地展示了每个提交所在的分支及其分化衍合情况。在我们之前提到的 Grit 项目仓库中可以看到：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span> --pretty=format:<span class=\"string\">\"%h %s\"</span> --graph</div><div class=\"line\">* 2d3acf9 ignore errors from SIGCHLD on <span class=\"built_in\">trap</span></div><div class=\"line\">*  5e3ee11 Merge branch <span class=\"string\">'master'</span> of git://github.com/dustin/grit</div><div class=\"line\">|\\</div><div class=\"line\">| * 420eac9 Added a method <span class=\"keyword\">for</span> getting the current branch.</div><div class=\"line\">* | 30e367c timeout code and tests</div><div class=\"line\">* | 5a09431 add timeout protection to grit</div><div class=\"line\">* | e1193f8 support <span class=\"keyword\">for</span> heads with slashes <span class=\"keyword\">in</span> them</div><div class=\"line\">|/</div><div class=\"line\">* d6016bc require time <span class=\"keyword\">for</span> xmlschema</div><div class=\"line\">*  11d191e Merge branch <span class=\"string\">'defunkt'</span> into <span class=\"built_in\">local</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">选项\t说明</div><div class=\"line\">-p\t按补丁格式显示每个更新之间的差异。</div><div class=\"line\">--word-diff\t按 word diff 格式显示差异。</div><div class=\"line\">--stat\t显示每次更新的文件修改统计信息。</div><div class=\"line\">--shortstat\t只显示 --stat 中最后的行数修改添加移除统计。</div><div class=\"line\">--name-only\t仅在提交信息后显示已修改的文件清单。</div><div class=\"line\">--name-status\t显示新增、修改、删除的文件清单。</div><div class=\"line\">--abbrev-commit\t仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。</div><div class=\"line\">--relative-date\t使用较短的相对时间显示（比如，“2 weeks ago”）。</div><div class=\"line\">--graph\t显示 ASCII 图形表示的分支合并历史。</div><div class=\"line\">--pretty\t使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。</div><div class=\"line\">--oneline\t`--pretty=oneline --abbrev-commit` 的简化用法。</div></pre></td></tr></table></figure>\n<h4 id=\"限制输出长度\"><a href=\"#限制输出长度\" class=\"headerlink\" title=\"限制输出长度\"></a>限制输出长度</h4><p>除了定制输出格式的选项之外，git log 还有许多非常实用的限制输出长度的选项，也就是只输出部分提交信息。之前我们已经看到过 -2 了，它只显示最近的两条提交，实际上，这是 -<n> 选项的写法，其中的 n 可以是任何自然数，表示仅显示最近的若干条提交。不过实践中我们是不太用这个选项的，Git 在输出所有提交时会自动调用分页程序（less），要看更早的更新只需翻到下页即可。</p>\n<p>另外还有按照时间作限制的选项，比如 –since 和 –until。下面的命令列出所有最近两周内的提交：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span> --since=2.weeks</div></pre></td></tr></table></figure></p>\n<p>你可以给出各种时间格式，比如说具体的某一天（“2008-01-15”），或者是多久以前（“2 years 1 day 3 minutes ago”）。</p>\n<p>还可以给出若干搜索条件，列出符合的提交。用 –author 选项显示指定作者的提交，用 –grep 选项搜索提交说明中的关键字。（请注意，如果要得到同时满足这两个选项搜索条件的提交，就必须用 –all-match 选项。否则，满足任意一个条件的提交都会被匹配出来）</p>\n<p>另一个真正实用的git log选项是路径(path)，如果只关心某些文件或者目录的历史提交，可以在 git log 选项的最后指定它们的路径。因为是放在最后位置上的选项，所以用两个短划线（–）隔开之前的选项和后面限定的路径名。</p>\n<p>表 2-3 还列出了其他常用的类似选项。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">选项\t说明</div><div class=\"line\">-(n)\t仅显示最近的 n 条提交</div><div class=\"line\">--since, --after\t仅显示指定时间之后的提交。</div><div class=\"line\">--until, --before\t仅显示指定时间之前的提交。</div><div class=\"line\">--author\t仅显示指定作者相关的提交。</div><div class=\"line\">--committer\t仅显示指定提交者相关的提交。</div></pre></td></tr></table></figure>\n<p>来看一个实际的例子，如果要查看 Git 仓库中，2008 年 10 月期间，Junio Hamano 提交的但未合并的测试脚本（位于项目的 t/ 目录下的文件），可以用下面的查询命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span> --pretty=<span class=\"string\">\"%h - %s\"</span> --author=gitster --since=<span class=\"string\">\"2008-10-01\"</span> \\</div><div class=\"line\">   --before=<span class=\"string\">\"2008-11-01\"</span> --no-merges -- t/</div><div class=\"line\">5610e3b - Fix testcase failure when extended attribute</div><div class=\"line\">acd3b9e - Enhance hold_lock_file_for_&#123;update,append&#125;()</div><div class=\"line\">f563754 - demonstrate breakage of detached checkout wi</div><div class=\"line\">d1a43f2 - reset --hard/<span class=\"built_in\">read</span>-tree --reset -u: remove un</div><div class=\"line\">51a94af - Fix <span class=\"string\">\"checkout --track -b newbranch\"</span> on detac</div><div class=\"line\">b0ad11e - pull: allow <span class=\"string\">\"git pull origin <span class=\"variable\">$something</span>:<span class=\"variable\">$cur</span></span></div></pre></td></tr></table></figure></p>\n<p>Git 项目有 20,000 多条提交，但我们给出搜索选项后，仅列出了其中满足条件的 6 条。</p>\n<p>####使用图形化工具查阅提交历史</p>\n<p>有时候图形化工具更容易展示历史提交的变化，随 Git 一同发布的 gitk 就是这样一种工具。它是用 Tcl/Tk 写成的，基本上相当于 git log 命令的可视化版本，凡是 git log 可以用的选项也都能用在 gitk 上。在项目工作目录中输入 gitk 命令后，就会启动图 2-2 所示的界面<br>上半个窗口显示的是历次提交的分支祖先图谱，下半个窗口显示当前点选的提交对应的具体差异。</p>\n<h3 id=\"撤消操作\"><a href=\"#撤消操作\" class=\"headerlink\" title=\"撤消操作\"></a>撤消操作</h3><p>任何时候，你都有可能需要撤消刚才所做的某些操作。接下来，我们会介绍一些基本的撤消操作相关的命令。请注意，有些撤销操作是不可逆的，所以请务必谨慎小心，一旦失误，就有可能丢失部分工作成果。</p>\n<h4 id=\"修改最后一次提交\"><a href=\"#修改最后一次提交\" class=\"headerlink\" title=\"修改最后一次提交\"></a>修改最后一次提交</h4><p>有时候我们提交完了才发现漏掉了几个文件没有加，或者提交信息写错了。想要撤消刚才的提交操作，可以使用 –amend 选项重新提交：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git commit --amend</div></pre></td></tr></table></figure></p>\n<p>此命令将使用当前的暂存区域快照提交。如果刚才提交完没有作任何改动，直接运行此命令的话，相当于有机会重新编辑提交说明，但将要提交的文件快照和之前的一样。</p>\n<p>启动文本编辑器后，会看到上次提交时的说明，编辑它确认没问题后保存退出，就会使用新的提交说明覆盖刚才失误的提交。</p>\n<p>如果刚才提交时忘了暂存某些修改，可以先补上暂存操作，然后再运行 –amend 提交：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git commit -m <span class=\"string\">'initial commit'</span></div><div class=\"line\">$ git add forgotten_file</div><div class=\"line\">$ git commit --amend</div></pre></td></tr></table></figure></p>\n<p>上面的三条命令最终只是产生一个提交，第二个提交命令修正了第一个的提交内容。</p>\n<h4 id=\"取消已经暂存的文件\"><a href=\"#取消已经暂存的文件\" class=\"headerlink\" title=\"取消已经暂存的文件\"></a>取消已经暂存的文件</h4><p>接下来的两个小节将演示如何取消暂存区域中的文件，以及如何取消工作目录中已修改的文件。不用担心，查看文件状态的时候就提示了该如何撤消，所以不需要死记硬背。来看下面的例子，有两个修改过的文件，我们想要分开提交，但不小心用 git add . 全加到了暂存区域。该如何撤消暂存其中的一个文件呢？其实，git status 的命令输出已经告诉了我们该怎么做：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git add .</div><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Changes to be committed:</div><div class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</div><div class=\"line\"></div><div class=\"line\">        modified:   README.txt</div><div class=\"line\">        modified:   benchmarks.rb</div></pre></td></tr></table></figure></p>\n<p>就在 “Changes to be committed” 下面，括号中有提示，可以使用 git reset HEAD <file>… 的方式取消暂存。好吧，我们来试试取消暂存 benchmarks.rb 文件：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git reset HEAD benchmarks.rb</div><div class=\"line\">Unstaged changes after reset:</div><div class=\"line\">M       benchmarks.rb</div><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Changes to be committed:</div><div class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</div><div class=\"line\"></div><div class=\"line\">        modified:   README.txt</div><div class=\"line\"></div><div class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</div><div class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to update what will be committed)</div><div class=\"line\">  (use <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"keyword\">in</span> working directory)</div><div class=\"line\"></div><div class=\"line\">        modified:   benchmarks.rb</div></pre></td></tr></table></figure></p>\n<p>这条命令看起来有些古怪，先别管，能用就行。现在 benchmarks.rb 文件又回到了之前已修改未暂存的状态。</p>\n<h4 id=\"取消对文件的修改\"><a href=\"#取消对文件的修改\" class=\"headerlink\" title=\"取消对文件的修改\"></a>取消对文件的修改</h4><p>如果觉得刚才对 benchmarks.rb 的修改完全没有必要，该如何取消修改，回到之前的状态（也就是修改之前的版本）呢？git status 同样提示了具体的撤消方法，接着上面的例子，现在未暂存区域看起来像这样：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</div><div class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to update what will be committed)</div><div class=\"line\">  (use <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"keyword\">in</span> working directory)</div><div class=\"line\"></div><div class=\"line\">        modified:   benchmarks.rb</div></pre></td></tr></table></figure></p>\n<p>在第二个括号中，我们看到了抛弃文件修改的命令（至少在 Git 1.6.1 以及更高版本中会这样提示，如果你还在用老版本，我们强烈建议你升级，以获取最佳的用户体验），让我们试试看：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git checkout -- benchmarks.rb \t\t<span class=\"comment\">#必须是跟踪的</span></div><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Changes to be committed:</div><div class=\"line\">  (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> to unstage)</div><div class=\"line\"></div><div class=\"line\">        modified:   README.txt</div></pre></td></tr></table></figure></p>\n<p>可以看到，该文件已经恢复到修改前的版本。你可能已经意识到了，这条命令有些危险，所有对文件的修改都没有了，因为我们刚刚把之前版本的文件复制过来重写了此文件。所以在用这条命令前，请务必确定真的不再需要保留刚才的修改。如果只是想回退版本，同时保留刚才的修改以便将来继续工作，可以用下章介绍的 stashing 和分支来处理，应该会更好些。</p>\n<p>记住，任何已经提交到 Git 的都可以被恢复。即便在已经删除的分支中的提交，或者用 –amend 重新改写的提交，都可以被恢复（关于数据恢复的内容见第九章）。所以，你可能失去的数据，仅限于没有提交过的，对 Git 来说它们就像从未存在过一样。</p>\n<h3 id=\"远程仓库的使用\"><a href=\"#远程仓库的使用\" class=\"headerlink\" title=\"远程仓库的使用\"></a>远程仓库的使用</h3><p>要参与任何一个 Git 项目的协作，必须要了解该如何管理远程仓库。远程仓库是指托管在网络上的项目仓库，可能会有好多个，其中有些你只能读，另外有些可以写。同他人协作开发某个项目时，需要管理这些远程仓库，以便推送或拉取数据，分享各自的工作进展。 管理远程仓库的工作，包括添加远程库，移除废弃的远程库，管理各式远程库分支，定义是否跟踪这些分支，等等。本节我们将详细讨论远程库的管理和使用。</p>\n<h4 id=\"查看当前的远程库\"><a href=\"#查看当前的远程库\" class=\"headerlink\" title=\"查看当前的远程库\"></a>查看当前的远程库</h4><p>要查看当前配置有哪些远程仓库，可以用 git remote 命令，它会列出每个远程库的简短名字。在克隆完某个项目后，至少可以看到一个名为 origin 的远程库，Git 默认使用这个名字来标识你所克隆的原始仓库：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> git://github.com/schacon/ticgit.git</div><div class=\"line\">Cloning into <span class=\"string\">'ticgit'</span>...</div><div class=\"line\">remote: Reusing existing pack: 1857, done.</div><div class=\"line\">remote: Total 1857 (delta 0), reused 0 (delta 0)</div><div class=\"line\">Receiving objects: 100% (1857/1857), 374.35 KiB | 193.00 KiB/s, done.</div><div class=\"line\">Resolving deltas: 100% (772/772), done.</div><div class=\"line\">Checking connectivity... done.</div><div class=\"line\">$ <span class=\"built_in\">cd</span> ticgit</div><div class=\"line\">$ git remote</div><div class=\"line\">origin</div></pre></td></tr></table></figure></p>\n<p>也可以加上 -v 选项（译注：此为 –verbose 的简写，取首字母），显示对应的克隆地址：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git remote -v</div><div class=\"line\">origin  git://github.com/schacon/ticgit.git (fetch)</div><div class=\"line\">origin  git://github.com/schacon/ticgit.git (push)</div></pre></td></tr></table></figure></p>\n<p>如果有多个远程仓库，此命令将全部列出。比如在我的 Grit 项目中，可以看到：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> grit</div><div class=\"line\">$ git remote -v</div><div class=\"line\">bakkdoor  git://github.com/bakkdoor/grit.git</div><div class=\"line\">cho45     git://github.com/cho45/grit.git</div><div class=\"line\">defunkt   git://github.com/defunkt/grit.git</div><div class=\"line\">koke      git://github.com/koke/grit.git</div><div class=\"line\">origin    git@github.com:mojombo/grit.git</div></pre></td></tr></table></figure></p>\n<p>这样一来，我就可以非常轻松地从这些用户的仓库中，拉取他们的提交到本地。请注意，上面列出的地址只有 origin 用的是 SSH URL 链接，所以也只有这个仓库我能推送数据上去（我们会在第四章解释原因）。</p>\n<h4 id=\"添加远程仓库\"><a href=\"#添加远程仓库\" class=\"headerlink\" title=\"添加远程仓库\"></a>添加远程仓库</h4><p>要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用，运行 git remote add [shortname] [url]：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git remote</div><div class=\"line\">origin</div><div class=\"line\">$ git remote add pb git://github.com/paulboone/ticgit.git</div><div class=\"line\">$ git remote -v</div><div class=\"line\">origin\tgit://github.com/schacon/ticgit.git</div><div class=\"line\">pb\tgit://github.com/paulboone/ticgit.git</div></pre></td></tr></table></figure></p>\n<p>现在可以用字符串 pb 指代对应的仓库地址了。比如说，要抓取所有 Paul 有的，但本地仓库没有的信息，可以运行 git fetch pb：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git fetch pb</div><div class=\"line\">remote: Counting objects: 58, done.</div><div class=\"line\">remote: Compressing objects: 100% (41/41), done.</div><div class=\"line\">remote: Total 44 (delta 24), reused 1 (delta 0)</div><div class=\"line\">Unpacking objects: 100% (44/44), done.</div><div class=\"line\">From git://github.com/paulboone/ticgit</div><div class=\"line\"> * [new branch]      master     -&gt; pb/master</div><div class=\"line\"> * [new branch]      ticgit     -&gt; pb/ticgit</div></pre></td></tr></table></figure></p>\n<h4 id=\"从远程仓库抓取数据\"><a href=\"#从远程仓库抓取数据\" class=\"headerlink\" title=\"从远程仓库抓取数据\"></a>从远程仓库抓取数据</h4><p>正如之前所看到的，可以用下面的命令从远程仓库抓取数据到本地：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git fetch [remote-name]</div></pre></td></tr></table></figure></p>\n<p>此命令会到远程仓库中拉取所有你本地仓库中还没有的数据。运行完成后，你就可以在本地访问该远程仓库中的所有分支，将其中某个分支合并到本地，或者只是取出某个分支，一探究竟。（我们会在第三章详细讨论关于分支的概念和操作。）</p>\n<p>如果是克隆了一个仓库，此命令会自动将远程仓库归于 origin 名下。所以，git fetch origin 会抓取从你上次克隆以来别人上传到此远程仓库中的所有更新（或是上次 fetch 以来别人提交的更新）。有一点很重要，需要记住，fetch 命令只是将远端的数据拉到本地仓库，并不自动合并到当前工作分支，只有当你确实准备好了，才能手工合并。</p>\n<p>如果设置了某个分支用于跟踪某个远端仓库的分支（参见下节及第三章的内容），可以使用 git pull 命令自动抓取数据下来，然后将远端分支自动合并到本地仓库中当前分支。在日常工作中我们经常这么用，既快且好。实际上，默认情况下 git clone 命令本质上就是自动创建了本地的 master 分支用于跟踪远程仓库中的 master 分支（假设远程仓库确实有 master 分支）。所以一般我们运行 git pull，目的都是要从原始克隆的远端仓库中抓取数据后，合并到工作目录中的当前分支。</p>\n<h4 id=\"推送数据到远程仓库\"><a href=\"#推送数据到远程仓库\" class=\"headerlink\" title=\"推送数据到远程仓库\"></a>推送数据到远程仓库</h4><p>项目进行到一个阶段，要同别人分享目前的成果，可以将本地仓库中的数据推送到远程仓库。实现这个任务的命令很简单： git push [remote-name] [branch-name]。如果要把本地的 master 分支推送到 origin 服务器上（再次说明下，克隆操作会自动使用默认的 master 和 origin 名字），可以运行下面的命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git push origin master</div></pre></td></tr></table></figure></p>\n<p>只有在所克隆的服务器上有写权限，或者同一时刻没有其他人在推数据，这条命令才会如期完成任务。如果在你推数据前，已经有其他人推送了若干更新，那你的推送操作就会被驳回。你必须先把他们的更新抓取到本地，合并到自己的项目中，然后才可以再次推送。有关推送数据到远程仓库的详细内容见第三章。</p>\n<h4 id=\"查看远程仓库信息\"><a href=\"#查看远程仓库信息\" class=\"headerlink\" title=\"查看远程仓库信息\"></a>查看远程仓库信息</h4><p>我们可以通过命令 git remote show [remote-name] 查看某个远程仓库的详细信息，比如要看所克隆的 origin 仓库，可以运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git remote show origin</div><div class=\"line\">* remote origin</div><div class=\"line\">  URL: git://github.com/schacon/ticgit.git</div><div class=\"line\">  Remote branch merged with <span class=\"string\">'git pull'</span> <span class=\"keyword\">while</span> on branch master</div><div class=\"line\">    master</div><div class=\"line\">  Tracked remote branches</div><div class=\"line\">    master</div><div class=\"line\">    ticgit</div></pre></td></tr></table></figure></p>\n<p>除了对应的克隆地址外，它还给出了许多额外的信息。它友善地告诉你如果是在 master 分支，就可以用 git pull 命令抓取数据合并到本地。另外还列出了所有处于跟踪状态中的远端分支。</p>\n<p>上面的例子非常简单，而随着使用 Git 的深入，git remote show 给出的信息可能会像这样：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git remote show origin</div><div class=\"line\">* remote origin</div><div class=\"line\">  URL: git@github.com:defunkt/github.git</div><div class=\"line\">  Remote branch merged with <span class=\"string\">'git pull'</span> <span class=\"keyword\">while</span> on branch issues</div><div class=\"line\">    issues</div><div class=\"line\">  Remote branch merged with <span class=\"string\">'git pull'</span> <span class=\"keyword\">while</span> on branch master</div><div class=\"line\">    master</div><div class=\"line\">  New remote branches (next fetch will store <span class=\"keyword\">in</span> remotes/origin)</div><div class=\"line\">    caching</div><div class=\"line\">  Stale tracking branches (use <span class=\"string\">'git remote prune'</span>)</div><div class=\"line\">    libwalker</div><div class=\"line\">    walker2</div><div class=\"line\">  Tracked remote branches</div><div class=\"line\">    acl</div><div class=\"line\">    apiv2</div><div class=\"line\">    dashboard2</div><div class=\"line\">    issues</div><div class=\"line\">    master</div><div class=\"line\">    postgres</div><div class=\"line\">  Local branch pushed with <span class=\"string\">'git push'</span></div><div class=\"line\">    master:master</div></pre></td></tr></table></figure></p>\n<h4 id=\"远程仓库的删除和重命名\"><a href=\"#远程仓库的删除和重命名\" class=\"headerlink\" title=\"远程仓库的删除和重命名\"></a>远程仓库的删除和重命名</h4><p>在新版 Git 中可以用 git remote rename 命令修改某个远程仓库在本地的简称，比如想把 pb 改成 paul，可以这么运行：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git remote rename pb paul</div><div class=\"line\">$ git remote</div><div class=\"line\">origin</div><div class=\"line\">paul</div></pre></td></tr></table></figure></p>\n<p>注意，对远程仓库的重命名，也会使对应的分支名称发生变化，原来的 pb/master 分支现在成了 paul/master。</p>\n<p>碰到远端仓库服务器迁移，或者原来的克隆镜像不再使用，又或者某个参与者不再贡献代码，那么需要移除对应的远端仓库，可以运行 git remote rm 命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git remote rm paul</div><div class=\"line\">$ git remote</div><div class=\"line\">origin</div></pre></td></tr></table></figure></p>\n<h3 id=\"打标签\"><a href=\"#打标签\" class=\"headerlink\" title=\"打标签\"></a>打标签</h3><p>同大多数 VCS 一样，Git 也可以对某一时间点上的版本打上标签。人们在发布某个软件版本（比如 v1.0 等等）的时候，经常这么做。本节我们一起来学习如何列出所有可用的标签，如何新建标签，以及各种不同类型标签之间的差别。</p>\n<h4 id=\"列显已有的标签\"><a href=\"#列显已有的标签\" class=\"headerlink\" title=\"列显已有的标签\"></a>列显已有的标签</h4><p>列出现有标签的命令非常简单，直接运行 git tag 即可：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git tag</div><div class=\"line\">v0.1</div><div class=\"line\">v1.3</div></pre></td></tr></table></figure></p>\n<p>显示的标签按字母顺序排列，所以标签的先后并不表示重要程度的轻重。</p>\n<p>我们可以用特定的搜索模式列出符合条件的标签。在 Git 自身项目仓库中，有着超过 240 个标签，如果你只对 1.4.2 系列的版本感兴趣，可以运行下面的命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git tag <span class=\"_\">-l</span> <span class=\"string\">'v1.4.2.*'</span></div><div class=\"line\">v1.4.2.1</div><div class=\"line\">v1.4.2.2</div><div class=\"line\">v1.4.2.3</div><div class=\"line\">v1.4.2.4</div></pre></td></tr></table></figure></p>\n<h4 id=\"新建标签\"><a href=\"#新建标签\" class=\"headerlink\" title=\"新建标签\"></a>新建标签</h4><p>Git 使用的标签有两种类型：轻量级的（lightweight）和含附注的（annotated）。轻量级标签就像是个不会变化的分支，实际上它就是个指向特定提交对象的引用。而含附注标签，实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，电子邮件地址和日期，以及标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证。一般我们都建议使用含附注型的标签，以便保留相关信息；当然，如果只是临时性加注标签，或者不需要旁注额外信息，用轻量级标签也没问题。</p>\n<h4 id=\"含附注的标签\"><a href=\"#含附注的标签\" class=\"headerlink\" title=\"含附注的标签\"></a>含附注的标签</h4><p>创建一个含附注类型的标签非常简单，用 -a （译注：取 annotated 的首字母）指定标签名字即可：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git tag <span class=\"_\">-a</span> v1.4 -m <span class=\"string\">'my version 1.4'</span></div><div class=\"line\">$ git tag</div><div class=\"line\">v0.1</div><div class=\"line\">v1.3</div><div class=\"line\">v1.4</div></pre></td></tr></table></figure></p>\n<p>而 -m 选项则指定了对应的标签说明，Git 会将此说明一同保存在标签对象中。如果没有给出该选项，Git 会启动文本编辑软件供你输入标签说明。</p>\n<p>可以使用 git show 命令查看相应标签的版本信息，并连同显示打标签时的提交对象。</p>\n<h4 id=\"签署标签\"><a href=\"#签署标签\" class=\"headerlink\" title=\"签署标签\"></a>签署标签</h4><p>如果你有自己的私钥，还可以用 GPG 来签署标签，只需要把之前的 -a 改为 -s （译注： 取 signed 的首字母）即可:<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git tag <span class=\"_\">-s</span> v1.5 -m <span class=\"string\">'my signed 1.5 tag'</span></div><div class=\"line\">You need a passphrase to unlock the secret key <span class=\"keyword\">for</span></div><div class=\"line\">user: <span class=\"string\">\"Scott Chacon &lt;schacon@gee-mail.com&gt;\"</span></div><div class=\"line\">1024-bit DSA key, ID F721C45A, created 2009-02-09</div></pre></td></tr></table></figure></p>\n<p>现在再运行 git show 会看到对应的 GPG 签名也附在其内：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git show v1.5</div><div class=\"line\">tag v1.5</div><div class=\"line\">Tagger: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Mon Feb 9 15:22:20 2009 -0800</div><div class=\"line\"></div><div class=\"line\">my signed 1.5 tag</div><div class=\"line\">-----BEGIN PGP SIGNATURE-----</div><div class=\"line\">Version: GnuPG v1.4.8 (Darwin)</div><div class=\"line\"></div><div class=\"line\">iEYEABECAAYFAkmQurIACgkQON3DxfchxFr5cACeIMN+ZxLKggJQf0QYiQBwgySN</div><div class=\"line\">Ki0An2JeAVUCAiJ7Ox6ZEtK+NvZAj82/</div><div class=\"line\">=WryJ</div><div class=\"line\">-----END PGP SIGNATURE-----</div><div class=\"line\">commit 15027957951b64cf874c3557a0f3547bd83b3ff6</div><div class=\"line\">Merge: 4a447f7... a6b4c97...</div><div class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Sun Feb 8 19:02:46 2009 -0800</div><div class=\"line\"></div><div class=\"line\">    Merge branch <span class=\"string\">'experiment'</span></div></pre></td></tr></table></figure></p>\n<p>现在再运行 git show 会看到对应的 GPG 签名也附在其内：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git show v1.5</div><div class=\"line\">tag v1.5</div><div class=\"line\">Tagger: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Mon Feb 9 15:22:20 2009 -0800</div><div class=\"line\"></div><div class=\"line\">my signed 1.5 tag</div><div class=\"line\">-----BEGIN PGP SIGNATURE-----</div><div class=\"line\">Version: GnuPG v1.4.8 (Darwin)</div><div class=\"line\"></div><div class=\"line\">iEYEABECAAYFAkmQurIACgkQON3DxfchxFr5cACeIMN+ZxLKggJQf0QYiQBwgySN</div><div class=\"line\">Ki0An2JeAVUCAiJ7Ox6ZEtK+NvZAj82/</div><div class=\"line\">=WryJ</div><div class=\"line\">-----END PGP SIGNATURE-----</div><div class=\"line\">commit 15027957951b64cf874c3557a0f3547bd83b3ff6</div><div class=\"line\">Merge: 4a447f7... a6b4c97...</div><div class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Sun Feb 8 19:02:46 2009 -0800</div><div class=\"line\"></div><div class=\"line\">    Merge branch <span class=\"string\">'experiment'</span></div></pre></td></tr></table></figure></p>\n<p>稍后我们再学习如何验证已经签署的标签。</p>\n<h4 id=\"轻量级标签\"><a href=\"#轻量级标签\" class=\"headerlink\" title=\"轻量级标签\"></a>轻量级标签</h4><p>轻量级标签实际上就是一个保存着对应提交对象的校验和信息的文件。要创建这样的标签，一个 -a，-s 或 -m 选项都不用，直接给出标签名字即可：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git tag v1.4-lw</div><div class=\"line\">$ git tag</div><div class=\"line\">v0.1</div><div class=\"line\">v1.3</div><div class=\"line\">v1.4</div><div class=\"line\">v1.4-lw</div><div class=\"line\">v1.5</div></pre></td></tr></table></figure></p>\n<p>现在运行 git show 查看此标签信息，就只有相应的提交对象摘要：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git show v1.4-lw</div><div class=\"line\">commit 15027957951b64cf874c3557a0f3547bd83b3ff6</div><div class=\"line\">Merge: 4a447f7... a6b4c97...</div><div class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Sun Feb 8 19:02:46 2009 -0800</div><div class=\"line\"></div><div class=\"line\">    Merge branch <span class=\"string\">'experiment'</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"验证标签\"><a href=\"#验证标签\" class=\"headerlink\" title=\"验证标签\"></a>验证标签</h4><p>可以使用 git tag -v [tag-name] （译注：取 verify 的首字母）的方式验证已经签署的标签。此命令会调用 GPG 来验证签名，所以你需要有签署者的公钥，存放在 keyring 中，才能验证：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git tag -v v1.4.2.1</div><div class=\"line\">object 883653babd8ee7ea23e6a5c392bb739348b1eb61</div><div class=\"line\"><span class=\"built_in\">type</span> commit</div><div class=\"line\">tag v1.4.2.1</div><div class=\"line\">tagger Junio C Hamano &lt;junkio@cox.net&gt; 1158138501 -0700</div><div class=\"line\"></div><div class=\"line\">GIT 1.4.2.1</div><div class=\"line\"></div><div class=\"line\">Minor fixes since 1.4.2, including git-mv and git-http with alternates.</div><div class=\"line\">gpg: Signature made Wed Sep 13 02:08:25 2006 PDT using DSA key ID F3119B9A</div><div class=\"line\">gpg: Good signature from <span class=\"string\">\"Junio C Hamano &lt;junkio@cox.net&gt;\"</span></div><div class=\"line\">gpg:                 aka <span class=\"string\">\"[jpeg image of size 1513]\"</span></div><div class=\"line\">Primary key fingerprint: 3565 2A26 2040 E066 C9A7  4A7D C0C6 D9A4 F311 9B9A</div></pre></td></tr></table></figure></p>\n<p>若是没有签署者的公钥，会报告类似下面这样的错误：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">gpg: Signature made Wed Sep 13 02:08:25 2006 PDT using DSA key ID F3119B9A</div><div class=\"line\">gpg: Can<span class=\"string\">'t check signature: public key not found</div><div class=\"line\">error: could not verify the tag '</span>v1.4.2.1<span class=\"string\">'</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"后期加注标签\"><a href=\"#后期加注标签\" class=\"headerlink\" title=\"后期加注标签\"></a>后期加注标签</h4><p>你甚至可以在后期对早先的某次提交加注标签。比如在下面展示的提交历史中：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span> --pretty=oneline</div><div class=\"line\">15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch <span class=\"string\">'experiment'</span></div><div class=\"line\">a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support</div><div class=\"line\">0d52aaab4479697da7686c15f77a3d64d9165190 one more thing</div><div class=\"line\">6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch <span class=\"string\">'experiment'</span></div><div class=\"line\">0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit <span class=\"keyword\">function</span></div><div class=\"line\">4682c3261057305bdd616e23b64b0857d832627b added a todo file</div><div class=\"line\">166ae0c4d3f420721acbb115cc33848dfcc2121a started write support</div><div class=\"line\">9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile</div><div class=\"line\">964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo</div><div class=\"line\">8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme</div></pre></td></tr></table></figure></p>\n<p>我们忘了在提交 “updated rakefile” 后为此项目打上版本号 v1.2，没关系，现在也能做。只要在打标签的时候跟上对应提交对象的校验和（或前几位字符）即可：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git tag <span class=\"_\">-a</span> v1.2 9fceb02</div></pre></td></tr></table></figure></p>\n<p>可以看到我们已经补上了标签：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git tag</div><div class=\"line\">v0.1</div><div class=\"line\">v1.2</div><div class=\"line\">v1.3</div><div class=\"line\">v1.4</div><div class=\"line\">v1.4-lw</div><div class=\"line\">v1.5</div><div class=\"line\"></div><div class=\"line\">$ git show v1.2</div><div class=\"line\">tag v1.2</div><div class=\"line\">Tagger: Scott Chacon &lt;schacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Mon Feb 9 15:32:16 2009 -0800</div><div class=\"line\"></div><div class=\"line\">version 1.2</div><div class=\"line\">commit 9fceb02d0ae598e95dc970b74767f19372d61af8</div><div class=\"line\">Author: Magnus Chacon &lt;mchacon@gee-mail.com&gt;</div><div class=\"line\">Date:   Sun Apr 27 20:43:35 2008 -0700</div><div class=\"line\"></div><div class=\"line\">    updated rakefile</div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<h4 id=\"分享标签\"><a href=\"#分享标签\" class=\"headerlink\" title=\"分享标签\"></a>分享标签</h4><p>默认情况下，git push 并不会把标签传送到远端服务器上，只有通过显式命令才能分享标签到远端仓库。其命令格式如同推送分支，运行 git push origin [tagname] 即可：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git push origin v1.5</div><div class=\"line\">Counting objects: 50, done.</div><div class=\"line\">Compressing objects: 100% (38/38), done.</div><div class=\"line\">Writing objects: 100% (44/44), 4.56 KiB, done.</div><div class=\"line\">Total 44 (delta 18), reused 8 (delta 1)</div><div class=\"line\">To git@github.com:schacon/simplegit.git</div><div class=\"line\">* [new tag]         v1.5 -&gt; v1.5</div></pre></td></tr></table></figure></p>\n<p>如果要一次推送所有本地新增的标签上去，可以使用 –tags 选项：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git push origin --tags</div><div class=\"line\">Counting objects: 50, done.</div><div class=\"line\">Compressing objects: 100% (38/38), done.</div><div class=\"line\">Writing objects: 100% (44/44), 4.56 KiB, done.</div><div class=\"line\">Total 44 (delta 18), reused 8 (delta 1)</div><div class=\"line\">To git@github.com:schacon/simplegit.git</div><div class=\"line\"> * [new tag]         v0.1 -&gt; v0.1</div><div class=\"line\"> * [new tag]         v1.2 -&gt; v1.2</div><div class=\"line\"> * [new tag]         v1.4 -&gt; v1.4</div><div class=\"line\"> * [new tag]         v1.4-lw -&gt; v1.4-lw</div><div class=\"line\"> * [new tag]         v1.5 -&gt; v1.5</div></pre></td></tr></table></figure></p>\n<p>现在，其他人克隆共享仓库或拉取数据同步后，也会看到这些标签。</p>\n<h3 id=\"技巧和窍门\"><a href=\"#技巧和窍门\" class=\"headerlink\" title=\"技巧和窍门\"></a>技巧和窍门</h3><p>在结束本章之前，我还想和大家分享一些 Git 使用的技巧和窍门。很多使用 Git 的开发者可能根本就没用过这些技巧，我们也不是说在读过本书后非得用这些技巧不可，但至少应该有所了解吧。说实话，有了这些小窍门，我们的工作可以变得更简单，更轻松，更高效。</p>\n<h4 id=\"自动补全\"><a href=\"#自动补全\" class=\"headerlink\" title=\"自动补全\"></a>自动补全</h4><p>如果你用的是 Bash shell，可以试试看 Git 提供的自动补全脚本。下载 Git 的源代码，进入 contrib/completion 目录，会看到一个 git-completion.bash 文件。将此文件复制到你自己的用户主目录中（译注：按照下面的示例，还应改名加上点：cp git-completion.bash ~/.git-completion.bash），并把下面一行内容添加到你的 .bashrc 文件中：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">source</span> ~/.git-completion.bash</div></pre></td></tr></table></figure></p>\n<p>也可以为系统上所有用户都设置默认使用此脚本。Mac 上将此脚本复制到 /opt/local/etc/bash_completion.d 目录中，Linux 上则复制到 /etc/bash_completion.d/ 目录中。这两处目录中的脚本，都会在 Bash 启动时自动加载。</p>\n<p>如果在 Windows 上安装了 msysGit，默认使用的 Git Bash 就已经配好了这个自动补全脚本，可以直接使用。</p>\n<p>在输入 Git 命令的时候可以敲两次跳格键（Tab），就会看到列出所有匹配的可用命令建议：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git co&lt;tab&gt;&lt;tab&gt;</div><div class=\"line\">commit config</div></pre></td></tr></table></figure></p>\n<p>此例中，键入 git co 然后连按两次 Tab 键，会看到两个相关的建议（命令） commit 和 config。继而输入 m<tab> 会自动完成 git commit 命令的输入。</p>\n<p>命令的选项也可以用这种方式自动完成，其实这种情况更实用些。比如运行 git log 的时候忘了相关选项的名字，可以输入开头的几个字母，然后敲 Tab 键看看有哪些匹配的：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span> -<span class=\"_\">-s</span>&lt;tab&gt;</div><div class=\"line\">--shortstat  --since=  --src-prefix=  --stat   --summary</div></pre></td></tr></table></figure></p>\n<p>这个技巧不错吧，可以节省很多输入和查阅文档的时间。</p>\n<h4 id=\"Git-命令别名\"><a href=\"#Git-命令别名\" class=\"headerlink\" title=\"Git 命令别名\"></a>Git 命令别名</h4><p>Git 并不会推断你输入的几个字符将会是哪条命令，不过如果想偷懒，少敲几个命令的字符，可以用 git config 为命令设置别名。来看看下面的例子：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git config --global alias.co checkout</div><div class=\"line\">$ git config --global alias.br branch</div><div class=\"line\">$ git config --global alias.ci commit</div><div class=\"line\">$ git config --global alias.st status</div></pre></td></tr></table></figure></p>\n<p>现在，如果要输入 git commit 只需键入 git ci 即可。而随着 Git 使用的深入，会有很多经常要用到的命令，遇到这种情况，不妨建个别名提高效率。</p>\n<p>使用这种技术还可以创造出新的命令，比方说取消暂存文件时的输入比较繁琐，可以自己设置一下：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git config --global alias.unstage <span class=\"string\">'reset HEAD --'</span></div></pre></td></tr></table></figure></p>\n<p>这样一来，下面的两条命令完全等同：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git unstage fileA</div><div class=\"line\">$ git reset HEAD fileA</div></pre></td></tr></table></figure></p>\n<p>显然，使用别名的方式看起来更清楚。另外，我们还经常设置 last 命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git config --global alias.last <span class=\"string\">'log -1 HEAD'</span></div></pre></td></tr></table></figure></p>\n<p>然后要看最后一次的提交信息，就变得简单多了：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git last</div><div class=\"line\">commit 66938dae3329c7aebe598c2246a8e6af90d04646</div><div class=\"line\">Author: Josh Goebel &lt;dreamer3@example.com&gt;</div><div class=\"line\">Date:   Tue Aug 26 19:48:51 2008 +0800</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">test</span> <span class=\"keyword\">for</span> current head</div><div class=\"line\"></div><div class=\"line\">    Signed-off-by: Scott Chacon &lt;schacon@example.com&gt;</div></pre></td></tr></table></figure></p>\n<p>可以看出，实际上 Git 只是简单地在命令中替换了你设置的别名。不过有时候我们希望运行某个外部命令，而非 Git 的子命令，这个好办，只需要在命令前加上 ! 就行。如果你自己写了些处理 Git 仓库信息的脚本的话，就可以用这种技术包装起来。作为演示，我们可以设置用 git visual 启动 gitk：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git config --global alias.visual <span class=\"string\">'!gitk'</span></div></pre></td></tr></table></figure></p>"},{"title":"npm常用命令","date":"2016-10-31T10:20:01.000Z","_content":"\nnpm (node package manager)是node模块管理工具，类似与Linux下的yum和apt。\n\n常用npm命令（参考：<https://npmjs.org/doc/>）\n安装模块\nnpm install\n安装当前目录package.json文件中配置的dependencies模块\n安装本地的模块文件\nnpm install <tarball file>\n<!-- more -->\nExample:\nnpm install ./package.tgz\n安装指定URL的模块\nnpm install <tarball url>\nExample:\nnpm install https://github.com/indexzero/forever/tarball/v0.5.6\n安装本地文件系统中指定的目录包含的模块\nnpm install <folder>\n安装并更新package.json中的版本配置\nnpm install <name> [–save|–save-dev|–save-optional]\n其中：\n添加–save 参数安装的模块的名字及其版本信息会出现在package.json的dependencies选项中\n添加–save-dev 参数安装的模块的名字及其版本信息会出现在package.json的devDependencies选项中\n添加–save-optional 参数安装的模块的名字及其版本信息会出现在package.json的optionalDependencies选项中\n安装模块的config的tag配置中含有指定tag的版本\nnpm install <name>@&lt;tag&gt;\nExample:\nnpm install sax@latest\n安装模块的指定版本\nnpm install <name>@&lt;version&gt;\nExample:\nnpm install underscore@1.5.2\n安装模块指定版本号范围内的某一个版本\nnpm install <name>@&lt;version range&gt;\nExample:\nnpm install async@”&lt;=0.2.0 &gt;0.2.9″\n–force强制拉取远程资源，即使本地已经安装这个模块\nExample:\nnpm install underscore –force\n-g或–global全局安装模块，如果没有这个参数，会安装在当前目录的node_modules子目录下\nExample:\nnpm install -g express\n显示npm的bin目录\nnpm bin\n设置npm配置\nnpm config set <key> <value> [–global]\n使用–global参数，设置全局配置\nExample:\n设置代理\nnpm config set proxy=http://proxy.tencent.com:8080\n设置npm的镜像地址\nnpm config set registry http://npm.oa.com\n获取npm配置\nnpm config get <key>\nExample:\n获取npm当前镜像地址\nnpm config get registory\n删除npm配置\nnpm config delete <key>\nExample:\n删除代理设置\nnpm config delete proxy\n在编辑器中打开npm配置文件\nnpm config edit\n交互式的创建package.json文件\nnpm init\n创建模块的压缩包\nnpm pack [<pkg> [<pkg> … ]]\n如果没有参数，则npm会打包当前模块目录\n发布模块，发布后可通过名称来安装该模块\nnpm publish <tarball>\nnpm publish <folder>\n其中：\n<folder>：包含package.json文件的目录\n<tarball>：经过gzip压缩并归档的一个URL或文件路径，该压缩包包含单个目录，且该目录内有package.json文件\n删除模块\nnpm rm <name>\nnpm r <name>\nnpm uninstall <name>\nnpm un <name>\n注意：不会删除package.json文件dependencies选项中对应的依赖配置\n查找模块\nnpm search [search terms ..]\nnpm s [search terms ..]\nnpm se [search terms ..]\n查找匹配查找字符串的模块\n更新模块\nnpm update [-g] [<name> [<name> … ]]\n更新指定name列表中的模块。-g参数更新全局安装的模块。\n如果没有指定name，且不是在某个模块内，会更新当前目录依赖的所有包都会被更新（包括全局和模块内）；如果当前目录在某个模块目录内，会更新该模块依赖的模块，所以不指定name直接运行npm update时，最好在某个模块内运行，以免更新到其他不想更新的模块。\n执行脚本\nnpm start [<name>]\nnpm stop [<name>]\nnpm test [<name>] 等\n运行package的start脚本，该脚本写在package.json文件scripts的start字段中。\n该字段的值可以是当前系统控制台可执行的脚本，也可以是当前系统可执行文件的路径。\n如果不传name参数，则执行当前目录下package.json文件中定义的脚本。\n详见https://npmjs.org/doc/misc/npm-scripts.html\npackage.json文件\n模块的配置文件，详见<https://npmjs.org/doc/files/package.json.html>\n\n","source":"_posts/npm常用命令.md","raw":"---\ntitle: npm常用命令\ndate: 2016-10-31 10:20:01\ntags:\n---\n\nnpm (node package manager)是node模块管理工具，类似与Linux下的yum和apt。\n\n常用npm命令（参考：<https://npmjs.org/doc/>）\n安装模块\nnpm install\n安装当前目录package.json文件中配置的dependencies模块\n安装本地的模块文件\nnpm install <tarball file>\n<!-- more -->\nExample:\nnpm install ./package.tgz\n安装指定URL的模块\nnpm install <tarball url>\nExample:\nnpm install https://github.com/indexzero/forever/tarball/v0.5.6\n安装本地文件系统中指定的目录包含的模块\nnpm install <folder>\n安装并更新package.json中的版本配置\nnpm install <name> [–save|–save-dev|–save-optional]\n其中：\n添加–save 参数安装的模块的名字及其版本信息会出现在package.json的dependencies选项中\n添加–save-dev 参数安装的模块的名字及其版本信息会出现在package.json的devDependencies选项中\n添加–save-optional 参数安装的模块的名字及其版本信息会出现在package.json的optionalDependencies选项中\n安装模块的config的tag配置中含有指定tag的版本\nnpm install <name>@&lt;tag&gt;\nExample:\nnpm install sax@latest\n安装模块的指定版本\nnpm install <name>@&lt;version&gt;\nExample:\nnpm install underscore@1.5.2\n安装模块指定版本号范围内的某一个版本\nnpm install <name>@&lt;version range&gt;\nExample:\nnpm install async@”&lt;=0.2.0 &gt;0.2.9″\n–force强制拉取远程资源，即使本地已经安装这个模块\nExample:\nnpm install underscore –force\n-g或–global全局安装模块，如果没有这个参数，会安装在当前目录的node_modules子目录下\nExample:\nnpm install -g express\n显示npm的bin目录\nnpm bin\n设置npm配置\nnpm config set <key> <value> [–global]\n使用–global参数，设置全局配置\nExample:\n设置代理\nnpm config set proxy=http://proxy.tencent.com:8080\n设置npm的镜像地址\nnpm config set registry http://npm.oa.com\n获取npm配置\nnpm config get <key>\nExample:\n获取npm当前镜像地址\nnpm config get registory\n删除npm配置\nnpm config delete <key>\nExample:\n删除代理设置\nnpm config delete proxy\n在编辑器中打开npm配置文件\nnpm config edit\n交互式的创建package.json文件\nnpm init\n创建模块的压缩包\nnpm pack [<pkg> [<pkg> … ]]\n如果没有参数，则npm会打包当前模块目录\n发布模块，发布后可通过名称来安装该模块\nnpm publish <tarball>\nnpm publish <folder>\n其中：\n<folder>：包含package.json文件的目录\n<tarball>：经过gzip压缩并归档的一个URL或文件路径，该压缩包包含单个目录，且该目录内有package.json文件\n删除模块\nnpm rm <name>\nnpm r <name>\nnpm uninstall <name>\nnpm un <name>\n注意：不会删除package.json文件dependencies选项中对应的依赖配置\n查找模块\nnpm search [search terms ..]\nnpm s [search terms ..]\nnpm se [search terms ..]\n查找匹配查找字符串的模块\n更新模块\nnpm update [-g] [<name> [<name> … ]]\n更新指定name列表中的模块。-g参数更新全局安装的模块。\n如果没有指定name，且不是在某个模块内，会更新当前目录依赖的所有包都会被更新（包括全局和模块内）；如果当前目录在某个模块目录内，会更新该模块依赖的模块，所以不指定name直接运行npm update时，最好在某个模块内运行，以免更新到其他不想更新的模块。\n执行脚本\nnpm start [<name>]\nnpm stop [<name>]\nnpm test [<name>] 等\n运行package的start脚本，该脚本写在package.json文件scripts的start字段中。\n该字段的值可以是当前系统控制台可执行的脚本，也可以是当前系统可执行文件的路径。\n如果不传name参数，则执行当前目录下package.json文件中定义的脚本。\n详见https://npmjs.org/doc/misc/npm-scripts.html\npackage.json文件\n模块的配置文件，详见<https://npmjs.org/doc/files/package.json.html>\n\n","slug":"npm常用命令","published":1,"updated":"2016-10-31T14:49:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuy6rzk9000emsq45dyrml3o","content":"<p>npm (node package manager)是node模块管理工具，类似与Linux下的yum和apt。</p>\n<p>常用npm命令（参考：<a href=\"https://npmjs.org/doc/\" target=\"_blank\" rel=\"external\">https://npmjs.org/doc/</a>）<br>安装模块<br>npm install<br>安装当前目录package.json文件中配置的dependencies模块<br>安装本地的模块文件<br>npm install <tarball file=\"\"><br><a id=\"more\"></a><br>Example:<br>npm install ./package.tgz<br>安装指定URL的模块<br>npm install <tarball url=\"\"><br>Example:<br>npm install <a href=\"https://github.com/indexzero/forever/tarball/v0.5.6\" target=\"_blank\" rel=\"external\">https://github.com/indexzero/forever/tarball/v0.5.6</a><br>安装本地文件系统中指定的目录包含的模块<br>npm install <folder><br>安装并更新package.json中的版本配置<br>npm install <name> [–save|–save-dev|–save-optional]<br>其中：<br>添加–save 参数安装的模块的名字及其版本信息会出现在package.json的dependencies选项中<br>添加–save-dev 参数安装的模块的名字及其版本信息会出现在package.json的devDependencies选项中<br>添加–save-optional 参数安装的模块的名字及其版本信息会出现在package.json的optionalDependencies选项中<br>安装模块的config的tag配置中含有指定tag的版本<br>npm install <name>@&lt;tag&gt;<br>Example:<br>npm install sax@latest<br>安装模块的指定版本<br>npm install <name>@&lt;version&gt;<br>Example:<br>npm install underscore@1.5.2<br>安装模块指定版本号范围内的某一个版本<br>npm install <name>@&lt;version range&gt;<br>Example:<br>npm install async@”&lt;=0.2.0 &gt;0.2.9″<br>–force强制拉取远程资源，即使本地已经安装这个模块<br>Example:<br>npm install underscore –force<br>-g或–global全局安装模块，如果没有这个参数，会安装在当前目录的node_modules子目录下<br>Example:<br>npm install -g express<br>显示npm的bin目录<br>npm bin<br>设置npm配置<br>npm config set <key> <value> [–global]<br>使用–global参数，设置全局配置<br>Example:<br>设置代理<br>npm config set proxy=<a href=\"http://proxy.tencent.com:8080\" target=\"_blank\" rel=\"external\">http://proxy.tencent.com:8080</a><br>设置npm的镜像地址<br>npm config set registry <a href=\"http://npm.oa.com\" target=\"_blank\" rel=\"external\">http://npm.oa.com</a><br>获取npm配置<br>npm config get <key><br>Example:<br>获取npm当前镜像地址<br>npm config get registory<br>删除npm配置<br>npm config delete <key><br>Example:<br>删除代理设置<br>npm config delete proxy<br>在编辑器中打开npm配置文件<br>npm config edit<br>交互式的创建package.json文件<br>npm init<br>创建模块的压缩包<br>npm pack [<pkg> [<pkg> … ]]<br>如果没有参数，则npm会打包当前模块目录<br>发布模块，发布后可通过名称来安装该模块<br>npm publish <tarball><br>npm publish <folder><br>其中：</folder></tarball></pkg></pkg></key></key></value></key></name></name></name></name></folder></tarball></tarball></p>\n<p><folder>：包含package.json文件的目录</folder></p>\n<p><tarball>：经过gzip压缩并归档的一个URL或文件路径，该压缩包包含单个目录，且该目录内有package.json文件<br>删除模块<br>npm rm <name><br>npm r <name><br>npm uninstall <name><br>npm un <name><br>注意：不会删除package.json文件dependencies选项中对应的依赖配置<br>查找模块<br>npm search [search terms ..]<br>npm s [search terms ..]<br>npm se [search terms ..]<br>查找匹配查找字符串的模块<br>更新模块<br>npm update [-g] [<name> [<name> … ]]<br>更新指定name列表中的模块。-g参数更新全局安装的模块。<br>如果没有指定name，且不是在某个模块内，会更新当前目录依赖的所有包都会被更新（包括全局和模块内）；如果当前目录在某个模块目录内，会更新该模块依赖的模块，所以不指定name直接运行npm update时，最好在某个模块内运行，以免更新到其他不想更新的模块。<br>执行脚本<br>npm start [<name>]<br>npm stop [<name>]<br>npm test [<name>] 等<br>运行package的start脚本，该脚本写在package.json文件scripts的start字段中。<br>该字段的值可以是当前系统控制台可执行的脚本，也可以是当前系统可执行文件的路径。<br>如果不传name参数，则执行当前目录下package.json文件中定义的脚本。<br>详见<a href=\"https://npmjs.org/doc/misc/npm-scripts.html\" target=\"_blank\" rel=\"external\">https://npmjs.org/doc/misc/npm-scripts.html</a><br>package.json文件<br>模块的配置文件，详见<a href=\"https://npmjs.org/doc/files/package.json.html\" target=\"_blank\" rel=\"external\">https://npmjs.org/doc/files/package.json.html</a></name></name></name></name></name></name></name></name></name></tarball></p>\n","excerpt":"<p>npm (node package manager)是node模块管理工具，类似与Linux下的yum和apt。</p>\n<p>常用npm命令（参考：<a href=\"https://npmjs.org/doc/\">https://npmjs.org/doc/</a>）<br>安装模块<br>npm install<br>安装当前目录package.json文件中配置的dependencies模块<br>安装本地的模块文件<br>npm install <tarball file><br>","more":"<br>Example:<br>npm install ./package.tgz<br>安装指定URL的模块<br>npm install <tarball url><br>Example:<br>npm install <a href=\"https://github.com/indexzero/forever/tarball/v0.5.6\">https://github.com/indexzero/forever/tarball/v0.5.6</a><br>安装本地文件系统中指定的目录包含的模块<br>npm install <folder><br>安装并更新package.json中的版本配置<br>npm install <name> [–save|–save-dev|–save-optional]<br>其中：<br>添加–save 参数安装的模块的名字及其版本信息会出现在package.json的dependencies选项中<br>添加–save-dev 参数安装的模块的名字及其版本信息会出现在package.json的devDependencies选项中<br>添加–save-optional 参数安装的模块的名字及其版本信息会出现在package.json的optionalDependencies选项中<br>安装模块的config的tag配置中含有指定tag的版本<br>npm install <name>@&lt;tag&gt;<br>Example:<br>npm install sax@latest<br>安装模块的指定版本<br>npm install <name>@&lt;version&gt;<br>Example:<br>npm install underscore@1.5.2<br>安装模块指定版本号范围内的某一个版本<br>npm install <name>@&lt;version range&gt;<br>Example:<br>npm install async@”&lt;=0.2.0 &gt;0.2.9″<br>–force强制拉取远程资源，即使本地已经安装这个模块<br>Example:<br>npm install underscore –force<br>-g或–global全局安装模块，如果没有这个参数，会安装在当前目录的node_modules子目录下<br>Example:<br>npm install -g express<br>显示npm的bin目录<br>npm bin<br>设置npm配置<br>npm config set <key> <value> [–global]<br>使用–global参数，设置全局配置<br>Example:<br>设置代理<br>npm config set proxy=<a href=\"http://proxy.tencent.com:8080\">http://proxy.tencent.com:8080</a><br>设置npm的镜像地址<br>npm config set registry <a href=\"http://npm.oa.com\">http://npm.oa.com</a><br>获取npm配置<br>npm config get <key><br>Example:<br>获取npm当前镜像地址<br>npm config get registory<br>删除npm配置<br>npm config delete <key><br>Example:<br>删除代理设置<br>npm config delete proxy<br>在编辑器中打开npm配置文件<br>npm config edit<br>交互式的创建package.json文件<br>npm init<br>创建模块的压缩包<br>npm pack [<pkg> [<pkg> … ]]<br>如果没有参数，则npm会打包当前模块目录<br>发布模块，发布后可通过名称来安装该模块<br>npm publish <tarball><br>npm publish <folder><br>其中：</p>\n<p><folder>：包含package.json文件的目录</p>\n<p><tarball>：经过gzip压缩并归档的一个URL或文件路径，该压缩包包含单个目录，且该目录内有package.json文件<br>删除模块<br>npm rm <name><br>npm r <name><br>npm uninstall <name><br>npm un <name><br>注意：不会删除package.json文件dependencies选项中对应的依赖配置<br>查找模块<br>npm search [search terms ..]<br>npm s [search terms ..]<br>npm se [search terms ..]<br>查找匹配查找字符串的模块<br>更新模块<br>npm update [-g] [<name> [<name> … ]]<br>更新指定name列表中的模块。-g参数更新全局安装的模块。<br>如果没有指定name，且不是在某个模块内，会更新当前目录依赖的所有包都会被更新（包括全局和模块内）；如果当前目录在某个模块目录内，会更新该模块依赖的模块，所以不指定name直接运行npm update时，最好在某个模块内运行，以免更新到其他不想更新的模块。<br>执行脚本<br>npm start [<name>]<br>npm stop [<name>]<br>npm test [<name>] 等<br>运行package的start脚本，该脚本写在package.json文件scripts的start字段中。<br>该字段的值可以是当前系统控制台可执行的脚本，也可以是当前系统可执行文件的路径。<br>如果不传name参数，则执行当前目录下package.json文件中定义的脚本。<br>详见<a href=\"https://npmjs.org/doc/misc/npm-scripts.html\">https://npmjs.org/doc/misc/npm-scripts.html</a><br>package.json文件<br>模块的配置文件，详见<a href=\"https://npmjs.org/doc/files/package.json.html\">https://npmjs.org/doc/files/package.json.html</a></p>"},{"title":"sublime","date":"2016-10-30T22:41:58.000Z","_content":"\nCt Sh P：命令\nCt P：查找\nCt 鼠标左键多击：多行光标\nCt Sh UP  ：移动一行\nTab：补全\n\n\n\n\n","source":"_posts/sublime.md","raw":"---\ntitle: sublime\ndate: 2016-10-30 22:41:58\ntags:\n---\n\nCt Sh P：命令\nCt P：查找\nCt 鼠标左键多击：多行光标\nCt Sh UP  ：移动一行\nTab：补全\n\n\n\n\n","slug":"sublime","published":1,"updated":"2016-10-31T03:55:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuy6rzkb000gmsq4n6j8w4jq","content":"<p>Ct Sh P：命令<br>Ct P：查找<br>Ct 鼠标左键多击：多行光标<br>Ct Sh UP  ：移动一行<br>Tab：补全</p>\n","excerpt":"","more":"<p>Ct Sh P：命令<br>Ct P：查找<br>Ct 鼠标左键多击：多行光标<br>Ct Sh UP  ：移动一行<br>Tab：补全</p>\n"},{"title":"制作hexo静态网页详细步骤","date":"2016-08-26T11:45:11.000Z","_content":"## 简介\n本人于2016-8-26 成功创建第一个使用hexo框架的静态网站. 写下这篇博客, 期望将来自己有问题时或者其他有兴趣的人方便编写自己的博客. \n\n## 所需工具\n以下均为百度云链接, Node.js为64位.\n\t[Node.js](http://pan.baidu.com/s/1mi1zjeC/),密码：kszc , [官方地址](https://nodejs.org/en/)\n\t[Git](http://pan.baidu.com/s/1kVGurND/), 密码：2266 \n\tNodepad++ , 这个自己找一下.\n\tgithub帐号.\n\t<!--more-->\n## 教程开始\n\n### 链接github\n设置Git的user name和email：(假设用户名设为aa, 邮箱为xxx@yy.zz)\n``` bash\n$ git config --global user.name \"aa\"\n$ git config --global user.email \"xxx@yy.zz\"\n```\n检查是否有ssh密钥\n``` bash\n$ cd ~/.ssh  #有的话, 则能进入该目录, 否则错误提示\n```\n生成密钥：\n``` bash\n$ ssh-keygen -t rsa -C \"xxx@yy.zz\"\n```\n后面会让你输入密码. 可以输入, 也可以不输入. (不输入的话, 以后deploy的时候就不用输入密码. 意味着别人用你电脑也能修改远程文件. )\n\ngithub上添加ssh密钥，这要添加的是“id_rsa.pub”里面的公钥\n\n测试: $ ssh git@github.com  (设置过密码的话, 会让你输入密码)\n\n### 安装Hexo\nNode 和 Git 都安装好后，可执行如下命令安装hexo：\n``` bash\n$ npm install -g hexo-cli\n```\n初始化文件夹(生成很多文件和文件夹,假设初始化C:/abc) :\n``` bash\n$ hexo init c:/abc   #也可以cd到目标目录，执行 hexo init\n```\n生成静态页面\n``` bash\n$ hexo generate  #可以简写为   hexo g\n```\n本地启动\n``` bash\n$ hexo server  #可以简写为   hexo s\n```\n\n### 发布到github上\n在站点配置文件底部加入 (repository为你的repository所在地址):\n``` bash\ndeploy: \n  type: git\n  repository: git@github.com:Tzxhy/Tzxhy.github.io.git\n  branch: master\n```\n\n在git bash中:\n``` bash\n$ hexo deploy  #有密码的话,会让你输入密码\n```\n\n安装 git\n``` bash\n$ git init\n```\n\n## 后期事宜\n\n### 更换主题\nhexo更换主题十分简单. 在themes文件夹中放置主题文件即可. 在站点配置文件中修改 theme 属性为对应文件夹名称. 这里提供NexT主题下载. 也是我现在用的.\n[Next](http://pan.baidu.com/s/1kUXEXN5), 密码：1zzg\n\n## 联系作者\n有啥问题联系QQ: 1139723651\n","source":"_posts/制作hexo静态网页详细步骤.md","raw":"---\ntitle: 制作hexo静态网页详细步骤\ndate: 2016-08-26 11:45:11\ntags: 教程 Hexo next git\n---\n## 简介\n本人于2016-8-26 成功创建第一个使用hexo框架的静态网站. 写下这篇博客, 期望将来自己有问题时或者其他有兴趣的人方便编写自己的博客. \n\n## 所需工具\n以下均为百度云链接, Node.js为64位.\n\t[Node.js](http://pan.baidu.com/s/1mi1zjeC/),密码：kszc , [官方地址](https://nodejs.org/en/)\n\t[Git](http://pan.baidu.com/s/1kVGurND/), 密码：2266 \n\tNodepad++ , 这个自己找一下.\n\tgithub帐号.\n\t<!--more-->\n## 教程开始\n\n### 链接github\n设置Git的user name和email：(假设用户名设为aa, 邮箱为xxx@yy.zz)\n``` bash\n$ git config --global user.name \"aa\"\n$ git config --global user.email \"xxx@yy.zz\"\n```\n检查是否有ssh密钥\n``` bash\n$ cd ~/.ssh  #有的话, 则能进入该目录, 否则错误提示\n```\n生成密钥：\n``` bash\n$ ssh-keygen -t rsa -C \"xxx@yy.zz\"\n```\n后面会让你输入密码. 可以输入, 也可以不输入. (不输入的话, 以后deploy的时候就不用输入密码. 意味着别人用你电脑也能修改远程文件. )\n\ngithub上添加ssh密钥，这要添加的是“id_rsa.pub”里面的公钥\n\n测试: $ ssh git@github.com  (设置过密码的话, 会让你输入密码)\n\n### 安装Hexo\nNode 和 Git 都安装好后，可执行如下命令安装hexo：\n``` bash\n$ npm install -g hexo-cli\n```\n初始化文件夹(生成很多文件和文件夹,假设初始化C:/abc) :\n``` bash\n$ hexo init c:/abc   #也可以cd到目标目录，执行 hexo init\n```\n生成静态页面\n``` bash\n$ hexo generate  #可以简写为   hexo g\n```\n本地启动\n``` bash\n$ hexo server  #可以简写为   hexo s\n```\n\n### 发布到github上\n在站点配置文件底部加入 (repository为你的repository所在地址):\n``` bash\ndeploy: \n  type: git\n  repository: git@github.com:Tzxhy/Tzxhy.github.io.git\n  branch: master\n```\n\n在git bash中:\n``` bash\n$ hexo deploy  #有密码的话,会让你输入密码\n```\n\n安装 git\n``` bash\n$ git init\n```\n\n## 后期事宜\n\n### 更换主题\nhexo更换主题十分简单. 在themes文件夹中放置主题文件即可. 在站点配置文件中修改 theme 属性为对应文件夹名称. 这里提供NexT主题下载. 也是我现在用的.\n[Next](http://pan.baidu.com/s/1kUXEXN5), 密码：1zzg\n\n## 联系作者\n有啥问题联系QQ: 1139723651\n","slug":"制作hexo静态网页详细步骤","published":1,"updated":"2016-10-31T03:55:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuy6rzke000imsq4d7d3dgai","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>本人于2016-8-26 成功创建第一个使用hexo框架的静态网站. 写下这篇博客, 期望将来自己有问题时或者其他有兴趣的人方便编写自己的博客. </p>\n<h2 id=\"所需工具\"><a href=\"#所需工具\" class=\"headerlink\" title=\"所需工具\"></a>所需工具</h2><p>以下均为百度云链接, Node.js为64位.<br>    <a href=\"http://pan.baidu.com/s/1mi1zjeC/\" target=\"_blank\" rel=\"external\">Node.js</a>,密码：kszc , <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">官方地址</a><br>    <a href=\"http://pan.baidu.com/s/1kVGurND/\" target=\"_blank\" rel=\"external\">Git</a>, 密码：2266<br>    Nodepad++ , 这个自己找一下.<br>    github帐号.<br>    <a id=\"more\"></a></p>\n<h2 id=\"教程开始\"><a href=\"#教程开始\" class=\"headerlink\" title=\"教程开始\"></a>教程开始</h2><h3 id=\"链接github\"><a href=\"#链接github\" class=\"headerlink\" title=\"链接github\"></a>链接github</h3><p>设置Git的user name和email：(假设用户名设为aa, 邮箱为xxx@yy.zz)<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name <span class=\"string\">\"aa\"</span></div><div class=\"line\">$ git config --global user.email <span class=\"string\">\"xxx@yy.zz\"</span></div></pre></td></tr></table></figure></p>\n<p>检查是否有ssh密钥<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> ~/.ssh  <span class=\"comment\">#有的话, 则能进入该目录, 否则错误提示</span></div></pre></td></tr></table></figure></p>\n<p>生成密钥：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"xxx@yy.zz\"</span></div></pre></td></tr></table></figure></p>\n<p>后面会让你输入密码. 可以输入, 也可以不输入. (不输入的话, 以后deploy的时候就不用输入密码. 意味着别人用你电脑也能修改远程文件. )</p>\n<p>github上添加ssh密钥，这要添加的是“id_rsa.pub”里面的公钥</p>\n<p>测试: $ ssh git@github.com  (设置过密码的话, 会让你输入密码)</p>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><p>Node 和 Git 都安装好后，可执行如下命令安装hexo：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p>\n<p>初始化文件夹(生成很多文件和文件夹,假设初始化C:/abc) :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo init c:/abc   <span class=\"comment\">#也可以cd到目标目录，执行 hexo init</span></div></pre></td></tr></table></figure></p>\n<p>生成静态页面<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo generate  <span class=\"comment\">#可以简写为   hexo g</span></div></pre></td></tr></table></figure></p>\n<p>本地启动<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo server  <span class=\"comment\">#可以简写为   hexo s</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"发布到github上\"><a href=\"#发布到github上\" class=\"headerlink\" title=\"发布到github上\"></a>发布到github上</h3><p>在站点配置文件底部加入 (repository为你的repository所在地址):<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">deploy: </div><div class=\"line\">  <span class=\"built_in\">type</span>: git</div><div class=\"line\">  repository: git@github.com:Tzxhy/Tzxhy.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<p>在git bash中:<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo deploy  <span class=\"comment\">#有密码的话,会让你输入密码</span></div></pre></td></tr></table></figure></p>\n<p>安装 git<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git init</div></pre></td></tr></table></figure></p>\n<h2 id=\"后期事宜\"><a href=\"#后期事宜\" class=\"headerlink\" title=\"后期事宜\"></a>后期事宜</h2><h3 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h3><p>hexo更换主题十分简单. 在themes文件夹中放置主题文件即可. 在站点配置文件中修改 theme 属性为对应文件夹名称. 这里提供NexT主题下载. 也是我现在用的.<br><a href=\"http://pan.baidu.com/s/1kUXEXN5\" target=\"_blank\" rel=\"external\">Next</a>, 密码：1zzg</p>\n<h2 id=\"联系作者\"><a href=\"#联系作者\" class=\"headerlink\" title=\"联系作者\"></a>联系作者</h2><p>有啥问题联系QQ: 1139723651</p>\n","excerpt":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>本人于2016-8-26 成功创建第一个使用hexo框架的静态网站. 写下这篇博客, 期望将来自己有问题时或者其他有兴趣的人方便编写自己的博客. </p>\n<h2 id=\"所需工具\"><a href=\"#所需工具\" class=\"headerlink\" title=\"所需工具\"></a>所需工具</h2><p>以下均为百度云链接, Node.js为64位.<br>    <a href=\"http://pan.baidu.com/s/1mi1zjeC/\">Node.js</a>,密码：kszc , <a href=\"https://nodejs.org/en/\">官方地址</a><br>    <a href=\"http://pan.baidu.com/s/1kVGurND/\">Git</a>, 密码：2266<br>    Nodepad++ , 这个自己找一下.<br>    github帐号.<br>","more":"</p>\n<h2 id=\"教程开始\"><a href=\"#教程开始\" class=\"headerlink\" title=\"教程开始\"></a>教程开始</h2><h3 id=\"链接github\"><a href=\"#链接github\" class=\"headerlink\" title=\"链接github\"></a>链接github</h3><p>设置Git的user name和email：(假设用户名设为aa, 邮箱为xxx@yy.zz)<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name <span class=\"string\">\"aa\"</span></div><div class=\"line\">$ git config --global user.email <span class=\"string\">\"xxx@yy.zz\"</span></div></pre></td></tr></table></figure></p>\n<p>检查是否有ssh密钥<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> ~/.ssh  <span class=\"comment\">#有的话, 则能进入该目录, 否则错误提示</span></div></pre></td></tr></table></figure></p>\n<p>生成密钥：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"xxx@yy.zz\"</span></div></pre></td></tr></table></figure></p>\n<p>后面会让你输入密码. 可以输入, 也可以不输入. (不输入的话, 以后deploy的时候就不用输入密码. 意味着别人用你电脑也能修改远程文件. )</p>\n<p>github上添加ssh密钥，这要添加的是“id_rsa.pub”里面的公钥</p>\n<p>测试: $ ssh git@github.com  (设置过密码的话, 会让你输入密码)</p>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><p>Node 和 Git 都安装好后，可执行如下命令安装hexo：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p>\n<p>初始化文件夹(生成很多文件和文件夹,假设初始化C:/abc) :<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo init c:/abc   <span class=\"comment\">#也可以cd到目标目录，执行 hexo init</span></div></pre></td></tr></table></figure></p>\n<p>生成静态页面<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo generate  <span class=\"comment\">#可以简写为   hexo g</span></div></pre></td></tr></table></figure></p>\n<p>本地启动<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo server  <span class=\"comment\">#可以简写为   hexo s</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"发布到github上\"><a href=\"#发布到github上\" class=\"headerlink\" title=\"发布到github上\"></a>发布到github上</h3><p>在站点配置文件底部加入 (repository为你的repository所在地址):<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">deploy: </div><div class=\"line\">  <span class=\"built_in\">type</span>: git</div><div class=\"line\">  repository: git@github.com:Tzxhy/Tzxhy.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<p>在git bash中:<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo deploy  <span class=\"comment\">#有密码的话,会让你输入密码</span></div></pre></td></tr></table></figure></p>\n<p>安装 git<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git init</div></pre></td></tr></table></figure></p>\n<h2 id=\"后期事宜\"><a href=\"#后期事宜\" class=\"headerlink\" title=\"后期事宜\"></a>后期事宜</h2><h3 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h3><p>hexo更换主题十分简单. 在themes文件夹中放置主题文件即可. 在站点配置文件中修改 theme 属性为对应文件夹名称. 这里提供NexT主题下载. 也是我现在用的.<br><a href=\"http://pan.baidu.com/s/1kUXEXN5\">Next</a>, 密码：1zzg</p>\n<h2 id=\"联系作者\"><a href=\"#联系作者\" class=\"headerlink\" title=\"联系作者\"></a>联系作者</h2><p>有啥问题联系QQ: 1139723651</p>"},{"title":"sass学习","date":"2016-10-22T19:47:36.000Z","_content":"\n# sass\n## 编译风格\n1, --style nested\n``` bash\nnav {\n  ul {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n\n  li { display: inline-block; }\n\n  a {\n    display: block;\n    padding: 6px 12px;\n    text-decoration: none;\n  }\n}\n```\n<!--more-->\n2, sass --watch test.scss:test.css --style expanded\n``` bash\nnav {\n  ul {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n\n  li { display: inline-block; }\n\n  a {\n    display: block;\n    padding: 6px 12px;\n    text-decoration: none;\n  }\n}\n```\n3, sass --watch test.scss:test.css --style compact\n4, sass --watch test.scss:test.css --style compressed\n\nSass 调试: sass --watch --scss --sourcemap style.scss:style.css.在 Sass3.3 版本之上（我测试使用的版本是 3.4.7），不需要添加这个参数也可以\n\n## 基础\n### [Sass]声明变量\n声明变量的符号“$”\n变量名称\n赋予变量的值\n``` bash\n$brand-primary : darken(#428bca, 6.5%) !default; // #337ab7\n$btn-primary-color : #fff !default;\n$btn-primary-bg : $brand-primary !default;\n$btn-primary-border : darken($btn-primary-bg, 5%) !default;\n```\n如果值后面加上!default则表示默认值。\n### [Sass]普通变量与默认变量\n普通变量：定义之后可以在全局范围内使用。\n``` bash\n$fontSize: 12px;\nbody{\n\tfont-size:$fontSize;\n}\n```\n默认变量：sass 的默认变量仅需要在值后面加上 !default 即可。\n``` bash\n$baseLineHeight:1.5 !default;\nbody{\n\tline-height: $baseLineHeight; \n}\n```\nsass 的默认变量一般是用来设置默认值，然后根据需求来覆盖的，覆盖的方式也很简单，只需要在默认变量之前重新声明下变量即可。\n``` bash\n$baseLineHeight: 2;\n$baseLineHeight: 1.5 !default;\nbody{\n\tline-height: $baseLineHeight; \n}\n```\n编译后的css代码：\n``` bash\nbody{\n\tline-height:2;\n}\n```\n### [Sass]变量的调用\n在 Sass 中声明了变量之后，就可以在需要的地方调用变量。调用变量的方法也非常的简单。\n``` bash\n.btn-primary {\n\tbackground-color: $btn-primary-bg;\n\tcolor: $btn-primary-color;\n\tborder: 1px solid $btn-primary-border;\n}\n```\n### [Sass]局部变量和全局变量\nSass 中变量的作用域在过去几年已经发生了一些改变。直到最近，规则集和其他范围内声明变量的作用域才默认为本地。如果已经存在同名的全局变量，从 3.4 版本开始，Sass 已经可以正确处理作用域的概念，并通过创建一个新的局部变量来代替。\n先来看一下代码例子：\n``` bash\n//SCSS\n$color: orange !default;//定义全局变量(在选择器、函数、混合宏...的外面定义的变量为全局变量)\n.block {\n  color: $color;//调用全局变量\n}\nem {\n  $color: red;//定义局部变量\n  a {\n\tcolor: $color;//调用局部变量\n  }\n}\nspan {\n  color: $color;//调用全局变量\n}\n```\n``` bash\n//CSS\n.block {\n  color: orange;\n}\nem a {\n  color: red;\n}\nspan {\n  color: orange;\n}\n```\n上面的示例演示可以得知，在元素内部定义的变量不会影响其他元素。如此可以简单的理解成，全局变量就是定义在元素外面的变量，而定义在元素内部的变量，是一个局部变量。\n我的建议，创建变量只适用于感觉确有必要的情况下。不要为了某些骇客行为而声明新变量，这丝毫没有作用。只有满足所有下述标准时方可创建新变量：\n1. 该值至少重复出现了两次；\n2. 该值至少可能会被更新一次；\n3. 该值所有的表现都与变量有关（非巧合）。\n\n### [Sass]嵌套-选择器嵌套\n1、选择器嵌套\n如果有：\n``` bash\n<header>\n<nav>\n    <a href=“##”>Home</a>\n    <a href=“##”>About</a>\n    <a href=“##”>Blog</a>\n</nav>\n<header>\n```\n想选中 header 中的 a 标签，在写 sCSS 会这样写：\n``` bash\nnav {\n  a {\n\tcolor: red;\n\theader & {\n\t\tcolor:green;\n\t}\n  }  \n}\n```\n``` bash\nnav a {\n  color:red;\n}\n\nheader nav a {\n  color:green;\n}\n```\n### [Sass]嵌套-属性嵌套\nSass 中还提供属性嵌套，CSS 有一些属性前缀相同，只是后缀不一样，比如：border-top/border-right，与这个类似的还有 margin、padding、font 等属性。假设你的样式中用到了：\n``` bash\n.box {\n\tborder-top: 1px solid red;\n\tborder-bottom: 1px solid green;\n}\n```\nscss中可以这么写：\n``` bash\n.box {\n  border: {\n   top: 1px solid red;\n   bottom: 1px solid green;\n  }\n}\n```\n注意border后面的冒号。\n### [Sass]嵌套-伪类嵌套\n其实伪类嵌套和属性嵌套非常类似，只不过他需要借助`&`符号一起配合使用。我们就拿经典的“clearfix”为例吧：\n``` bash\n.clearfix{\n&:before,\n&:after {\n    content:\"\";\n    display: table;\n  }\n&:after {\n    clear:both;\n    overflow: hidden;\n  }\n}\n```\n& 和冒号之间没有空格。\n``` bash\nclearfix:before, .clearfix:after {\n  content: \"\";\n  display: table;\n}\n.clearfix:after {\n  clear: both;\n  overflow: hidden;\n}\n```\n\n选择器嵌套最大的问题是将使最终的代码难以阅读。开发者需要花费巨大精力计算不同缩进级别下的选择器具体的表现效果。\n选择器越具体则声明语句越冗长，而且对最近选择器的引用(&)也越频繁。在某些时候，出现混淆选择器路径和探索下一级选择器的错误率很高，这非常不值得。\n\n为了防止此类情况，我们应该尽可能避免选择器嵌套。然而，显然只有少数情况适应这一措施。\n### [Sass]混合宏-声明混合宏\n如果你的整个网站中有几处小样式类似，比如颜色，字体等，在 Sass 可以使用变量来统一处理，那么这种选择还是不错的。但当你的样式变得越来越复杂，需要重复使用大段的样式时，使用变量就无法达到我们目了。这个时候 Sass 中的混合宏就会变得非常有意义。\n``` bash\n@mixin border-radius{\n    -webkit-border-radius: 5px;\n    border-radius: 5px;\n}\n```\t\n其中 @mixin 是用来声明混合宏的关键词，有点类似 CSS 中的 @media、@font-face 一样。border-radius 是混合宏的名称。大括号里面是复用的样式代码。\n除了声明一个不带参数的混合宏之外，还可以在定义混合宏时带有参数，如：\n``` bash\n@mixin border-radius($radius:5px){\n    -webkit-border-radius: $radius;\n    border-radius: $radius;\n}\n```\n上面是一个简单的定义混合宏的方法，当然， Sass 中的混合宏还提供更为复杂的，你可以在大括号里面写上带有逻辑关系，帮助更好的做你想做的事情,如：\n``` bash\n@mixin box-shadow($shadow...) {\n  @if length($shadow) >= 1 {\n    @include prefixer(box-shadow, $shadow);\n  } @else{\n    $shadow:0 0 4px rgba(0,0,0,.3);\n    @include prefixer(box-shadow, $shadow);\n  }\n}\n```\n这个 box-shadow 的混合宏，带有多个参数，这个时候可以使用“ … ”来替代。简单的解释一下，当 $shadow 的参数数量值大于或等于“ 1 ”时，表示有多个阴影值，反之调用默认的参数值“ 0 0 4px rgba(0,0,0,.3) ”。\n### [Sass]混合宏-调用混合宏\n``` bash\nbutton {\n    @include border-radius;\n}\n```\n@mixin 类似函数声明，@include 类似函数调用\n\n### [Sass]混合宏的参数--传一个不带值的参数\n在混合宏中，可以传递一个不带任何值得参数，比如：\n``` bash\n@mixin border-radius($radius){\n  -webkit-border-radius: $radius;\n  border-radius: $radius;\n}\n```\n``` bash\n.box {\n  @include border-radius(3px);\n}\n```\n注意，不传值会报错。\n\n### [Sass]混合宏的参数--传一个带值的参数\n在 Sass 的混合宏中，还可以给混合宏的参数传一个默认值，例如：\n``` bash\n@mixin border-radius($radius:3px){\n  -webkit-border-radius: $radius;\n  border-radius: $radius;\n}\n```\n在混合宏“border-radius”传了一个参数“$radius”，而且给这个参数赋予了一个默认值“3px”。\n在调用类似这样的混合宏时，会多有一个机会，假设你的页面中的圆角很多地方都是“3px”的圆角，那么这个时候只需要调用默认的混合宏“border-radius”:\n``` bash\n.btn {\n  @include border-radius;\n}\n```\n但有的时候，页面中有些元素的圆角值不一样，那么可以随机给混合宏传值，如：\n``` bash\n.box {\n  @include border-radius(50%);\n}\n```\n### [Sass]混合宏的参数--传多个参数\n``` bash\n@mixin center($width,$height){\n  width: $width;\n  height: $height;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-top: -($height) / 2;\n  margin-left: -($width) / 2;\n}\n```\n调用：\n``` bash\n.box-center {\n  @include center(500px,300px);\n}\n```\n有一个特别的参数“…”。当混合宏传的参数过多之时，可以使用参数来替代，如：\n``` bash\n@mixin box-shadow($shadows...){\n  @if length($shadows) >= 1 {\n    -webkit-box-shadow: $shadows;\n    box-shadow: $shadows;\n  } @else {\n    $shadows: 0 0 2px rgba(#000,.25);\n    -webkit-box-shadow: $shadow;\n    box-shadow: $shadow;\n  }\n}\n```\n### [Sass]混合宏的参数--混合宏的不足\n混合宏在实际编码中给我们带来很多方便之处，特别是对于复用重复代码块。但其最大的不足之处是会生成冗余的代码块。比如在不同的地方调用一个相同的混合宏时。如：\n``` bash\n@mixin border-radius{\n  -webkit-border-radius: 3px;\n  border-radius: 3px;\n}\n\n.box {\n  @include border-radius;\n  margin-bottom: 5px;\n}\n\n.btn {\n  @include border-radius;\n}\n```\n\n### [Sass]扩展/继承\n``` bash\n//SCSS\n.btn {\n  border: 1px solid #ccc;\n  padding: 6px 10px;\n  font-size: 14px;\n}\n\n.btn-primary {\n  background-color: #f36;\n  color: #fff;\n  @extend .btn;\n}\n\n.btn-second {\n  background-color: orange;\n  color: #fff;\n  @extend .btn;\n}\n```\n编译出来之后：\n``` bash\n//CSS\n.btn, .btn-primary, .btn-second {\n  border: 1px solid #ccc;\n  padding: 6px 10px;\n  font-size: 14px;\n}\n\n.btn-primary {\n  background-color: #f36;\n  color: #fff;\n}\n\n.btn-second {\n  background-clor: orange;\n  color: #fff;\n}\n```\n从示例代码可以看出，在 Sass 中的继承，可以继承类样式块中所有样式代码，而且编译出来的 CSS 会将选择器合并在一起，形成组合选择器\n### [Sass]占位符 %placeholder\nSass 中的占位符 %placeholder 功能是一个很强大，很实用的一个功能，这也是我非常喜欢的功能。他可以取代以前 CSS 中的基类造成的代码冗余的情形。因为 %placeholder 声明的代码，如果不被 @extend 调用的话，不会产生任何代码。来看一个演示：\n``` bash\n%mt5 {\n  margin-top: 5px;\n}\n%pt5{\n  padding-top: 5px;\n}\n```\n这段代码没有被 @extend 调用，他并没有产生任何代码块，只是静静的躺在你的某个 SCSS 文件中。只有通过 @extend 调用才会产生代码：\n``` bash\n//SCSS\n%mt5 {\n  margin-top: 5px;\n}\n%pt5{\n  padding-top: 5px;\n}\n\n.btn {\n  @extend %mt5;\n  @extend %pt5;\n}\n\n.block {\n  @extend %mt5;\n\n  span {\n    @extend %pt5;\n  }\n}\n```\n编译出来的CSS\n``` bash\n//CSS\n.btn, .block {\n  margin-top: 5px;\n}\n\n.btn, .block span {\n  padding-top: 5px;\n}\n```\n从编译出来的 CSS 代码可以看出，通过 @extend 调用的占位符，编译出来的代码会将相同的代码合并在一起。这也是我们希望看到的效果，也让你的代码变得更为干净。\n\n### [Sass]混合宏 VS 继承 VS 占位符\n初学者都常常纠结于这个问题“什么时候用混合宏，什么时候用继承，什么时候使用占位符？”其实他们各有各的优点与缺点，先来看看他们使用效果：\n混合宏：编译出来的 CSS 清晰告诉了大家，他不会自动合并相同的样式代码，如果在样式文件中调用同一个混合宏，会产生多个对应的样式代码，造成代码的冗余，这也是 CSSer 无法忍受的一件事情。不过他并不是一无事处，他可以传参数。\n个人建议：如果你的代码块中涉及到变量，建议使用混合宏来创建相同的代码块。\n继承：使用继承后，编译出来的 CSS 会将使用继承的代码块合并到一起，通过组合选择器的方式向大家展现，比如 .mt, .block, .block span, .header, .header span。这样编译出来的代码相对于混合宏来说要干净的多，也是 CSSer 期望看到。但是他不能传变量参数。\n\n个人建议：如果你的代码块不需要专任何变量参数，而且有一个基类已在文件中存在，那么建议使用 Sass 的继承。\n占位符：总结：编译出来的 CSS 代码和使用继承基本上是相同，只是不会在代码中生成占位符 mt 的选择器。那么占位符和继承的主要区别的，“占位符是独立定义，不调用的时候是不会在 CSS 中产生任何代码；继承是首先有一个基类存在，不管调用与不调用，基类的样式都将会出现在编译出来的 CSS 代码中。”\n![chabie](images/diff_sass.png);\n\n### [Sass]插值#{}\n使用 CSS 预处理器语言的一个主要原因是想使用 Sass 获得一个更好的结构体系。比如说你想写更干净的、高效的和面向对象的 CSS。Sass 中的插值(Interpolation)就是重要的一部分。让我们看一下下面的例子：\n``` bash\n$properties: (margin, padding);\n@mixin set-value($side, $value) {\n    @each $prop in $properties {\n        #{$prop}-#{$side}: $value;\n    }\n}\n.login-box {\n    @include set-value(top, 14px);\n}\n```\n这是 Sass 插值中一个简单的实例。当你想设置属性值的时候你可以使用字符串插入进来。另一个有用的用法是构建一个选择器。可以这样使用：\n``` bash\n@mixin generate-sizes($class, $small, $medium, $big) {\n    .#{$class}-small { font-size: $small; }\n    .#{$class}-medium { font-size: $medium; }\n    .#{$class}-big { font-size: $big; }\n}\n@include generate-sizes(\"header-text\", 12px, 20px, 40px);\n```\n``` bash\n.header-text-small { font-size: 12px; }\n.header-text-medium { font-size: 20px; }\n.header-text-big { font-size: 40px; }\n```\n第一个限制，这可能会很删除用于 Sass 变量的插值。你也不能在 mixin 中调用.\n幸运的是，可以使用 @extend 中使用插值。例如：\n``` bash\n%updated-status {\n    margin-top: 20px;\n    background: #F00;\n}\n.selected-status {\n    font-weight: bold;\n}\n$flag: \"status\";\n.navigation {\n    @extend %updated-#{$flag};\n    @extend .selected-#{$flag};\n}\n```\n### [Sass]注释\n注释对于一名程序员来说，是极其重要，良好的注释能帮助自己或者别人阅读源码。在 Sass 中注释有两种方式，我暂且将其命名为：\n  - 类似 CSS 的注释方式，使用 ”/* ”开头，结属使用 ”*/ ”\n  - 类似 JavaScript 的注释方式，使用“//”\n两者区别，前者会在编译出来的 CSS 显示，后者在编译出来的 CSS 中不会显示\n### [Sass]数据类型\nSass 和 JavaScript 语言类似，也具有自己的数据类型，在 Sass 中包含以下几种数据类型：\n  - 数字: 如，1、 2、 13、 10px；\n  - 字符串：有引号字符串或无引号字符串，如，\"foo\"、 'bar'、 baz；\n  - 颜色：如，blue、 #04a3f9、 rgba(255,0,0,0.5)；\n  - 布尔型：如，true、 false；\n  - 空值：如，null；\n  - 值列表：用空格或者逗号分开，如，1.5em 1em 0 2em 、 Helvetica, Arial, sans-serif。\nSassScript 也支持其他 CSS 属性值（property value），比如 Unicode 范围，或 !important 声明。然而，Sass 不会特殊对待这些属性值，一律视为无引号字符串 (unquoted strings)。\n#### [Sass]字符串\nSassScript 支持 CSS 的两种字符串类型：\n\n  - 有引号字符串 (quoted strings)，如 \"Lucida Grande\" 、'http://sass-lang.com'；\n  - 无引号字符串 (unquoted strings)，如 sans-serifbold。\n在编译 CSS 文件时不会改变其类型。只有一种情况例外，使用 #{ }插值语句 (interpolation) 时，有引号字符串将被编译为无引号字符串，这样方便了在混合指令 (mixin) 中引用选择器名。\n需要注意的是：当 deprecated = property syntax 时 （暂时不理解是怎样的情况），所有的字符串都将被编译为无引号字符串，不论是否使用了引号。\n### [Sass]值列表\n所谓值列表 (lists) 是指 Sass 如何处理 CSS 中： \n``` bash\nmargin: 10px 15px 0 0\n```\n或者： \n```\nfont-face: Helvetica, Arial, sans-serif\n```\n像上面这样通过空格或者逗号分隔的一系列的值。\nSass列表函数（Sass list functions）赋予了值列表更多功能（Sass进级会有讲解）：\n\n1. nth函数（nth function） 可以直接访问值列表中的某一项；\n2. join函数（join function） 可以将多个值列表连结在一起；\n3. append函数（append function） 可以在值列表中添加值；\n4. @each规则（@each rule） 则能够给值列表中的每个项目添加样式。\n### [Sass运算]\n程序中的运算是常见的一件事情，但在 CSS 中能做运算的，到目前为止仅有 calc() 函数可行。但在 Sass 中，运算只是其基本特性之一。在 Sass 中可以做各种数学计算，在接下来的章节中，主要和大家一起探讨有关于 Sass 中的数学运算。\n#### [Sass运算]加法\n加法运算是 Sass 中运算中的一种，在变量或属性中都可以做加法运算。如：\n``` bash\n.box {\n  width: 20px + 8in;\n}\n```\n``` bash\n.box {\n  width: 788px;\n}\n```\n但对于携带不同类型的单位时，在 Sass 中计算会报错，如下例所示：\n``` bash\n.box {\n  width: 20px + 1em;\n}\n```\n编译的时候，编译器会报错：“Incompatible units: 'em' and ‘px'.”\n#### [Sass运算]减法\nSass 的减法运算和加法运算类似，我们通过一个简单的示例来做阐述：\n``` bash\n$full-width: 960px;\n$sidebar-width: 200px;\n\n.content {\n  width: $full-width -  $sidebar-width;\n}\n```\n同样的，运算时碰到不同类型的单位时，编译也会报错。\n#### [Sass运算]乘法\nSass 中的乘法运算和前面介绍的加法与减法运算还略有不同。虽然他也能够支持多种单位（比如 em ,px , %），但当一个单位同时声明两个值时会有问题。比如下面的示例：\n``` bash\n.box {\n  width:10px * 2px;  \n}\n```\n编译的时候报“20px*px isn't a valid CSS value.”错误信息。\n\n如果进行乘法运算时，两个值单位相同时，只需要为一个数值提供单位即可。上面的示例可以修改成：\n``` bash\n.box {\n  width: 10px * 2;\n}\n```\n#### [Sass运算]除法\nSass 的乘法运算规则也适用于除法运算。不过除法运算还有一个特殊之处。众所周知“/”符号在 CSS 中已做为一种符号使用。因此在 Sass 中做除法运算时，直接使用“/”符号做为除号时，将不会生效，编译时既得不到我们需要的效果，也不会报错。一起先来看一个简单的示例：\n``` bash\n.box {\n  width: 100px / 2;  \n}\n```\n.box {\n  width: 100px / 2;\n}\n这样的结果对于大家来说没有任何意义。要修正这个问题，只需要给运算的外面添加一个小括号( )即可：\n``` bash\n.box {\n  width: (100px / 2);  \n}\n```\n``` bash\n.box {\n  width: 50px;\n}\n```\n除了上面情况带有小括号，“/”符号会当作除法运算符之外，如果“/”符号在已有的数学表达式中时，也会被认作除法符号。如下面示例：\n.box {\n  width: 100px / 2 + 0;  \n}\n另外，在 Sass 除法运算中，当用变量进行除法运算时，“/”符号也会自动被识别成除法，如下例所示：\n``` bash\n$width: 1000px;\n$nums: 10;\n\n.item {\n  width: $width / 10;  \n}\n\n.list {\n  width: $width / $nums;\n}\n```\n综合上述，”/  ”符号被当作除法运算符时有以下几种情况：\n  - 如果数值或它的任意部分是存储在一个变量中或是函数的返回值。\n  - 如果数值被圆括号包围。\n  - 如果数值是另一个数学表达式的一部分。\n\n``` bash\n//SCSS\np {\n  font: 10px/8px;             // 纯 CSS，不是除法运算\n  $width: 1000px;\n  width: $width/2;            // 使用了变量，是除法运算\n  width: round(1.5)/2;        // 使用了函数，是除法运算\n  height: (500px/2);          // 使用了圆括号，是除法运算\n  margin-left: 5px + 8px/2px; // 使用了加（+）号，是除法运算\n}\n```\nSass 的除法运算还有一个情况。我们先回忆一下，在乘法运算时，如果两个值带有相同单位时，做乘法运算时，出来的结果并不是我们需要的结果。但在除法运算时，如果两个值带有相同的单位值时，除法运算之后会得到一个不带单位的数值。如下所示：\n``` bash\n.box {\n  width: (1000px / 100px);\n}\n```\n出来的css：\n``` bash\n.box {\n  width: 10;\n}\n```\n### [Sass运算]变量计算\n在 Sass 中除了可以使用数值进行运算之外，还可以使用变量进行计算，其实在前面章节的示例中也或多或少的向大家展示了。在 Sass 中使用变量进行计算，这使得 Sass 的数学运算功能变得更加实用。一起来看一个简单的示例：\n``` bash\n$content-width: 720px;\n$sidebar-width: 220px;\n$gutter: 20px;\n\n.container {\n  width: $content-width + $sidebar-width + $gutter;\n  margin: 0 auto;\n}\n```\n### [Sass运算]数字运算\n在 Sass 运算中数字运算是较为常见的，数字运算包括前面介绍的：加法、减法、乘法和除法等运算。而且还可以通过括号来修改他们的运算先后顺序。和我们数学运算是一样的，一起来看个示例。\n``` bash\n.box {\n  width: ((220px + 720px) - 11 * 20 ) / 12 ;  \n}\n```\n### [Sass运算]颜色运算\n所有算数运算都支持颜色值，并且是分段运算的。也就是说，红、绿和蓝各颜色分段单独进行运算。如：\n``` bash\np {\n  color: #010203 + #040506;\n}\n```\n计算公式为 01 + 04 = 05、02 + 05 = 07 和 03 + 06 = 09， 并且被合成为：\n``` bash\np {\n  color: #050709;\n}\n```\n算数运算也能将数字和颜色值 一起运算，同样也是分段运算的。\n### [Sass运算]字符运算\n在 Sass 中可以通过加法符号“+”来对字符串进行连接。例如：\n``` bash\n$content: \"Hello\" + \"\" + \"Sass!\";\n.box:before {\n  content: \" #{$content} \";\n}\n```\n``` bash\n.box:before {\n  content: \" HelloSass! \";\n}\n```\n除了在变量中做字符连接运算之外，还可以直接通过 +，把字符连接在一起：\n``` bash\ndiv {\n  cursor: e + -resize;\n}\n```\n``` bash\ndiv {\n  cursor: e + -resize;\n}\n```\n注意，如果有引号的字符串被添加了一个没有引号的字符串 （也就是，带引号的字符串在 + 符号左侧）， 结果会是一个有引号的字符串。 同样的，如果一个没有引号的字符串被添加了一个有引号的字符串 （没有引号的字符串在 + 符号左侧）， 结果将是一个没有引号的字符串。 例如：\n``` bash\np:before {\n  content: \"Foo \" + Bar;\n  font-family: sans- + \"serif\";\n}\n```\n``` bash\np:before {\n  content: \"Foo Bar\";\n  font-family: sans-serif; }\n```\n### @if\n@if 指令是一个 SassScript，它可以根据条件来处理样式块，如果条件为 true 返回一个样式块，反之 false 返回另一个样式块。在 Sass 中除了 @if 之，还可以配合 @else if 和 @else 一起使用。\n\n假设要控制一个元素隐藏或显示，我们就可以定义一个混合宏，通过 @if...@else... 来判断传进参数的值来控制 display 的值。如下所示：\n``` bash\n//SCSS\n@mixin blockOrHidden($boolean:true) {\n  @if $boolean {\n      @debug \"$boolean is #{$boolean}\";\n      display: block;\n    }\n  @else {\n      @debug \"$boolean is #{$boolean}\";\n      display: none;\n    }\n}\n\n.block {\n  @include blockOrHidden;\n}\n\n.hidden{\n  @include blockOrHidden(false);\n}\n```\n``` bash\n.block {\n  display: block;\n}\n\n.hidden {\n  display: none;\n}\n```\n### @for循环\n在制作网格系统的时候，大家应该对 .col1~.col12 这样的印象较深。在 CSS 中你需要一个一个去书写，但在 Sass 中，可以使用 @for 循环来完成。在 Sass 的 @for 循环中有两种方式：\n``` bash\n@for $i from <start> through <end>\n@for $i from <start> to <end>\n```\n\t\t$i 表示变量\n    start 表示起始值\n    end 表示结束值\n这两个的区别是关键字 through 表示包括 end 这个数，而 to则不包括 end 这个数。\n``` bash\n@for $i from 1 through 3 {\n  .item-#{$i} { width: 2em * $i; }\n}\n```\n``` bash\n.item-1 {\n  width: 2em;\n}\n\n.item-2 {\n  width: 4em;\n}\n\n.item-3 {\n  width: 6em;\n}\n```\n对to：\n``` bash\n@for $i from 1 to 3 {\n  .item-#{$i} { width: 2em * $i; }\n}\n```\n``` bash\n.item-1 {\n  width: 2em;\n}\n\n.item-2 {\n  width: 4em;\n}\n```\n@for应用在网格系统生成各个格子 class 的代码：\n``` bash\n//SCSS \n$grid-prefix: span !default;\n$grid-width: 60px !default;\n$grid-gutter: 20px !default;\n\n%grid {\n  float: left;\n  margin-left: $grid-gutter / 2;\n  margin-right: $grid-gutter / 2;\n}\n@for $i from 1 through 12 {\n  .#{$grid-prefix}#{$i}{\n    width: $grid-width * $i + $grid-gutter * ($i - 1);\n    @extend %grid;\n  }  \n}\n```\n``` bash\n.span1, .span2, .span3, .span4, .span5, .span6, .span7, .span8, .span9, .span10, .span11, .span12 {\n  float: left;\n  margin-left: 10px;\n  margin-right: 10px;\n}\n\n.span1 {\n  width: 60px;\n}\n\n.span2 {\n  width: 140px;\n}\n\n.span3 {\n  width: 220px;\n}\n\n.span4 {\n  width: 300px;\n}\n\n.span5 {\n  width: 380px;\n}\n\n.span6 {\n  width: 460px;\n}\n\n.span7 {\n  width: 540px;\n}\n\n.span8 {\n  width: 620px;\n}\n\n.span9 {\n  width: 700px;\n}\n\n.span10 {\n  width: 780px;\n}\n\n.span11 {\n  width: 860px;\n}\n\n.span12 {\n  width: 940px;\n}\n```\n### @while循环\n@while 指令也需要 SassScript 表达式（像其他指令一样），并且会生成不同的样式块，直到表达式值为 false 时停止循环。这个和 @for 指令很相似，只要 @while 后面的条件为 true 就会执行。\n\n这里有一个 @while 指令的简单用例：\n``` bash\n//SCSS\n$types: 4;\n$type-width: 20px;\n\n@while $types > 0 {\n    .while-#{$types} {\n        width: $type-width + $types;\n    }\n    $types: $types - 1;\n\t\t//sass里赋值用冒号。\n}\n```\n``` bash\n.while-4 {\n  width: 24px;\n}\n\n.while-3 {\n  width: 23px;\n}\n\n.while-2 {\n  width: 22px;\n}\n\n.while-1 {\n  width: 21px;\n}\n```\n### @each循环\n@each 循环就是去遍历一个列表，然后从列表中取出对应的值。\n@each 循环指令的形式：\n@each $var in <list>\n在下面的例子中你可以看到，$var 就是一个变量名，<list> 是一个 SassScript 表达式，他将返回一个列表值。变量 $var 会在列表中做遍历，并且遍历出与 $var 对应的样式块。这有一个 @each 指令的简单示例：\n``` bash\n$list: adam john wynn mason kuroir;//$list 就是一个列表\n\n@mixin author-images {\n    @each $author in $list {\n        .photo-#{$author} {\n            background: url(\"/images/avatars/#{$author}.png\") no-repeat;\n        }\n    }\n}\n\n.author-bio {\n    @include author-images;\n}\n```\n``` bash\n.author-bio .photo-adam {\n  background: url(\"/images/avatars/adam.png\") no-repeat; }\n.author-bio .photo-john {\n  background: url(\"/images/avatars/john.png\") no-repeat; }\n.author-bio .photo-wynn {\n  background: url(\"/images/avatars/wynn.png\") no-repeat; }\n.author-bio .photo-mason {\n  background: url(\"/images/avatars/mason.png\") no-repeat; }\n.author-bio .photo-kuroir {\n  background: url(\"/images/avatars/kuroir.png\") no-repeat; }\n```\n## Sass的函数简介\n在 Sass 中除了可以定义变量，具有 @extend、%placeholder 和 mixins 等特性之外，还自备了一系列的函数功能。其主要包括：\n\n  - 字符串函数\n  - 数字函数\n  - 列表函数\n  - 颜色函数\n  - Introspection 函数\n  - 三元函数等\n当然除了自备的函数功能之外，我们还可以根据自己的需求定义函数功能，常常称之为自定义函数。\n### 字符串函数-unquote()函数\n字符串函数顾名思意是用来处理字符串的函数。Sass 的字符串函数主要包括两个函数：\n  - unquote($string)：删除字符串中的引号； - quote($string)：给字符串添加引号。\nunquote() 函数主要是用来删除一个字符串中的引号，如果这个字符串没有带有引号，将返回原始的字符串。\n注意：从测试的效果中可以看出，unquote( ) 函数只能删除字符串最前和最后的引号（双引号或单引号），而无法删除字符串中间的引号。如果字符没有带引号，返回的将是字符串本身。\nquote() 函数刚好与 unquote() 函数功能相反，主要用来给字符串添加引号。如果字符串，自身带有引号会统一换成双引号 \"\"。\n使用 quote() 函数只能给字符串增加双引号，而且字符串中间有单引号或者空格时，需要用单引号或双引号括起，否则编译的时候将会报错。\n``` bash\n.test1 {\n    content:  quote(Hello Sass);\n}\n```\n这样使用，编译器马上会报错。解决方案就是去掉空格，或者加上引号。\n同时 quote() 碰到特殊符号，比如： !、?、> 等，除中折号 - 和 下划线_ 都需要使用双引号括起，否则编译器在进行编译的时候同样会报错。\n### 字符串函数-To-upper-case()、To-lower-case()\nTo-upper-case()\n\nTo-upper-case() 函数将字符串小写字母转换成大写字母。如：\n``` bash\n//SCSS\n.test {\n  text: to-upper-case(aaaaa);\n  text: to-upper-case(aA-aAAA-aaa);\n}\n```\n``` bash\n//CSS\n.test {\n  text: AAAAA;\n  text: AA-AAAA-AAA;\n}\n```\nTo-lower-case() 函数 与 To-upper-case() 刚好相反，将字符串转换成小写字母。\n### 数字函数简介\nSass 中的数字函数提要针对数字方面提供一系列的函数功能：\n  - percentage($value)：将一个不带单位的数转换成百分比值；\n  - round($value)：将数值四舍五入，转换成一个最接近的整数；\n  - ceil($value)：将大于自己的小数转换成下一位整数；\n  -  floor($value)：将一个数去除他的小数部分；\n  - abs($value)：返回一个数的绝对值；\n  - min($numbers…)：找出几个数值之间的最小值；\n  - max($numbers…)：找出几个数值之间的最大值；\n  - random(): 获取随机数\n\n#### 数字函数-percentage()\npercentage()函数主要是将一个不带单位的数字转换成百分比形式：\n.footer{\n    width : percentage(.2)\n}\n``` bash\n.footer{\n    width : 20%\n}\n```\n如果您转换的值是一个带有单位的值，那么在编译的时候会报错误信息\n#### 数字函数-round()函数\nround() 函数可以将一个数四舍五入为一个最接近的整数\n``` bash\n.footer {\n   width:round(12.3px)\n}\n```\n``` bash\n.footer {\n  width: 12px;\n}\n```\n#### 数字函数-ceil()函数\nceil() 函数将一个数转换成最接近于自己的整数，会将一个大于自身的任何小数转换成大于本身 1 的整数。也就是只做入，不做舍的计算：\n``` bash\n.footer {\n   width:ceil(12.3px);\n}\n```\n``` bash\n.footer {\n  width: 13px;\n}\n```\n#### 数字函数-floor()函数\nfloor() 函数刚好与 ceil() 函数功能相反，其主要将一个数去除其小数部分，并且不做任何的进位。也就是只做舍，不做入的计算：\n``` bash\n.footer {\n   width:floor(12.3px);\n}\n```\n``` bash\n.footer {\n  width: 12px;\n}\n```\n#### 数字函数-abs()函数\nabs( ) 函数会返回一个数的绝对值。\n``` bash\n.footer {\n   width:abs(-12.3px);\n}\n```\n``` bash\n.footer {\n  width: 12.3px;\n}\n```\n#### 数字函数-min()函数、max()函数\nmin() 函数功能主要是在多个数之中找到最小的一个，这个函数可以设置任意多个参数\n不过在 min() 函数中同时出现两种不同类型的单位，将会报错误信息\nmax() 函数和 min() 函数一样，不同的是，max() 函数用来获取一系列数中的最大那个值\n#### 数字函数-random()函数\nrandom() 函数是用来获取一个随机数\n\n### 列表函数简介\n列表函数主要包括一些对列表参数的函数使用，主要包括以下几种：\n  - length($list)：返回一个列表的长度值；\n  - nth($list, $n)：返回一个列表中指定的某个标签值\n  - join($list1, $list2, [$separator])：将两个列给连接在一起，变成一个列表；\n  - append($list1, $val, [$separator])：将某个值放在列表的最后；\n  - zip($lists…)：将几个列表结合成一个多维的列表；\n  - index($list, $value)：返回一个值在列表中的位置值。\n#### length()函数\nlength() 函数主要用来返回一个列表中有几个值，简单点说就是返回列表清单中有多少个值：\n``` bash\n>> length(10px)\n1\n>> length(10px 20px (border 1px solid) 2em)\n4\n>> length(border 1px solid)\n3\n```\nlength() 函数中的列表参数之间使用空格隔开，不能使用逗号，否则函数将会出错.\n#### nth()函数\n**nth($list,$n)**\nnth() 函数用来指定列表中某个位置的值。不过在 Sass 中，nth() 函数和其他语言不同，1 是指列表中的第一个标签值，2 是指列给中的第二个标签值，依此类推。如：\n``` bash\n>> nth(10px 20px 30px,1)\n10px\n>> nth((Helvetica,Arial,sans-serif),2)\n\"Arial\"\n>> nth((1px solid red) border-top green,1)\n(1px \"solid\" #ff0000)\n```\n注：在 nth($list,$n) 函数中的 $n 必须是大于 0 的整数.\n#### join()函数\njoin() 函数是将两个列表连接合并成一个列表。\n``` bash\n>> join(10px 20px, 30px 40px)\n(10px 20px 30px 40px)\n>> join((blue,red),(#abc,#def))\n(#0000ff, #ff0000, #aabbcc, #ddeeff)\n>> join((blue,red),(#abc #def))\n(#0000ff, #ff0000, #aabbcc, #ddeeff)\n```\n不过 join() 只能将两个列表连接成一个列表，如果直接连接两个以上的列表将会报错.\n但很多时候不只碰到两个列表连接成一个列表，这个时候就需要将多个 join() 函数合并在一起使用:\n``` bash\n>> join((blue red), join((#abc #def),(#dee #eff)))\n(#0000ff #ff0000 #aabbcc #ddeeff #ddeeee #eeffff)\n```\n在 join() 函数中还有一个很特别的参数 $separator，这个参数主要是用来给列表函数连接列表值是，使用的分隔符号，默认值为 auto。\n建议大家使用 join() 函数合并列表项的时候就明确指定 $separator 参数.\n#### append()函数\nappend() 函数是用来将某个值插入到列表中，并且处于最末位。\n``` bash\n>> append(10px 20px ,30px)\n(10px 20px 30px)\n>> append((10px,20px),30px)\n(10px, 20px, 30px)\n>> append(green,red)\n(#008000 #ff0000)\n>> append(red,(green,blue))\n(#ff0000 (#008000, #0000ff))\n```\n当然，在 append() 函数中，可以显示的设置 $separator 参数，\n如果取值为 comma 将会以逗号分隔列表项\n如果取值为 space 将会以空格分隔列表项\n#### zip()函数\nzip()函数将多个列表值转成一个多维的列表：\n``` bash\n>> zip(1px 2px 3px,solid dashed dotted,green blue red)\n((1px \"solid\" #008000), (2px \"dashed\" #0000ff), (3px \"dotted\" #ff0000))\n```\n在使用zip()函数时，每个单一的列表个数值必须是相同的.\n#### index()函数\nindex() 函数类似于索引一样，主要让你找到某个值在列表中所处的位置。在 Sass 中，第一个值就是1，第二个值就是 2，依此类推：\n``` bash\n>> index(1px solid red, 1px)\n1\n>> index(1px solid red, solid)\n2\n>> index(1px solid red, red)\n3\n```\n在 index() 函数中，如果指定的值不在列表中（没有找到相应的值），那么返回的值将是 false，相反就会返回对应的值在列表中所处的位置。\n### Introspection函数\nIntrospection 函数包括了几个判断型函数：\n  - type-of($value)：返回一个值的类型\n  - unit($number)：返回一个值的单位\n  - unitless($number)：判断一个值是否带有单位\n  - comparable($number-1, $number-2)：判断两个值是否可以做加、减和合并.\n#### Introspection 函数 -type-of()\ntype-of() 函数主要用来判断一个值是属于什么类型：\n\n返回值：\n  - number 为数值型。\n  - string 为字符串型。\n  - bool 为布尔型。\n  - color 为颜色型\n``` bash\n>> type-of(100)\n\"number\"\n>> type-of(100px)\n\"number\"\n>> type-of(\"asdf\")\n\"string\"\n>> type-of(asdf)\n\"string\"\n>> type-of(true)\n\"bool\"\n>> type-of(false)\n\"bool\"\n>> type-of(#fff)\n\"color\"\n>> type-of(blue)\n\"color\"\n>> type-of(1 / 2 = 1)\n\"string\"\n```\n#### unit()函数\nunit() 函数主要是用来获取一个值所使用的单位，碰到复杂的计算时，其能根据运算得到一个“多单位组合”的值，不过只充许乘、除运算：\n``` bash\n>> unit(100)\n\"\"\n>> unit(100px)\n\"px\"\n>> unit(20%)\n\"%\"\n>> unit(1em)\n\"em\"\n>> unit(10px * 3em)\n\"em*px\"\n>> unit(10px / 3em)\n\"px/em\"\n>> unit(10px * 2em / 3cm / 1rem)\n\"em/rem\"\n```\n但加、减碰到不同单位时，unit() 函数将会报错，除 px 与 cm、mm 运算之外.\n#### unitless()函数\nunitless() 函数相对来说简单明了些，只是用来判断一个值是否带有单位，如果不带单位返回的值为 true，带单位返回的值为 false：\n``` bash\n>> unitless(100)\ntrue\n>> unitless(100px)\nfalse\n>> unitless(100em)\nfalse\n>> unitless(100%)\nfalse\n>> unitless(1 /2 )\ntrue\n>> unitless(1 /2 + 2 )\ntrue\n>> unitless(1px /2 + 2 )\nfalse\n```\n#### comparable()函数\\\ncomparable() 函数主要是用来判断两个数是否可以进行“加，减”以及“合并”。如果可以返回的值为 true，如果不可以返回的值是 false\n#### Miscellaneous函数\n在这里把 Miscellaneous 函数称为三元条件函数，主要因为他和 JavaScript 中的三元判断非常的相似。他有两个值，当条件成立返回一种值，当条件不成立时返回另一种值：\n``` bash\nif($condition,$if-true,$if-false)\n```\n#### Map\nSass 的 map 常常被称为数据地图，也有人称其为数组，因为他总是以 key:value 成对的出现，但其更像是一个 JSON 数据。\n``` bash\n{\n\"employees\": [\n{ \"firstName\":\"John\" , \"lastName\":\"Doe\" },\n{ \"firstName\":\"Anna\" , \"lastName\":\"Smith\" },\n{ \"firstName\":\"Peter\" , \"lastName\":\"Jones\" }\n]\n}\n```\n对于 Sass 的 map，还可以让 map 嵌套 map。其实就是 map 的某一个 key 当成 map，里面可以继续放一对或者多对 key:value：\n``` bash\n$map: (\n    key1: value1,\n    key2: (\n        key-1: value-1,\n        key-2: value-2,\n    ),\n    key3: value3\n);\n```\nmap 的嵌套实用性也非常的强，大家可能有碰到过换皮肤的项目，可能每一套皮肤对应的颜色蛮多的，那么使用此功能来管理颜色的变量就非常的有条理性，便于维护与管理。你可以这样使用：\n``` bash\n$theme-color: (\n    default: (\n        bgcolor: #fff,\n        text-color: #444,\n        link-color: #39f\n    ),\n    primary:(\n        bgcolor: #000,\n        text-color:#fff,\n        link-color: #93f\n    ),\n    negative: (\n        bgcolor: #f36,\n        text-color: #fefefe,\n        link-color: #d4e\n    )\n);\n```\n### Sass Maps的函数\n前面介绍了使用 map 来管理变量，但要在 Sass 中获取变量，或者对 map 做更多有意义的操作，我们必须借助于 map 的函数功能。在 Sass 中 map 自身带了七个函数：\n  - map-get($map,$key)：根据给定的 key 值，返回 map 中相关的值。\n  - map-merge($map1,$map2)：将两个 map 合并成一个新的 map。\n  - map-remove($map,$key)：从 map 中删除一个 key，返回一个新 map。\n  - map-keys($map)：返回 map 中所有的 key。\n  - map-values($map)：返回 map 中所有的 value。\n  - map-has-key($map,$key)：根据给定的 key 值判断 map 是否有对应的 value 值，如果有返回 true，否则返回 false。\n  - keywords($args)：返回一个函数的参数，这个参数可以动态的设置 key 和 value。\n\n#### Sass Maps的函数-map-get($map,$key)\nmap-get($map,$key) 函数的作用是根据 $key 参数，返回 $key 在 $map 中对应的 value 值。如果 $key 不存在 $map中，将返回 null 值。此函数包括两个参数：\n\n  - $map：定义好的 map。\n  - $key：需要遍历的 key。\n``` bash\n$social-colors: (\n    dribble: #ea4c89,\n    facebook: #3b5998,\n    github: #171515,\n    google: #db4437,\n    twitter: #55acee\n);\n```\n假设要获取 facebook 键值对应的值 #3b5998，我们就可以使用 map-get() 函数来实现：\n``` bash\n.btn-dribble{\n  color: map-get($social-colors,facebook);\n}\n```\n``` bash\n.btn-dribble {\n  color: #3b5998;\n}\n```\n我们来看另一种情况，假设 $social-colors 这个 map 没有 $weibo 这个 key:\n``` bash\n.btn-weibo{\n  font-size: 12px;\n  color: map-get($social-colors,weibo);\n}\n```\n``` bash\n.btn-weibo {\n  font-size: 12px;\n}\n```\n从 编译出来的 CSS 可以得知，如果 $key 不在 $map 中，不会编译出 CSS，其实在 Sass 中，map-get($social- colors,weibo) 返回了一个 null 值。但在编译出来的 CSS 中，你只知道他没有编译出样式，而且在命令终端编译时，也没有任何错误或者警告信息。说实话，你并不知道他为什么编译不出来样式，或者说他已返回了值为 null。体验不强，也不好排错。其实如果我们自定义一个函数，另外加个判断，那就截然不同。\n\n#### Sass Maps的函数-map-has-key($map,$key)\nmap-has-key($map,$key) 函数将返回一个布尔值。当 $map 中有这个 $key，则函数返回 true，否则返回 false。\n前面的示例，当 $key 不在 $map 中时，使用 map-get($map,$key) 函数将返回一个 null 值。但对于开发人员，并看不到任何提示信息。如果使用 map-has-key($map,$key) 函数就可以改变这一状态。我们来看一个简单的示例。\n``` bash\n@if map-has-key($social-colors,facebook){\n    .btn-facebook {\n        color: map-get($social-colors,facebook);\n    }\n} @else {\n    @warn \"No color found for faceboo in $social-colors map. Property ommitted.\"\n}\n```\n``` bash\n.btn-fackbook{\n    color: #3b5998;\n} \n```\n上面看到的示例是 facebook 这个 key 已存在 $social-colors 这个 map 当中。所以能正常编译。如果你手误，将 facebook 输错了：\n``` bash\n@if map-has-key($social-colors,faceboo){\n    .btn-facebook {\n        color: map-get($social-colors,facebook);\n    }\n} @else {\n    @warn \"No color found for faceboo in $social-colors map. Property ommitted.\"\n}\n```\n这个时候，你编译出来的 CSS 代码中，不会有新代码添加，但在命令终端可以看到提示信息：\n``` bash\nWARNING: No color found for faceboo in $social-colors map. Property ommitted.\n         on line 25 of test.scss\n```\n是不是非常的友好。但总觉得这样写是傻傻的，总不可能每获取一个 key 都写一个 @if 语句吧。其实不用这么复杂，我们可以自定义一个函数，比如 colors():\n``` bash\n@function colors($color){\n    @if not map-has-key($social-colors,$color){\n        @warn \"No color found for `#{$color}` in $social-colors map. Property omitted.\";\n    }\n    @return map-get($social-colors,$color);\n}\n```\n有了这个函数之后，我们就可以这样使用\n``` bash\n.btn-dribble {\n    color: colors(dribble);\n}\n.btn-facebook {\n    color: colors(facebook);\n}\n.btn-github {\n    color: colors(github);\n}\n.btn-google {\n    color: colors(google);\n}\n.btn-twitter {\n    color: colors(twitter);\n}\n.btn-weibo {\n    color: colors(weibo);\n}\n```\n编译出来的 CSS:\n``` bash\n.btn-dribble {\n  color: #ea4c89;\n}\n\n.btn-facebook {\n  color: #3b5998;\n}\n\n.btn-github {\n  color: #171515;\n}\n\n.btn-google {\n  color: #db4437;\n}\n\n.btn-twitter {\n  color: #55acee;\n}\n```\n同时你不难发现，命令终端提示信息：\n``` bash\nWARNING: No color found for `weibo` in $social-colors map. Property omitted.\n         on line 13 of test.scss\n```\n那是在 $social-colors 这个 map 中没有 weibo 这个 key。是不是很有意思。\n\n当然，如果你对 Sass 的指令熟悉的话，上面编译出来的 CSS 可以使用 @each：\n``` bash\n@each $social-network,$social-color in $social-colors {\n    .btn-#{$social-network} {\n        color: colors($social-network);\n    }\n}\n```\n#### Sass Maps的函数-map-keys($map)\nmap-keys($map) 函数将会返回 $map 中的所有 key。这些值赋予给一个变量，那他就是一个列表。如：\n``` bash\n$list: map-keys($social-colors);\n```\n``` bash\n@function colors($color){\n    $names: map-keys($social-colors);\n    @if not index($names,$color){\n        @warn \"Waring: `#{$color} is not a valid color name.`\";\n    }\n    @return map-get($social-colors,$color);\n}\n```\n上面代码中最不同之处，我们使 用map-key s将 $social-colors 这个 map 的所有 key 取出，并赋予给一个名 为 $names 的列表。然后通过 index($names,$color) 返回 $color 在 $names 位置，如果这个位置不存在，将返回提示信息，如果存在将返回正确的值。\n同样，也可以通过 @each 或者 @for 遍历出所有值：\n``` bash\n@each $name in map-keys($social-colors){\n    .btn-#{$name}{\n        color: colors($name);\n    }\n}\n\n```\n用for：\n``` bash\n@for $i from 1 through length(map-keys($social-colors)){\n    .btn-#{nth(map-keys($social-colors),$i)} {\n        color: colors(nth(map-keys($social-colors),$i));\n    }\n}\n```\n虽然使用的方法不一样，但最终得到的 CSS 是一样的：\n``` bash\n.btn-dribble {\n  color: #ea4c89;\n}\n\n.btn-facebook {\n  color: #3b5998;\n}\n\n.btn-github {\n  color: #171515;\n}\n\n.btn-google {\n  color: #db4437;\n}\n\n.btn-twitter {\n  color: #55acee;\n}\n```\n#### Sass Maps的函数-map-values($map)、map-merge($map1,$map2)\nmap-values($map) 函数类似于 map-keys($map) 功能，不同的是 map-values($map )获取的是 $map 的所有 value 值，可以说也将是一个列表。而且，map-values($map) 中如果有相同的 value 也将会全部获取出来。\nmap-merge($map1,$map2) 函数是将 $map1 和 $map2 合并，然后得到一个新的 $map。如果你要快速将新的值插入到 $map 中的话，这种方法是最佳方法。假设我们有两个 $map:\n$color: (\n    text: #f36,\n    link: #f63,\n    border: #ddd,\n    backround: #fff\n);\n$typo:(\n    font-size: 12px,\n    line-height: 1.6\n);\n如果希望将这两个 $map 合并成一个 map，我们只要这样做：\n``` bash\n$newmap: map-merge($color,$typo);\n```\n将会生成一个新的 map:\n``` bash\n$newmap:(\n    text: #f36,\n    link: #f63,\n    border: #ddd,\n    background: #fff,\n    font-size: 12px,\n    line-height: 1.6\n);\n```\n不过有一点需要注意，如果 $map1 和 $map2 中有相同的 $key 名，那么将 $map2 中的 $key 会取代 $map1 中的：\n``` bash\n$color: (\n    text: #f36,\n    link: #f63,\n    border: #ddd,\n    backround: #fff\n);\n$typo:(\n    font-size: 12px,\n    line-height: 1.6,\n    border: #ccc,\n    background: #000\n);\n```\n执行：\n$newmap: map-merge($color,$typo);\n得到的新 map:\n``` bash\n$newmap:(\n    text: #f36,\n    link: #f63,\n    font-size: 12px,\n    line-height: 1.6,\n    border: #ccc,\n    background: #000\n);\n```\n#### Sass Maps的函数-map-remove($map,$key)、keywords($args)\nmap-remove($map,$key) 函数是用来删除当前 $map 中的某一个 $key，从而得到一个新的 map。其返回的值还是一个 map。他并不能直接从一个 map 中删除另一个 map，仅能通过删除 map 中的某个 key 得到新 map.\n如果删除的 key 并不存在于 $map 中，那么 map-remove() 函数返回的新 map 和以前的 map 一样。\n\nkeywords($args) 函数可以说是一个动态创建 map 的函数。可以通过混合宏或函数的参数变创建 map。参数也是成对出现，其中 $args 变成 key(会自动去掉$符号)，而 $args 对应的值就是value。\n``` bash\n@mixin map($args...){\n    @debug keywords($args);\n}\n\n@include map(\n  $dribble: #ea4c89,\n  $facebook: #3b5998,\n  $github: #171515,\n  $google: #db4437,\n  $twitter: #55acee\n);\n```\n在命令终端可以看到一个输入的 @debug 信息：\n``` bash\nDEBUG: (dribble: #ea4c89, facebook: #3b5998, github: #171515, google: #db4437, twitter: #55acee)\n```\n### RGB颜色函数-RGB()颜色函数\n在 Sass 的官方文档中，列出了 Sass 的颜色函数清单，从大的方面主要分为 RGB , HSL 和 Opacity 三大函数，当然其还包括一些其他的颜色函数，比如说 adjust-color 和 change-color 等。在这章节中，将主要和大家一起探讨 Sass 颜色函数中常见的 RGB、HSL 和 Opacity 函数。\nRGB 颜色只是颜色中的一种表达式，其中 R 是 red 表示红色，G 是 green 表示绿色而 B 是 blue 表示蓝色。在 Sass 中为 RGB 颜色提供六种函数：\n  - rgb($red,$green,$blue)：根据红、绿、蓝三个值创建一个颜色；\n  - rgba($red,$green,$blue,$alpha)：根据红、绿、蓝和透明度值创建一个颜色；\n  - red($color)：从一个颜色中获取其中红色值；\n  - green($color)：从一个颜色中获取其中绿色值；\n  - blue($color)：从一个颜色中获取其中蓝色值；\n  - mix($color-1,$color-2,[$weight])：把两种颜色混合在一起。\n仅从概念上，或许大家没有太多的概念，我们通过下面的命令来做一个简单的测试：\n``` bash\nsass -i\n```\n在命令终端开启这个命令，相当于开启 Sass 的函数计算。\n接下来，分别在终端使用 RGB 函数来进行计算，看其最终结果：\n``` bash\n$ sass -i\n>> rgb(200,40,88) //根据r:200,g:40,b:88计算出一个十六进制颜色值\n#c82858\n>> rgba(#c82858,.65) //根据#c82858的65%透明度计算出一个rgba颜色值\nrgba(200, 40, 88, 0.65)\n>> red(#c82858) //从#c82858颜色值中得到红色值 200\n200\n>> green(#c82858) //从#c82858颜色值中得到绿色值 40\n40\n>> blue(#c82858) //从#c82858颜色值中得到蓝色值 88\n88\n>> mix(#c82858,rgba(200,40,80,.65),.3) //把#c82858和rgba(200,40,88,.65) 两颜色按比例混合得到一个新颜色\nrgba(200, 40, 80, 0.65105)\n```\n从上面的简单运算结果可以很清晰的知道。在 RGB 颜色函数中，在实际中常用的主要是 rgba() 和 mix() 两个函数，而 rgb() 函数只能快速的将一个 rgb 颜色转换成十六进制颜色表达，red()、green() 和 blue() 函数，只能取得某一颜色的一个值，对于颜色上使用并无太大作用（或许他的好处，我还没有理解过来）。\n#### RGB颜色函数-RGBA()函数\nrgba() 函数主要用来将一个颜色根据透明度转换成 rgba 颜色。\n其语法有两种格式：\n``` bash\nrgba($red,$green,$blue,$alpha)  //将一个rgba颜色转译出来，和未转译的值一样\nrgba($color,$alpha)  //将一个Hex颜色转换成rgba颜色\n```\n其中 rgba($color,$alpha) 函数作用更大，主要运用在这样的情形之中：假设在实际中知道的颜色值是 #f36 或者 red，但在使用中，需要给他们配上一个透明度，这个时候在原来的 CSS 中，首先需要通过制图工具，得到 #f36 或 red 颜色的 R、G、B 值，而不能直接使用（注意 css3 是可以的，但是存在浏览器兼容问题）：\n``` bash\n//CSS\ncolor: rgba(#f36,.5); //在css中，这是无效的写法\n```\n但在 Sass 中，RGBA() 函数就能解决这个问题。我们先来看一个简单的例子，假设在变量中定义了一个基本的变量： \n``` bash\n//SCSS\n.rgba {\n    color: rgba(#f36,.5);\n    background: rgba(orange,.5);\n    border-color: rgba(green,.5);\n}\n```\n在这个实例中，我们使用了 Sass 的 rgba 函数，在括号是函数的参数，第一个参数是需要转换的颜色，他可以是任何颜色的表达方式，也可以是一个颜色变量；第二个参数是颜色的透明度，其值是 0~1 之间。上面的代码转译出来：\n``` bash\n.rgba {\n  color: rgba(255, 51, 102, 0.5);\n  background: rgba(255, 165, 0, 0.5);\n  border-color: rgba(0, 128, 0, 0.5);\n}\n```\n在来看一个调用前面定义的变量：\n``` bash\n//SCSS\n.rgba {\n    color: rgba($color,.5);\n    background: rgba($bgColor,.5);\n    border-color: rgba($borderColor,.5);\n}\n```\n``` bash\n//CSS\n.rgba {\n  color: rgba(255, 51, 102, 0.5);\n  background: rgba(255, 165, 0, 0.5);\n  border-color: rgba(0, 128, 0, 0.5);\n}\n```\n#### RGB颜色函数-Red()、Green()、Blue()函数\nRed() 函数\n\nred() 函数非常简单，其主要用来获取一个颜色当中的红色值。假设有一个 #f36 的颜色，如果你想得到 #f36 中的 red 值是多少，这个时候使用 red() 函数就能很简单获取。\nGreen() 函数\ngreen() 函数和red()函数一样，用来获取某一个颜色值中 green 的值。\nBlue() 函数\n同理，blue() 函数是用来获取某一个颜色值中 blue 的值，\n\n#### RGB颜色函数-Mix()函数\nMix 函数是将两种颜色根据一定的比例混合在一起，生成另一种颜色。其使用语法如下：\n``` bash\nmix($color-1,$color-2,$weight);\n```\n$color-1 和 $color-2 指的是你需要合并的颜色，颜色可以是任何表达式，也可以是颜色变量。\n$weight 为 合并的比例（选择权重），默认值为 50%，其取值范围是 0~1 之间。它是每个 RGB 的百分比来衡量，当然透明度也会有一定的权重。默认的比例是 50%，这意味着两个颜色各占一半，如果指定的比例是 25%，这意味着第一个颜色所占比例为 25%，第二个颜色所占比例为75%。\n使用：\n``` bash\nmix(#f00, #00f) => #7f007f\nmix(#f00, #00f, 25%) => #3f00bf\nmix(rgba(255, 0, 0, 0.5), #00f) => rgba(63, 0, 191, 0.75)\n```\n``` bash\n//SCSS\n$color1: #a63;\n$color2: #fff;\n$bgColor1: #f36;\n$bgColor2: #e36;\n$borderColor1:#c36;\n$borderColor2:#b36;\n.mix {\n    background: mix($bgColor1,$bgColor2,.75);\n    color: mix($color1,$color2,.25);\n    border-color: mix($borderColor1,$bgColor2,.05);\n}\n```\n``` bash\n//CSS\n.mix {\n    background: #ee3366;\n    color: #fefefe;\n    border-color: #ed33\n}\n```\n### HSL函数简介\n在 Sass 中提供了一系列有关于 HSL 的颜色函数，以供大家使用，其中常用的有 saturation、lightness、adjust-hue、lighten、darken 等等。接下来我们先来了解一下 HSL 颜色函数包括哪些具体的函数，所起的作用是什么：\n\n  - hsl($hue,$saturation,$lightness)：通过色相（hue）、饱和度(saturation)和亮度（lightness）的值创建一个颜色；\n  - hsla($hue,$saturation,$lightness,$alpha)：通过色相（hue）、饱和度(saturation)、亮度（lightness）和透明（alpha）的值创建一个颜色；\n  - hue($color)：从一个颜色中获取色相（hue）值；\n  - saturation($color)：从一个颜色中获取饱和度（saturation）值；\n  - lightness($color)：从一个颜色中获取亮度（lightness）值；\n  - adjust-hue($color,$degrees)：通过改变一个颜色的色相值，创建一个新的颜色；\n  - lighten($color,$amount)：通过改变颜色的亮度值，让颜色变亮，创建一个新的颜色；\n  - darken($color,$amount)：通过改变颜色的亮度值，让颜色变暗，创建一个新的颜色；\n  - saturate($color,$amount)：通过改变颜色的饱和度值，让颜色更饱和，从而创建一个新的颜色\n  - desaturate($color,$amount)：通过改变颜色的饱和度值，让颜色更少的饱和，从而创建出一个新的颜色；\n  - grayscale($color)：将一个颜色变成灰色，相当于desaturate($color,100%);\n  - complement($color)：返回一个补充色，相当于adjust-hue($color,180deg);\n  - invert($color)：反回一个反相色，红、绿、蓝色值倒过来，而透明度不变。\n### Opacity函数简介\n在 CSS 中除了可以使用 rgba、hsla 和 transform 来控制颜色透明度之外，还可以使用 opacity 来控制，只不过前两者只是针对颜色上的透明通道做处理，而后者是控制整个元素的透明度。\n在 Sass 中，也提供了系列透明函数，只不过这系列的透明函数主要用来处理颜色透明度：\n  - alpha($color) /opacity($color)：获取颜色透明度值；\n  - rgba($color, $alpha)：改变颜色的透明度值；\n  - opacify($color, $amount) / fade-in($color, $amount)：使颜色更不透明；\n  - transparentize($color, $amount) / fade-out($color, $amount)：使颜色更加透明。\n\n### @import\nSass 支持所有 CSS3 的 @ 规则， 以及一些 Sass 专属的规则，也被称为“指令（directives）”。 这些规则在 Sass 中具有不同的功效，详细解释如下。\n@import\n\nSass 扩展了 CSS 的 @import 规则，让它能够引入 SCSS 和 Sass 文件。 所有引入的 SCSS 和 Sass 文件都会被合并并输出一个单一的 CSS 文件。 另外，被导入的文件中所定义的变量或 mixins 都可以在主文件中使用。\nSass 会在当前目录下寻找其他 Sass 文件， 如果是 Rack、Rails 或 Merb 环境中则是 Sass 文件目录。 也可以通过 :load_paths 选项或者在命令行中使用 --load-path 选项来指定额外的搜索目录。\n\n@import 根据文件名引入。 默认情况下，它会寻找 Sass 文件并直接引入， 但是，在少数几种情况下，它会被编译成 CSS 的 @import 规则：\n\n  - 如果文件的扩展名是 .css。\n  - 如果文件名以 http:// 开头。\n  - 如果文件名是 url()。\n  - 如果 @import 包含了任何媒体查询（media queries）。\n如果上述情况都没有出现，并且扩展名是 .scss 或 .sass， 该名称的 Sass 或 SCSS 文件就会被引入。 如果没有扩展名， Sass 将试着找出具有 .scss 或 .sass 扩展名的同名文件并将其引入。\n\\@import \"foo\";\n\\@import \"foo\";\n如果你有一个 SCSS 或 Sass 文件需要引入， 但是你又不希望它被编译为一个 CSS 文件， 这时，你就可以在文件名前面加一个下划线，就能避免被编译。 这将告诉 Sass 不要把它编译成 CSS 文件。 然后，你就可以像往常一样引入这个文件了，而且还可以省略掉文件名前面的下划线。\n注意，在同一个目录不能同时存在带下划线和不带下划线的同名文件。 例如， _colors.scss 不能与 colors.scss 并存。\n嵌套 @import\n\n虽然大部分时间只需在顶层文件使用 @import 就行了， 但是，你还可以把他们包含在 CSS 规则 和 @media 规则中。\n### @media\nSass 中的 @media 指令和 CSS 的使用规则一样的简单，但它有另外一个功能，可以嵌套在 CSS 规则中。有点类似 JS 的冒泡功能一样，如果在样式中使用 @media 指令，它将冒泡到外面。来看一个简单示例：\n``` bash\n.sidebar {\n  width: 300px;\n  @media screen and (orientation: landscape) {\n    width: 500px;\n  }\n}\n```\n``` bash\n.sidebar {\n  width: 300px; }\n  @media screen and (orientation: landscape) {\n    .sidebar {\n      width: 500px; } }\n```\n@media 也可以嵌套 @media\n``` bash\n@media screen {\n  .sidebar {\n    @media (orientation: landscape) {\n      width: 500px;\n    }\n  }\n}\n```\n``` bash\n@media screen and (orientation: landscape) {\n  .sidebar {\n    width: 500px; } }\n```\n在使用 @media 时，还可以使用插件#{}:\n``` bash\n$media: screen;\n$feature: -webkit-min-device-pixel-ratio;\n$value: 1.5;\n\n@media #{$media} and ($feature: $value) {\n  .sidebar {\n    width: 500px;\n  }\n}\n```\n``` bash\n@media screen and (-webkit-min-device-pixel-ratio: 1.5) {\n  .sidebar {\n    width: 500px; } }\n```\n### @extend\nSass 中的 @extend 是用来扩展选择器或占位符。比如：\n``` bash\n.error {\n  border: 1px #f00;\n  background-color: #fdd;\n}\n.error.intrusion {\n  background-image: url(\"/image/hacked.png\");\n}\n.seriousError {\n  @extend .error;\n  border-width: 3px;\n}\n```\n``` bash\n.error, .seriousError {\n  border: 1px #f00;\n  background-color: #fdd; }\n\n.error.intrusion, .seriousError.intrusion {\n  background-image: url(\"/image/hacked.png\"); }\n\n.seriousError {\n  border-width: 3px; }\n```\n多个扩展\n\n所设某个样式要继承多个地方的样式，那么可以使用 @extend 来继承多个选择器或占位符的样式，如：\n``` bash\n.error {\n  border: 1px #f00;\n  background-color: #fdd;\n}\n.attention {\n  font-size: 3em;\n  background-color: #ff0;\n}\n.seriousError {\n  @extend .error;\n  @extend .attention;\n  border-width: 3px;\n}\n```\n``` bash\n.error, .seriousError {\n  border: 1px #f00;\n  background-color: #fdd; }\n\n.attention, .seriousError {\n  font-size: 3em;\n  background-color: #ff0; }\n\n.seriousError {\n  border-width: 3px; }\n```\n扩展单一选择器\n\n前面我们知道 %placeholder 不使用@extend显示调用是不会生成任何样式代码。那么在选择器中使用占位符一样。比如下面的代码:\n``` bash\n#context a%extreme {\n  color: blue;\n  font-weight: bold;\n  font-size: 2em;\n}\n```\n``` bash\n.notice {\n  @extend %extreme;\n}\n```\n``` bash\n#context a.notice {\n  color: blue;\n  font-weight: bold;\n  font-size: 2em;\n}\n```\n\n### @at-root\n@at-root 从字面上解释就是跳出根元素。当你选择器嵌套多层之后，想让某个选择器跳出，此时就可以使用 @at-root。来看一个简单的示例：\n``` bash\n.a {\n  color: red;\n\n  .b {\n    color: orange;\n\n    .c {\n      color: yellow;\n\n      @at-root .d {\n        color: green;\n      }\n    }\n  }  \n}\n```\n``` bash\n.a {\n  color: red;\n}\n\n.a .b {\n  color: orange;\n}\n\n.a .b .c {\n  color: yellow;\n}\n\n.d {\n  color: green;\n}\n```\n### @debug\n@debug 在 Sass 中是用来调试的，当你的在 Sass 的源码中使用了 @debug 指令之后，Sass 代码在编译出错时，在命令终端会输出你设置的提示 Bug:\n\\@debug 10em + 12em;\noutput:Line 1 DEBUG: 22em\n\n### @warn\n@warn 和 @debug 功能类似，用来帮助我们更好的调试 Sass。如：\n``` bash\n@mixin adjust-location($x, $y) {\n  @if unitless($x) {\n    @warn \"Assuming #{$x} to be in pixels\";\n    $x: 1px * $x;\n  }\n  @if unitless($y) {\n    @warn \"Assuming #{$y} to be in pixels\";\n    $y: 1px * $y;\n  }\n  position: relative; left: $x; top: $y;\n}\n```\n### @error\n@error 和 @warn、@debug 功能是如出一辙.\n``` bash\n@mixin error($x){\n  @if $x < 10 {\n    width: $x * 10px;\n  } @else if $x == 10 {\n    width: $x;\n  } @else {\n    @error \"你需要将#{$x}值设置在10以内的数\";\n  }\n\n}\n\n.test {\n  @include error(15);\n}\n```\n编译时，提示：你需要将15值设置在10以内的数 on line 7 at column 5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/sass学习.md","raw":"---\ntitle: sass学习\ndate: 2016-10-22 19:47:36\ntags:\n---\n\n# sass\n## 编译风格\n1, --style nested\n``` bash\nnav {\n  ul {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n\n  li { display: inline-block; }\n\n  a {\n    display: block;\n    padding: 6px 12px;\n    text-decoration: none;\n  }\n}\n```\n<!--more-->\n2, sass --watch test.scss:test.css --style expanded\n``` bash\nnav {\n  ul {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n\n  li { display: inline-block; }\n\n  a {\n    display: block;\n    padding: 6px 12px;\n    text-decoration: none;\n  }\n}\n```\n3, sass --watch test.scss:test.css --style compact\n4, sass --watch test.scss:test.css --style compressed\n\nSass 调试: sass --watch --scss --sourcemap style.scss:style.css.在 Sass3.3 版本之上（我测试使用的版本是 3.4.7），不需要添加这个参数也可以\n\n## 基础\n### [Sass]声明变量\n声明变量的符号“$”\n变量名称\n赋予变量的值\n``` bash\n$brand-primary : darken(#428bca, 6.5%) !default; // #337ab7\n$btn-primary-color : #fff !default;\n$btn-primary-bg : $brand-primary !default;\n$btn-primary-border : darken($btn-primary-bg, 5%) !default;\n```\n如果值后面加上!default则表示默认值。\n### [Sass]普通变量与默认变量\n普通变量：定义之后可以在全局范围内使用。\n``` bash\n$fontSize: 12px;\nbody{\n\tfont-size:$fontSize;\n}\n```\n默认变量：sass 的默认变量仅需要在值后面加上 !default 即可。\n``` bash\n$baseLineHeight:1.5 !default;\nbody{\n\tline-height: $baseLineHeight; \n}\n```\nsass 的默认变量一般是用来设置默认值，然后根据需求来覆盖的，覆盖的方式也很简单，只需要在默认变量之前重新声明下变量即可。\n``` bash\n$baseLineHeight: 2;\n$baseLineHeight: 1.5 !default;\nbody{\n\tline-height: $baseLineHeight; \n}\n```\n编译后的css代码：\n``` bash\nbody{\n\tline-height:2;\n}\n```\n### [Sass]变量的调用\n在 Sass 中声明了变量之后，就可以在需要的地方调用变量。调用变量的方法也非常的简单。\n``` bash\n.btn-primary {\n\tbackground-color: $btn-primary-bg;\n\tcolor: $btn-primary-color;\n\tborder: 1px solid $btn-primary-border;\n}\n```\n### [Sass]局部变量和全局变量\nSass 中变量的作用域在过去几年已经发生了一些改变。直到最近，规则集和其他范围内声明变量的作用域才默认为本地。如果已经存在同名的全局变量，从 3.4 版本开始，Sass 已经可以正确处理作用域的概念，并通过创建一个新的局部变量来代替。\n先来看一下代码例子：\n``` bash\n//SCSS\n$color: orange !default;//定义全局变量(在选择器、函数、混合宏...的外面定义的变量为全局变量)\n.block {\n  color: $color;//调用全局变量\n}\nem {\n  $color: red;//定义局部变量\n  a {\n\tcolor: $color;//调用局部变量\n  }\n}\nspan {\n  color: $color;//调用全局变量\n}\n```\n``` bash\n//CSS\n.block {\n  color: orange;\n}\nem a {\n  color: red;\n}\nspan {\n  color: orange;\n}\n```\n上面的示例演示可以得知，在元素内部定义的变量不会影响其他元素。如此可以简单的理解成，全局变量就是定义在元素外面的变量，而定义在元素内部的变量，是一个局部变量。\n我的建议，创建变量只适用于感觉确有必要的情况下。不要为了某些骇客行为而声明新变量，这丝毫没有作用。只有满足所有下述标准时方可创建新变量：\n1. 该值至少重复出现了两次；\n2. 该值至少可能会被更新一次；\n3. 该值所有的表现都与变量有关（非巧合）。\n\n### [Sass]嵌套-选择器嵌套\n1、选择器嵌套\n如果有：\n``` bash\n<header>\n<nav>\n    <a href=“##”>Home</a>\n    <a href=“##”>About</a>\n    <a href=“##”>Blog</a>\n</nav>\n<header>\n```\n想选中 header 中的 a 标签，在写 sCSS 会这样写：\n``` bash\nnav {\n  a {\n\tcolor: red;\n\theader & {\n\t\tcolor:green;\n\t}\n  }  \n}\n```\n``` bash\nnav a {\n  color:red;\n}\n\nheader nav a {\n  color:green;\n}\n```\n### [Sass]嵌套-属性嵌套\nSass 中还提供属性嵌套，CSS 有一些属性前缀相同，只是后缀不一样，比如：border-top/border-right，与这个类似的还有 margin、padding、font 等属性。假设你的样式中用到了：\n``` bash\n.box {\n\tborder-top: 1px solid red;\n\tborder-bottom: 1px solid green;\n}\n```\nscss中可以这么写：\n``` bash\n.box {\n  border: {\n   top: 1px solid red;\n   bottom: 1px solid green;\n  }\n}\n```\n注意border后面的冒号。\n### [Sass]嵌套-伪类嵌套\n其实伪类嵌套和属性嵌套非常类似，只不过他需要借助`&`符号一起配合使用。我们就拿经典的“clearfix”为例吧：\n``` bash\n.clearfix{\n&:before,\n&:after {\n    content:\"\";\n    display: table;\n  }\n&:after {\n    clear:both;\n    overflow: hidden;\n  }\n}\n```\n& 和冒号之间没有空格。\n``` bash\nclearfix:before, .clearfix:after {\n  content: \"\";\n  display: table;\n}\n.clearfix:after {\n  clear: both;\n  overflow: hidden;\n}\n```\n\n选择器嵌套最大的问题是将使最终的代码难以阅读。开发者需要花费巨大精力计算不同缩进级别下的选择器具体的表现效果。\n选择器越具体则声明语句越冗长，而且对最近选择器的引用(&)也越频繁。在某些时候，出现混淆选择器路径和探索下一级选择器的错误率很高，这非常不值得。\n\n为了防止此类情况，我们应该尽可能避免选择器嵌套。然而，显然只有少数情况适应这一措施。\n### [Sass]混合宏-声明混合宏\n如果你的整个网站中有几处小样式类似，比如颜色，字体等，在 Sass 可以使用变量来统一处理，那么这种选择还是不错的。但当你的样式变得越来越复杂，需要重复使用大段的样式时，使用变量就无法达到我们目了。这个时候 Sass 中的混合宏就会变得非常有意义。\n``` bash\n@mixin border-radius{\n    -webkit-border-radius: 5px;\n    border-radius: 5px;\n}\n```\t\n其中 @mixin 是用来声明混合宏的关键词，有点类似 CSS 中的 @media、@font-face 一样。border-radius 是混合宏的名称。大括号里面是复用的样式代码。\n除了声明一个不带参数的混合宏之外，还可以在定义混合宏时带有参数，如：\n``` bash\n@mixin border-radius($radius:5px){\n    -webkit-border-radius: $radius;\n    border-radius: $radius;\n}\n```\n上面是一个简单的定义混合宏的方法，当然， Sass 中的混合宏还提供更为复杂的，你可以在大括号里面写上带有逻辑关系，帮助更好的做你想做的事情,如：\n``` bash\n@mixin box-shadow($shadow...) {\n  @if length($shadow) >= 1 {\n    @include prefixer(box-shadow, $shadow);\n  } @else{\n    $shadow:0 0 4px rgba(0,0,0,.3);\n    @include prefixer(box-shadow, $shadow);\n  }\n}\n```\n这个 box-shadow 的混合宏，带有多个参数，这个时候可以使用“ … ”来替代。简单的解释一下，当 $shadow 的参数数量值大于或等于“ 1 ”时，表示有多个阴影值，反之调用默认的参数值“ 0 0 4px rgba(0,0,0,.3) ”。\n### [Sass]混合宏-调用混合宏\n``` bash\nbutton {\n    @include border-radius;\n}\n```\n@mixin 类似函数声明，@include 类似函数调用\n\n### [Sass]混合宏的参数--传一个不带值的参数\n在混合宏中，可以传递一个不带任何值得参数，比如：\n``` bash\n@mixin border-radius($radius){\n  -webkit-border-radius: $radius;\n  border-radius: $radius;\n}\n```\n``` bash\n.box {\n  @include border-radius(3px);\n}\n```\n注意，不传值会报错。\n\n### [Sass]混合宏的参数--传一个带值的参数\n在 Sass 的混合宏中，还可以给混合宏的参数传一个默认值，例如：\n``` bash\n@mixin border-radius($radius:3px){\n  -webkit-border-radius: $radius;\n  border-radius: $radius;\n}\n```\n在混合宏“border-radius”传了一个参数“$radius”，而且给这个参数赋予了一个默认值“3px”。\n在调用类似这样的混合宏时，会多有一个机会，假设你的页面中的圆角很多地方都是“3px”的圆角，那么这个时候只需要调用默认的混合宏“border-radius”:\n``` bash\n.btn {\n  @include border-radius;\n}\n```\n但有的时候，页面中有些元素的圆角值不一样，那么可以随机给混合宏传值，如：\n``` bash\n.box {\n  @include border-radius(50%);\n}\n```\n### [Sass]混合宏的参数--传多个参数\n``` bash\n@mixin center($width,$height){\n  width: $width;\n  height: $height;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-top: -($height) / 2;\n  margin-left: -($width) / 2;\n}\n```\n调用：\n``` bash\n.box-center {\n  @include center(500px,300px);\n}\n```\n有一个特别的参数“…”。当混合宏传的参数过多之时，可以使用参数来替代，如：\n``` bash\n@mixin box-shadow($shadows...){\n  @if length($shadows) >= 1 {\n    -webkit-box-shadow: $shadows;\n    box-shadow: $shadows;\n  } @else {\n    $shadows: 0 0 2px rgba(#000,.25);\n    -webkit-box-shadow: $shadow;\n    box-shadow: $shadow;\n  }\n}\n```\n### [Sass]混合宏的参数--混合宏的不足\n混合宏在实际编码中给我们带来很多方便之处，特别是对于复用重复代码块。但其最大的不足之处是会生成冗余的代码块。比如在不同的地方调用一个相同的混合宏时。如：\n``` bash\n@mixin border-radius{\n  -webkit-border-radius: 3px;\n  border-radius: 3px;\n}\n\n.box {\n  @include border-radius;\n  margin-bottom: 5px;\n}\n\n.btn {\n  @include border-radius;\n}\n```\n\n### [Sass]扩展/继承\n``` bash\n//SCSS\n.btn {\n  border: 1px solid #ccc;\n  padding: 6px 10px;\n  font-size: 14px;\n}\n\n.btn-primary {\n  background-color: #f36;\n  color: #fff;\n  @extend .btn;\n}\n\n.btn-second {\n  background-color: orange;\n  color: #fff;\n  @extend .btn;\n}\n```\n编译出来之后：\n``` bash\n//CSS\n.btn, .btn-primary, .btn-second {\n  border: 1px solid #ccc;\n  padding: 6px 10px;\n  font-size: 14px;\n}\n\n.btn-primary {\n  background-color: #f36;\n  color: #fff;\n}\n\n.btn-second {\n  background-clor: orange;\n  color: #fff;\n}\n```\n从示例代码可以看出，在 Sass 中的继承，可以继承类样式块中所有样式代码，而且编译出来的 CSS 会将选择器合并在一起，形成组合选择器\n### [Sass]占位符 %placeholder\nSass 中的占位符 %placeholder 功能是一个很强大，很实用的一个功能，这也是我非常喜欢的功能。他可以取代以前 CSS 中的基类造成的代码冗余的情形。因为 %placeholder 声明的代码，如果不被 @extend 调用的话，不会产生任何代码。来看一个演示：\n``` bash\n%mt5 {\n  margin-top: 5px;\n}\n%pt5{\n  padding-top: 5px;\n}\n```\n这段代码没有被 @extend 调用，他并没有产生任何代码块，只是静静的躺在你的某个 SCSS 文件中。只有通过 @extend 调用才会产生代码：\n``` bash\n//SCSS\n%mt5 {\n  margin-top: 5px;\n}\n%pt5{\n  padding-top: 5px;\n}\n\n.btn {\n  @extend %mt5;\n  @extend %pt5;\n}\n\n.block {\n  @extend %mt5;\n\n  span {\n    @extend %pt5;\n  }\n}\n```\n编译出来的CSS\n``` bash\n//CSS\n.btn, .block {\n  margin-top: 5px;\n}\n\n.btn, .block span {\n  padding-top: 5px;\n}\n```\n从编译出来的 CSS 代码可以看出，通过 @extend 调用的占位符，编译出来的代码会将相同的代码合并在一起。这也是我们希望看到的效果，也让你的代码变得更为干净。\n\n### [Sass]混合宏 VS 继承 VS 占位符\n初学者都常常纠结于这个问题“什么时候用混合宏，什么时候用继承，什么时候使用占位符？”其实他们各有各的优点与缺点，先来看看他们使用效果：\n混合宏：编译出来的 CSS 清晰告诉了大家，他不会自动合并相同的样式代码，如果在样式文件中调用同一个混合宏，会产生多个对应的样式代码，造成代码的冗余，这也是 CSSer 无法忍受的一件事情。不过他并不是一无事处，他可以传参数。\n个人建议：如果你的代码块中涉及到变量，建议使用混合宏来创建相同的代码块。\n继承：使用继承后，编译出来的 CSS 会将使用继承的代码块合并到一起，通过组合选择器的方式向大家展现，比如 .mt, .block, .block span, .header, .header span。这样编译出来的代码相对于混合宏来说要干净的多，也是 CSSer 期望看到。但是他不能传变量参数。\n\n个人建议：如果你的代码块不需要专任何变量参数，而且有一个基类已在文件中存在，那么建议使用 Sass 的继承。\n占位符：总结：编译出来的 CSS 代码和使用继承基本上是相同，只是不会在代码中生成占位符 mt 的选择器。那么占位符和继承的主要区别的，“占位符是独立定义，不调用的时候是不会在 CSS 中产生任何代码；继承是首先有一个基类存在，不管调用与不调用，基类的样式都将会出现在编译出来的 CSS 代码中。”\n![chabie](images/diff_sass.png);\n\n### [Sass]插值#{}\n使用 CSS 预处理器语言的一个主要原因是想使用 Sass 获得一个更好的结构体系。比如说你想写更干净的、高效的和面向对象的 CSS。Sass 中的插值(Interpolation)就是重要的一部分。让我们看一下下面的例子：\n``` bash\n$properties: (margin, padding);\n@mixin set-value($side, $value) {\n    @each $prop in $properties {\n        #{$prop}-#{$side}: $value;\n    }\n}\n.login-box {\n    @include set-value(top, 14px);\n}\n```\n这是 Sass 插值中一个简单的实例。当你想设置属性值的时候你可以使用字符串插入进来。另一个有用的用法是构建一个选择器。可以这样使用：\n``` bash\n@mixin generate-sizes($class, $small, $medium, $big) {\n    .#{$class}-small { font-size: $small; }\n    .#{$class}-medium { font-size: $medium; }\n    .#{$class}-big { font-size: $big; }\n}\n@include generate-sizes(\"header-text\", 12px, 20px, 40px);\n```\n``` bash\n.header-text-small { font-size: 12px; }\n.header-text-medium { font-size: 20px; }\n.header-text-big { font-size: 40px; }\n```\n第一个限制，这可能会很删除用于 Sass 变量的插值。你也不能在 mixin 中调用.\n幸运的是，可以使用 @extend 中使用插值。例如：\n``` bash\n%updated-status {\n    margin-top: 20px;\n    background: #F00;\n}\n.selected-status {\n    font-weight: bold;\n}\n$flag: \"status\";\n.navigation {\n    @extend %updated-#{$flag};\n    @extend .selected-#{$flag};\n}\n```\n### [Sass]注释\n注释对于一名程序员来说，是极其重要，良好的注释能帮助自己或者别人阅读源码。在 Sass 中注释有两种方式，我暂且将其命名为：\n  - 类似 CSS 的注释方式，使用 ”/* ”开头，结属使用 ”*/ ”\n  - 类似 JavaScript 的注释方式，使用“//”\n两者区别，前者会在编译出来的 CSS 显示，后者在编译出来的 CSS 中不会显示\n### [Sass]数据类型\nSass 和 JavaScript 语言类似，也具有自己的数据类型，在 Sass 中包含以下几种数据类型：\n  - 数字: 如，1、 2、 13、 10px；\n  - 字符串：有引号字符串或无引号字符串，如，\"foo\"、 'bar'、 baz；\n  - 颜色：如，blue、 #04a3f9、 rgba(255,0,0,0.5)；\n  - 布尔型：如，true、 false；\n  - 空值：如，null；\n  - 值列表：用空格或者逗号分开，如，1.5em 1em 0 2em 、 Helvetica, Arial, sans-serif。\nSassScript 也支持其他 CSS 属性值（property value），比如 Unicode 范围，或 !important 声明。然而，Sass 不会特殊对待这些属性值，一律视为无引号字符串 (unquoted strings)。\n#### [Sass]字符串\nSassScript 支持 CSS 的两种字符串类型：\n\n  - 有引号字符串 (quoted strings)，如 \"Lucida Grande\" 、'http://sass-lang.com'；\n  - 无引号字符串 (unquoted strings)，如 sans-serifbold。\n在编译 CSS 文件时不会改变其类型。只有一种情况例外，使用 #{ }插值语句 (interpolation) 时，有引号字符串将被编译为无引号字符串，这样方便了在混合指令 (mixin) 中引用选择器名。\n需要注意的是：当 deprecated = property syntax 时 （暂时不理解是怎样的情况），所有的字符串都将被编译为无引号字符串，不论是否使用了引号。\n### [Sass]值列表\n所谓值列表 (lists) 是指 Sass 如何处理 CSS 中： \n``` bash\nmargin: 10px 15px 0 0\n```\n或者： \n```\nfont-face: Helvetica, Arial, sans-serif\n```\n像上面这样通过空格或者逗号分隔的一系列的值。\nSass列表函数（Sass list functions）赋予了值列表更多功能（Sass进级会有讲解）：\n\n1. nth函数（nth function） 可以直接访问值列表中的某一项；\n2. join函数（join function） 可以将多个值列表连结在一起；\n3. append函数（append function） 可以在值列表中添加值；\n4. @each规则（@each rule） 则能够给值列表中的每个项目添加样式。\n### [Sass运算]\n程序中的运算是常见的一件事情，但在 CSS 中能做运算的，到目前为止仅有 calc() 函数可行。但在 Sass 中，运算只是其基本特性之一。在 Sass 中可以做各种数学计算，在接下来的章节中，主要和大家一起探讨有关于 Sass 中的数学运算。\n#### [Sass运算]加法\n加法运算是 Sass 中运算中的一种，在变量或属性中都可以做加法运算。如：\n``` bash\n.box {\n  width: 20px + 8in;\n}\n```\n``` bash\n.box {\n  width: 788px;\n}\n```\n但对于携带不同类型的单位时，在 Sass 中计算会报错，如下例所示：\n``` bash\n.box {\n  width: 20px + 1em;\n}\n```\n编译的时候，编译器会报错：“Incompatible units: 'em' and ‘px'.”\n#### [Sass运算]减法\nSass 的减法运算和加法运算类似，我们通过一个简单的示例来做阐述：\n``` bash\n$full-width: 960px;\n$sidebar-width: 200px;\n\n.content {\n  width: $full-width -  $sidebar-width;\n}\n```\n同样的，运算时碰到不同类型的单位时，编译也会报错。\n#### [Sass运算]乘法\nSass 中的乘法运算和前面介绍的加法与减法运算还略有不同。虽然他也能够支持多种单位（比如 em ,px , %），但当一个单位同时声明两个值时会有问题。比如下面的示例：\n``` bash\n.box {\n  width:10px * 2px;  \n}\n```\n编译的时候报“20px*px isn't a valid CSS value.”错误信息。\n\n如果进行乘法运算时，两个值单位相同时，只需要为一个数值提供单位即可。上面的示例可以修改成：\n``` bash\n.box {\n  width: 10px * 2;\n}\n```\n#### [Sass运算]除法\nSass 的乘法运算规则也适用于除法运算。不过除法运算还有一个特殊之处。众所周知“/”符号在 CSS 中已做为一种符号使用。因此在 Sass 中做除法运算时，直接使用“/”符号做为除号时，将不会生效，编译时既得不到我们需要的效果，也不会报错。一起先来看一个简单的示例：\n``` bash\n.box {\n  width: 100px / 2;  \n}\n```\n.box {\n  width: 100px / 2;\n}\n这样的结果对于大家来说没有任何意义。要修正这个问题，只需要给运算的外面添加一个小括号( )即可：\n``` bash\n.box {\n  width: (100px / 2);  \n}\n```\n``` bash\n.box {\n  width: 50px;\n}\n```\n除了上面情况带有小括号，“/”符号会当作除法运算符之外，如果“/”符号在已有的数学表达式中时，也会被认作除法符号。如下面示例：\n.box {\n  width: 100px / 2 + 0;  \n}\n另外，在 Sass 除法运算中，当用变量进行除法运算时，“/”符号也会自动被识别成除法，如下例所示：\n``` bash\n$width: 1000px;\n$nums: 10;\n\n.item {\n  width: $width / 10;  \n}\n\n.list {\n  width: $width / $nums;\n}\n```\n综合上述，”/  ”符号被当作除法运算符时有以下几种情况：\n  - 如果数值或它的任意部分是存储在一个变量中或是函数的返回值。\n  - 如果数值被圆括号包围。\n  - 如果数值是另一个数学表达式的一部分。\n\n``` bash\n//SCSS\np {\n  font: 10px/8px;             // 纯 CSS，不是除法运算\n  $width: 1000px;\n  width: $width/2;            // 使用了变量，是除法运算\n  width: round(1.5)/2;        // 使用了函数，是除法运算\n  height: (500px/2);          // 使用了圆括号，是除法运算\n  margin-left: 5px + 8px/2px; // 使用了加（+）号，是除法运算\n}\n```\nSass 的除法运算还有一个情况。我们先回忆一下，在乘法运算时，如果两个值带有相同单位时，做乘法运算时，出来的结果并不是我们需要的结果。但在除法运算时，如果两个值带有相同的单位值时，除法运算之后会得到一个不带单位的数值。如下所示：\n``` bash\n.box {\n  width: (1000px / 100px);\n}\n```\n出来的css：\n``` bash\n.box {\n  width: 10;\n}\n```\n### [Sass运算]变量计算\n在 Sass 中除了可以使用数值进行运算之外，还可以使用变量进行计算，其实在前面章节的示例中也或多或少的向大家展示了。在 Sass 中使用变量进行计算，这使得 Sass 的数学运算功能变得更加实用。一起来看一个简单的示例：\n``` bash\n$content-width: 720px;\n$sidebar-width: 220px;\n$gutter: 20px;\n\n.container {\n  width: $content-width + $sidebar-width + $gutter;\n  margin: 0 auto;\n}\n```\n### [Sass运算]数字运算\n在 Sass 运算中数字运算是较为常见的，数字运算包括前面介绍的：加法、减法、乘法和除法等运算。而且还可以通过括号来修改他们的运算先后顺序。和我们数学运算是一样的，一起来看个示例。\n``` bash\n.box {\n  width: ((220px + 720px) - 11 * 20 ) / 12 ;  \n}\n```\n### [Sass运算]颜色运算\n所有算数运算都支持颜色值，并且是分段运算的。也就是说，红、绿和蓝各颜色分段单独进行运算。如：\n``` bash\np {\n  color: #010203 + #040506;\n}\n```\n计算公式为 01 + 04 = 05、02 + 05 = 07 和 03 + 06 = 09， 并且被合成为：\n``` bash\np {\n  color: #050709;\n}\n```\n算数运算也能将数字和颜色值 一起运算，同样也是分段运算的。\n### [Sass运算]字符运算\n在 Sass 中可以通过加法符号“+”来对字符串进行连接。例如：\n``` bash\n$content: \"Hello\" + \"\" + \"Sass!\";\n.box:before {\n  content: \" #{$content} \";\n}\n```\n``` bash\n.box:before {\n  content: \" HelloSass! \";\n}\n```\n除了在变量中做字符连接运算之外，还可以直接通过 +，把字符连接在一起：\n``` bash\ndiv {\n  cursor: e + -resize;\n}\n```\n``` bash\ndiv {\n  cursor: e + -resize;\n}\n```\n注意，如果有引号的字符串被添加了一个没有引号的字符串 （也就是，带引号的字符串在 + 符号左侧）， 结果会是一个有引号的字符串。 同样的，如果一个没有引号的字符串被添加了一个有引号的字符串 （没有引号的字符串在 + 符号左侧）， 结果将是一个没有引号的字符串。 例如：\n``` bash\np:before {\n  content: \"Foo \" + Bar;\n  font-family: sans- + \"serif\";\n}\n```\n``` bash\np:before {\n  content: \"Foo Bar\";\n  font-family: sans-serif; }\n```\n### @if\n@if 指令是一个 SassScript，它可以根据条件来处理样式块，如果条件为 true 返回一个样式块，反之 false 返回另一个样式块。在 Sass 中除了 @if 之，还可以配合 @else if 和 @else 一起使用。\n\n假设要控制一个元素隐藏或显示，我们就可以定义一个混合宏，通过 @if...@else... 来判断传进参数的值来控制 display 的值。如下所示：\n``` bash\n//SCSS\n@mixin blockOrHidden($boolean:true) {\n  @if $boolean {\n      @debug \"$boolean is #{$boolean}\";\n      display: block;\n    }\n  @else {\n      @debug \"$boolean is #{$boolean}\";\n      display: none;\n    }\n}\n\n.block {\n  @include blockOrHidden;\n}\n\n.hidden{\n  @include blockOrHidden(false);\n}\n```\n``` bash\n.block {\n  display: block;\n}\n\n.hidden {\n  display: none;\n}\n```\n### @for循环\n在制作网格系统的时候，大家应该对 .col1~.col12 这样的印象较深。在 CSS 中你需要一个一个去书写，但在 Sass 中，可以使用 @for 循环来完成。在 Sass 的 @for 循环中有两种方式：\n``` bash\n@for $i from <start> through <end>\n@for $i from <start> to <end>\n```\n\t\t$i 表示变量\n    start 表示起始值\n    end 表示结束值\n这两个的区别是关键字 through 表示包括 end 这个数，而 to则不包括 end 这个数。\n``` bash\n@for $i from 1 through 3 {\n  .item-#{$i} { width: 2em * $i; }\n}\n```\n``` bash\n.item-1 {\n  width: 2em;\n}\n\n.item-2 {\n  width: 4em;\n}\n\n.item-3 {\n  width: 6em;\n}\n```\n对to：\n``` bash\n@for $i from 1 to 3 {\n  .item-#{$i} { width: 2em * $i; }\n}\n```\n``` bash\n.item-1 {\n  width: 2em;\n}\n\n.item-2 {\n  width: 4em;\n}\n```\n@for应用在网格系统生成各个格子 class 的代码：\n``` bash\n//SCSS \n$grid-prefix: span !default;\n$grid-width: 60px !default;\n$grid-gutter: 20px !default;\n\n%grid {\n  float: left;\n  margin-left: $grid-gutter / 2;\n  margin-right: $grid-gutter / 2;\n}\n@for $i from 1 through 12 {\n  .#{$grid-prefix}#{$i}{\n    width: $grid-width * $i + $grid-gutter * ($i - 1);\n    @extend %grid;\n  }  \n}\n```\n``` bash\n.span1, .span2, .span3, .span4, .span5, .span6, .span7, .span8, .span9, .span10, .span11, .span12 {\n  float: left;\n  margin-left: 10px;\n  margin-right: 10px;\n}\n\n.span1 {\n  width: 60px;\n}\n\n.span2 {\n  width: 140px;\n}\n\n.span3 {\n  width: 220px;\n}\n\n.span4 {\n  width: 300px;\n}\n\n.span5 {\n  width: 380px;\n}\n\n.span6 {\n  width: 460px;\n}\n\n.span7 {\n  width: 540px;\n}\n\n.span8 {\n  width: 620px;\n}\n\n.span9 {\n  width: 700px;\n}\n\n.span10 {\n  width: 780px;\n}\n\n.span11 {\n  width: 860px;\n}\n\n.span12 {\n  width: 940px;\n}\n```\n### @while循环\n@while 指令也需要 SassScript 表达式（像其他指令一样），并且会生成不同的样式块，直到表达式值为 false 时停止循环。这个和 @for 指令很相似，只要 @while 后面的条件为 true 就会执行。\n\n这里有一个 @while 指令的简单用例：\n``` bash\n//SCSS\n$types: 4;\n$type-width: 20px;\n\n@while $types > 0 {\n    .while-#{$types} {\n        width: $type-width + $types;\n    }\n    $types: $types - 1;\n\t\t//sass里赋值用冒号。\n}\n```\n``` bash\n.while-4 {\n  width: 24px;\n}\n\n.while-3 {\n  width: 23px;\n}\n\n.while-2 {\n  width: 22px;\n}\n\n.while-1 {\n  width: 21px;\n}\n```\n### @each循环\n@each 循环就是去遍历一个列表，然后从列表中取出对应的值。\n@each 循环指令的形式：\n@each $var in <list>\n在下面的例子中你可以看到，$var 就是一个变量名，<list> 是一个 SassScript 表达式，他将返回一个列表值。变量 $var 会在列表中做遍历，并且遍历出与 $var 对应的样式块。这有一个 @each 指令的简单示例：\n``` bash\n$list: adam john wynn mason kuroir;//$list 就是一个列表\n\n@mixin author-images {\n    @each $author in $list {\n        .photo-#{$author} {\n            background: url(\"/images/avatars/#{$author}.png\") no-repeat;\n        }\n    }\n}\n\n.author-bio {\n    @include author-images;\n}\n```\n``` bash\n.author-bio .photo-adam {\n  background: url(\"/images/avatars/adam.png\") no-repeat; }\n.author-bio .photo-john {\n  background: url(\"/images/avatars/john.png\") no-repeat; }\n.author-bio .photo-wynn {\n  background: url(\"/images/avatars/wynn.png\") no-repeat; }\n.author-bio .photo-mason {\n  background: url(\"/images/avatars/mason.png\") no-repeat; }\n.author-bio .photo-kuroir {\n  background: url(\"/images/avatars/kuroir.png\") no-repeat; }\n```\n## Sass的函数简介\n在 Sass 中除了可以定义变量，具有 @extend、%placeholder 和 mixins 等特性之外，还自备了一系列的函数功能。其主要包括：\n\n  - 字符串函数\n  - 数字函数\n  - 列表函数\n  - 颜色函数\n  - Introspection 函数\n  - 三元函数等\n当然除了自备的函数功能之外，我们还可以根据自己的需求定义函数功能，常常称之为自定义函数。\n### 字符串函数-unquote()函数\n字符串函数顾名思意是用来处理字符串的函数。Sass 的字符串函数主要包括两个函数：\n  - unquote($string)：删除字符串中的引号； - quote($string)：给字符串添加引号。\nunquote() 函数主要是用来删除一个字符串中的引号，如果这个字符串没有带有引号，将返回原始的字符串。\n注意：从测试的效果中可以看出，unquote( ) 函数只能删除字符串最前和最后的引号（双引号或单引号），而无法删除字符串中间的引号。如果字符没有带引号，返回的将是字符串本身。\nquote() 函数刚好与 unquote() 函数功能相反，主要用来给字符串添加引号。如果字符串，自身带有引号会统一换成双引号 \"\"。\n使用 quote() 函数只能给字符串增加双引号，而且字符串中间有单引号或者空格时，需要用单引号或双引号括起，否则编译的时候将会报错。\n``` bash\n.test1 {\n    content:  quote(Hello Sass);\n}\n```\n这样使用，编译器马上会报错。解决方案就是去掉空格，或者加上引号。\n同时 quote() 碰到特殊符号，比如： !、?、> 等，除中折号 - 和 下划线_ 都需要使用双引号括起，否则编译器在进行编译的时候同样会报错。\n### 字符串函数-To-upper-case()、To-lower-case()\nTo-upper-case()\n\nTo-upper-case() 函数将字符串小写字母转换成大写字母。如：\n``` bash\n//SCSS\n.test {\n  text: to-upper-case(aaaaa);\n  text: to-upper-case(aA-aAAA-aaa);\n}\n```\n``` bash\n//CSS\n.test {\n  text: AAAAA;\n  text: AA-AAAA-AAA;\n}\n```\nTo-lower-case() 函数 与 To-upper-case() 刚好相反，将字符串转换成小写字母。\n### 数字函数简介\nSass 中的数字函数提要针对数字方面提供一系列的函数功能：\n  - percentage($value)：将一个不带单位的数转换成百分比值；\n  - round($value)：将数值四舍五入，转换成一个最接近的整数；\n  - ceil($value)：将大于自己的小数转换成下一位整数；\n  -  floor($value)：将一个数去除他的小数部分；\n  - abs($value)：返回一个数的绝对值；\n  - min($numbers…)：找出几个数值之间的最小值；\n  - max($numbers…)：找出几个数值之间的最大值；\n  - random(): 获取随机数\n\n#### 数字函数-percentage()\npercentage()函数主要是将一个不带单位的数字转换成百分比形式：\n.footer{\n    width : percentage(.2)\n}\n``` bash\n.footer{\n    width : 20%\n}\n```\n如果您转换的值是一个带有单位的值，那么在编译的时候会报错误信息\n#### 数字函数-round()函数\nround() 函数可以将一个数四舍五入为一个最接近的整数\n``` bash\n.footer {\n   width:round(12.3px)\n}\n```\n``` bash\n.footer {\n  width: 12px;\n}\n```\n#### 数字函数-ceil()函数\nceil() 函数将一个数转换成最接近于自己的整数，会将一个大于自身的任何小数转换成大于本身 1 的整数。也就是只做入，不做舍的计算：\n``` bash\n.footer {\n   width:ceil(12.3px);\n}\n```\n``` bash\n.footer {\n  width: 13px;\n}\n```\n#### 数字函数-floor()函数\nfloor() 函数刚好与 ceil() 函数功能相反，其主要将一个数去除其小数部分，并且不做任何的进位。也就是只做舍，不做入的计算：\n``` bash\n.footer {\n   width:floor(12.3px);\n}\n```\n``` bash\n.footer {\n  width: 12px;\n}\n```\n#### 数字函数-abs()函数\nabs( ) 函数会返回一个数的绝对值。\n``` bash\n.footer {\n   width:abs(-12.3px);\n}\n```\n``` bash\n.footer {\n  width: 12.3px;\n}\n```\n#### 数字函数-min()函数、max()函数\nmin() 函数功能主要是在多个数之中找到最小的一个，这个函数可以设置任意多个参数\n不过在 min() 函数中同时出现两种不同类型的单位，将会报错误信息\nmax() 函数和 min() 函数一样，不同的是，max() 函数用来获取一系列数中的最大那个值\n#### 数字函数-random()函数\nrandom() 函数是用来获取一个随机数\n\n### 列表函数简介\n列表函数主要包括一些对列表参数的函数使用，主要包括以下几种：\n  - length($list)：返回一个列表的长度值；\n  - nth($list, $n)：返回一个列表中指定的某个标签值\n  - join($list1, $list2, [$separator])：将两个列给连接在一起，变成一个列表；\n  - append($list1, $val, [$separator])：将某个值放在列表的最后；\n  - zip($lists…)：将几个列表结合成一个多维的列表；\n  - index($list, $value)：返回一个值在列表中的位置值。\n#### length()函数\nlength() 函数主要用来返回一个列表中有几个值，简单点说就是返回列表清单中有多少个值：\n``` bash\n>> length(10px)\n1\n>> length(10px 20px (border 1px solid) 2em)\n4\n>> length(border 1px solid)\n3\n```\nlength() 函数中的列表参数之间使用空格隔开，不能使用逗号，否则函数将会出错.\n#### nth()函数\n**nth($list,$n)**\nnth() 函数用来指定列表中某个位置的值。不过在 Sass 中，nth() 函数和其他语言不同，1 是指列表中的第一个标签值，2 是指列给中的第二个标签值，依此类推。如：\n``` bash\n>> nth(10px 20px 30px,1)\n10px\n>> nth((Helvetica,Arial,sans-serif),2)\n\"Arial\"\n>> nth((1px solid red) border-top green,1)\n(1px \"solid\" #ff0000)\n```\n注：在 nth($list,$n) 函数中的 $n 必须是大于 0 的整数.\n#### join()函数\njoin() 函数是将两个列表连接合并成一个列表。\n``` bash\n>> join(10px 20px, 30px 40px)\n(10px 20px 30px 40px)\n>> join((blue,red),(#abc,#def))\n(#0000ff, #ff0000, #aabbcc, #ddeeff)\n>> join((blue,red),(#abc #def))\n(#0000ff, #ff0000, #aabbcc, #ddeeff)\n```\n不过 join() 只能将两个列表连接成一个列表，如果直接连接两个以上的列表将会报错.\n但很多时候不只碰到两个列表连接成一个列表，这个时候就需要将多个 join() 函数合并在一起使用:\n``` bash\n>> join((blue red), join((#abc #def),(#dee #eff)))\n(#0000ff #ff0000 #aabbcc #ddeeff #ddeeee #eeffff)\n```\n在 join() 函数中还有一个很特别的参数 $separator，这个参数主要是用来给列表函数连接列表值是，使用的分隔符号，默认值为 auto。\n建议大家使用 join() 函数合并列表项的时候就明确指定 $separator 参数.\n#### append()函数\nappend() 函数是用来将某个值插入到列表中，并且处于最末位。\n``` bash\n>> append(10px 20px ,30px)\n(10px 20px 30px)\n>> append((10px,20px),30px)\n(10px, 20px, 30px)\n>> append(green,red)\n(#008000 #ff0000)\n>> append(red,(green,blue))\n(#ff0000 (#008000, #0000ff))\n```\n当然，在 append() 函数中，可以显示的设置 $separator 参数，\n如果取值为 comma 将会以逗号分隔列表项\n如果取值为 space 将会以空格分隔列表项\n#### zip()函数\nzip()函数将多个列表值转成一个多维的列表：\n``` bash\n>> zip(1px 2px 3px,solid dashed dotted,green blue red)\n((1px \"solid\" #008000), (2px \"dashed\" #0000ff), (3px \"dotted\" #ff0000))\n```\n在使用zip()函数时，每个单一的列表个数值必须是相同的.\n#### index()函数\nindex() 函数类似于索引一样，主要让你找到某个值在列表中所处的位置。在 Sass 中，第一个值就是1，第二个值就是 2，依此类推：\n``` bash\n>> index(1px solid red, 1px)\n1\n>> index(1px solid red, solid)\n2\n>> index(1px solid red, red)\n3\n```\n在 index() 函数中，如果指定的值不在列表中（没有找到相应的值），那么返回的值将是 false，相反就会返回对应的值在列表中所处的位置。\n### Introspection函数\nIntrospection 函数包括了几个判断型函数：\n  - type-of($value)：返回一个值的类型\n  - unit($number)：返回一个值的单位\n  - unitless($number)：判断一个值是否带有单位\n  - comparable($number-1, $number-2)：判断两个值是否可以做加、减和合并.\n#### Introspection 函数 -type-of()\ntype-of() 函数主要用来判断一个值是属于什么类型：\n\n返回值：\n  - number 为数值型。\n  - string 为字符串型。\n  - bool 为布尔型。\n  - color 为颜色型\n``` bash\n>> type-of(100)\n\"number\"\n>> type-of(100px)\n\"number\"\n>> type-of(\"asdf\")\n\"string\"\n>> type-of(asdf)\n\"string\"\n>> type-of(true)\n\"bool\"\n>> type-of(false)\n\"bool\"\n>> type-of(#fff)\n\"color\"\n>> type-of(blue)\n\"color\"\n>> type-of(1 / 2 = 1)\n\"string\"\n```\n#### unit()函数\nunit() 函数主要是用来获取一个值所使用的单位，碰到复杂的计算时，其能根据运算得到一个“多单位组合”的值，不过只充许乘、除运算：\n``` bash\n>> unit(100)\n\"\"\n>> unit(100px)\n\"px\"\n>> unit(20%)\n\"%\"\n>> unit(1em)\n\"em\"\n>> unit(10px * 3em)\n\"em*px\"\n>> unit(10px / 3em)\n\"px/em\"\n>> unit(10px * 2em / 3cm / 1rem)\n\"em/rem\"\n```\n但加、减碰到不同单位时，unit() 函数将会报错，除 px 与 cm、mm 运算之外.\n#### unitless()函数\nunitless() 函数相对来说简单明了些，只是用来判断一个值是否带有单位，如果不带单位返回的值为 true，带单位返回的值为 false：\n``` bash\n>> unitless(100)\ntrue\n>> unitless(100px)\nfalse\n>> unitless(100em)\nfalse\n>> unitless(100%)\nfalse\n>> unitless(1 /2 )\ntrue\n>> unitless(1 /2 + 2 )\ntrue\n>> unitless(1px /2 + 2 )\nfalse\n```\n#### comparable()函数\\\ncomparable() 函数主要是用来判断两个数是否可以进行“加，减”以及“合并”。如果可以返回的值为 true，如果不可以返回的值是 false\n#### Miscellaneous函数\n在这里把 Miscellaneous 函数称为三元条件函数，主要因为他和 JavaScript 中的三元判断非常的相似。他有两个值，当条件成立返回一种值，当条件不成立时返回另一种值：\n``` bash\nif($condition,$if-true,$if-false)\n```\n#### Map\nSass 的 map 常常被称为数据地图，也有人称其为数组，因为他总是以 key:value 成对的出现，但其更像是一个 JSON 数据。\n``` bash\n{\n\"employees\": [\n{ \"firstName\":\"John\" , \"lastName\":\"Doe\" },\n{ \"firstName\":\"Anna\" , \"lastName\":\"Smith\" },\n{ \"firstName\":\"Peter\" , \"lastName\":\"Jones\" }\n]\n}\n```\n对于 Sass 的 map，还可以让 map 嵌套 map。其实就是 map 的某一个 key 当成 map，里面可以继续放一对或者多对 key:value：\n``` bash\n$map: (\n    key1: value1,\n    key2: (\n        key-1: value-1,\n        key-2: value-2,\n    ),\n    key3: value3\n);\n```\nmap 的嵌套实用性也非常的强，大家可能有碰到过换皮肤的项目，可能每一套皮肤对应的颜色蛮多的，那么使用此功能来管理颜色的变量就非常的有条理性，便于维护与管理。你可以这样使用：\n``` bash\n$theme-color: (\n    default: (\n        bgcolor: #fff,\n        text-color: #444,\n        link-color: #39f\n    ),\n    primary:(\n        bgcolor: #000,\n        text-color:#fff,\n        link-color: #93f\n    ),\n    negative: (\n        bgcolor: #f36,\n        text-color: #fefefe,\n        link-color: #d4e\n    )\n);\n```\n### Sass Maps的函数\n前面介绍了使用 map 来管理变量，但要在 Sass 中获取变量，或者对 map 做更多有意义的操作，我们必须借助于 map 的函数功能。在 Sass 中 map 自身带了七个函数：\n  - map-get($map,$key)：根据给定的 key 值，返回 map 中相关的值。\n  - map-merge($map1,$map2)：将两个 map 合并成一个新的 map。\n  - map-remove($map,$key)：从 map 中删除一个 key，返回一个新 map。\n  - map-keys($map)：返回 map 中所有的 key。\n  - map-values($map)：返回 map 中所有的 value。\n  - map-has-key($map,$key)：根据给定的 key 值判断 map 是否有对应的 value 值，如果有返回 true，否则返回 false。\n  - keywords($args)：返回一个函数的参数，这个参数可以动态的设置 key 和 value。\n\n#### Sass Maps的函数-map-get($map,$key)\nmap-get($map,$key) 函数的作用是根据 $key 参数，返回 $key 在 $map 中对应的 value 值。如果 $key 不存在 $map中，将返回 null 值。此函数包括两个参数：\n\n  - $map：定义好的 map。\n  - $key：需要遍历的 key。\n``` bash\n$social-colors: (\n    dribble: #ea4c89,\n    facebook: #3b5998,\n    github: #171515,\n    google: #db4437,\n    twitter: #55acee\n);\n```\n假设要获取 facebook 键值对应的值 #3b5998，我们就可以使用 map-get() 函数来实现：\n``` bash\n.btn-dribble{\n  color: map-get($social-colors,facebook);\n}\n```\n``` bash\n.btn-dribble {\n  color: #3b5998;\n}\n```\n我们来看另一种情况，假设 $social-colors 这个 map 没有 $weibo 这个 key:\n``` bash\n.btn-weibo{\n  font-size: 12px;\n  color: map-get($social-colors,weibo);\n}\n```\n``` bash\n.btn-weibo {\n  font-size: 12px;\n}\n```\n从 编译出来的 CSS 可以得知，如果 $key 不在 $map 中，不会编译出 CSS，其实在 Sass 中，map-get($social- colors,weibo) 返回了一个 null 值。但在编译出来的 CSS 中，你只知道他没有编译出样式，而且在命令终端编译时，也没有任何错误或者警告信息。说实话，你并不知道他为什么编译不出来样式，或者说他已返回了值为 null。体验不强，也不好排错。其实如果我们自定义一个函数，另外加个判断，那就截然不同。\n\n#### Sass Maps的函数-map-has-key($map,$key)\nmap-has-key($map,$key) 函数将返回一个布尔值。当 $map 中有这个 $key，则函数返回 true，否则返回 false。\n前面的示例，当 $key 不在 $map 中时，使用 map-get($map,$key) 函数将返回一个 null 值。但对于开发人员，并看不到任何提示信息。如果使用 map-has-key($map,$key) 函数就可以改变这一状态。我们来看一个简单的示例。\n``` bash\n@if map-has-key($social-colors,facebook){\n    .btn-facebook {\n        color: map-get($social-colors,facebook);\n    }\n} @else {\n    @warn \"No color found for faceboo in $social-colors map. Property ommitted.\"\n}\n```\n``` bash\n.btn-fackbook{\n    color: #3b5998;\n} \n```\n上面看到的示例是 facebook 这个 key 已存在 $social-colors 这个 map 当中。所以能正常编译。如果你手误，将 facebook 输错了：\n``` bash\n@if map-has-key($social-colors,faceboo){\n    .btn-facebook {\n        color: map-get($social-colors,facebook);\n    }\n} @else {\n    @warn \"No color found for faceboo in $social-colors map. Property ommitted.\"\n}\n```\n这个时候，你编译出来的 CSS 代码中，不会有新代码添加，但在命令终端可以看到提示信息：\n``` bash\nWARNING: No color found for faceboo in $social-colors map. Property ommitted.\n         on line 25 of test.scss\n```\n是不是非常的友好。但总觉得这样写是傻傻的，总不可能每获取一个 key 都写一个 @if 语句吧。其实不用这么复杂，我们可以自定义一个函数，比如 colors():\n``` bash\n@function colors($color){\n    @if not map-has-key($social-colors,$color){\n        @warn \"No color found for `#{$color}` in $social-colors map. Property omitted.\";\n    }\n    @return map-get($social-colors,$color);\n}\n```\n有了这个函数之后，我们就可以这样使用\n``` bash\n.btn-dribble {\n    color: colors(dribble);\n}\n.btn-facebook {\n    color: colors(facebook);\n}\n.btn-github {\n    color: colors(github);\n}\n.btn-google {\n    color: colors(google);\n}\n.btn-twitter {\n    color: colors(twitter);\n}\n.btn-weibo {\n    color: colors(weibo);\n}\n```\n编译出来的 CSS:\n``` bash\n.btn-dribble {\n  color: #ea4c89;\n}\n\n.btn-facebook {\n  color: #3b5998;\n}\n\n.btn-github {\n  color: #171515;\n}\n\n.btn-google {\n  color: #db4437;\n}\n\n.btn-twitter {\n  color: #55acee;\n}\n```\n同时你不难发现，命令终端提示信息：\n``` bash\nWARNING: No color found for `weibo` in $social-colors map. Property omitted.\n         on line 13 of test.scss\n```\n那是在 $social-colors 这个 map 中没有 weibo 这个 key。是不是很有意思。\n\n当然，如果你对 Sass 的指令熟悉的话，上面编译出来的 CSS 可以使用 @each：\n``` bash\n@each $social-network,$social-color in $social-colors {\n    .btn-#{$social-network} {\n        color: colors($social-network);\n    }\n}\n```\n#### Sass Maps的函数-map-keys($map)\nmap-keys($map) 函数将会返回 $map 中的所有 key。这些值赋予给一个变量，那他就是一个列表。如：\n``` bash\n$list: map-keys($social-colors);\n```\n``` bash\n@function colors($color){\n    $names: map-keys($social-colors);\n    @if not index($names,$color){\n        @warn \"Waring: `#{$color} is not a valid color name.`\";\n    }\n    @return map-get($social-colors,$color);\n}\n```\n上面代码中最不同之处，我们使 用map-key s将 $social-colors 这个 map 的所有 key 取出，并赋予给一个名 为 $names 的列表。然后通过 index($names,$color) 返回 $color 在 $names 位置，如果这个位置不存在，将返回提示信息，如果存在将返回正确的值。\n同样，也可以通过 @each 或者 @for 遍历出所有值：\n``` bash\n@each $name in map-keys($social-colors){\n    .btn-#{$name}{\n        color: colors($name);\n    }\n}\n\n```\n用for：\n``` bash\n@for $i from 1 through length(map-keys($social-colors)){\n    .btn-#{nth(map-keys($social-colors),$i)} {\n        color: colors(nth(map-keys($social-colors),$i));\n    }\n}\n```\n虽然使用的方法不一样，但最终得到的 CSS 是一样的：\n``` bash\n.btn-dribble {\n  color: #ea4c89;\n}\n\n.btn-facebook {\n  color: #3b5998;\n}\n\n.btn-github {\n  color: #171515;\n}\n\n.btn-google {\n  color: #db4437;\n}\n\n.btn-twitter {\n  color: #55acee;\n}\n```\n#### Sass Maps的函数-map-values($map)、map-merge($map1,$map2)\nmap-values($map) 函数类似于 map-keys($map) 功能，不同的是 map-values($map )获取的是 $map 的所有 value 值，可以说也将是一个列表。而且，map-values($map) 中如果有相同的 value 也将会全部获取出来。\nmap-merge($map1,$map2) 函数是将 $map1 和 $map2 合并，然后得到一个新的 $map。如果你要快速将新的值插入到 $map 中的话，这种方法是最佳方法。假设我们有两个 $map:\n$color: (\n    text: #f36,\n    link: #f63,\n    border: #ddd,\n    backround: #fff\n);\n$typo:(\n    font-size: 12px,\n    line-height: 1.6\n);\n如果希望将这两个 $map 合并成一个 map，我们只要这样做：\n``` bash\n$newmap: map-merge($color,$typo);\n```\n将会生成一个新的 map:\n``` bash\n$newmap:(\n    text: #f36,\n    link: #f63,\n    border: #ddd,\n    background: #fff,\n    font-size: 12px,\n    line-height: 1.6\n);\n```\n不过有一点需要注意，如果 $map1 和 $map2 中有相同的 $key 名，那么将 $map2 中的 $key 会取代 $map1 中的：\n``` bash\n$color: (\n    text: #f36,\n    link: #f63,\n    border: #ddd,\n    backround: #fff\n);\n$typo:(\n    font-size: 12px,\n    line-height: 1.6,\n    border: #ccc,\n    background: #000\n);\n```\n执行：\n$newmap: map-merge($color,$typo);\n得到的新 map:\n``` bash\n$newmap:(\n    text: #f36,\n    link: #f63,\n    font-size: 12px,\n    line-height: 1.6,\n    border: #ccc,\n    background: #000\n);\n```\n#### Sass Maps的函数-map-remove($map,$key)、keywords($args)\nmap-remove($map,$key) 函数是用来删除当前 $map 中的某一个 $key，从而得到一个新的 map。其返回的值还是一个 map。他并不能直接从一个 map 中删除另一个 map，仅能通过删除 map 中的某个 key 得到新 map.\n如果删除的 key 并不存在于 $map 中，那么 map-remove() 函数返回的新 map 和以前的 map 一样。\n\nkeywords($args) 函数可以说是一个动态创建 map 的函数。可以通过混合宏或函数的参数变创建 map。参数也是成对出现，其中 $args 变成 key(会自动去掉$符号)，而 $args 对应的值就是value。\n``` bash\n@mixin map($args...){\n    @debug keywords($args);\n}\n\n@include map(\n  $dribble: #ea4c89,\n  $facebook: #3b5998,\n  $github: #171515,\n  $google: #db4437,\n  $twitter: #55acee\n);\n```\n在命令终端可以看到一个输入的 @debug 信息：\n``` bash\nDEBUG: (dribble: #ea4c89, facebook: #3b5998, github: #171515, google: #db4437, twitter: #55acee)\n```\n### RGB颜色函数-RGB()颜色函数\n在 Sass 的官方文档中，列出了 Sass 的颜色函数清单，从大的方面主要分为 RGB , HSL 和 Opacity 三大函数，当然其还包括一些其他的颜色函数，比如说 adjust-color 和 change-color 等。在这章节中，将主要和大家一起探讨 Sass 颜色函数中常见的 RGB、HSL 和 Opacity 函数。\nRGB 颜色只是颜色中的一种表达式，其中 R 是 red 表示红色，G 是 green 表示绿色而 B 是 blue 表示蓝色。在 Sass 中为 RGB 颜色提供六种函数：\n  - rgb($red,$green,$blue)：根据红、绿、蓝三个值创建一个颜色；\n  - rgba($red,$green,$blue,$alpha)：根据红、绿、蓝和透明度值创建一个颜色；\n  - red($color)：从一个颜色中获取其中红色值；\n  - green($color)：从一个颜色中获取其中绿色值；\n  - blue($color)：从一个颜色中获取其中蓝色值；\n  - mix($color-1,$color-2,[$weight])：把两种颜色混合在一起。\n仅从概念上，或许大家没有太多的概念，我们通过下面的命令来做一个简单的测试：\n``` bash\nsass -i\n```\n在命令终端开启这个命令，相当于开启 Sass 的函数计算。\n接下来，分别在终端使用 RGB 函数来进行计算，看其最终结果：\n``` bash\n$ sass -i\n>> rgb(200,40,88) //根据r:200,g:40,b:88计算出一个十六进制颜色值\n#c82858\n>> rgba(#c82858,.65) //根据#c82858的65%透明度计算出一个rgba颜色值\nrgba(200, 40, 88, 0.65)\n>> red(#c82858) //从#c82858颜色值中得到红色值 200\n200\n>> green(#c82858) //从#c82858颜色值中得到绿色值 40\n40\n>> blue(#c82858) //从#c82858颜色值中得到蓝色值 88\n88\n>> mix(#c82858,rgba(200,40,80,.65),.3) //把#c82858和rgba(200,40,88,.65) 两颜色按比例混合得到一个新颜色\nrgba(200, 40, 80, 0.65105)\n```\n从上面的简单运算结果可以很清晰的知道。在 RGB 颜色函数中，在实际中常用的主要是 rgba() 和 mix() 两个函数，而 rgb() 函数只能快速的将一个 rgb 颜色转换成十六进制颜色表达，red()、green() 和 blue() 函数，只能取得某一颜色的一个值，对于颜色上使用并无太大作用（或许他的好处，我还没有理解过来）。\n#### RGB颜色函数-RGBA()函数\nrgba() 函数主要用来将一个颜色根据透明度转换成 rgba 颜色。\n其语法有两种格式：\n``` bash\nrgba($red,$green,$blue,$alpha)  //将一个rgba颜色转译出来，和未转译的值一样\nrgba($color,$alpha)  //将一个Hex颜色转换成rgba颜色\n```\n其中 rgba($color,$alpha) 函数作用更大，主要运用在这样的情形之中：假设在实际中知道的颜色值是 #f36 或者 red，但在使用中，需要给他们配上一个透明度，这个时候在原来的 CSS 中，首先需要通过制图工具，得到 #f36 或 red 颜色的 R、G、B 值，而不能直接使用（注意 css3 是可以的，但是存在浏览器兼容问题）：\n``` bash\n//CSS\ncolor: rgba(#f36,.5); //在css中，这是无效的写法\n```\n但在 Sass 中，RGBA() 函数就能解决这个问题。我们先来看一个简单的例子，假设在变量中定义了一个基本的变量： \n``` bash\n//SCSS\n.rgba {\n    color: rgba(#f36,.5);\n    background: rgba(orange,.5);\n    border-color: rgba(green,.5);\n}\n```\n在这个实例中，我们使用了 Sass 的 rgba 函数，在括号是函数的参数，第一个参数是需要转换的颜色，他可以是任何颜色的表达方式，也可以是一个颜色变量；第二个参数是颜色的透明度，其值是 0~1 之间。上面的代码转译出来：\n``` bash\n.rgba {\n  color: rgba(255, 51, 102, 0.5);\n  background: rgba(255, 165, 0, 0.5);\n  border-color: rgba(0, 128, 0, 0.5);\n}\n```\n在来看一个调用前面定义的变量：\n``` bash\n//SCSS\n.rgba {\n    color: rgba($color,.5);\n    background: rgba($bgColor,.5);\n    border-color: rgba($borderColor,.5);\n}\n```\n``` bash\n//CSS\n.rgba {\n  color: rgba(255, 51, 102, 0.5);\n  background: rgba(255, 165, 0, 0.5);\n  border-color: rgba(0, 128, 0, 0.5);\n}\n```\n#### RGB颜色函数-Red()、Green()、Blue()函数\nRed() 函数\n\nred() 函数非常简单，其主要用来获取一个颜色当中的红色值。假设有一个 #f36 的颜色，如果你想得到 #f36 中的 red 值是多少，这个时候使用 red() 函数就能很简单获取。\nGreen() 函数\ngreen() 函数和red()函数一样，用来获取某一个颜色值中 green 的值。\nBlue() 函数\n同理，blue() 函数是用来获取某一个颜色值中 blue 的值，\n\n#### RGB颜色函数-Mix()函数\nMix 函数是将两种颜色根据一定的比例混合在一起，生成另一种颜色。其使用语法如下：\n``` bash\nmix($color-1,$color-2,$weight);\n```\n$color-1 和 $color-2 指的是你需要合并的颜色，颜色可以是任何表达式，也可以是颜色变量。\n$weight 为 合并的比例（选择权重），默认值为 50%，其取值范围是 0~1 之间。它是每个 RGB 的百分比来衡量，当然透明度也会有一定的权重。默认的比例是 50%，这意味着两个颜色各占一半，如果指定的比例是 25%，这意味着第一个颜色所占比例为 25%，第二个颜色所占比例为75%。\n使用：\n``` bash\nmix(#f00, #00f) => #7f007f\nmix(#f00, #00f, 25%) => #3f00bf\nmix(rgba(255, 0, 0, 0.5), #00f) => rgba(63, 0, 191, 0.75)\n```\n``` bash\n//SCSS\n$color1: #a63;\n$color2: #fff;\n$bgColor1: #f36;\n$bgColor2: #e36;\n$borderColor1:#c36;\n$borderColor2:#b36;\n.mix {\n    background: mix($bgColor1,$bgColor2,.75);\n    color: mix($color1,$color2,.25);\n    border-color: mix($borderColor1,$bgColor2,.05);\n}\n```\n``` bash\n//CSS\n.mix {\n    background: #ee3366;\n    color: #fefefe;\n    border-color: #ed33\n}\n```\n### HSL函数简介\n在 Sass 中提供了一系列有关于 HSL 的颜色函数，以供大家使用，其中常用的有 saturation、lightness、adjust-hue、lighten、darken 等等。接下来我们先来了解一下 HSL 颜色函数包括哪些具体的函数，所起的作用是什么：\n\n  - hsl($hue,$saturation,$lightness)：通过色相（hue）、饱和度(saturation)和亮度（lightness）的值创建一个颜色；\n  - hsla($hue,$saturation,$lightness,$alpha)：通过色相（hue）、饱和度(saturation)、亮度（lightness）和透明（alpha）的值创建一个颜色；\n  - hue($color)：从一个颜色中获取色相（hue）值；\n  - saturation($color)：从一个颜色中获取饱和度（saturation）值；\n  - lightness($color)：从一个颜色中获取亮度（lightness）值；\n  - adjust-hue($color,$degrees)：通过改变一个颜色的色相值，创建一个新的颜色；\n  - lighten($color,$amount)：通过改变颜色的亮度值，让颜色变亮，创建一个新的颜色；\n  - darken($color,$amount)：通过改变颜色的亮度值，让颜色变暗，创建一个新的颜色；\n  - saturate($color,$amount)：通过改变颜色的饱和度值，让颜色更饱和，从而创建一个新的颜色\n  - desaturate($color,$amount)：通过改变颜色的饱和度值，让颜色更少的饱和，从而创建出一个新的颜色；\n  - grayscale($color)：将一个颜色变成灰色，相当于desaturate($color,100%);\n  - complement($color)：返回一个补充色，相当于adjust-hue($color,180deg);\n  - invert($color)：反回一个反相色，红、绿、蓝色值倒过来，而透明度不变。\n### Opacity函数简介\n在 CSS 中除了可以使用 rgba、hsla 和 transform 来控制颜色透明度之外，还可以使用 opacity 来控制，只不过前两者只是针对颜色上的透明通道做处理，而后者是控制整个元素的透明度。\n在 Sass 中，也提供了系列透明函数，只不过这系列的透明函数主要用来处理颜色透明度：\n  - alpha($color) /opacity($color)：获取颜色透明度值；\n  - rgba($color, $alpha)：改变颜色的透明度值；\n  - opacify($color, $amount) / fade-in($color, $amount)：使颜色更不透明；\n  - transparentize($color, $amount) / fade-out($color, $amount)：使颜色更加透明。\n\n### @import\nSass 支持所有 CSS3 的 @ 规则， 以及一些 Sass 专属的规则，也被称为“指令（directives）”。 这些规则在 Sass 中具有不同的功效，详细解释如下。\n@import\n\nSass 扩展了 CSS 的 @import 规则，让它能够引入 SCSS 和 Sass 文件。 所有引入的 SCSS 和 Sass 文件都会被合并并输出一个单一的 CSS 文件。 另外，被导入的文件中所定义的变量或 mixins 都可以在主文件中使用。\nSass 会在当前目录下寻找其他 Sass 文件， 如果是 Rack、Rails 或 Merb 环境中则是 Sass 文件目录。 也可以通过 :load_paths 选项或者在命令行中使用 --load-path 选项来指定额外的搜索目录。\n\n@import 根据文件名引入。 默认情况下，它会寻找 Sass 文件并直接引入， 但是，在少数几种情况下，它会被编译成 CSS 的 @import 规则：\n\n  - 如果文件的扩展名是 .css。\n  - 如果文件名以 http:// 开头。\n  - 如果文件名是 url()。\n  - 如果 @import 包含了任何媒体查询（media queries）。\n如果上述情况都没有出现，并且扩展名是 .scss 或 .sass， 该名称的 Sass 或 SCSS 文件就会被引入。 如果没有扩展名， Sass 将试着找出具有 .scss 或 .sass 扩展名的同名文件并将其引入。\n\\@import \"foo\";\n\\@import \"foo\";\n如果你有一个 SCSS 或 Sass 文件需要引入， 但是你又不希望它被编译为一个 CSS 文件， 这时，你就可以在文件名前面加一个下划线，就能避免被编译。 这将告诉 Sass 不要把它编译成 CSS 文件。 然后，你就可以像往常一样引入这个文件了，而且还可以省略掉文件名前面的下划线。\n注意，在同一个目录不能同时存在带下划线和不带下划线的同名文件。 例如， _colors.scss 不能与 colors.scss 并存。\n嵌套 @import\n\n虽然大部分时间只需在顶层文件使用 @import 就行了， 但是，你还可以把他们包含在 CSS 规则 和 @media 规则中。\n### @media\nSass 中的 @media 指令和 CSS 的使用规则一样的简单，但它有另外一个功能，可以嵌套在 CSS 规则中。有点类似 JS 的冒泡功能一样，如果在样式中使用 @media 指令，它将冒泡到外面。来看一个简单示例：\n``` bash\n.sidebar {\n  width: 300px;\n  @media screen and (orientation: landscape) {\n    width: 500px;\n  }\n}\n```\n``` bash\n.sidebar {\n  width: 300px; }\n  @media screen and (orientation: landscape) {\n    .sidebar {\n      width: 500px; } }\n```\n@media 也可以嵌套 @media\n``` bash\n@media screen {\n  .sidebar {\n    @media (orientation: landscape) {\n      width: 500px;\n    }\n  }\n}\n```\n``` bash\n@media screen and (orientation: landscape) {\n  .sidebar {\n    width: 500px; } }\n```\n在使用 @media 时，还可以使用插件#{}:\n``` bash\n$media: screen;\n$feature: -webkit-min-device-pixel-ratio;\n$value: 1.5;\n\n@media #{$media} and ($feature: $value) {\n  .sidebar {\n    width: 500px;\n  }\n}\n```\n``` bash\n@media screen and (-webkit-min-device-pixel-ratio: 1.5) {\n  .sidebar {\n    width: 500px; } }\n```\n### @extend\nSass 中的 @extend 是用来扩展选择器或占位符。比如：\n``` bash\n.error {\n  border: 1px #f00;\n  background-color: #fdd;\n}\n.error.intrusion {\n  background-image: url(\"/image/hacked.png\");\n}\n.seriousError {\n  @extend .error;\n  border-width: 3px;\n}\n```\n``` bash\n.error, .seriousError {\n  border: 1px #f00;\n  background-color: #fdd; }\n\n.error.intrusion, .seriousError.intrusion {\n  background-image: url(\"/image/hacked.png\"); }\n\n.seriousError {\n  border-width: 3px; }\n```\n多个扩展\n\n所设某个样式要继承多个地方的样式，那么可以使用 @extend 来继承多个选择器或占位符的样式，如：\n``` bash\n.error {\n  border: 1px #f00;\n  background-color: #fdd;\n}\n.attention {\n  font-size: 3em;\n  background-color: #ff0;\n}\n.seriousError {\n  @extend .error;\n  @extend .attention;\n  border-width: 3px;\n}\n```\n``` bash\n.error, .seriousError {\n  border: 1px #f00;\n  background-color: #fdd; }\n\n.attention, .seriousError {\n  font-size: 3em;\n  background-color: #ff0; }\n\n.seriousError {\n  border-width: 3px; }\n```\n扩展单一选择器\n\n前面我们知道 %placeholder 不使用@extend显示调用是不会生成任何样式代码。那么在选择器中使用占位符一样。比如下面的代码:\n``` bash\n#context a%extreme {\n  color: blue;\n  font-weight: bold;\n  font-size: 2em;\n}\n```\n``` bash\n.notice {\n  @extend %extreme;\n}\n```\n``` bash\n#context a.notice {\n  color: blue;\n  font-weight: bold;\n  font-size: 2em;\n}\n```\n\n### @at-root\n@at-root 从字面上解释就是跳出根元素。当你选择器嵌套多层之后，想让某个选择器跳出，此时就可以使用 @at-root。来看一个简单的示例：\n``` bash\n.a {\n  color: red;\n\n  .b {\n    color: orange;\n\n    .c {\n      color: yellow;\n\n      @at-root .d {\n        color: green;\n      }\n    }\n  }  \n}\n```\n``` bash\n.a {\n  color: red;\n}\n\n.a .b {\n  color: orange;\n}\n\n.a .b .c {\n  color: yellow;\n}\n\n.d {\n  color: green;\n}\n```\n### @debug\n@debug 在 Sass 中是用来调试的，当你的在 Sass 的源码中使用了 @debug 指令之后，Sass 代码在编译出错时，在命令终端会输出你设置的提示 Bug:\n\\@debug 10em + 12em;\noutput:Line 1 DEBUG: 22em\n\n### @warn\n@warn 和 @debug 功能类似，用来帮助我们更好的调试 Sass。如：\n``` bash\n@mixin adjust-location($x, $y) {\n  @if unitless($x) {\n    @warn \"Assuming #{$x} to be in pixels\";\n    $x: 1px * $x;\n  }\n  @if unitless($y) {\n    @warn \"Assuming #{$y} to be in pixels\";\n    $y: 1px * $y;\n  }\n  position: relative; left: $x; top: $y;\n}\n```\n### @error\n@error 和 @warn、@debug 功能是如出一辙.\n``` bash\n@mixin error($x){\n  @if $x < 10 {\n    width: $x * 10px;\n  } @else if $x == 10 {\n    width: $x;\n  } @else {\n    @error \"你需要将#{$x}值设置在10以内的数\";\n  }\n\n}\n\n.test {\n  @include error(15);\n}\n```\n编译时，提示：你需要将15值设置在10以内的数 on line 7 at column 5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"sass学习","published":1,"updated":"2016-10-31T03:55:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuy6rzki000kmsq4itdsix0j","content":"<h1 id=\"sass\"><a href=\"#sass\" class=\"headerlink\" title=\"sass\"></a>sass</h1><h2 id=\"编译风格\"><a href=\"#编译风格\" class=\"headerlink\" title=\"编译风格\"></a>编译风格</h2><p>1, –style nested<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">nav &#123;</div><div class=\"line\">  ul &#123;</div><div class=\"line\">    margin: 0;</div><div class=\"line\">    padding: 0;</div><div class=\"line\">    list-style: none;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  li &#123; display: inline-block; &#125;</div><div class=\"line\"></div><div class=\"line\">  a &#123;</div><div class=\"line\">    display: block;</div><div class=\"line\">    padding: 6px 12px;</div><div class=\"line\">    text-decoration: none;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>2, sass –watch test.scss:test.css –style expanded<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">nav &#123;</div><div class=\"line\">  ul &#123;</div><div class=\"line\">    margin: 0;</div><div class=\"line\">    padding: 0;</div><div class=\"line\">    list-style: none;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  li &#123; display: inline-block; &#125;</div><div class=\"line\"></div><div class=\"line\">  a &#123;</div><div class=\"line\">    display: block;</div><div class=\"line\">    padding: 6px 12px;</div><div class=\"line\">    text-decoration: none;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>3, sass –watch test.scss:test.css –style compact<br>4, sass –watch test.scss:test.css –style compressed</p>\n<p>Sass 调试: sass –watch –scss –sourcemap style.scss:style.css.在 Sass3.3 版本之上（我测试使用的版本是 3.4.7），不需要添加这个参数也可以</p>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"Sass-声明变量\"><a href=\"#Sass-声明变量\" class=\"headerlink\" title=\"[Sass]声明变量\"></a>[Sass]声明变量</h3><p>声明变量的符号“$”<br>变量名称<br>赋予变量的值<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$brand</span>-primary : darken(<span class=\"comment\">#428bca, 6.5%) !default; // #337ab7</span></div><div class=\"line\"><span class=\"variable\">$btn</span>-primary-color : <span class=\"comment\">#fff !default;</span></div><div class=\"line\"><span class=\"variable\">$btn</span>-primary-bg : <span class=\"variable\">$brand</span>-primary !default;</div><div class=\"line\"><span class=\"variable\">$btn</span>-primary-border : darken(<span class=\"variable\">$btn</span>-primary-bg, 5%) !default;</div></pre></td></tr></table></figure></p>\n<p>如果值后面加上!default则表示默认值。</p>\n<h3 id=\"Sass-普通变量与默认变量\"><a href=\"#Sass-普通变量与默认变量\" class=\"headerlink\" title=\"[Sass]普通变量与默认变量\"></a>[Sass]普通变量与默认变量</h3><p>普通变量：定义之后可以在全局范围内使用。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$fontSize</span>: 12px;</div><div class=\"line\">body&#123;</div><div class=\"line\">\tfont-size:<span class=\"variable\">$fontSize</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>默认变量：sass 的默认变量仅需要在值后面加上 !default 即可。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$baseLineHeight</span>:1.5 !default;</div><div class=\"line\">body&#123;</div><div class=\"line\">\tline-height: <span class=\"variable\">$baseLineHeight</span>; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>sass 的默认变量一般是用来设置默认值，然后根据需求来覆盖的，覆盖的方式也很简单，只需要在默认变量之前重新声明下变量即可。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$baseLineHeight</span>: 2;</div><div class=\"line\"><span class=\"variable\">$baseLineHeight</span>: 1.5 !default;</div><div class=\"line\">body&#123;</div><div class=\"line\">\tline-height: <span class=\"variable\">$baseLineHeight</span>; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>编译后的css代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">body&#123;</div><div class=\"line\">\tline-height:2;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Sass-变量的调用\"><a href=\"#Sass-变量的调用\" class=\"headerlink\" title=\"[Sass]变量的调用\"></a>[Sass]变量的调用</h3><p>在 Sass 中声明了变量之后，就可以在需要的地方调用变量。调用变量的方法也非常的简单。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.btn-primary &#123;</div><div class=\"line\">\tbackground-color: <span class=\"variable\">$btn</span>-primary-bg;</div><div class=\"line\">\tcolor: <span class=\"variable\">$btn</span>-primary-color;</div><div class=\"line\">\tborder: 1px solid <span class=\"variable\">$btn</span>-primary-border;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Sass-局部变量和全局变量\"><a href=\"#Sass-局部变量和全局变量\" class=\"headerlink\" title=\"[Sass]局部变量和全局变量\"></a>[Sass]局部变量和全局变量</h3><p>Sass 中变量的作用域在过去几年已经发生了一些改变。直到最近，规则集和其他范围内声明变量的作用域才默认为本地。如果已经存在同名的全局变量，从 3.4 版本开始，Sass 已经可以正确处理作用域的概念，并通过创建一个新的局部变量来代替。<br>先来看一下代码例子：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//SCSS</div><div class=\"line\"><span class=\"variable\">$color</span>: orange !default;//定义全局变量(在选择器、函数、混合宏...的外面定义的变量为全局变量)</div><div class=\"line\">.block &#123;</div><div class=\"line\">  color: <span class=\"variable\">$color</span>;//调用全局变量</div><div class=\"line\">&#125;</div><div class=\"line\">em &#123;</div><div class=\"line\">  <span class=\"variable\">$color</span>: red;//定义局部变量</div><div class=\"line\">  a &#123;</div><div class=\"line\">\tcolor: <span class=\"variable\">$color</span>;//调用局部变量</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">span &#123;</div><div class=\"line\">  color: <span class=\"variable\">$color</span>;//调用全局变量</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//CSS</div><div class=\"line\">.block &#123;</div><div class=\"line\">  color: orange;</div><div class=\"line\">&#125;</div><div class=\"line\">em a &#123;</div><div class=\"line\">  color: red;</div><div class=\"line\">&#125;</div><div class=\"line\">span &#123;</div><div class=\"line\">  color: orange;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的示例演示可以得知，在元素内部定义的变量不会影响其他元素。如此可以简单的理解成，全局变量就是定义在元素外面的变量，而定义在元素内部的变量，是一个局部变量。<br>我的建议，创建变量只适用于感觉确有必要的情况下。不要为了某些骇客行为而声明新变量，这丝毫没有作用。只有满足所有下述标准时方可创建新变量：</p>\n<ol>\n<li>该值至少重复出现了两次；</li>\n<li>该值至少可能会被更新一次；</li>\n<li>该值所有的表现都与变量有关（非巧合）。</li>\n</ol>\n<h3 id=\"Sass-嵌套-选择器嵌套\"><a href=\"#Sass-嵌套-选择器嵌套\" class=\"headerlink\" title=\"[Sass]嵌套-选择器嵌套\"></a>[Sass]嵌套-选择器嵌套</h3><p>1、选择器嵌套<br>如果有：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;header&gt;</div><div class=\"line\">&lt;nav&gt;</div><div class=\"line\">    &lt;a href=“<span class=\"comment\">##”&gt;Home&lt;/a&gt;</span></div><div class=\"line\">    &lt;a href=“<span class=\"comment\">##”&gt;About&lt;/a&gt;</span></div><div class=\"line\">    &lt;a href=“<span class=\"comment\">##”&gt;Blog&lt;/a&gt;</span></div><div class=\"line\">&lt;/nav&gt;</div><div class=\"line\">&lt;header&gt;</div></pre></td></tr></table></figure></p>\n<p>想选中 header 中的 a 标签，在写 sCSS 会这样写：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">nav &#123;</div><div class=\"line\">  a &#123;</div><div class=\"line\">\tcolor: red;</div><div class=\"line\">\theader &amp; &#123;</div><div class=\"line\">\t\tcolor:green;</div><div class=\"line\">\t&#125;</div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">nav a &#123;</div><div class=\"line\">  color:red;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">header nav a &#123;</div><div class=\"line\">  color:green;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Sass-嵌套-属性嵌套\"><a href=\"#Sass-嵌套-属性嵌套\" class=\"headerlink\" title=\"[Sass]嵌套-属性嵌套\"></a>[Sass]嵌套-属性嵌套</h3><p>Sass 中还提供属性嵌套，CSS 有一些属性前缀相同，只是后缀不一样，比如：border-top/border-right，与这个类似的还有 margin、padding、font 等属性。假设你的样式中用到了：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">\tborder-top: 1px solid red;</div><div class=\"line\">\tborder-bottom: 1px solid green;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>scss中可以这么写：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  border: &#123;</div><div class=\"line\">   top: 1px solid red;</div><div class=\"line\">   bottom: 1px solid green;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注意border后面的冒号。</p>\n<h3 id=\"Sass-嵌套-伪类嵌套\"><a href=\"#Sass-嵌套-伪类嵌套\" class=\"headerlink\" title=\"[Sass]嵌套-伪类嵌套\"></a>[Sass]嵌套-伪类嵌套</h3><p>其实伪类嵌套和属性嵌套非常类似，只不过他需要借助<code>&amp;</code>符号一起配合使用。我们就拿经典的“clearfix”为例吧：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.clearfix&#123;</div><div class=\"line\">&amp;:before,</div><div class=\"line\">&amp;:after &#123;</div><div class=\"line\">    content:<span class=\"string\">\"\"</span>;</div><div class=\"line\">    display: table;</div><div class=\"line\">  &#125;</div><div class=\"line\">&amp;:after &#123;</div><div class=\"line\">    clear:both;</div><div class=\"line\">    overflow: hidden;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>&amp; 和冒号之间没有空格。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">clearfix:before, .clearfix:after &#123;</div><div class=\"line\">  content: <span class=\"string\">\"\"</span>;</div><div class=\"line\">  display: table;</div><div class=\"line\">&#125;</div><div class=\"line\">.clearfix:after &#123;</div><div class=\"line\">  clear: both;</div><div class=\"line\">  overflow: hidden;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>选择器嵌套最大的问题是将使最终的代码难以阅读。开发者需要花费巨大精力计算不同缩进级别下的选择器具体的表现效果。<br>选择器越具体则声明语句越冗长，而且对最近选择器的引用(&amp;)也越频繁。在某些时候，出现混淆选择器路径和探索下一级选择器的错误率很高，这非常不值得。</p>\n<p>为了防止此类情况，我们应该尽可能避免选择器嵌套。然而，显然只有少数情况适应这一措施。</p>\n<h3 id=\"Sass-混合宏-声明混合宏\"><a href=\"#Sass-混合宏-声明混合宏\" class=\"headerlink\" title=\"[Sass]混合宏-声明混合宏\"></a>[Sass]混合宏-声明混合宏</h3><p>如果你的整个网站中有几处小样式类似，比如颜色，字体等，在 Sass 可以使用变量来统一处理，那么这种选择还是不错的。但当你的样式变得越来越复杂，需要重复使用大段的样式时，使用变量就无法达到我们目了。这个时候 Sass 中的混合宏就会变得非常有意义。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@mixin border-radius&#123;</div><div class=\"line\">    -webkit-border-radius: 5px;</div><div class=\"line\">    border-radius: 5px;</div><div class=\"line\">&#125;</div><div class=\"line\">```\t</div><div class=\"line\">其中 @mixin 是用来声明混合宏的关键词，有点类似 CSS 中的 @media、@font-face 一样。border-radius 是混合宏的名称。大括号里面是复用的样式代码。</div><div class=\"line\">除了声明一个不带参数的混合宏之外，还可以在定义混合宏时带有参数，如：</div><div class=\"line\">``` bash</div><div class=\"line\">@mixin border-radius(<span class=\"variable\">$radius</span>:5px)&#123;</div><div class=\"line\">    -webkit-border-radius: <span class=\"variable\">$radius</span>;</div><div class=\"line\">    border-radius: <span class=\"variable\">$radius</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面是一个简单的定义混合宏的方法，当然， Sass 中的混合宏还提供更为复杂的，你可以在大括号里面写上带有逻辑关系，帮助更好的做你想做的事情,如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@mixin box-shadow(<span class=\"variable\">$shadow</span>...) &#123;</div><div class=\"line\">  @<span class=\"keyword\">if</span> length(<span class=\"variable\">$shadow</span>) &gt;= 1 &#123;</div><div class=\"line\">    @include prefixer(box-shadow, <span class=\"variable\">$shadow</span>);</div><div class=\"line\">  &#125; @<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"variable\">$shadow</span>:0 0 4px rgba(0,0,0,.3);</div><div class=\"line\">    @include prefixer(box-shadow, <span class=\"variable\">$shadow</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个 box-shadow 的混合宏，带有多个参数，这个时候可以使用“ … ”来替代。简单的解释一下，当 $shadow 的参数数量值大于或等于“ 1 ”时，表示有多个阴影值，反之调用默认的参数值“ 0 0 4px rgba(0,0,0,.3) ”。</p>\n<h3 id=\"Sass-混合宏-调用混合宏\"><a href=\"#Sass-混合宏-调用混合宏\" class=\"headerlink\" title=\"[Sass]混合宏-调用混合宏\"></a>[Sass]混合宏-调用混合宏</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">button &#123;</div><div class=\"line\">    @include border-radius;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>@mixin 类似函数声明，@include 类似函数调用</p>\n<h3 id=\"Sass-混合宏的参数–传一个不带值的参数\"><a href=\"#Sass-混合宏的参数–传一个不带值的参数\" class=\"headerlink\" title=\"[Sass]混合宏的参数–传一个不带值的参数\"></a>[Sass]混合宏的参数–传一个不带值的参数</h3><p>在混合宏中，可以传递一个不带任何值得参数，比如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@mixin border-radius(<span class=\"variable\">$radius</span>)&#123;</div><div class=\"line\">  -webkit-border-radius: <span class=\"variable\">$radius</span>;</div><div class=\"line\">  border-radius: <span class=\"variable\">$radius</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  @include border-radius(3px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意，不传值会报错。</p>\n<h3 id=\"Sass-混合宏的参数–传一个带值的参数\"><a href=\"#Sass-混合宏的参数–传一个带值的参数\" class=\"headerlink\" title=\"[Sass]混合宏的参数–传一个带值的参数\"></a>[Sass]混合宏的参数–传一个带值的参数</h3><p>在 Sass 的混合宏中，还可以给混合宏的参数传一个默认值，例如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@mixin border-radius(<span class=\"variable\">$radius</span>:3px)&#123;</div><div class=\"line\">  -webkit-border-radius: <span class=\"variable\">$radius</span>;</div><div class=\"line\">  border-radius: <span class=\"variable\">$radius</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在混合宏“border-radius”传了一个参数“$radius”，而且给这个参数赋予了一个默认值“3px”。<br>在调用类似这样的混合宏时，会多有一个机会，假设你的页面中的圆角很多地方都是“3px”的圆角，那么这个时候只需要调用默认的混合宏“border-radius”:<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.btn &#123;</div><div class=\"line\">  @include border-radius;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>但有的时候，页面中有些元素的圆角值不一样，那么可以随机给混合宏传值，如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  @include border-radius(50%);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Sass-混合宏的参数–传多个参数\"><a href=\"#Sass-混合宏的参数–传多个参数\" class=\"headerlink\" title=\"[Sass]混合宏的参数–传多个参数\"></a>[Sass]混合宏的参数–传多个参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@mixin center(<span class=\"variable\">$width</span>,<span class=\"variable\">$height</span>)&#123;</div><div class=\"line\">  width: <span class=\"variable\">$width</span>;</div><div class=\"line\">  height: <span class=\"variable\">$height</span>;</div><div class=\"line\">  position: absolute;</div><div class=\"line\">  top: 50%;</div><div class=\"line\">  left: 50%;</div><div class=\"line\">  margin-top: -(<span class=\"variable\">$height</span>) / 2;</div><div class=\"line\">  margin-left: -(<span class=\"variable\">$width</span>) / 2;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调用：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box-center &#123;</div><div class=\"line\">  @include center(500px,300px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>有一个特别的参数“…”。当混合宏传的参数过多之时，可以使用参数来替代，如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@mixin box-shadow(<span class=\"variable\">$shadows</span>...)&#123;</div><div class=\"line\">  @<span class=\"keyword\">if</span> length(<span class=\"variable\">$shadows</span>) &gt;= 1 &#123;</div><div class=\"line\">    -webkit-box-shadow: <span class=\"variable\">$shadows</span>;</div><div class=\"line\">    box-shadow: <span class=\"variable\">$shadows</span>;</div><div class=\"line\">  &#125; @<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"variable\">$shadows</span>: 0 0 2px rgba(<span class=\"comment\">#000,.25);</span></div><div class=\"line\">    -webkit-box-shadow: <span class=\"variable\">$shadow</span>;</div><div class=\"line\">    box-shadow: <span class=\"variable\">$shadow</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Sass-混合宏的参数–混合宏的不足\"><a href=\"#Sass-混合宏的参数–混合宏的不足\" class=\"headerlink\" title=\"[Sass]混合宏的参数–混合宏的不足\"></a>[Sass]混合宏的参数–混合宏的不足</h3><p>混合宏在实际编码中给我们带来很多方便之处，特别是对于复用重复代码块。但其最大的不足之处是会生成冗余的代码块。比如在不同的地方调用一个相同的混合宏时。如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@mixin border-radius&#123;</div><div class=\"line\">  -webkit-border-radius: 3px;</div><div class=\"line\">  border-radius: 3px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.box &#123;</div><div class=\"line\">  @include border-radius;</div><div class=\"line\">  margin-bottom: 5px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn &#123;</div><div class=\"line\">  @include border-radius;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Sass-扩展-继承\"><a href=\"#Sass-扩展-继承\" class=\"headerlink\" title=\"[Sass]扩展/继承\"></a>[Sass]扩展/继承</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//SCSS</div><div class=\"line\">.btn &#123;</div><div class=\"line\">  border: 1px solid <span class=\"comment\">#ccc;</span></div><div class=\"line\">  padding: 6px 10px;</div><div class=\"line\">  font-size: 14px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-primary &#123;</div><div class=\"line\">  background-color: <span class=\"comment\">#f36;</span></div><div class=\"line\">  color: <span class=\"comment\">#fff;</span></div><div class=\"line\">  @extend .btn;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-second &#123;</div><div class=\"line\">  background-color: orange;</div><div class=\"line\">  color: <span class=\"comment\">#fff;</span></div><div class=\"line\">  @extend .btn;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>编译出来之后：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//CSS</div><div class=\"line\">.btn, .btn-primary, .btn-second &#123;</div><div class=\"line\">  border: 1px solid <span class=\"comment\">#ccc;</span></div><div class=\"line\">  padding: 6px 10px;</div><div class=\"line\">  font-size: 14px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-primary &#123;</div><div class=\"line\">  background-color: <span class=\"comment\">#f36;</span></div><div class=\"line\">  color: <span class=\"comment\">#fff;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-second &#123;</div><div class=\"line\">  background-clor: orange;</div><div class=\"line\">  color: <span class=\"comment\">#fff;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从示例代码可以看出，在 Sass 中的继承，可以继承类样式块中所有样式代码，而且编译出来的 CSS 会将选择器合并在一起，形成组合选择器</p>\n<h3 id=\"Sass-占位符-placeholder\"><a href=\"#Sass-占位符-placeholder\" class=\"headerlink\" title=\"[Sass]占位符 %placeholder\"></a>[Sass]占位符 %placeholder</h3><p>Sass 中的占位符 %placeholder 功能是一个很强大，很实用的一个功能，这也是我非常喜欢的功能。他可以取代以前 CSS 中的基类造成的代码冗余的情形。因为 %placeholder 声明的代码，如果不被 @extend 调用的话，不会产生任何代码。来看一个演示：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">%mt5 &#123;</div><div class=\"line\">  margin-top: 5px;</div><div class=\"line\">&#125;</div><div class=\"line\">%pt5&#123;</div><div class=\"line\">  padding-top: 5px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这段代码没有被 @extend 调用，他并没有产生任何代码块，只是静静的躺在你的某个 SCSS 文件中。只有通过 @extend 调用才会产生代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//SCSS</div><div class=\"line\">%mt5 &#123;</div><div class=\"line\">  margin-top: 5px;</div><div class=\"line\">&#125;</div><div class=\"line\">%pt5&#123;</div><div class=\"line\">  padding-top: 5px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn &#123;</div><div class=\"line\">  @extend %mt5;</div><div class=\"line\">  @extend %pt5;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.block &#123;</div><div class=\"line\">  @extend %mt5;</div><div class=\"line\"></div><div class=\"line\">  span &#123;</div><div class=\"line\">    @extend %pt5;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>编译出来的CSS<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//CSS</div><div class=\"line\">.btn, .block &#123;</div><div class=\"line\">  margin-top: 5px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn, .block span &#123;</div><div class=\"line\">  padding-top: 5px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从编译出来的 CSS 代码可以看出，通过 @extend 调用的占位符，编译出来的代码会将相同的代码合并在一起。这也是我们希望看到的效果，也让你的代码变得更为干净。</p>\n<h3 id=\"Sass-混合宏-VS-继承-VS-占位符\"><a href=\"#Sass-混合宏-VS-继承-VS-占位符\" class=\"headerlink\" title=\"[Sass]混合宏 VS 继承 VS 占位符\"></a>[Sass]混合宏 VS 继承 VS 占位符</h3><p>初学者都常常纠结于这个问题“什么时候用混合宏，什么时候用继承，什么时候使用占位符？”其实他们各有各的优点与缺点，先来看看他们使用效果：<br>混合宏：编译出来的 CSS 清晰告诉了大家，他不会自动合并相同的样式代码，如果在样式文件中调用同一个混合宏，会产生多个对应的样式代码，造成代码的冗余，这也是 CSSer 无法忍受的一件事情。不过他并不是一无事处，他可以传参数。<br>个人建议：如果你的代码块中涉及到变量，建议使用混合宏来创建相同的代码块。<br>继承：使用继承后，编译出来的 CSS 会将使用继承的代码块合并到一起，通过组合选择器的方式向大家展现，比如 .mt, .block, .block span, .header, .header span。这样编译出来的代码相对于混合宏来说要干净的多，也是 CSSer 期望看到。但是他不能传变量参数。</p>\n<p>个人建议：如果你的代码块不需要专任何变量参数，而且有一个基类已在文件中存在，那么建议使用 Sass 的继承。<br>占位符：总结：编译出来的 CSS 代码和使用继承基本上是相同，只是不会在代码中生成占位符 mt 的选择器。那么占位符和继承的主要区别的，“占位符是独立定义，不调用的时候是不会在 CSS 中产生任何代码；继承是首先有一个基类存在，不管调用与不调用，基类的样式都将会出现在编译出来的 CSS 代码中。”<br><img src=\"images/diff_sass.png\" alt=\"chabie\">;</p>\n<h3 id=\"Sass-插值\"><a href=\"#Sass-插值\" class=\"headerlink\" title=\"[Sass]插值#{}\"></a>[Sass]插值#{}</h3><p>使用 CSS 预处理器语言的一个主要原因是想使用 Sass 获得一个更好的结构体系。比如说你想写更干净的、高效的和面向对象的 CSS。Sass 中的插值(Interpolation)就是重要的一部分。让我们看一下下面的例子：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$properties</span>: (margin, padding);</div><div class=\"line\">@mixin <span class=\"built_in\">set</span>-value(<span class=\"variable\">$side</span>, <span class=\"variable\">$value</span>) &#123;</div><div class=\"line\">    @each <span class=\"variable\">$prop</span> <span class=\"keyword\">in</span> <span class=\"variable\">$properties</span> &#123;</div><div class=\"line\">        <span class=\"comment\">#&#123;$prop&#125;-#&#123;$side&#125;: $value;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">.login-box &#123;</div><div class=\"line\">    @include <span class=\"built_in\">set</span>-value(top, 14px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这是 Sass 插值中一个简单的实例。当你想设置属性值的时候你可以使用字符串插入进来。另一个有用的用法是构建一个选择器。可以这样使用：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@mixin generate-sizes(<span class=\"variable\">$class</span>, <span class=\"variable\">$small</span>, <span class=\"variable\">$medium</span>, <span class=\"variable\">$big</span>) &#123;</div><div class=\"line\">    .<span class=\"comment\">#&#123;$class&#125;-small &#123; font-size: $small; &#125;</span></div><div class=\"line\">    .<span class=\"comment\">#&#123;$class&#125;-medium &#123; font-size: $medium; &#125;</span></div><div class=\"line\">    .<span class=\"comment\">#&#123;$class&#125;-big &#123; font-size: $big; &#125;</span></div><div class=\"line\">&#125;</div><div class=\"line\">@include generate-sizes(<span class=\"string\">\"header-text\"</span>, 12px, 20px, 40px);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.header-text-small &#123; font-size: 12px; &#125;</div><div class=\"line\">.header-text-medium &#123; font-size: 20px; &#125;</div><div class=\"line\">.header-text-big &#123; font-size: 40px; &#125;</div></pre></td></tr></table></figure>\n<p>第一个限制，这可能会很删除用于 Sass 变量的插值。你也不能在 mixin 中调用.<br>幸运的是，可以使用 @extend 中使用插值。例如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">%updated-status &#123;</div><div class=\"line\">    margin-top: 20px;</div><div class=\"line\">    background: <span class=\"comment\">#F00;</span></div><div class=\"line\">&#125;</div><div class=\"line\">.selected-status &#123;</div><div class=\"line\">    font-weight: bold;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"variable\">$flag</span>: <span class=\"string\">\"status\"</span>;</div><div class=\"line\">.navigation &#123;</div><div class=\"line\">    @extend %updated-<span class=\"comment\">#&#123;$flag&#125;;</span></div><div class=\"line\">    @extend .selected-<span class=\"comment\">#&#123;$flag&#125;;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Sass-注释\"><a href=\"#Sass-注释\" class=\"headerlink\" title=\"[Sass]注释\"></a>[Sass]注释</h3><p>注释对于一名程序员来说，是极其重要，良好的注释能帮助自己或者别人阅读源码。在 Sass 中注释有两种方式，我暂且将其命名为：</p>\n<ul>\n<li>类似 CSS 的注释方式，使用 ”/<em> ”开头，结属使用 ”</em>/ ”</li>\n<li>类似 JavaScript 的注释方式，使用“//”<br>两者区别，前者会在编译出来的 CSS 显示，后者在编译出来的 CSS 中不会显示<h3 id=\"Sass-数据类型\"><a href=\"#Sass-数据类型\" class=\"headerlink\" title=\"[Sass]数据类型\"></a>[Sass]数据类型</h3>Sass 和 JavaScript 语言类似，也具有自己的数据类型，在 Sass 中包含以下几种数据类型：</li>\n<li>数字: 如，1、 2、 13、 10px；</li>\n<li>字符串：有引号字符串或无引号字符串，如，”foo”、 ‘bar’、 baz；</li>\n<li>颜色：如，blue、 #04a3f9、 rgba(255,0,0,0.5)；</li>\n<li>布尔型：如，true、 false；</li>\n<li>空值：如，null；</li>\n<li><p>值列表：用空格或者逗号分开，如，1.5em 1em 0 2em 、 Helvetica, Arial, sans-serif。<br>SassScript 也支持其他 CSS 属性值（property value），比如 Unicode 范围，或 !important 声明。然而，Sass 不会特殊对待这些属性值，一律视为无引号字符串 (unquoted strings)。</p>\n<h4 id=\"Sass-字符串\"><a href=\"#Sass-字符串\" class=\"headerlink\" title=\"[Sass]字符串\"></a>[Sass]字符串</h4><p>SassScript 支持 CSS 的两种字符串类型：</p>\n</li>\n<li><p>有引号字符串 (quoted strings)，如 “Lucida Grande” 、’<a href=\"http://sass-lang.com&#39;；\" target=\"_blank\" rel=\"external\">http://sass-lang.com&#39;；</a></p>\n</li>\n<li>无引号字符串 (unquoted strings)，如 sans-serifbold。<br>在编译 CSS 文件时不会改变其类型。只有一种情况例外，使用 #{ }插值语句 (interpolation) 时，有引号字符串将被编译为无引号字符串，这样方便了在混合指令 (mixin) 中引用选择器名。<br>需要注意的是：当 deprecated = property syntax 时 （暂时不理解是怎样的情况），所有的字符串都将被编译为无引号字符串，不论是否使用了引号。<h3 id=\"Sass-值列表\"><a href=\"#Sass-值列表\" class=\"headerlink\" title=\"[Sass]值列表\"></a>[Sass]值列表</h3>所谓值列表 (lists) 是指 Sass 如何处理 CSS 中： <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">margin: 10px 15px 0 0</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>或者：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">font-face: Helvetica, Arial, sans-serif</div></pre></td></tr></table></figure></p>\n<p>像上面这样通过空格或者逗号分隔的一系列的值。<br>Sass列表函数（Sass list functions）赋予了值列表更多功能（Sass进级会有讲解）：</p>\n<ol>\n<li>nth函数（nth function） 可以直接访问值列表中的某一项；</li>\n<li>join函数（join function） 可以将多个值列表连结在一起；</li>\n<li>append函数（append function） 可以在值列表中添加值；</li>\n<li>@each规则（@each rule） 则能够给值列表中的每个项目添加样式。<h3 id=\"Sass运算\"><a href=\"#Sass运算\" class=\"headerlink\" title=\"[Sass运算]\"></a>[Sass运算]</h3>程序中的运算是常见的一件事情，但在 CSS 中能做运算的，到目前为止仅有 calc() 函数可行。但在 Sass 中，运算只是其基本特性之一。在 Sass 中可以做各种数学计算，在接下来的章节中，主要和大家一起探讨有关于 Sass 中的数学运算。<h4 id=\"Sass运算-加法\"><a href=\"#Sass运算-加法\" class=\"headerlink\" title=\"[Sass运算]加法\"></a>[Sass运算]加法</h4>加法运算是 Sass 中运算中的一种，在变量或属性中都可以做加法运算。如：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  width: 20px + 8<span class=\"keyword\">in</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  width: 788px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但对于携带不同类型的单位时，在 Sass 中计算会报错，如下例所示：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  width: 20px + 1em;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>编译的时候，编译器会报错：“Incompatible units: ‘em’ and ‘px’.”</p>\n<h4 id=\"Sass运算-减法\"><a href=\"#Sass运算-减法\" class=\"headerlink\" title=\"[Sass运算]减法\"></a>[Sass运算]减法</h4><p>Sass 的减法运算和加法运算类似，我们通过一个简单的示例来做阐述：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$full</span>-width: 960px;</div><div class=\"line\"><span class=\"variable\">$sidebar</span>-width: 200px;</div><div class=\"line\"></div><div class=\"line\">.content &#123;</div><div class=\"line\">  width: <span class=\"variable\">$full</span>-width -  <span class=\"variable\">$sidebar</span>-width;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>同样的，运算时碰到不同类型的单位时，编译也会报错。</p>\n<h4 id=\"Sass运算-乘法\"><a href=\"#Sass运算-乘法\" class=\"headerlink\" title=\"[Sass运算]乘法\"></a>[Sass运算]乘法</h4><p>Sass 中的乘法运算和前面介绍的加法与减法运算还略有不同。虽然他也能够支持多种单位（比如 em ,px , %），但当一个单位同时声明两个值时会有问题。比如下面的示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  width:10px * 2px;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>编译的时候报“20px*px isn’t a valid CSS value.”错误信息。</p>\n<p>如果进行乘法运算时，两个值单位相同时，只需要为一个数值提供单位即可。上面的示例可以修改成：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  width: 10px * 2;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Sass运算-除法\"><a href=\"#Sass运算-除法\" class=\"headerlink\" title=\"[Sass运算]除法\"></a>[Sass运算]除法</h4><p>Sass 的乘法运算规则也适用于除法运算。不过除法运算还有一个特殊之处。众所周知“/”符号在 CSS 中已做为一种符号使用。因此在 Sass 中做除法运算时，直接使用“/”符号做为除号时，将不会生效，编译时既得不到我们需要的效果，也不会报错。一起先来看一个简单的示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  width: 100px / 2;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>.box {<br>  width: 100px / 2;<br>}<br>这样的结果对于大家来说没有任何意义。要修正这个问题，只需要给运算的外面添加一个小括号( )即可：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  width: (100px / 2);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  width: 50px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>除了上面情况带有小括号，“/”符号会当作除法运算符之外，如果“/”符号在已有的数学表达式中时，也会被认作除法符号。如下面示例：<br>.box {<br>  width: 100px / 2 + 0;<br>}<br>另外，在 Sass 除法运算中，当用变量进行除法运算时，“/”符号也会自动被识别成除法，如下例所示：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$width</span>: 1000px;</div><div class=\"line\"><span class=\"variable\">$nums</span>: 10;</div><div class=\"line\"></div><div class=\"line\">.item &#123;</div><div class=\"line\">  width: <span class=\"variable\">$width</span> / 10;  </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.list &#123;</div><div class=\"line\">  width: <span class=\"variable\">$width</span> / <span class=\"variable\">$nums</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>综合上述，”/  ”符号被当作除法运算符时有以下几种情况：</p>\n<ul>\n<li>如果数值或它的任意部分是存储在一个变量中或是函数的返回值。</li>\n<li>如果数值被圆括号包围。</li>\n<li>如果数值是另一个数学表达式的一部分。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//SCSS</div><div class=\"line\">p &#123;</div><div class=\"line\">  font: 10px/8px;             // 纯 CSS，不是除法运算</div><div class=\"line\">  <span class=\"variable\">$width</span>: 1000px;</div><div class=\"line\">  width: <span class=\"variable\">$width</span>/2;            // 使用了变量，是除法运算</div><div class=\"line\">  width: round(1.5)/2;        // 使用了函数，是除法运算</div><div class=\"line\">  height: (500px/2);          // 使用了圆括号，是除法运算</div><div class=\"line\">  margin-left: 5px + 8px/2px; // 使用了加（+）号，是除法运算</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Sass 的除法运算还有一个情况。我们先回忆一下，在乘法运算时，如果两个值带有相同单位时，做乘法运算时，出来的结果并不是我们需要的结果。但在除法运算时，如果两个值带有相同的单位值时，除法运算之后会得到一个不带单位的数值。如下所示：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  width: (1000px / 100px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>出来的css：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  width: 10;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Sass运算-变量计算\"><a href=\"#Sass运算-变量计算\" class=\"headerlink\" title=\"[Sass运算]变量计算\"></a>[Sass运算]变量计算</h3><p>在 Sass 中除了可以使用数值进行运算之外，还可以使用变量进行计算，其实在前面章节的示例中也或多或少的向大家展示了。在 Sass 中使用变量进行计算，这使得 Sass 的数学运算功能变得更加实用。一起来看一个简单的示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$content</span>-width: 720px;</div><div class=\"line\"><span class=\"variable\">$sidebar</span>-width: 220px;</div><div class=\"line\"><span class=\"variable\">$gutter</span>: 20px;</div><div class=\"line\"></div><div class=\"line\">.container &#123;</div><div class=\"line\">  width: <span class=\"variable\">$content</span>-width + <span class=\"variable\">$sidebar</span>-width + <span class=\"variable\">$gutter</span>;</div><div class=\"line\">  margin: 0 auto;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Sass运算-数字运算\"><a href=\"#Sass运算-数字运算\" class=\"headerlink\" title=\"[Sass运算]数字运算\"></a>[Sass运算]数字运算</h3><p>在 Sass 运算中数字运算是较为常见的，数字运算包括前面介绍的：加法、减法、乘法和除法等运算。而且还可以通过括号来修改他们的运算先后顺序。和我们数学运算是一样的，一起来看个示例。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  width: ((220px + 720px) - 11 * 20 ) / 12 ;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Sass运算-颜色运算\"><a href=\"#Sass运算-颜色运算\" class=\"headerlink\" title=\"[Sass运算]颜色运算\"></a>[Sass运算]颜色运算</h3><p>所有算数运算都支持颜色值，并且是分段运算的。也就是说，红、绿和蓝各颜色分段单独进行运算。如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">p &#123;</div><div class=\"line\">  color: <span class=\"comment\">#010203 + #040506;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>计算公式为 01 + 04 = 05、02 + 05 = 07 和 03 + 06 = 09， 并且被合成为：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">p &#123;</div><div class=\"line\">  color: <span class=\"comment\">#050709;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>算数运算也能将数字和颜色值 一起运算，同样也是分段运算的。</p>\n<h3 id=\"Sass运算-字符运算\"><a href=\"#Sass运算-字符运算\" class=\"headerlink\" title=\"[Sass运算]字符运算\"></a>[Sass运算]字符运算</h3><p>在 Sass 中可以通过加法符号“+”来对字符串进行连接。例如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$content</span>: <span class=\"string\">\"Hello\"</span> + <span class=\"string\">\"\"</span> + <span class=\"string\">\"Sass!\"</span>;</div><div class=\"line\">.box:before &#123;</div><div class=\"line\">  content: <span class=\"string\">\" #&#123;<span class=\"variable\">$content</span>&#125; \"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box:before &#123;</div><div class=\"line\">  content: <span class=\"string\">\" HelloSass! \"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>除了在变量中做字符连接运算之外，还可以直接通过 +，把字符连接在一起：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">  cursor: e + -resize;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">  cursor: e + -resize;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意，如果有引号的字符串被添加了一个没有引号的字符串 （也就是，带引号的字符串在 + 符号左侧）， 结果会是一个有引号的字符串。 同样的，如果一个没有引号的字符串被添加了一个有引号的字符串 （没有引号的字符串在 + 符号左侧）， 结果将是一个没有引号的字符串。 例如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">p:before &#123;</div><div class=\"line\">  content: <span class=\"string\">\"Foo \"</span> + Bar;</div><div class=\"line\">  font-family: sans- + <span class=\"string\">\"serif\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">p:before &#123;</div><div class=\"line\">  content: <span class=\"string\">\"Foo Bar\"</span>;</div><div class=\"line\">  font-family: sans-serif; &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"@if\"></a>@if</h3><p>@if 指令是一个 SassScript，它可以根据条件来处理样式块，如果条件为 true 返回一个样式块，反之 false 返回另一个样式块。在 Sass 中除了 @if 之，还可以配合 @else if 和 @else 一起使用。</p>\n<p>假设要控制一个元素隐藏或显示，我们就可以定义一个混合宏，通过 @if…@else… 来判断传进参数的值来控制 display 的值。如下所示：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//SCSS</div><div class=\"line\">@mixin blockOrHidden(<span class=\"variable\">$boolean</span>:<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  @<span class=\"keyword\">if</span> <span class=\"variable\">$boolean</span> &#123;</div><div class=\"line\">      @debug <span class=\"string\">\"<span class=\"variable\">$boolean</span> is #&#123;<span class=\"variable\">$boolean</span>&#125;\"</span>;</div><div class=\"line\">      display: block;</div><div class=\"line\">    &#125;</div><div class=\"line\">  @<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      @debug <span class=\"string\">\"<span class=\"variable\">$boolean</span> is #&#123;<span class=\"variable\">$boolean</span>&#125;\"</span>;</div><div class=\"line\">      display: none;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.block &#123;</div><div class=\"line\">  @include blockOrHidden;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.hidden&#123;</div><div class=\"line\">  @include blockOrHidden(<span class=\"literal\">false</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.block &#123;</div><div class=\"line\">  display: block;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.hidden &#123;</div><div class=\"line\">  display: none;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"@for循环\"></a>@for循环</h3><p>在制作网格系统的时候，大家应该对 .col1~.col12 这样的印象较深。在 CSS 中你需要一个一个去书写，但在 Sass 中，可以使用 @for 循环来完成。在 Sass 的 @for 循环中有两种方式：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">for</span> <span class=\"variable\">$i</span> from &lt;start&gt; through &lt;end&gt;</div><div class=\"line\">@<span class=\"keyword\">for</span> <span class=\"variable\">$i</span> from &lt;start&gt; to &lt;end&gt;</div></pre></td></tr></table></figure></p>\n<pre><code>    $i 表示变量\nstart 表示起始值\nend 表示结束值\n</code></pre><p>这两个的区别是关键字 through 表示包括 end 这个数，而 to则不包括 end 这个数。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">for</span> <span class=\"variable\">$i</span> from 1 through 3 &#123;</div><div class=\"line\">  .item-<span class=\"comment\">#&#123;$i&#125; &#123; width: 2em * $i; &#125;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.item-1 &#123;</div><div class=\"line\">  width: 2em;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.item-2 &#123;</div><div class=\"line\">  width: 4em;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.item-3 &#123;</div><div class=\"line\">  width: 6em;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对to：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">for</span> <span class=\"variable\">$i</span> from 1 to 3 &#123;</div><div class=\"line\">  .item-<span class=\"comment\">#&#123;$i&#125; &#123; width: 2em * $i; &#125;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.item-1 &#123;</div><div class=\"line\">  width: 2em;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.item-2 &#123;</div><div class=\"line\">  width: 4em;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>@for应用在网格系统生成各个格子 class 的代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//SCSS </div><div class=\"line\"><span class=\"variable\">$grid</span>-prefix: span !default;</div><div class=\"line\"><span class=\"variable\">$grid</span>-width: 60px !default;</div><div class=\"line\"><span class=\"variable\">$grid</span>-gutter: 20px !default;</div><div class=\"line\"></div><div class=\"line\">%grid &#123;</div><div class=\"line\">  <span class=\"built_in\">float</span>: left;</div><div class=\"line\">  margin-left: <span class=\"variable\">$grid</span>-gutter / 2;</div><div class=\"line\">  margin-right: <span class=\"variable\">$grid</span>-gutter / 2;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">for</span> <span class=\"variable\">$i</span> from 1 through 12 &#123;</div><div class=\"line\">  .<span class=\"comment\">#&#123;$grid-prefix&#125;#&#123;$i&#125;&#123;</span></div><div class=\"line\">    width: <span class=\"variable\">$grid</span>-width * <span class=\"variable\">$i</span> + <span class=\"variable\">$grid</span>-gutter * (<span class=\"variable\">$i</span> - 1);</div><div class=\"line\">    @extend %grid;</div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.span1, .span2, .span3, .span4, .span5, .span6, .span7, .span8, .span9, .span10, .span11, .span12 &#123;</div><div class=\"line\">  <span class=\"built_in\">float</span>: left;</div><div class=\"line\">  margin-left: 10px;</div><div class=\"line\">  margin-right: 10px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.span1 &#123;</div><div class=\"line\">  width: 60px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.span2 &#123;</div><div class=\"line\">  width: 140px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.span3 &#123;</div><div class=\"line\">  width: 220px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.span4 &#123;</div><div class=\"line\">  width: 300px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.span5 &#123;</div><div class=\"line\">  width: 380px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.span6 &#123;</div><div class=\"line\">  width: 460px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.span7 &#123;</div><div class=\"line\">  width: 540px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.span8 &#123;</div><div class=\"line\">  width: 620px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.span9 &#123;</div><div class=\"line\">  width: 700px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.span10 &#123;</div><div class=\"line\">  width: 780px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.span11 &#123;</div><div class=\"line\">  width: 860px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.span12 &#123;</div><div class=\"line\">  width: 940px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"@while循环\"></a>@while循环</h3><p>@while 指令也需要 SassScript 表达式（像其他指令一样），并且会生成不同的样式块，直到表达式值为 false 时停止循环。这个和 @for 指令很相似，只要 @while 后面的条件为 true 就会执行。</p>\n<p>这里有一个 @while 指令的简单用例：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//SCSS</div><div class=\"line\"><span class=\"variable\">$types</span>: 4;</div><div class=\"line\"><span class=\"variable\">$type</span>-width: 20px;</div><div class=\"line\"></div><div class=\"line\">@<span class=\"keyword\">while</span> <span class=\"variable\">$types</span> &gt; 0 &#123;</div><div class=\"line\">    .while-<span class=\"comment\">#&#123;$types&#125; &#123;</span></div><div class=\"line\">        width: <span class=\"variable\">$type</span>-width + <span class=\"variable\">$types</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"variable\">$types</span>: <span class=\"variable\">$types</span> - 1;</div><div class=\"line\">\t\t//sass里赋值用冒号。</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.while-4 &#123;</div><div class=\"line\">  width: 24px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.while-3 &#123;</div><div class=\"line\">  width: 23px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.while-2 &#123;</div><div class=\"line\">  width: 22px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.while-1 &#123;</div><div class=\"line\">  width: 21px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"each循环\"><a href=\"#each循环\" class=\"headerlink\" title=\"@each循环\"></a>@each循环</h3><p>@each 循环就是去遍历一个列表，然后从列表中取出对应的值。<br>@each 循环指令的形式：<br>@each $var in <list><br>在下面的例子中你可以看到，$var 就是一个变量名，<list> 是一个 SassScript 表达式，他将返回一个列表值。变量 $var 会在列表中做遍历，并且遍历出与 $var 对应的样式块。这有一个 @each 指令的简单示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$list</span>: adam john wynn mason kuroir;//<span class=\"variable\">$list</span> 就是一个列表</div><div class=\"line\"></div><div class=\"line\">@mixin author-images &#123;</div><div class=\"line\">    @each <span class=\"variable\">$author</span> <span class=\"keyword\">in</span> <span class=\"variable\">$list</span> &#123;</div><div class=\"line\">        .photo-<span class=\"comment\">#&#123;$author&#125; &#123;</span></div><div class=\"line\">            background: url(<span class=\"string\">\"/images/avatars/#&#123;<span class=\"variable\">$author</span>&#125;.png\"</span>) no-repeat;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.author-bio &#123;</div><div class=\"line\">    @include author-images;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></list></list></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.author-bio .photo-adam &#123;</div><div class=\"line\">  background: url(<span class=\"string\">\"/images/avatars/adam.png\"</span>) no-repeat; &#125;</div><div class=\"line\">.author-bio .photo-john &#123;</div><div class=\"line\">  background: url(<span class=\"string\">\"/images/avatars/john.png\"</span>) no-repeat; &#125;</div><div class=\"line\">.author-bio .photo-wynn &#123;</div><div class=\"line\">  background: url(<span class=\"string\">\"/images/avatars/wynn.png\"</span>) no-repeat; &#125;</div><div class=\"line\">.author-bio .photo-mason &#123;</div><div class=\"line\">  background: url(<span class=\"string\">\"/images/avatars/mason.png\"</span>) no-repeat; &#125;</div><div class=\"line\">.author-bio .photo-kuroir &#123;</div><div class=\"line\">  background: url(<span class=\"string\">\"/images/avatars/kuroir.png\"</span>) no-repeat; &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Sass的函数简介\"><a href=\"#Sass的函数简介\" class=\"headerlink\" title=\"Sass的函数简介\"></a>Sass的函数简介</h2><p>在 Sass 中除了可以定义变量，具有 @extend、%placeholder 和 mixins 等特性之外，还自备了一系列的函数功能。其主要包括：</p>\n<ul>\n<li>字符串函数</li>\n<li>数字函数</li>\n<li>列表函数</li>\n<li>颜色函数</li>\n<li>Introspection 函数</li>\n<li>三元函数等<br>当然除了自备的函数功能之外，我们还可以根据自己的需求定义函数功能，常常称之为自定义函数。<h3 id=\"字符串函数-unquote-函数\"><a href=\"#字符串函数-unquote-函数\" class=\"headerlink\" title=\"字符串函数-unquote()函数\"></a>字符串函数-unquote()函数</h3>字符串函数顾名思意是用来处理字符串的函数。Sass 的字符串函数主要包括两个函数：</li>\n<li>unquote($string)：删除字符串中的引号； - quote($string)：给字符串添加引号。<br>unquote() 函数主要是用来删除一个字符串中的引号，如果这个字符串没有带有引号，将返回原始的字符串。<br>注意：从测试的效果中可以看出，unquote( ) 函数只能删除字符串最前和最后的引号（双引号或单引号），而无法删除字符串中间的引号。如果字符没有带引号，返回的将是字符串本身。<br>quote() 函数刚好与 unquote() 函数功能相反，主要用来给字符串添加引号。如果字符串，自身带有引号会统一换成双引号 “”。<br>使用 quote() 函数只能给字符串增加双引号，而且字符串中间有单引号或者空格时，需要用单引号或双引号括起，否则编译的时候将会报错。<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.test1 &#123;</div><div class=\"line\">    content:  quote(Hello Sass);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样使用，编译器马上会报错。解决方案就是去掉空格，或者加上引号。<br>同时 quote() 碰到特殊符号，比如： !、?、&gt; 等，除中折号 - 和 下划线_ 都需要使用双引号括起，否则编译器在进行编译的时候同样会报错。</p>\n<h3 id=\"字符串函数-To-upper-case-、To-lower-case\"><a href=\"#字符串函数-To-upper-case-、To-lower-case\" class=\"headerlink\" title=\"字符串函数-To-upper-case()、To-lower-case()\"></a>字符串函数-To-upper-case()、To-lower-case()</h3><p>To-upper-case()</p>\n<p>To-upper-case() 函数将字符串小写字母转换成大写字母。如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//SCSS</div><div class=\"line\">.test &#123;</div><div class=\"line\">  text: to-upper-case(aaaaa);</div><div class=\"line\">  text: to-upper-case(aA<span class=\"_\">-a</span>AAA-aaa);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//CSS</div><div class=\"line\">.test &#123;</div><div class=\"line\">  text: AAAAA;</div><div class=\"line\">  text: AA-AAAA-AAA;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>To-lower-case() 函数 与 To-upper-case() 刚好相反，将字符串转换成小写字母。</p>\n<h3 id=\"数字函数简介\"><a href=\"#数字函数简介\" class=\"headerlink\" title=\"数字函数简介\"></a>数字函数简介</h3><p>Sass 中的数字函数提要针对数字方面提供一系列的函数功能：</p>\n<ul>\n<li>percentage($value)：将一个不带单位的数转换成百分比值；</li>\n<li>round($value)：将数值四舍五入，转换成一个最接近的整数；</li>\n<li>ceil($value)：将大于自己的小数转换成下一位整数；</li>\n<li>floor($value)：将一个数去除他的小数部分；</li>\n<li>abs($value)：返回一个数的绝对值；</li>\n<li>min($numbers…)：找出几个数值之间的最小值；</li>\n<li>max($numbers…)：找出几个数值之间的最大值；</li>\n<li>random(): 获取随机数</li>\n</ul>\n<h4 id=\"数字函数-percentage\"><a href=\"#数字函数-percentage\" class=\"headerlink\" title=\"数字函数-percentage()\"></a>数字函数-percentage()</h4><p>percentage()函数主要是将一个不带单位的数字转换成百分比形式：<br>.footer{<br>    width : percentage(.2)<br>}<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.footer&#123;</div><div class=\"line\">    width : 20%</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果您转换的值是一个带有单位的值，那么在编译的时候会报错误信息</p>\n<h4 id=\"数字函数-round-函数\"><a href=\"#数字函数-round-函数\" class=\"headerlink\" title=\"数字函数-round()函数\"></a>数字函数-round()函数</h4><p>round() 函数可以将一个数四舍五入为一个最接近的整数<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.footer &#123;</div><div class=\"line\">   width:round(12.3px)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.footer &#123;</div><div class=\"line\">  width: 12px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"数字函数-ceil-函数\"><a href=\"#数字函数-ceil-函数\" class=\"headerlink\" title=\"数字函数-ceil()函数\"></a>数字函数-ceil()函数</h4><p>ceil() 函数将一个数转换成最接近于自己的整数，会将一个大于自身的任何小数转换成大于本身 1 的整数。也就是只做入，不做舍的计算：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.footer &#123;</div><div class=\"line\">   width:ceil(12.3px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.footer &#123;</div><div class=\"line\">  width: 13px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"数字函数-floor-函数\"><a href=\"#数字函数-floor-函数\" class=\"headerlink\" title=\"数字函数-floor()函数\"></a>数字函数-floor()函数</h4><p>floor() 函数刚好与 ceil() 函数功能相反，其主要将一个数去除其小数部分，并且不做任何的进位。也就是只做舍，不做入的计算：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.footer &#123;</div><div class=\"line\">   width:floor(12.3px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.footer &#123;</div><div class=\"line\">  width: 12px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"数字函数-abs-函数\"><a href=\"#数字函数-abs-函数\" class=\"headerlink\" title=\"数字函数-abs()函数\"></a>数字函数-abs()函数</h4><p>abs( ) 函数会返回一个数的绝对值。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.footer &#123;</div><div class=\"line\">   width:abs(-12.3px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.footer &#123;</div><div class=\"line\">  width: 12.3px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"数字函数-min-函数、max-函数\"><a href=\"#数字函数-min-函数、max-函数\" class=\"headerlink\" title=\"数字函数-min()函数、max()函数\"></a>数字函数-min()函数、max()函数</h4><p>min() 函数功能主要是在多个数之中找到最小的一个，这个函数可以设置任意多个参数<br>不过在 min() 函数中同时出现两种不同类型的单位，将会报错误信息<br>max() 函数和 min() 函数一样，不同的是，max() 函数用来获取一系列数中的最大那个值</p>\n<h4 id=\"数字函数-random-函数\"><a href=\"#数字函数-random-函数\" class=\"headerlink\" title=\"数字函数-random()函数\"></a>数字函数-random()函数</h4><p>random() 函数是用来获取一个随机数</p>\n<h3 id=\"列表函数简介\"><a href=\"#列表函数简介\" class=\"headerlink\" title=\"列表函数简介\"></a>列表函数简介</h3><p>列表函数主要包括一些对列表参数的函数使用，主要包括以下几种：</p>\n<ul>\n<li>length($list)：返回一个列表的长度值；</li>\n<li>nth($list, $n)：返回一个列表中指定的某个标签值</li>\n<li>join($list1, $list2, [$separator])：将两个列给连接在一起，变成一个列表；</li>\n<li>append($list1, $val, [$separator])：将某个值放在列表的最后；</li>\n<li>zip($lists…)：将几个列表结合成一个多维的列表；</li>\n<li>index($list, $value)：返回一个值在列表中的位置值。<h4 id=\"length-函数\"><a href=\"#length-函数\" class=\"headerlink\" title=\"length()函数\"></a>length()函数</h4>length() 函数主要用来返回一个列表中有几个值，简单点说就是返回列表清单中有多少个值：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt;&gt; length(10px)</div><div class=\"line\">1</div><div class=\"line\">&gt;&gt; length(10px 20px (border 1px solid) 2em)</div><div class=\"line\">4</div><div class=\"line\">&gt;&gt; length(border 1px solid)</div><div class=\"line\">3</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>length() 函数中的列表参数之间使用空格隔开，不能使用逗号，否则函数将会出错.</p>\n<h4 id=\"nth-函数\"><a href=\"#nth-函数\" class=\"headerlink\" title=\"nth()函数\"></a>nth()函数</h4><p><strong>nth($list,$n)</strong><br>nth() 函数用来指定列表中某个位置的值。不过在 Sass 中，nth() 函数和其他语言不同，1 是指列表中的第一个标签值，2 是指列给中的第二个标签值，依此类推。如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt;&gt; nth(10px 20px 30px,1)</div><div class=\"line\">10px</div><div class=\"line\">&gt;&gt; nth((Helvetica,Arial,sans-serif),2)</div><div class=\"line\"><span class=\"string\">\"Arial\"</span></div><div class=\"line\">&gt;&gt; nth((1px solid red) border-top green,1)</div><div class=\"line\">(1px <span class=\"string\">\"solid\"</span> <span class=\"comment\">#ff0000)</span></div></pre></td></tr></table></figure></p>\n<p>注：在 nth($list,$n) 函数中的 $n 必须是大于 0 的整数.</p>\n<h4 id=\"join-函数\"><a href=\"#join-函数\" class=\"headerlink\" title=\"join()函数\"></a>join()函数</h4><p>join() 函数是将两个列表连接合并成一个列表。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt;&gt; join(10px 20px, 30px 40px)</div><div class=\"line\">(10px 20px 30px 40px)</div><div class=\"line\">&gt;&gt; join((blue,red),(<span class=\"comment\">#abc,#def))</span></div><div class=\"line\">(<span class=\"comment\">#0000ff, #ff0000, #aabbcc, #ddeeff)</span></div><div class=\"line\">&gt;&gt; join((blue,red),(<span class=\"comment\">#abc #def))</span></div><div class=\"line\">(<span class=\"comment\">#0000ff, #ff0000, #aabbcc, #ddeeff)</span></div></pre></td></tr></table></figure></p>\n<p>不过 join() 只能将两个列表连接成一个列表，如果直接连接两个以上的列表将会报错.<br>但很多时候不只碰到两个列表连接成一个列表，这个时候就需要将多个 join() 函数合并在一起使用:<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt;&gt; join((blue red), join((<span class=\"comment\">#abc #def),(#dee #eff)))</span></div><div class=\"line\">(<span class=\"comment\">#0000ff #ff0000 #aabbcc #ddeeff #ddeeee #eeffff)</span></div></pre></td></tr></table></figure></p>\n<p>在 join() 函数中还有一个很特别的参数 $separator，这个参数主要是用来给列表函数连接列表值是，使用的分隔符号，默认值为 auto。<br>建议大家使用 join() 函数合并列表项的时候就明确指定 $separator 参数.</p>\n<h4 id=\"append-函数\"><a href=\"#append-函数\" class=\"headerlink\" title=\"append()函数\"></a>append()函数</h4><p>append() 函数是用来将某个值插入到列表中，并且处于最末位。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt;&gt; append(10px 20px ,30px)</div><div class=\"line\">(10px 20px 30px)</div><div class=\"line\">&gt;&gt; append((10px,20px),30px)</div><div class=\"line\">(10px, 20px, 30px)</div><div class=\"line\">&gt;&gt; append(green,red)</div><div class=\"line\">(<span class=\"comment\">#008000 #ff0000)</span></div><div class=\"line\">&gt;&gt; append(red,(green,blue))</div><div class=\"line\">(<span class=\"comment\">#ff0000 (#008000, #0000ff))</span></div></pre></td></tr></table></figure></p>\n<p>当然，在 append() 函数中，可以显示的设置 $separator 参数，<br>如果取值为 comma 将会以逗号分隔列表项<br>如果取值为 space 将会以空格分隔列表项</p>\n<h4 id=\"zip-函数\"><a href=\"#zip-函数\" class=\"headerlink\" title=\"zip()函数\"></a>zip()函数</h4><p>zip()函数将多个列表值转成一个多维的列表：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt;&gt; zip(1px 2px 3px,solid dashed dotted,green blue red)</div><div class=\"line\">((1px <span class=\"string\">\"solid\"</span> <span class=\"comment\">#008000), (2px \"dashed\" #0000ff), (3px \"dotted\" #ff0000))</span></div></pre></td></tr></table></figure></p>\n<p>在使用zip()函数时，每个单一的列表个数值必须是相同的.</p>\n<h4 id=\"index-函数\"><a href=\"#index-函数\" class=\"headerlink\" title=\"index()函数\"></a>index()函数</h4><p>index() 函数类似于索引一样，主要让你找到某个值在列表中所处的位置。在 Sass 中，第一个值就是1，第二个值就是 2，依此类推：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt;&gt; index(1px solid red, 1px)</div><div class=\"line\">1</div><div class=\"line\">&gt;&gt; index(1px solid red, solid)</div><div class=\"line\">2</div><div class=\"line\">&gt;&gt; index(1px solid red, red)</div><div class=\"line\">3</div></pre></td></tr></table></figure></p>\n<p>在 index() 函数中，如果指定的值不在列表中（没有找到相应的值），那么返回的值将是 false，相反就会返回对应的值在列表中所处的位置。</p>\n<h3 id=\"Introspection函数\"><a href=\"#Introspection函数\" class=\"headerlink\" title=\"Introspection函数\"></a>Introspection函数</h3><p>Introspection 函数包括了几个判断型函数：</p>\n<ul>\n<li>type-of($value)：返回一个值的类型</li>\n<li>unit($number)：返回一个值的单位</li>\n<li>unitless($number)：判断一个值是否带有单位</li>\n<li>comparable($number-1, $number-2)：判断两个值是否可以做加、减和合并.<h4 id=\"Introspection-函数-type-of\"><a href=\"#Introspection-函数-type-of\" class=\"headerlink\" title=\"Introspection 函数 -type-of()\"></a>Introspection 函数 -type-of()</h4>type-of() 函数主要用来判断一个值是属于什么类型：</li>\n</ul>\n<p>返回值：</p>\n<ul>\n<li>number 为数值型。</li>\n<li>string 为字符串型。</li>\n<li>bool 为布尔型。</li>\n<li>color 为颜色型<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt;&gt; <span class=\"built_in\">type</span>-of(100)</div><div class=\"line\"><span class=\"string\">\"number\"</span></div><div class=\"line\">&gt;&gt; <span class=\"built_in\">type</span>-of(100px)</div><div class=\"line\"><span class=\"string\">\"number\"</span></div><div class=\"line\">&gt;&gt; <span class=\"built_in\">type</span>-of(<span class=\"string\">\"asdf\"</span>)</div><div class=\"line\"><span class=\"string\">\"string\"</span></div><div class=\"line\">&gt;&gt; <span class=\"built_in\">type</span>-of(asdf)</div><div class=\"line\"><span class=\"string\">\"string\"</span></div><div class=\"line\">&gt;&gt; <span class=\"built_in\">type</span>-of(<span class=\"literal\">true</span>)</div><div class=\"line\"><span class=\"string\">\"bool\"</span></div><div class=\"line\">&gt;&gt; <span class=\"built_in\">type</span>-of(<span class=\"literal\">false</span>)</div><div class=\"line\"><span class=\"string\">\"bool\"</span></div><div class=\"line\">&gt;&gt; <span class=\"built_in\">type</span>-of(<span class=\"comment\">#fff)</span></div><div class=\"line\"><span class=\"string\">\"color\"</span></div><div class=\"line\">&gt;&gt; <span class=\"built_in\">type</span>-of(blue)</div><div class=\"line\"><span class=\"string\">\"color\"</span></div><div class=\"line\">&gt;&gt; <span class=\"built_in\">type</span>-of(1 / 2 = 1)</div><div class=\"line\"><span class=\"string\">\"string\"</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"unit-函数\"><a href=\"#unit-函数\" class=\"headerlink\" title=\"unit()函数\"></a>unit()函数</h4><p>unit() 函数主要是用来获取一个值所使用的单位，碰到复杂的计算时，其能根据运算得到一个“多单位组合”的值，不过只充许乘、除运算：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt;&gt; unit(100)</div><div class=\"line\"><span class=\"string\">\"\"</span></div><div class=\"line\">&gt;&gt; unit(100px)</div><div class=\"line\"><span class=\"string\">\"px\"</span></div><div class=\"line\">&gt;&gt; unit(20%)</div><div class=\"line\"><span class=\"string\">\"%\"</span></div><div class=\"line\">&gt;&gt; unit(1em)</div><div class=\"line\"><span class=\"string\">\"em\"</span></div><div class=\"line\">&gt;&gt; unit(10px * 3em)</div><div class=\"line\"><span class=\"string\">\"em*px\"</span></div><div class=\"line\">&gt;&gt; unit(10px / 3em)</div><div class=\"line\"><span class=\"string\">\"px/em\"</span></div><div class=\"line\">&gt;&gt; unit(10px * 2em / 3cm / 1rem)</div><div class=\"line\"><span class=\"string\">\"em/rem\"</span></div></pre></td></tr></table></figure></p>\n<p>但加、减碰到不同单位时，unit() 函数将会报错，除 px 与 cm、mm 运算之外.</p>\n<h4 id=\"unitless-函数\"><a href=\"#unitless-函数\" class=\"headerlink\" title=\"unitless()函数\"></a>unitless()函数</h4><p>unitless() 函数相对来说简单明了些，只是用来判断一个值是否带有单位，如果不带单位返回的值为 true，带单位返回的值为 false：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt;&gt; unitless(100)</div><div class=\"line\"><span class=\"literal\">true</span></div><div class=\"line\">&gt;&gt; unitless(100px)</div><div class=\"line\"><span class=\"literal\">false</span></div><div class=\"line\">&gt;&gt; unitless(100em)</div><div class=\"line\"><span class=\"literal\">false</span></div><div class=\"line\">&gt;&gt; unitless(100%)</div><div class=\"line\"><span class=\"literal\">false</span></div><div class=\"line\">&gt;&gt; unitless(1 /2 )</div><div class=\"line\"><span class=\"literal\">true</span></div><div class=\"line\">&gt;&gt; unitless(1 /2 + 2 )</div><div class=\"line\"><span class=\"literal\">true</span></div><div class=\"line\">&gt;&gt; unitless(1px /2 + 2 )</div><div class=\"line\"><span class=\"literal\">false</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"comparable-函数\"><a href=\"#comparable-函数\" class=\"headerlink\" title=\"comparable()函数\\\"></a>comparable()函数\\</h4><p>comparable() 函数主要是用来判断两个数是否可以进行“加，减”以及“合并”。如果可以返回的值为 true，如果不可以返回的值是 false</p>\n<h4 id=\"Miscellaneous函数\"><a href=\"#Miscellaneous函数\" class=\"headerlink\" title=\"Miscellaneous函数\"></a>Miscellaneous函数</h4><p>在这里把 Miscellaneous 函数称为三元条件函数，主要因为他和 JavaScript 中的三元判断非常的相似。他有两个值，当条件成立返回一种值，当条件不成立时返回另一种值：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable\">$condition</span>,<span class=\"variable\">$if</span>-true,<span class=\"variable\">$if</span>-false)</div></pre></td></tr></table></figure></p>\n<h4 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h4><p>Sass 的 map 常常被称为数据地图，也有人称其为数组，因为他总是以 key:value 成对的出现，但其更像是一个 JSON 数据。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"string\">\"employees\"</span>: [</div><div class=\"line\">&#123; <span class=\"string\">\"firstName\"</span>:<span class=\"string\">\"John\"</span> , <span class=\"string\">\"lastName\"</span>:<span class=\"string\">\"Doe\"</span> &#125;,</div><div class=\"line\">&#123; <span class=\"string\">\"firstName\"</span>:<span class=\"string\">\"Anna\"</span> , <span class=\"string\">\"lastName\"</span>:<span class=\"string\">\"Smith\"</span> &#125;,</div><div class=\"line\">&#123; <span class=\"string\">\"firstName\"</span>:<span class=\"string\">\"Peter\"</span> , <span class=\"string\">\"lastName\"</span>:<span class=\"string\">\"Jones\"</span> &#125;</div><div class=\"line\">]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>对于 Sass 的 map，还可以让 map 嵌套 map。其实就是 map 的某一个 key 当成 map，里面可以继续放一对或者多对 key:value：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$map</span>: (</div><div class=\"line\">    key1: value1,</div><div class=\"line\">    key2: (</div><div class=\"line\">        key-1: value-1,</div><div class=\"line\">        key-2: value-2,</div><div class=\"line\">    ),</div><div class=\"line\">    key3: value3</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>map 的嵌套实用性也非常的强，大家可能有碰到过换皮肤的项目，可能每一套皮肤对应的颜色蛮多的，那么使用此功能来管理颜色的变量就非常的有条理性，便于维护与管理。你可以这样使用：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$theme</span>-color: (</div><div class=\"line\">    default: (</div><div class=\"line\">        bgcolor: <span class=\"comment\">#fff,</span></div><div class=\"line\">        text-color: <span class=\"comment\">#444,</span></div><div class=\"line\">        link-color: <span class=\"comment\">#39f</span></div><div class=\"line\">    ),</div><div class=\"line\">    primary:(</div><div class=\"line\">        bgcolor: <span class=\"comment\">#000,</span></div><div class=\"line\">        text-color:<span class=\"comment\">#fff,</span></div><div class=\"line\">        link-color: <span class=\"comment\">#93f</span></div><div class=\"line\">    ),</div><div class=\"line\">    negative: (</div><div class=\"line\">        bgcolor: <span class=\"comment\">#f36,</span></div><div class=\"line\">        text-color: <span class=\"comment\">#fefefe,</span></div><div class=\"line\">        link-color: <span class=\"comment\">#d4e</span></div><div class=\"line\">    )</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<h3 id=\"Sass-Maps的函数\"><a href=\"#Sass-Maps的函数\" class=\"headerlink\" title=\"Sass Maps的函数\"></a>Sass Maps的函数</h3><p>前面介绍了使用 map 来管理变量，但要在 Sass 中获取变量，或者对 map 做更多有意义的操作，我们必须借助于 map 的函数功能。在 Sass 中 map 自身带了七个函数：</p>\n<ul>\n<li>map-get($map,$key)：根据给定的 key 值，返回 map 中相关的值。</li>\n<li>map-merge($map1,$map2)：将两个 map 合并成一个新的 map。</li>\n<li>map-remove($map,$key)：从 map 中删除一个 key，返回一个新 map。</li>\n<li>map-keys($map)：返回 map 中所有的 key。</li>\n<li>map-values($map)：返回 map 中所有的 value。</li>\n<li>map-has-key($map,$key)：根据给定的 key 值判断 map 是否有对应的 value 值，如果有返回 true，否则返回 false。</li>\n<li>keywords($args)：返回一个函数的参数，这个参数可以动态的设置 key 和 value。</li>\n</ul>\n<h4 id=\"Sass-Maps的函数-map-get-map-key\"><a href=\"#Sass-Maps的函数-map-get-map-key\" class=\"headerlink\" title=\"Sass Maps的函数-map-get($map,$key)\"></a>Sass Maps的函数-map-get($map,$key)</h4><p>map-get($map,$key) 函数的作用是根据 $key 参数，返回 $key 在 $map 中对应的 value 值。如果 $key 不存在 $map中，将返回 null 值。此函数包括两个参数：</p>\n<ul>\n<li>$map：定义好的 map。</li>\n<li>$key：需要遍历的 key。<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$social</span>-colors: (</div><div class=\"line\">    dribble: <span class=\"comment\">#ea4c89,</span></div><div class=\"line\">    facebook: <span class=\"comment\">#3b5998,</span></div><div class=\"line\">    github: <span class=\"comment\">#171515,</span></div><div class=\"line\">    google: <span class=\"comment\">#db4437,</span></div><div class=\"line\">    twitter: <span class=\"comment\">#55acee</span></div><div class=\"line\">);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>假设要获取 facebook 键值对应的值 #3b5998，我们就可以使用 map-get() 函数来实现：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.btn-dribble&#123;</div><div class=\"line\">  color: map-get(<span class=\"variable\">$social</span>-colors,facebook);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.btn-dribble &#123;</div><div class=\"line\">  color: <span class=\"comment\">#3b5998;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们来看另一种情况，假设 $social-colors 这个 map 没有 $weibo 这个 key:<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.btn-weibo&#123;</div><div class=\"line\">  font-size: 12px;</div><div class=\"line\">  color: map-get(<span class=\"variable\">$social</span>-colors,weibo);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.btn-weibo &#123;</div><div class=\"line\">  font-size: 12px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从 编译出来的 CSS 可以得知，如果 $key 不在 $map 中，不会编译出 CSS，其实在 Sass 中，map-get($social- colors,weibo) 返回了一个 null 值。但在编译出来的 CSS 中，你只知道他没有编译出样式，而且在命令终端编译时，也没有任何错误或者警告信息。说实话，你并不知道他为什么编译不出来样式，或者说他已返回了值为 null。体验不强，也不好排错。其实如果我们自定义一个函数，另外加个判断，那就截然不同。</p>\n<h4 id=\"Sass-Maps的函数-map-has-key-map-key\"><a href=\"#Sass-Maps的函数-map-has-key-map-key\" class=\"headerlink\" title=\"Sass Maps的函数-map-has-key($map,$key)\"></a>Sass Maps的函数-map-has-key($map,$key)</h4><p>map-has-key($map,$key) 函数将返回一个布尔值。当 $map 中有这个 $key，则函数返回 true，否则返回 false。<br>前面的示例，当 $key 不在 $map 中时，使用 map-get($map,$key) 函数将返回一个 null 值。但对于开发人员，并看不到任何提示信息。如果使用 map-has-key($map,$key) 函数就可以改变这一状态。我们来看一个简单的示例。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">if</span> map-has-key(<span class=\"variable\">$social</span>-colors,facebook)&#123;</div><div class=\"line\">    .btn-facebook &#123;</div><div class=\"line\">        color: map-get(<span class=\"variable\">$social</span>-colors,facebook);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; @<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    @warn <span class=\"string\">\"No color found for faceboo in <span class=\"variable\">$social</span>-colors map. Property ommitted.\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.btn-fackbook&#123;</div><div class=\"line\">    color: <span class=\"comment\">#3b5998;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面看到的示例是 facebook 这个 key 已存在 $social-colors 这个 map 当中。所以能正常编译。如果你手误，将 facebook 输错了：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">if</span> map-has-key(<span class=\"variable\">$social</span>-colors,faceboo)&#123;</div><div class=\"line\">    .btn-facebook &#123;</div><div class=\"line\">        color: map-get(<span class=\"variable\">$social</span>-colors,facebook);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; @<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    @warn <span class=\"string\">\"No color found for faceboo in <span class=\"variable\">$social</span>-colors map. Property ommitted.\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个时候，你编译出来的 CSS 代码中，不会有新代码添加，但在命令终端可以看到提示信息：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">WARNING: No color found <span class=\"keyword\">for</span> faceboo <span class=\"keyword\">in</span> <span class=\"variable\">$social</span>-colors map. Property ommitted.</div><div class=\"line\">         on line 25 of test.scss</div></pre></td></tr></table></figure></p>\n<p>是不是非常的友好。但总觉得这样写是傻傻的，总不可能每获取一个 key 都写一个 @if 语句吧。其实不用这么复杂，我们可以自定义一个函数，比如 colors():<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">function</span> colors(<span class=\"variable\">$color</span>)&#123;</div><div class=\"line\">    @<span class=\"keyword\">if</span> not map-has-key(<span class=\"variable\">$social</span>-colors,<span class=\"variable\">$color</span>)&#123;</div><div class=\"line\">        @warn <span class=\"string\">\"No color found for `#&#123;<span class=\"variable\">$color</span>&#125;` in <span class=\"variable\">$social</span>-colors map. Property omitted.\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @<span class=\"built_in\">return</span> map-get(<span class=\"variable\">$social</span>-colors,<span class=\"variable\">$color</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>有了这个函数之后，我们就可以这样使用<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.btn-dribble &#123;</div><div class=\"line\">    color: colors(dribble);</div><div class=\"line\">&#125;</div><div class=\"line\">.btn-facebook &#123;</div><div class=\"line\">    color: colors(facebook);</div><div class=\"line\">&#125;</div><div class=\"line\">.btn-github &#123;</div><div class=\"line\">    color: colors(github);</div><div class=\"line\">&#125;</div><div class=\"line\">.btn-google &#123;</div><div class=\"line\">    color: colors(google);</div><div class=\"line\">&#125;</div><div class=\"line\">.btn-twitter &#123;</div><div class=\"line\">    color: colors(twitter);</div><div class=\"line\">&#125;</div><div class=\"line\">.btn-weibo &#123;</div><div class=\"line\">    color: colors(weibo);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>编译出来的 CSS:<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.btn-dribble &#123;</div><div class=\"line\">  color: <span class=\"comment\">#ea4c89;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-facebook &#123;</div><div class=\"line\">  color: <span class=\"comment\">#3b5998;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-github &#123;</div><div class=\"line\">  color: <span class=\"comment\">#171515;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-google &#123;</div><div class=\"line\">  color: <span class=\"comment\">#db4437;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-twitter &#123;</div><div class=\"line\">  color: <span class=\"comment\">#55acee;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>同时你不难发现，命令终端提示信息：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">WARNING: No color found <span class=\"keyword\">for</span> `weibo` <span class=\"keyword\">in</span> <span class=\"variable\">$social</span>-colors map. Property omitted.</div><div class=\"line\">         on line 13 of test.scss</div></pre></td></tr></table></figure></p>\n<p>那是在 $social-colors 这个 map 中没有 weibo 这个 key。是不是很有意思。</p>\n<p>当然，如果你对 Sass 的指令熟悉的话，上面编译出来的 CSS 可以使用 @each：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@each <span class=\"variable\">$social</span>-network,<span class=\"variable\">$social</span>-color <span class=\"keyword\">in</span> <span class=\"variable\">$social</span>-colors &#123;</div><div class=\"line\">    .btn-<span class=\"comment\">#&#123;$social-network&#125; &#123;</span></div><div class=\"line\">        color: colors(<span class=\"variable\">$social</span>-network);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Sass-Maps的函数-map-keys-map\"><a href=\"#Sass-Maps的函数-map-keys-map\" class=\"headerlink\" title=\"Sass Maps的函数-map-keys($map)\"></a>Sass Maps的函数-map-keys($map)</h4><p>map-keys($map) 函数将会返回 $map 中的所有 key。这些值赋予给一个变量，那他就是一个列表。如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$list</span>: map-keys(<span class=\"variable\">$social</span>-colors);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">function</span> colors(<span class=\"variable\">$color</span>)&#123;</div><div class=\"line\">    <span class=\"variable\">$names</span>: map-keys(<span class=\"variable\">$social</span>-colors);</div><div class=\"line\">    @<span class=\"keyword\">if</span> not index(<span class=\"variable\">$names</span>,<span class=\"variable\">$color</span>)&#123;</div><div class=\"line\">        @warn <span class=\"string\">\"Waring: `#&#123;<span class=\"variable\">$color</span>&#125; is not a valid color name.`\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @<span class=\"built_in\">return</span> map-get(<span class=\"variable\">$social</span>-colors,<span class=\"variable\">$color</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面代码中最不同之处，我们使 用map-key s将 $social-colors 这个 map 的所有 key 取出，并赋予给一个名 为 $names 的列表。然后通过 index($names,$color) 返回 $color 在 $names 位置，如果这个位置不存在，将返回提示信息，如果存在将返回正确的值。<br>同样，也可以通过 @each 或者 @for 遍历出所有值：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@each <span class=\"variable\">$name</span> <span class=\"keyword\">in</span> map-keys(<span class=\"variable\">$social</span>-colors)&#123;</div><div class=\"line\">    .btn-<span class=\"comment\">#&#123;$name&#125;&#123;</span></div><div class=\"line\">        color: colors(<span class=\"variable\">$name</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>用for：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">for</span> <span class=\"variable\">$i</span> from 1 through length(map-keys(<span class=\"variable\">$social</span>-colors))&#123;</div><div class=\"line\">    .btn-<span class=\"comment\">#&#123;nth(map-keys($social-colors),$i)&#125; &#123;</span></div><div class=\"line\">        color: colors(nth(map-keys(<span class=\"variable\">$social</span>-colors),<span class=\"variable\">$i</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>虽然使用的方法不一样，但最终得到的 CSS 是一样的：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.btn-dribble &#123;</div><div class=\"line\">  color: <span class=\"comment\">#ea4c89;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-facebook &#123;</div><div class=\"line\">  color: <span class=\"comment\">#3b5998;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-github &#123;</div><div class=\"line\">  color: <span class=\"comment\">#171515;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-google &#123;</div><div class=\"line\">  color: <span class=\"comment\">#db4437;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-twitter &#123;</div><div class=\"line\">  color: <span class=\"comment\">#55acee;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Sass-Maps的函数-map-values-map-、map-merge-map1-map2\"><a href=\"#Sass-Maps的函数-map-values-map-、map-merge-map1-map2\" class=\"headerlink\" title=\"Sass Maps的函数-map-values($map)、map-merge($map1,$map2)\"></a>Sass Maps的函数-map-values($map)、map-merge($map1,$map2)</h4><p>map-values($map) 函数类似于 map-keys($map) 功能，不同的是 map-values($map )获取的是 $map 的所有 value 值，可以说也将是一个列表。而且，map-values($map) 中如果有相同的 value 也将会全部获取出来。<br>map-merge($map1,$map2) 函数是将 $map1 和 $map2 合并，然后得到一个新的 $map。如果你要快速将新的值插入到 $map 中的话，这种方法是最佳方法。假设我们有两个 $map:<br>$color: (<br>    text: #f36,<br>    link: #f63,<br>    border: #ddd,<br>    backround: #fff<br>);<br>$typo:(<br>    font-size: 12px,<br>    line-height: 1.6<br>);<br>如果希望将这两个 $map 合并成一个 map，我们只要这样做：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$newmap</span>: map-merge(<span class=\"variable\">$color</span>,<span class=\"variable\">$typo</span>);</div></pre></td></tr></table></figure></p>\n<p>将会生成一个新的 map:<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$newmap</span>:(</div><div class=\"line\">    text: <span class=\"comment\">#f36,</span></div><div class=\"line\">    link: <span class=\"comment\">#f63,</span></div><div class=\"line\">    border: <span class=\"comment\">#ddd,</span></div><div class=\"line\">    background: <span class=\"comment\">#fff,</span></div><div class=\"line\">    font-size: 12px,</div><div class=\"line\">    line-height: 1.6</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>不过有一点需要注意，如果 $map1 和 $map2 中有相同的 $key 名，那么将 $map2 中的 $key 会取代 $map1 中的：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$color</span>: (</div><div class=\"line\">    text: <span class=\"comment\">#f36,</span></div><div class=\"line\">    link: <span class=\"comment\">#f63,</span></div><div class=\"line\">    border: <span class=\"comment\">#ddd,</span></div><div class=\"line\">    backround: <span class=\"comment\">#fff</span></div><div class=\"line\">);</div><div class=\"line\"><span class=\"variable\">$typo</span>:(</div><div class=\"line\">    font-size: 12px,</div><div class=\"line\">    line-height: 1.6,</div><div class=\"line\">    border: <span class=\"comment\">#ccc,</span></div><div class=\"line\">    background: <span class=\"comment\">#000</span></div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>执行：<br>$newmap: map-merge($color,$typo);<br>得到的新 map:<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$newmap</span>:(</div><div class=\"line\">    text: <span class=\"comment\">#f36,</span></div><div class=\"line\">    link: <span class=\"comment\">#f63,</span></div><div class=\"line\">    font-size: 12px,</div><div class=\"line\">    line-height: 1.6,</div><div class=\"line\">    border: <span class=\"comment\">#ccc,</span></div><div class=\"line\">    background: <span class=\"comment\">#000</span></div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<h4 id=\"Sass-Maps的函数-map-remove-map-key-、keywords-args\"><a href=\"#Sass-Maps的函数-map-remove-map-key-、keywords-args\" class=\"headerlink\" title=\"Sass Maps的函数-map-remove($map,$key)、keywords($args)\"></a>Sass Maps的函数-map-remove($map,$key)、keywords($args)</h4><p>map-remove($map,$key) 函数是用来删除当前 $map 中的某一个 $key，从而得到一个新的 map。其返回的值还是一个 map。他并不能直接从一个 map 中删除另一个 map，仅能通过删除 map 中的某个 key 得到新 map.<br>如果删除的 key 并不存在于 $map 中，那么 map-remove() 函数返回的新 map 和以前的 map 一样。</p>\n<p>keywords($args) 函数可以说是一个动态创建 map 的函数。可以通过混合宏或函数的参数变创建 map。参数也是成对出现，其中 $args 变成 key(会自动去掉$符号)，而 $args 对应的值就是value。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@mixin map(<span class=\"variable\">$args</span>...)&#123;</div><div class=\"line\">    @debug keywords(<span class=\"variable\">$args</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@include map(</div><div class=\"line\">  <span class=\"variable\">$dribble</span>: <span class=\"comment\">#ea4c89,</span></div><div class=\"line\">  <span class=\"variable\">$facebook</span>: <span class=\"comment\">#3b5998,</span></div><div class=\"line\">  <span class=\"variable\">$github</span>: <span class=\"comment\">#171515,</span></div><div class=\"line\">  <span class=\"variable\">$google</span>: <span class=\"comment\">#db4437,</span></div><div class=\"line\">  <span class=\"variable\">$twitter</span>: <span class=\"comment\">#55acee</span></div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>在命令终端可以看到一个输入的 @debug 信息：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">DEBUG: (dribble: <span class=\"comment\">#ea4c89, facebook: #3b5998, github: #171515, google: #db4437, twitter: #55acee)</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"RGB颜色函数-RGB-颜色函数\"><a href=\"#RGB颜色函数-RGB-颜色函数\" class=\"headerlink\" title=\"RGB颜色函数-RGB()颜色函数\"></a>RGB颜色函数-RGB()颜色函数</h3><p>在 Sass 的官方文档中，列出了 Sass 的颜色函数清单，从大的方面主要分为 RGB , HSL 和 Opacity 三大函数，当然其还包括一些其他的颜色函数，比如说 adjust-color 和 change-color 等。在这章节中，将主要和大家一起探讨 Sass 颜色函数中常见的 RGB、HSL 和 Opacity 函数。<br>RGB 颜色只是颜色中的一种表达式，其中 R 是 red 表示红色，G 是 green 表示绿色而 B 是 blue 表示蓝色。在 Sass 中为 RGB 颜色提供六种函数：</p>\n<ul>\n<li>rgb($red,$green,$blue)：根据红、绿、蓝三个值创建一个颜色；</li>\n<li>rgba($red,$green,$blue,$alpha)：根据红、绿、蓝和透明度值创建一个颜色；</li>\n<li>red($color)：从一个颜色中获取其中红色值；</li>\n<li>green($color)：从一个颜色中获取其中绿色值；</li>\n<li>blue($color)：从一个颜色中获取其中蓝色值；</li>\n<li>mix($color-1,$color-2,[$weight])：把两种颜色混合在一起。<br>仅从概念上，或许大家没有太多的概念，我们通过下面的命令来做一个简单的测试：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sass -i</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>在命令终端开启这个命令，相当于开启 Sass 的函数计算。<br>接下来，分别在终端使用 RGB 函数来进行计算，看其最终结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ sass -i</div><div class=\"line\">&gt;&gt; rgb(200,40,88) //根据r:200,g:40,b:88计算出一个十六进制颜色值</div><div class=\"line\"><span class=\"comment\">#c82858</span></div><div class=\"line\">&gt;&gt; rgba(<span class=\"comment\">#c82858,.65) //根据#c82858的65%透明度计算出一个rgba颜色值</span></div><div class=\"line\">rgba(200, 40, 88, 0.65)</div><div class=\"line\">&gt;&gt; red(<span class=\"comment\">#c82858) //从#c82858颜色值中得到红色值 200</span></div><div class=\"line\">200</div><div class=\"line\">&gt;&gt; green(<span class=\"comment\">#c82858) //从#c82858颜色值中得到绿色值 40</span></div><div class=\"line\">40</div><div class=\"line\">&gt;&gt; blue(<span class=\"comment\">#c82858) //从#c82858颜色值中得到蓝色值 88</span></div><div class=\"line\">88</div><div class=\"line\">&gt;&gt; mix(<span class=\"comment\">#c82858,rgba(200,40,80,.65),.3) //把#c82858和rgba(200,40,88,.65) 两颜色按比例混合得到一个新颜色</span></div><div class=\"line\">rgba(200, 40, 80, 0.65105)</div></pre></td></tr></table></figure></p>\n<p>从上面的简单运算结果可以很清晰的知道。在 RGB 颜色函数中，在实际中常用的主要是 rgba() 和 mix() 两个函数，而 rgb() 函数只能快速的将一个 rgb 颜色转换成十六进制颜色表达，red()、green() 和 blue() 函数，只能取得某一颜色的一个值，对于颜色上使用并无太大作用（或许他的好处，我还没有理解过来）。</p>\n<h4 id=\"RGB颜色函数-RGBA-函数\"><a href=\"#RGB颜色函数-RGBA-函数\" class=\"headerlink\" title=\"RGB颜色函数-RGBA()函数\"></a>RGB颜色函数-RGBA()函数</h4><p>rgba() 函数主要用来将一个颜色根据透明度转换成 rgba 颜色。<br>其语法有两种格式：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">rgba(<span class=\"variable\">$red</span>,<span class=\"variable\">$green</span>,<span class=\"variable\">$blue</span>,<span class=\"variable\">$alpha</span>)  //将一个rgba颜色转译出来，和未转译的值一样</div><div class=\"line\">rgba(<span class=\"variable\">$color</span>,<span class=\"variable\">$alpha</span>)  //将一个Hex颜色转换成rgba颜色</div></pre></td></tr></table></figure></p>\n<p>其中 rgba($color,$alpha) 函数作用更大，主要运用在这样的情形之中：假设在实际中知道的颜色值是 #f36 或者 red，但在使用中，需要给他们配上一个透明度，这个时候在原来的 CSS 中，首先需要通过制图工具，得到 #f36 或 red 颜色的 R、G、B 值，而不能直接使用（注意 css3 是可以的，但是存在浏览器兼容问题）：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//CSS</div><div class=\"line\">color: rgba(<span class=\"comment\">#f36,.5); //在css中，这是无效的写法</span></div></pre></td></tr></table></figure></p>\n<p>但在 Sass 中，RGBA() 函数就能解决这个问题。我们先来看一个简单的例子，假设在变量中定义了一个基本的变量：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//SCSS</div><div class=\"line\">.rgba &#123;</div><div class=\"line\">    color: rgba(<span class=\"comment\">#f36,.5);</span></div><div class=\"line\">    background: rgba(orange,.5);</div><div class=\"line\">    border-color: rgba(green,.5);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在这个实例中，我们使用了 Sass 的 rgba 函数，在括号是函数的参数，第一个参数是需要转换的颜色，他可以是任何颜色的表达方式，也可以是一个颜色变量；第二个参数是颜色的透明度，其值是 0~1 之间。上面的代码转译出来：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.rgba &#123;</div><div class=\"line\">  color: rgba(255, 51, 102, 0.5);</div><div class=\"line\">  background: rgba(255, 165, 0, 0.5);</div><div class=\"line\">  border-color: rgba(0, 128, 0, 0.5);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在来看一个调用前面定义的变量：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//SCSS</div><div class=\"line\">.rgba &#123;</div><div class=\"line\">    color: rgba(<span class=\"variable\">$color</span>,.5);</div><div class=\"line\">    background: rgba(<span class=\"variable\">$bgColor</span>,.5);</div><div class=\"line\">    border-color: rgba(<span class=\"variable\">$borderColor</span>,.5);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//CSS</div><div class=\"line\">.rgba &#123;</div><div class=\"line\">  color: rgba(255, 51, 102, 0.5);</div><div class=\"line\">  background: rgba(255, 165, 0, 0.5);</div><div class=\"line\">  border-color: rgba(0, 128, 0, 0.5);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"RGB颜色函数-Red-、Green-、Blue-函数\"><a href=\"#RGB颜色函数-Red-、Green-、Blue-函数\" class=\"headerlink\" title=\"RGB颜色函数-Red()、Green()、Blue()函数\"></a>RGB颜色函数-Red()、Green()、Blue()函数</h4><p>Red() 函数</p>\n<p>red() 函数非常简单，其主要用来获取一个颜色当中的红色值。假设有一个 #f36 的颜色，如果你想得到 #f36 中的 red 值是多少，这个时候使用 red() 函数就能很简单获取。<br>Green() 函数<br>green() 函数和red()函数一样，用来获取某一个颜色值中 green 的值。<br>Blue() 函数<br>同理，blue() 函数是用来获取某一个颜色值中 blue 的值，</p>\n<h4 id=\"RGB颜色函数-Mix-函数\"><a href=\"#RGB颜色函数-Mix-函数\" class=\"headerlink\" title=\"RGB颜色函数-Mix()函数\"></a>RGB颜色函数-Mix()函数</h4><p>Mix 函数是将两种颜色根据一定的比例混合在一起，生成另一种颜色。其使用语法如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">mix(<span class=\"variable\">$color</span>-1,<span class=\"variable\">$color</span>-2,<span class=\"variable\">$weight</span>);</div></pre></td></tr></table></figure></p>\n<p>$color-1 和 $color-2 指的是你需要合并的颜色，颜色可以是任何表达式，也可以是颜色变量。<br>$weight 为 合并的比例（选择权重），默认值为 50%，其取值范围是 0~1 之间。它是每个 RGB 的百分比来衡量，当然透明度也会有一定的权重。默认的比例是 50%，这意味着两个颜色各占一半，如果指定的比例是 25%，这意味着第一个颜色所占比例为 25%，第二个颜色所占比例为75%。<br>使用：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">mix(<span class=\"comment\">#f00, #00f) =&gt; #7f007f</span></div><div class=\"line\">mix(<span class=\"comment\">#f00, #00f, 25%) =&gt; #3f00bf</span></div><div class=\"line\">mix(rgba(255, 0, 0, 0.5), <span class=\"comment\">#00f) =&gt; rgba(63, 0, 191, 0.75)</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//SCSS</div><div class=\"line\"><span class=\"variable\">$color1</span>: <span class=\"comment\">#a63;</span></div><div class=\"line\"><span class=\"variable\">$color2</span>: <span class=\"comment\">#fff;</span></div><div class=\"line\"><span class=\"variable\">$bgColor1</span>: <span class=\"comment\">#f36;</span></div><div class=\"line\"><span class=\"variable\">$bgColor2</span>: <span class=\"comment\">#e36;</span></div><div class=\"line\"><span class=\"variable\">$borderColor1</span>:<span class=\"comment\">#c36;</span></div><div class=\"line\"><span class=\"variable\">$borderColor2</span>:<span class=\"comment\">#b36;</span></div><div class=\"line\">.mix &#123;</div><div class=\"line\">    background: mix(<span class=\"variable\">$bgColor1</span>,<span class=\"variable\">$bgColor2</span>,.75);</div><div class=\"line\">    color: mix(<span class=\"variable\">$color1</span>,<span class=\"variable\">$color2</span>,.25);</div><div class=\"line\">    border-color: mix(<span class=\"variable\">$borderColor1</span>,<span class=\"variable\">$bgColor2</span>,.05);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//CSS</div><div class=\"line\">.mix &#123;</div><div class=\"line\">    background: <span class=\"comment\">#ee3366;</span></div><div class=\"line\">    color: <span class=\"comment\">#fefefe;</span></div><div class=\"line\">    border-color: <span class=\"comment\">#ed33</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"HSL函数简介\"><a href=\"#HSL函数简介\" class=\"headerlink\" title=\"HSL函数简介\"></a>HSL函数简介</h3><p>在 Sass 中提供了一系列有关于 HSL 的颜色函数，以供大家使用，其中常用的有 saturation、lightness、adjust-hue、lighten、darken 等等。接下来我们先来了解一下 HSL 颜色函数包括哪些具体的函数，所起的作用是什么：</p>\n<ul>\n<li>hsl($hue,$saturation,$lightness)：通过色相（hue）、饱和度(saturation)和亮度（lightness）的值创建一个颜色；</li>\n<li>hsla($hue,$saturation,$lightness,$alpha)：通过色相（hue）、饱和度(saturation)、亮度（lightness）和透明（alpha）的值创建一个颜色；</li>\n<li>hue($color)：从一个颜色中获取色相（hue）值；</li>\n<li>saturation($color)：从一个颜色中获取饱和度（saturation）值；</li>\n<li>lightness($color)：从一个颜色中获取亮度（lightness）值；</li>\n<li>adjust-hue($color,$degrees)：通过改变一个颜色的色相值，创建一个新的颜色；</li>\n<li>lighten($color,$amount)：通过改变颜色的亮度值，让颜色变亮，创建一个新的颜色；</li>\n<li>darken($color,$amount)：通过改变颜色的亮度值，让颜色变暗，创建一个新的颜色；</li>\n<li>saturate($color,$amount)：通过改变颜色的饱和度值，让颜色更饱和，从而创建一个新的颜色</li>\n<li>desaturate($color,$amount)：通过改变颜色的饱和度值，让颜色更少的饱和，从而创建出一个新的颜色；</li>\n<li>grayscale($color)：将一个颜色变成灰色，相当于desaturate($color,100%);</li>\n<li>complement($color)：返回一个补充色，相当于adjust-hue($color,180deg);</li>\n<li>invert($color)：反回一个反相色，红、绿、蓝色值倒过来，而透明度不变。<h3 id=\"Opacity函数简介\"><a href=\"#Opacity函数简介\" class=\"headerlink\" title=\"Opacity函数简介\"></a>Opacity函数简介</h3>在 CSS 中除了可以使用 rgba、hsla 和 transform 来控制颜色透明度之外，还可以使用 opacity 来控制，只不过前两者只是针对颜色上的透明通道做处理，而后者是控制整个元素的透明度。<br>在 Sass 中，也提供了系列透明函数，只不过这系列的透明函数主要用来处理颜色透明度：</li>\n<li>alpha($color) /opacity($color)：获取颜色透明度值；</li>\n<li>rgba($color, $alpha)：改变颜色的透明度值；</li>\n<li>opacify($color, $amount) / fade-in($color, $amount)：使颜色更不透明；</li>\n<li>transparentize($color, $amount) / fade-out($color, $amount)：使颜色更加透明。</li>\n</ul>\n<h3 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"@import\"></a>@import</h3><p>Sass 支持所有 CSS3 的 @ 规则， 以及一些 Sass 专属的规则，也被称为“指令（directives）”。 这些规则在 Sass 中具有不同的功效，详细解释如下。<br>@import</p>\n<p>Sass 扩展了 CSS 的 @import 规则，让它能够引入 SCSS 和 Sass 文件。 所有引入的 SCSS 和 Sass 文件都会被合并并输出一个单一的 CSS 文件。 另外，被导入的文件中所定义的变量或 mixins 都可以在主文件中使用。<br>Sass 会在当前目录下寻找其他 Sass 文件， 如果是 Rack、Rails 或 Merb 环境中则是 Sass 文件目录。 也可以通过 :load_paths 选项或者在命令行中使用 –load-path 选项来指定额外的搜索目录。</p>\n<p>@import 根据文件名引入。 默认情况下，它会寻找 Sass 文件并直接引入， 但是，在少数几种情况下，它会被编译成 CSS 的 @import 规则：</p>\n<ul>\n<li>如果文件的扩展名是 .css。</li>\n<li>如果文件名以 http:// 开头。</li>\n<li>如果文件名是 url()。</li>\n<li>如果 @import 包含了任何媒体查询（media queries）。<br>如果上述情况都没有出现，并且扩展名是 .scss 或 .sass， 该名称的 Sass 或 SCSS 文件就会被引入。 如果没有扩展名， Sass 将试着找出具有 .scss 或 .sass 扩展名的同名文件并将其引入。<br>\\@import “foo”;<br>\\@import “foo”;<br>如果你有一个 SCSS 或 Sass 文件需要引入， 但是你又不希望它被编译为一个 CSS 文件， 这时，你就可以在文件名前面加一个下划线，就能避免被编译。 这将告诉 Sass 不要把它编译成 CSS 文件。 然后，你就可以像往常一样引入这个文件了，而且还可以省略掉文件名前面的下划线。<br>注意，在同一个目录不能同时存在带下划线和不带下划线的同名文件。 例如， _colors.scss 不能与 colors.scss 并存。<br>嵌套 @import</li>\n</ul>\n<p>虽然大部分时间只需在顶层文件使用 @import 就行了， 但是，你还可以把他们包含在 CSS 规则 和 @media 规则中。</p>\n<h3 id=\"media\"><a href=\"#media\" class=\"headerlink\" title=\"@media\"></a>@media</h3><p>Sass 中的 @media 指令和 CSS 的使用规则一样的简单，但它有另外一个功能，可以嵌套在 CSS 规则中。有点类似 JS 的冒泡功能一样，如果在样式中使用 @media 指令，它将冒泡到外面。来看一个简单示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.sidebar &#123;</div><div class=\"line\">  width: 300px;</div><div class=\"line\">  @media screen and (orientation: landscape) &#123;</div><div class=\"line\">    width: 500px;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.sidebar &#123;</div><div class=\"line\">  width: 300px; &#125;</div><div class=\"line\">  @media screen and (orientation: landscape) &#123;</div><div class=\"line\">    .sidebar &#123;</div><div class=\"line\">      width: 500px; &#125; &#125;</div></pre></td></tr></table></figure>\n<p>@media 也可以嵌套 @media<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@media screen &#123;</div><div class=\"line\">  .sidebar &#123;</div><div class=\"line\">    @media (orientation: landscape) &#123;</div><div class=\"line\">      width: 500px;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@media screen and (orientation: landscape) &#123;</div><div class=\"line\">  .sidebar &#123;</div><div class=\"line\">    width: 500px; &#125; &#125;</div></pre></td></tr></table></figure>\n<p>在使用 @media 时，还可以使用插件#{}:<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$media</span>: screen;</div><div class=\"line\"><span class=\"variable\">$feature</span>: -webkit-min-device-pixel-ratio;</div><div class=\"line\"><span class=\"variable\">$value</span>: 1.5;</div><div class=\"line\"></div><div class=\"line\">@media <span class=\"comment\">#&#123;$media&#125; and ($feature: $value) &#123;</span></div><div class=\"line\">  .sidebar &#123;</div><div class=\"line\">    width: 500px;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@media screen and (-webkit-min-device-pixel-ratio: 1.5) &#123;</div><div class=\"line\">  .sidebar &#123;</div><div class=\"line\">    width: 500px; &#125; &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"extend\"><a href=\"#extend\" class=\"headerlink\" title=\"@extend\"></a>@extend</h3><p>Sass 中的 @extend 是用来扩展选择器或占位符。比如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.error &#123;</div><div class=\"line\">  border: 1px <span class=\"comment\">#f00;</span></div><div class=\"line\">  background-color: <span class=\"comment\">#fdd;</span></div><div class=\"line\">&#125;</div><div class=\"line\">.error.intrusion &#123;</div><div class=\"line\">  background-image: url(<span class=\"string\">\"/image/hacked.png\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">.seriousError &#123;</div><div class=\"line\">  @extend .error;</div><div class=\"line\">  border-width: 3px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.error, .seriousError &#123;</div><div class=\"line\">  border: 1px <span class=\"comment\">#f00;</span></div><div class=\"line\">  background-color: <span class=\"comment\">#fdd; &#125;</span></div><div class=\"line\"></div><div class=\"line\">.error.intrusion, .seriousError.intrusion &#123;</div><div class=\"line\">  background-image: url(<span class=\"string\">\"/image/hacked.png\"</span>); &#125;</div><div class=\"line\"></div><div class=\"line\">.seriousError &#123;</div><div class=\"line\">  border-width: 3px; &#125;</div></pre></td></tr></table></figure>\n<p>多个扩展</p>\n<p>所设某个样式要继承多个地方的样式，那么可以使用 @extend 来继承多个选择器或占位符的样式，如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.error &#123;</div><div class=\"line\">  border: 1px <span class=\"comment\">#f00;</span></div><div class=\"line\">  background-color: <span class=\"comment\">#fdd;</span></div><div class=\"line\">&#125;</div><div class=\"line\">.attention &#123;</div><div class=\"line\">  font-size: 3em;</div><div class=\"line\">  background-color: <span class=\"comment\">#ff0;</span></div><div class=\"line\">&#125;</div><div class=\"line\">.seriousError &#123;</div><div class=\"line\">  @extend .error;</div><div class=\"line\">  @extend .attention;</div><div class=\"line\">  border-width: 3px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.error, .seriousError &#123;</div><div class=\"line\">  border: 1px <span class=\"comment\">#f00;</span></div><div class=\"line\">  background-color: <span class=\"comment\">#fdd; &#125;</span></div><div class=\"line\"></div><div class=\"line\">.attention, .seriousError &#123;</div><div class=\"line\">  font-size: 3em;</div><div class=\"line\">  background-color: <span class=\"comment\">#ff0; &#125;</span></div><div class=\"line\"></div><div class=\"line\">.seriousError &#123;</div><div class=\"line\">  border-width: 3px; &#125;</div></pre></td></tr></table></figure>\n<p>扩展单一选择器</p>\n<p>前面我们知道 %placeholder 不使用@extend显示调用是不会生成任何样式代码。那么在选择器中使用占位符一样。比如下面的代码:<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#context a%extreme &#123;</span></div><div class=\"line\">  color: blue;</div><div class=\"line\">  font-weight: bold;</div><div class=\"line\">  font-size: 2em;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.notice &#123;</div><div class=\"line\">  @extend %extreme;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#context a.notice &#123;</span></div><div class=\"line\">  color: blue;</div><div class=\"line\">  font-weight: bold;</div><div class=\"line\">  font-size: 2em;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"at-root\"><a href=\"#at-root\" class=\"headerlink\" title=\"@at-root\"></a>@at-root</h3><p>@at-root 从字面上解释就是跳出根元素。当你选择器嵌套多层之后，想让某个选择器跳出，此时就可以使用 @at-root。来看一个简单的示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.a &#123;</div><div class=\"line\">  color: red;</div><div class=\"line\"></div><div class=\"line\">  .b &#123;</div><div class=\"line\">    color: orange;</div><div class=\"line\"></div><div class=\"line\">    .c &#123;</div><div class=\"line\">      color: yellow;</div><div class=\"line\"></div><div class=\"line\">      @at-root .d &#123;</div><div class=\"line\">        color: green;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.a &#123;</div><div class=\"line\">  color: red;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.a .b &#123;</div><div class=\"line\">  color: orange;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.a .b .c &#123;</div><div class=\"line\">  color: yellow;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.d &#123;</div><div class=\"line\">  color: green;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"debug\"><a href=\"#debug\" class=\"headerlink\" title=\"@debug\"></a>@debug</h3><p>@debug 在 Sass 中是用来调试的，当你的在 Sass 的源码中使用了 @debug 指令之后，Sass 代码在编译出错时，在命令终端会输出你设置的提示 Bug:<br>\\@debug 10em + 12em;<br>output:Line 1 DEBUG: 22em</p>\n<h3 id=\"warn\"><a href=\"#warn\" class=\"headerlink\" title=\"@warn\"></a>@warn</h3><p>@warn 和 @debug 功能类似，用来帮助我们更好的调试 Sass。如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@mixin adjust-location(<span class=\"variable\">$x</span>, <span class=\"variable\">$y</span>) &#123;</div><div class=\"line\">  @<span class=\"keyword\">if</span> unitless(<span class=\"variable\">$x</span>) &#123;</div><div class=\"line\">    @warn <span class=\"string\">\"Assuming #&#123;<span class=\"variable\">$x</span>&#125; to be in pixels\"</span>;</div><div class=\"line\">    <span class=\"variable\">$x</span>: 1px * <span class=\"variable\">$x</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  @<span class=\"keyword\">if</span> unitless(<span class=\"variable\">$y</span>) &#123;</div><div class=\"line\">    @warn <span class=\"string\">\"Assuming #&#123;<span class=\"variable\">$y</span>&#125; to be in pixels\"</span>;</div><div class=\"line\">    <span class=\"variable\">$y</span>: 1px * <span class=\"variable\">$y</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  position: relative; left: <span class=\"variable\">$x</span>; top: <span class=\"variable\">$y</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"error\"><a href=\"#error\" class=\"headerlink\" title=\"@error\"></a>@error</h3><p>@error 和 @warn、@debug 功能是如出一辙.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@mixin error(<span class=\"variable\">$x</span>)&#123;</div><div class=\"line\">  @<span class=\"keyword\">if</span> <span class=\"variable\">$x</span> &lt; 10 &#123;</div><div class=\"line\">    width: <span class=\"variable\">$x</span> * 10px;</div><div class=\"line\">  &#125; @<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"variable\">$x</span> == 10 &#123;</div><div class=\"line\">    width: <span class=\"variable\">$x</span>;</div><div class=\"line\">  &#125; @<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    @error <span class=\"string\">\"你需要将#&#123;<span class=\"variable\">$x</span>&#125;值设置在10以内的数\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.test &#123;</div><div class=\"line\">  @include error(15);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>编译时，提示：你需要将15值设置在10以内的数 on line 7 at column 5</p>\n","excerpt":"<h1 id=\"sass\"><a href=\"#sass\" class=\"headerlink\" title=\"sass\"></a>sass</h1><h2 id=\"编译风格\"><a href=\"#编译风格\" class=\"headerlink\" title=\"编译风格\"></a>编译风格</h2><p>1, –style nested<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">nav &#123;</div><div class=\"line\">  ul &#123;</div><div class=\"line\">    margin: 0;</div><div class=\"line\">    padding: 0;</div><div class=\"line\">    list-style: none;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  li &#123; display: inline-block; &#125;</div><div class=\"line\"></div><div class=\"line\">  a &#123;</div><div class=\"line\">    display: block;</div><div class=\"line\">    padding: 6px 12px;</div><div class=\"line\">    text-decoration: none;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>","more":"<p>2, sass –watch test.scss:test.css –style expanded<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">nav &#123;</div><div class=\"line\">  ul &#123;</div><div class=\"line\">    margin: 0;</div><div class=\"line\">    padding: 0;</div><div class=\"line\">    list-style: none;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  li &#123; display: inline-block; &#125;</div><div class=\"line\"></div><div class=\"line\">  a &#123;</div><div class=\"line\">    display: block;</div><div class=\"line\">    padding: 6px 12px;</div><div class=\"line\">    text-decoration: none;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>3, sass –watch test.scss:test.css –style compact<br>4, sass –watch test.scss:test.css –style compressed</p>\n<p>Sass 调试: sass –watch –scss –sourcemap style.scss:style.css.在 Sass3.3 版本之上（我测试使用的版本是 3.4.7），不需要添加这个参数也可以</p>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"Sass-声明变量\"><a href=\"#Sass-声明变量\" class=\"headerlink\" title=\"[Sass]声明变量\"></a>[Sass]声明变量</h3><p>声明变量的符号“$”<br>变量名称<br>赋予变量的值<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$brand</span>-primary : darken(<span class=\"comment\">#428bca, 6.5%) !default; // #337ab7</span></div><div class=\"line\"><span class=\"variable\">$btn</span>-primary-color : <span class=\"comment\">#fff !default;</span></div><div class=\"line\"><span class=\"variable\">$btn</span>-primary-bg : <span class=\"variable\">$brand</span>-primary !default;</div><div class=\"line\"><span class=\"variable\">$btn</span>-primary-border : darken(<span class=\"variable\">$btn</span>-primary-bg, 5%) !default;</div></pre></td></tr></table></figure></p>\n<p>如果值后面加上!default则表示默认值。</p>\n<h3 id=\"Sass-普通变量与默认变量\"><a href=\"#Sass-普通变量与默认变量\" class=\"headerlink\" title=\"[Sass]普通变量与默认变量\"></a>[Sass]普通变量与默认变量</h3><p>普通变量：定义之后可以在全局范围内使用。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$fontSize</span>: 12px;</div><div class=\"line\">body&#123;</div><div class=\"line\">\tfont-size:<span class=\"variable\">$fontSize</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>默认变量：sass 的默认变量仅需要在值后面加上 !default 即可。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$baseLineHeight</span>:1.5 !default;</div><div class=\"line\">body&#123;</div><div class=\"line\">\tline-height: <span class=\"variable\">$baseLineHeight</span>; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>sass 的默认变量一般是用来设置默认值，然后根据需求来覆盖的，覆盖的方式也很简单，只需要在默认变量之前重新声明下变量即可。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$baseLineHeight</span>: 2;</div><div class=\"line\"><span class=\"variable\">$baseLineHeight</span>: 1.5 !default;</div><div class=\"line\">body&#123;</div><div class=\"line\">\tline-height: <span class=\"variable\">$baseLineHeight</span>; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>编译后的css代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">body&#123;</div><div class=\"line\">\tline-height:2;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Sass-变量的调用\"><a href=\"#Sass-变量的调用\" class=\"headerlink\" title=\"[Sass]变量的调用\"></a>[Sass]变量的调用</h3><p>在 Sass 中声明了变量之后，就可以在需要的地方调用变量。调用变量的方法也非常的简单。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.btn-primary &#123;</div><div class=\"line\">\tbackground-color: <span class=\"variable\">$btn</span>-primary-bg;</div><div class=\"line\">\tcolor: <span class=\"variable\">$btn</span>-primary-color;</div><div class=\"line\">\tborder: 1px solid <span class=\"variable\">$btn</span>-primary-border;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Sass-局部变量和全局变量\"><a href=\"#Sass-局部变量和全局变量\" class=\"headerlink\" title=\"[Sass]局部变量和全局变量\"></a>[Sass]局部变量和全局变量</h3><p>Sass 中变量的作用域在过去几年已经发生了一些改变。直到最近，规则集和其他范围内声明变量的作用域才默认为本地。如果已经存在同名的全局变量，从 3.4 版本开始，Sass 已经可以正确处理作用域的概念，并通过创建一个新的局部变量来代替。<br>先来看一下代码例子：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//SCSS</div><div class=\"line\"><span class=\"variable\">$color</span>: orange !default;//定义全局变量(在选择器、函数、混合宏...的外面定义的变量为全局变量)</div><div class=\"line\">.block &#123;</div><div class=\"line\">  color: <span class=\"variable\">$color</span>;//调用全局变量</div><div class=\"line\">&#125;</div><div class=\"line\">em &#123;</div><div class=\"line\">  <span class=\"variable\">$color</span>: red;//定义局部变量</div><div class=\"line\">  a &#123;</div><div class=\"line\">\tcolor: <span class=\"variable\">$color</span>;//调用局部变量</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">span &#123;</div><div class=\"line\">  color: <span class=\"variable\">$color</span>;//调用全局变量</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//CSS</div><div class=\"line\">.block &#123;</div><div class=\"line\">  color: orange;</div><div class=\"line\">&#125;</div><div class=\"line\">em a &#123;</div><div class=\"line\">  color: red;</div><div class=\"line\">&#125;</div><div class=\"line\">span &#123;</div><div class=\"line\">  color: orange;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的示例演示可以得知，在元素内部定义的变量不会影响其他元素。如此可以简单的理解成，全局变量就是定义在元素外面的变量，而定义在元素内部的变量，是一个局部变量。<br>我的建议，创建变量只适用于感觉确有必要的情况下。不要为了某些骇客行为而声明新变量，这丝毫没有作用。只有满足所有下述标准时方可创建新变量：</p>\n<ol>\n<li>该值至少重复出现了两次；</li>\n<li>该值至少可能会被更新一次；</li>\n<li>该值所有的表现都与变量有关（非巧合）。</li>\n</ol>\n<h3 id=\"Sass-嵌套-选择器嵌套\"><a href=\"#Sass-嵌套-选择器嵌套\" class=\"headerlink\" title=\"[Sass]嵌套-选择器嵌套\"></a>[Sass]嵌套-选择器嵌套</h3><p>1、选择器嵌套<br>如果有：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;header&gt;</div><div class=\"line\">&lt;nav&gt;</div><div class=\"line\">    &lt;a href=“<span class=\"comment\">##”&gt;Home&lt;/a&gt;</span></div><div class=\"line\">    &lt;a href=“<span class=\"comment\">##”&gt;About&lt;/a&gt;</span></div><div class=\"line\">    &lt;a href=“<span class=\"comment\">##”&gt;Blog&lt;/a&gt;</span></div><div class=\"line\">&lt;/nav&gt;</div><div class=\"line\">&lt;header&gt;</div></pre></td></tr></table></figure></p>\n<p>想选中 header 中的 a 标签，在写 sCSS 会这样写：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">nav &#123;</div><div class=\"line\">  a &#123;</div><div class=\"line\">\tcolor: red;</div><div class=\"line\">\theader &amp; &#123;</div><div class=\"line\">\t\tcolor:green;</div><div class=\"line\">\t&#125;</div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">nav a &#123;</div><div class=\"line\">  color:red;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">header nav a &#123;</div><div class=\"line\">  color:green;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Sass-嵌套-属性嵌套\"><a href=\"#Sass-嵌套-属性嵌套\" class=\"headerlink\" title=\"[Sass]嵌套-属性嵌套\"></a>[Sass]嵌套-属性嵌套</h3><p>Sass 中还提供属性嵌套，CSS 有一些属性前缀相同，只是后缀不一样，比如：border-top/border-right，与这个类似的还有 margin、padding、font 等属性。假设你的样式中用到了：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">\tborder-top: 1px solid red;</div><div class=\"line\">\tborder-bottom: 1px solid green;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>scss中可以这么写：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  border: &#123;</div><div class=\"line\">   top: 1px solid red;</div><div class=\"line\">   bottom: 1px solid green;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注意border后面的冒号。</p>\n<h3 id=\"Sass-嵌套-伪类嵌套\"><a href=\"#Sass-嵌套-伪类嵌套\" class=\"headerlink\" title=\"[Sass]嵌套-伪类嵌套\"></a>[Sass]嵌套-伪类嵌套</h3><p>其实伪类嵌套和属性嵌套非常类似，只不过他需要借助<code>&amp;</code>符号一起配合使用。我们就拿经典的“clearfix”为例吧：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.clearfix&#123;</div><div class=\"line\">&amp;:before,</div><div class=\"line\">&amp;:after &#123;</div><div class=\"line\">    content:<span class=\"string\">\"\"</span>;</div><div class=\"line\">    display: table;</div><div class=\"line\">  &#125;</div><div class=\"line\">&amp;:after &#123;</div><div class=\"line\">    clear:both;</div><div class=\"line\">    overflow: hidden;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>&amp; 和冒号之间没有空格。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">clearfix:before, .clearfix:after &#123;</div><div class=\"line\">  content: <span class=\"string\">\"\"</span>;</div><div class=\"line\">  display: table;</div><div class=\"line\">&#125;</div><div class=\"line\">.clearfix:after &#123;</div><div class=\"line\">  clear: both;</div><div class=\"line\">  overflow: hidden;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>选择器嵌套最大的问题是将使最终的代码难以阅读。开发者需要花费巨大精力计算不同缩进级别下的选择器具体的表现效果。<br>选择器越具体则声明语句越冗长，而且对最近选择器的引用(&amp;)也越频繁。在某些时候，出现混淆选择器路径和探索下一级选择器的错误率很高，这非常不值得。</p>\n<p>为了防止此类情况，我们应该尽可能避免选择器嵌套。然而，显然只有少数情况适应这一措施。</p>\n<h3 id=\"Sass-混合宏-声明混合宏\"><a href=\"#Sass-混合宏-声明混合宏\" class=\"headerlink\" title=\"[Sass]混合宏-声明混合宏\"></a>[Sass]混合宏-声明混合宏</h3><p>如果你的整个网站中有几处小样式类似，比如颜色，字体等，在 Sass 可以使用变量来统一处理，那么这种选择还是不错的。但当你的样式变得越来越复杂，需要重复使用大段的样式时，使用变量就无法达到我们目了。这个时候 Sass 中的混合宏就会变得非常有意义。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@mixin border-radius&#123;</div><div class=\"line\">    -webkit-border-radius: 5px;</div><div class=\"line\">    border-radius: 5px;</div><div class=\"line\">&#125;</div><div class=\"line\">```\t</div><div class=\"line\">其中 @mixin 是用来声明混合宏的关键词，有点类似 CSS 中的 @media、@font-face 一样。border-radius 是混合宏的名称。大括号里面是复用的样式代码。</div><div class=\"line\">除了声明一个不带参数的混合宏之外，还可以在定义混合宏时带有参数，如：</div><div class=\"line\">``` bash</div><div class=\"line\">@mixin border-radius(<span class=\"variable\">$radius</span>:5px)&#123;</div><div class=\"line\">    -webkit-border-radius: <span class=\"variable\">$radius</span>;</div><div class=\"line\">    border-radius: <span class=\"variable\">$radius</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面是一个简单的定义混合宏的方法，当然， Sass 中的混合宏还提供更为复杂的，你可以在大括号里面写上带有逻辑关系，帮助更好的做你想做的事情,如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@mixin box-shadow(<span class=\"variable\">$shadow</span>...) &#123;</div><div class=\"line\">  @<span class=\"keyword\">if</span> length(<span class=\"variable\">$shadow</span>) &gt;= 1 &#123;</div><div class=\"line\">    @include prefixer(box-shadow, <span class=\"variable\">$shadow</span>);</div><div class=\"line\">  &#125; @<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"variable\">$shadow</span>:0 0 4px rgba(0,0,0,.3);</div><div class=\"line\">    @include prefixer(box-shadow, <span class=\"variable\">$shadow</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个 box-shadow 的混合宏，带有多个参数，这个时候可以使用“ … ”来替代。简单的解释一下，当 $shadow 的参数数量值大于或等于“ 1 ”时，表示有多个阴影值，反之调用默认的参数值“ 0 0 4px rgba(0,0,0,.3) ”。</p>\n<h3 id=\"Sass-混合宏-调用混合宏\"><a href=\"#Sass-混合宏-调用混合宏\" class=\"headerlink\" title=\"[Sass]混合宏-调用混合宏\"></a>[Sass]混合宏-调用混合宏</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">button &#123;</div><div class=\"line\">    @include border-radius;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>@mixin 类似函数声明，@include 类似函数调用</p>\n<h3 id=\"Sass-混合宏的参数–传一个不带值的参数\"><a href=\"#Sass-混合宏的参数–传一个不带值的参数\" class=\"headerlink\" title=\"[Sass]混合宏的参数–传一个不带值的参数\"></a>[Sass]混合宏的参数–传一个不带值的参数</h3><p>在混合宏中，可以传递一个不带任何值得参数，比如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@mixin border-radius(<span class=\"variable\">$radius</span>)&#123;</div><div class=\"line\">  -webkit-border-radius: <span class=\"variable\">$radius</span>;</div><div class=\"line\">  border-radius: <span class=\"variable\">$radius</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  @include border-radius(3px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意，不传值会报错。</p>\n<h3 id=\"Sass-混合宏的参数–传一个带值的参数\"><a href=\"#Sass-混合宏的参数–传一个带值的参数\" class=\"headerlink\" title=\"[Sass]混合宏的参数–传一个带值的参数\"></a>[Sass]混合宏的参数–传一个带值的参数</h3><p>在 Sass 的混合宏中，还可以给混合宏的参数传一个默认值，例如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@mixin border-radius(<span class=\"variable\">$radius</span>:3px)&#123;</div><div class=\"line\">  -webkit-border-radius: <span class=\"variable\">$radius</span>;</div><div class=\"line\">  border-radius: <span class=\"variable\">$radius</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在混合宏“border-radius”传了一个参数“$radius”，而且给这个参数赋予了一个默认值“3px”。<br>在调用类似这样的混合宏时，会多有一个机会，假设你的页面中的圆角很多地方都是“3px”的圆角，那么这个时候只需要调用默认的混合宏“border-radius”:<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.btn &#123;</div><div class=\"line\">  @include border-radius;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>但有的时候，页面中有些元素的圆角值不一样，那么可以随机给混合宏传值，如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  @include border-radius(50%);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Sass-混合宏的参数–传多个参数\"><a href=\"#Sass-混合宏的参数–传多个参数\" class=\"headerlink\" title=\"[Sass]混合宏的参数–传多个参数\"></a>[Sass]混合宏的参数–传多个参数</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@mixin center(<span class=\"variable\">$width</span>,<span class=\"variable\">$height</span>)&#123;</div><div class=\"line\">  width: <span class=\"variable\">$width</span>;</div><div class=\"line\">  height: <span class=\"variable\">$height</span>;</div><div class=\"line\">  position: absolute;</div><div class=\"line\">  top: 50%;</div><div class=\"line\">  left: 50%;</div><div class=\"line\">  margin-top: -(<span class=\"variable\">$height</span>) / 2;</div><div class=\"line\">  margin-left: -(<span class=\"variable\">$width</span>) / 2;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调用：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box-center &#123;</div><div class=\"line\">  @include center(500px,300px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>有一个特别的参数“…”。当混合宏传的参数过多之时，可以使用参数来替代，如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@mixin box-shadow(<span class=\"variable\">$shadows</span>...)&#123;</div><div class=\"line\">  @<span class=\"keyword\">if</span> length(<span class=\"variable\">$shadows</span>) &gt;= 1 &#123;</div><div class=\"line\">    -webkit-box-shadow: <span class=\"variable\">$shadows</span>;</div><div class=\"line\">    box-shadow: <span class=\"variable\">$shadows</span>;</div><div class=\"line\">  &#125; @<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"variable\">$shadows</span>: 0 0 2px rgba(<span class=\"comment\">#000,.25);</span></div><div class=\"line\">    -webkit-box-shadow: <span class=\"variable\">$shadow</span>;</div><div class=\"line\">    box-shadow: <span class=\"variable\">$shadow</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Sass-混合宏的参数–混合宏的不足\"><a href=\"#Sass-混合宏的参数–混合宏的不足\" class=\"headerlink\" title=\"[Sass]混合宏的参数–混合宏的不足\"></a>[Sass]混合宏的参数–混合宏的不足</h3><p>混合宏在实际编码中给我们带来很多方便之处，特别是对于复用重复代码块。但其最大的不足之处是会生成冗余的代码块。比如在不同的地方调用一个相同的混合宏时。如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@mixin border-radius&#123;</div><div class=\"line\">  -webkit-border-radius: 3px;</div><div class=\"line\">  border-radius: 3px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.box &#123;</div><div class=\"line\">  @include border-radius;</div><div class=\"line\">  margin-bottom: 5px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn &#123;</div><div class=\"line\">  @include border-radius;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Sass-扩展-继承\"><a href=\"#Sass-扩展-继承\" class=\"headerlink\" title=\"[Sass]扩展/继承\"></a>[Sass]扩展/继承</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//SCSS</div><div class=\"line\">.btn &#123;</div><div class=\"line\">  border: 1px solid <span class=\"comment\">#ccc;</span></div><div class=\"line\">  padding: 6px 10px;</div><div class=\"line\">  font-size: 14px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-primary &#123;</div><div class=\"line\">  background-color: <span class=\"comment\">#f36;</span></div><div class=\"line\">  color: <span class=\"comment\">#fff;</span></div><div class=\"line\">  @extend .btn;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-second &#123;</div><div class=\"line\">  background-color: orange;</div><div class=\"line\">  color: <span class=\"comment\">#fff;</span></div><div class=\"line\">  @extend .btn;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>编译出来之后：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//CSS</div><div class=\"line\">.btn, .btn-primary, .btn-second &#123;</div><div class=\"line\">  border: 1px solid <span class=\"comment\">#ccc;</span></div><div class=\"line\">  padding: 6px 10px;</div><div class=\"line\">  font-size: 14px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-primary &#123;</div><div class=\"line\">  background-color: <span class=\"comment\">#f36;</span></div><div class=\"line\">  color: <span class=\"comment\">#fff;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-second &#123;</div><div class=\"line\">  background-clor: orange;</div><div class=\"line\">  color: <span class=\"comment\">#fff;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从示例代码可以看出，在 Sass 中的继承，可以继承类样式块中所有样式代码，而且编译出来的 CSS 会将选择器合并在一起，形成组合选择器</p>\n<h3 id=\"Sass-占位符-placeholder\"><a href=\"#Sass-占位符-placeholder\" class=\"headerlink\" title=\"[Sass]占位符 %placeholder\"></a>[Sass]占位符 %placeholder</h3><p>Sass 中的占位符 %placeholder 功能是一个很强大，很实用的一个功能，这也是我非常喜欢的功能。他可以取代以前 CSS 中的基类造成的代码冗余的情形。因为 %placeholder 声明的代码，如果不被 @extend 调用的话，不会产生任何代码。来看一个演示：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">%mt5 &#123;</div><div class=\"line\">  margin-top: 5px;</div><div class=\"line\">&#125;</div><div class=\"line\">%pt5&#123;</div><div class=\"line\">  padding-top: 5px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这段代码没有被 @extend 调用，他并没有产生任何代码块，只是静静的躺在你的某个 SCSS 文件中。只有通过 @extend 调用才会产生代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//SCSS</div><div class=\"line\">%mt5 &#123;</div><div class=\"line\">  margin-top: 5px;</div><div class=\"line\">&#125;</div><div class=\"line\">%pt5&#123;</div><div class=\"line\">  padding-top: 5px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn &#123;</div><div class=\"line\">  @extend %mt5;</div><div class=\"line\">  @extend %pt5;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.block &#123;</div><div class=\"line\">  @extend %mt5;</div><div class=\"line\"></div><div class=\"line\">  span &#123;</div><div class=\"line\">    @extend %pt5;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>编译出来的CSS<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//CSS</div><div class=\"line\">.btn, .block &#123;</div><div class=\"line\">  margin-top: 5px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn, .block span &#123;</div><div class=\"line\">  padding-top: 5px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从编译出来的 CSS 代码可以看出，通过 @extend 调用的占位符，编译出来的代码会将相同的代码合并在一起。这也是我们希望看到的效果，也让你的代码变得更为干净。</p>\n<h3 id=\"Sass-混合宏-VS-继承-VS-占位符\"><a href=\"#Sass-混合宏-VS-继承-VS-占位符\" class=\"headerlink\" title=\"[Sass]混合宏 VS 继承 VS 占位符\"></a>[Sass]混合宏 VS 继承 VS 占位符</h3><p>初学者都常常纠结于这个问题“什么时候用混合宏，什么时候用继承，什么时候使用占位符？”其实他们各有各的优点与缺点，先来看看他们使用效果：<br>混合宏：编译出来的 CSS 清晰告诉了大家，他不会自动合并相同的样式代码，如果在样式文件中调用同一个混合宏，会产生多个对应的样式代码，造成代码的冗余，这也是 CSSer 无法忍受的一件事情。不过他并不是一无事处，他可以传参数。<br>个人建议：如果你的代码块中涉及到变量，建议使用混合宏来创建相同的代码块。<br>继承：使用继承后，编译出来的 CSS 会将使用继承的代码块合并到一起，通过组合选择器的方式向大家展现，比如 .mt, .block, .block span, .header, .header span。这样编译出来的代码相对于混合宏来说要干净的多，也是 CSSer 期望看到。但是他不能传变量参数。</p>\n<p>个人建议：如果你的代码块不需要专任何变量参数，而且有一个基类已在文件中存在，那么建议使用 Sass 的继承。<br>占位符：总结：编译出来的 CSS 代码和使用继承基本上是相同，只是不会在代码中生成占位符 mt 的选择器。那么占位符和继承的主要区别的，“占位符是独立定义，不调用的时候是不会在 CSS 中产生任何代码；继承是首先有一个基类存在，不管调用与不调用，基类的样式都将会出现在编译出来的 CSS 代码中。”<br><img src=\"images/diff_sass.png\" alt=\"chabie\">;</p>\n<h3 id=\"Sass-插值\"><a href=\"#Sass-插值\" class=\"headerlink\" title=\"[Sass]插值#{}\"></a>[Sass]插值#{}</h3><p>使用 CSS 预处理器语言的一个主要原因是想使用 Sass 获得一个更好的结构体系。比如说你想写更干净的、高效的和面向对象的 CSS。Sass 中的插值(Interpolation)就是重要的一部分。让我们看一下下面的例子：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$properties</span>: (margin, padding);</div><div class=\"line\">@mixin <span class=\"built_in\">set</span>-value(<span class=\"variable\">$side</span>, <span class=\"variable\">$value</span>) &#123;</div><div class=\"line\">    @each <span class=\"variable\">$prop</span> <span class=\"keyword\">in</span> <span class=\"variable\">$properties</span> &#123;</div><div class=\"line\">        <span class=\"comment\">#&#123;$prop&#125;-#&#123;$side&#125;: $value;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">.login-box &#123;</div><div class=\"line\">    @include <span class=\"built_in\">set</span>-value(top, 14px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这是 Sass 插值中一个简单的实例。当你想设置属性值的时候你可以使用字符串插入进来。另一个有用的用法是构建一个选择器。可以这样使用：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@mixin generate-sizes(<span class=\"variable\">$class</span>, <span class=\"variable\">$small</span>, <span class=\"variable\">$medium</span>, <span class=\"variable\">$big</span>) &#123;</div><div class=\"line\">    .<span class=\"comment\">#&#123;$class&#125;-small &#123; font-size: $small; &#125;</span></div><div class=\"line\">    .<span class=\"comment\">#&#123;$class&#125;-medium &#123; font-size: $medium; &#125;</span></div><div class=\"line\">    .<span class=\"comment\">#&#123;$class&#125;-big &#123; font-size: $big; &#125;</span></div><div class=\"line\">&#125;</div><div class=\"line\">@include generate-sizes(<span class=\"string\">\"header-text\"</span>, 12px, 20px, 40px);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.header-text-small &#123; font-size: 12px; &#125;</div><div class=\"line\">.header-text-medium &#123; font-size: 20px; &#125;</div><div class=\"line\">.header-text-big &#123; font-size: 40px; &#125;</div></pre></td></tr></table></figure>\n<p>第一个限制，这可能会很删除用于 Sass 变量的插值。你也不能在 mixin 中调用.<br>幸运的是，可以使用 @extend 中使用插值。例如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">%updated-status &#123;</div><div class=\"line\">    margin-top: 20px;</div><div class=\"line\">    background: <span class=\"comment\">#F00;</span></div><div class=\"line\">&#125;</div><div class=\"line\">.selected-status &#123;</div><div class=\"line\">    font-weight: bold;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"variable\">$flag</span>: <span class=\"string\">\"status\"</span>;</div><div class=\"line\">.navigation &#123;</div><div class=\"line\">    @extend %updated-<span class=\"comment\">#&#123;$flag&#125;;</span></div><div class=\"line\">    @extend .selected-<span class=\"comment\">#&#123;$flag&#125;;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Sass-注释\"><a href=\"#Sass-注释\" class=\"headerlink\" title=\"[Sass]注释\"></a>[Sass]注释</h3><p>注释对于一名程序员来说，是极其重要，良好的注释能帮助自己或者别人阅读源码。在 Sass 中注释有两种方式，我暂且将其命名为：</p>\n<ul>\n<li>类似 CSS 的注释方式，使用 ”/<em> ”开头，结属使用 ”</em>/ ”</li>\n<li>类似 JavaScript 的注释方式，使用“//”<br>两者区别，前者会在编译出来的 CSS 显示，后者在编译出来的 CSS 中不会显示<h3 id=\"Sass-数据类型\"><a href=\"#Sass-数据类型\" class=\"headerlink\" title=\"[Sass]数据类型\"></a>[Sass]数据类型</h3>Sass 和 JavaScript 语言类似，也具有自己的数据类型，在 Sass 中包含以下几种数据类型：</li>\n<li>数字: 如，1、 2、 13、 10px；</li>\n<li>字符串：有引号字符串或无引号字符串，如，”foo”、 ‘bar’、 baz；</li>\n<li>颜色：如，blue、 #04a3f9、 rgba(255,0,0,0.5)；</li>\n<li>布尔型：如，true、 false；</li>\n<li>空值：如，null；</li>\n<li><p>值列表：用空格或者逗号分开，如，1.5em 1em 0 2em 、 Helvetica, Arial, sans-serif。<br>SassScript 也支持其他 CSS 属性值（property value），比如 Unicode 范围，或 !important 声明。然而，Sass 不会特殊对待这些属性值，一律视为无引号字符串 (unquoted strings)。</p>\n<h4 id=\"Sass-字符串\"><a href=\"#Sass-字符串\" class=\"headerlink\" title=\"[Sass]字符串\"></a>[Sass]字符串</h4><p>SassScript 支持 CSS 的两种字符串类型：</p>\n</li>\n<li><p>有引号字符串 (quoted strings)，如 “Lucida Grande” 、’<a href=\"http://sass-lang.com&#39;；\">http://sass-lang.com&#39;；</a></p>\n</li>\n<li>无引号字符串 (unquoted strings)，如 sans-serifbold。<br>在编译 CSS 文件时不会改变其类型。只有一种情况例外，使用 #{ }插值语句 (interpolation) 时，有引号字符串将被编译为无引号字符串，这样方便了在混合指令 (mixin) 中引用选择器名。<br>需要注意的是：当 deprecated = property syntax 时 （暂时不理解是怎样的情况），所有的字符串都将被编译为无引号字符串，不论是否使用了引号。<h3 id=\"Sass-值列表\"><a href=\"#Sass-值列表\" class=\"headerlink\" title=\"[Sass]值列表\"></a>[Sass]值列表</h3>所谓值列表 (lists) 是指 Sass 如何处理 CSS 中： <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">margin: 10px 15px 0 0</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>或者：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">font-face: Helvetica, Arial, sans-serif</div></pre></td></tr></table></figure></p>\n<p>像上面这样通过空格或者逗号分隔的一系列的值。<br>Sass列表函数（Sass list functions）赋予了值列表更多功能（Sass进级会有讲解）：</p>\n<ol>\n<li>nth函数（nth function） 可以直接访问值列表中的某一项；</li>\n<li>join函数（join function） 可以将多个值列表连结在一起；</li>\n<li>append函数（append function） 可以在值列表中添加值；</li>\n<li>@each规则（@each rule） 则能够给值列表中的每个项目添加样式。<h3 id=\"Sass运算\"><a href=\"#Sass运算\" class=\"headerlink\" title=\"[Sass运算]\"></a>[Sass运算]</h3>程序中的运算是常见的一件事情，但在 CSS 中能做运算的，到目前为止仅有 calc() 函数可行。但在 Sass 中，运算只是其基本特性之一。在 Sass 中可以做各种数学计算，在接下来的章节中，主要和大家一起探讨有关于 Sass 中的数学运算。<h4 id=\"Sass运算-加法\"><a href=\"#Sass运算-加法\" class=\"headerlink\" title=\"[Sass运算]加法\"></a>[Sass运算]加法</h4>加法运算是 Sass 中运算中的一种，在变量或属性中都可以做加法运算。如：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  width: 20px + 8<span class=\"keyword\">in</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  width: 788px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但对于携带不同类型的单位时，在 Sass 中计算会报错，如下例所示：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  width: 20px + 1em;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>编译的时候，编译器会报错：“Incompatible units: ‘em’ and ‘px’.”</p>\n<h4 id=\"Sass运算-减法\"><a href=\"#Sass运算-减法\" class=\"headerlink\" title=\"[Sass运算]减法\"></a>[Sass运算]减法</h4><p>Sass 的减法运算和加法运算类似，我们通过一个简单的示例来做阐述：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$full</span>-width: 960px;</div><div class=\"line\"><span class=\"variable\">$sidebar</span>-width: 200px;</div><div class=\"line\"></div><div class=\"line\">.content &#123;</div><div class=\"line\">  width: <span class=\"variable\">$full</span>-width -  <span class=\"variable\">$sidebar</span>-width;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>同样的，运算时碰到不同类型的单位时，编译也会报错。</p>\n<h4 id=\"Sass运算-乘法\"><a href=\"#Sass运算-乘法\" class=\"headerlink\" title=\"[Sass运算]乘法\"></a>[Sass运算]乘法</h4><p>Sass 中的乘法运算和前面介绍的加法与减法运算还略有不同。虽然他也能够支持多种单位（比如 em ,px , %），但当一个单位同时声明两个值时会有问题。比如下面的示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  width:10px * 2px;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>编译的时候报“20px*px isn’t a valid CSS value.”错误信息。</p>\n<p>如果进行乘法运算时，两个值单位相同时，只需要为一个数值提供单位即可。上面的示例可以修改成：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  width: 10px * 2;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Sass运算-除法\"><a href=\"#Sass运算-除法\" class=\"headerlink\" title=\"[Sass运算]除法\"></a>[Sass运算]除法</h4><p>Sass 的乘法运算规则也适用于除法运算。不过除法运算还有一个特殊之处。众所周知“/”符号在 CSS 中已做为一种符号使用。因此在 Sass 中做除法运算时，直接使用“/”符号做为除号时，将不会生效，编译时既得不到我们需要的效果，也不会报错。一起先来看一个简单的示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  width: 100px / 2;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>.box {<br>  width: 100px / 2;<br>}<br>这样的结果对于大家来说没有任何意义。要修正这个问题，只需要给运算的外面添加一个小括号( )即可：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  width: (100px / 2);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  width: 50px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>除了上面情况带有小括号，“/”符号会当作除法运算符之外，如果“/”符号在已有的数学表达式中时，也会被认作除法符号。如下面示例：<br>.box {<br>  width: 100px / 2 + 0;<br>}<br>另外，在 Sass 除法运算中，当用变量进行除法运算时，“/”符号也会自动被识别成除法，如下例所示：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$width</span>: 1000px;</div><div class=\"line\"><span class=\"variable\">$nums</span>: 10;</div><div class=\"line\"></div><div class=\"line\">.item &#123;</div><div class=\"line\">  width: <span class=\"variable\">$width</span> / 10;  </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.list &#123;</div><div class=\"line\">  width: <span class=\"variable\">$width</span> / <span class=\"variable\">$nums</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>综合上述，”/  ”符号被当作除法运算符时有以下几种情况：</p>\n<ul>\n<li>如果数值或它的任意部分是存储在一个变量中或是函数的返回值。</li>\n<li>如果数值被圆括号包围。</li>\n<li>如果数值是另一个数学表达式的一部分。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//SCSS</div><div class=\"line\">p &#123;</div><div class=\"line\">  font: 10px/8px;             // 纯 CSS，不是除法运算</div><div class=\"line\">  <span class=\"variable\">$width</span>: 1000px;</div><div class=\"line\">  width: <span class=\"variable\">$width</span>/2;            // 使用了变量，是除法运算</div><div class=\"line\">  width: round(1.5)/2;        // 使用了函数，是除法运算</div><div class=\"line\">  height: (500px/2);          // 使用了圆括号，是除法运算</div><div class=\"line\">  margin-left: 5px + 8px/2px; // 使用了加（+）号，是除法运算</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Sass 的除法运算还有一个情况。我们先回忆一下，在乘法运算时，如果两个值带有相同单位时，做乘法运算时，出来的结果并不是我们需要的结果。但在除法运算时，如果两个值带有相同的单位值时，除法运算之后会得到一个不带单位的数值。如下所示：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  width: (1000px / 100px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>出来的css：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  width: 10;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Sass运算-变量计算\"><a href=\"#Sass运算-变量计算\" class=\"headerlink\" title=\"[Sass运算]变量计算\"></a>[Sass运算]变量计算</h3><p>在 Sass 中除了可以使用数值进行运算之外，还可以使用变量进行计算，其实在前面章节的示例中也或多或少的向大家展示了。在 Sass 中使用变量进行计算，这使得 Sass 的数学运算功能变得更加实用。一起来看一个简单的示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$content</span>-width: 720px;</div><div class=\"line\"><span class=\"variable\">$sidebar</span>-width: 220px;</div><div class=\"line\"><span class=\"variable\">$gutter</span>: 20px;</div><div class=\"line\"></div><div class=\"line\">.container &#123;</div><div class=\"line\">  width: <span class=\"variable\">$content</span>-width + <span class=\"variable\">$sidebar</span>-width + <span class=\"variable\">$gutter</span>;</div><div class=\"line\">  margin: 0 auto;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Sass运算-数字运算\"><a href=\"#Sass运算-数字运算\" class=\"headerlink\" title=\"[Sass运算]数字运算\"></a>[Sass运算]数字运算</h3><p>在 Sass 运算中数字运算是较为常见的，数字运算包括前面介绍的：加法、减法、乘法和除法等运算。而且还可以通过括号来修改他们的运算先后顺序。和我们数学运算是一样的，一起来看个示例。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  width: ((220px + 720px) - 11 * 20 ) / 12 ;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Sass运算-颜色运算\"><a href=\"#Sass运算-颜色运算\" class=\"headerlink\" title=\"[Sass运算]颜色运算\"></a>[Sass运算]颜色运算</h3><p>所有算数运算都支持颜色值，并且是分段运算的。也就是说，红、绿和蓝各颜色分段单独进行运算。如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">p &#123;</div><div class=\"line\">  color: <span class=\"comment\">#010203 + #040506;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>计算公式为 01 + 04 = 05、02 + 05 = 07 和 03 + 06 = 09， 并且被合成为：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">p &#123;</div><div class=\"line\">  color: <span class=\"comment\">#050709;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>算数运算也能将数字和颜色值 一起运算，同样也是分段运算的。</p>\n<h3 id=\"Sass运算-字符运算\"><a href=\"#Sass运算-字符运算\" class=\"headerlink\" title=\"[Sass运算]字符运算\"></a>[Sass运算]字符运算</h3><p>在 Sass 中可以通过加法符号“+”来对字符串进行连接。例如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$content</span>: <span class=\"string\">\"Hello\"</span> + <span class=\"string\">\"\"</span> + <span class=\"string\">\"Sass!\"</span>;</div><div class=\"line\">.box:before &#123;</div><div class=\"line\">  content: <span class=\"string\">\" #&#123;<span class=\"variable\">$content</span>&#125; \"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.box:before &#123;</div><div class=\"line\">  content: <span class=\"string\">\" HelloSass! \"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>除了在变量中做字符连接运算之外，还可以直接通过 +，把字符连接在一起：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">  cursor: e + -resize;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">div &#123;</div><div class=\"line\">  cursor: e + -resize;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意，如果有引号的字符串被添加了一个没有引号的字符串 （也就是，带引号的字符串在 + 符号左侧）， 结果会是一个有引号的字符串。 同样的，如果一个没有引号的字符串被添加了一个有引号的字符串 （没有引号的字符串在 + 符号左侧）， 结果将是一个没有引号的字符串。 例如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">p:before &#123;</div><div class=\"line\">  content: <span class=\"string\">\"Foo \"</span> + Bar;</div><div class=\"line\">  font-family: sans- + <span class=\"string\">\"serif\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">p:before &#123;</div><div class=\"line\">  content: <span class=\"string\">\"Foo Bar\"</span>;</div><div class=\"line\">  font-family: sans-serif; &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"@if\"></a>@if</h3><p>@if 指令是一个 SassScript，它可以根据条件来处理样式块，如果条件为 true 返回一个样式块，反之 false 返回另一个样式块。在 Sass 中除了 @if 之，还可以配合 @else if 和 @else 一起使用。</p>\n<p>假设要控制一个元素隐藏或显示，我们就可以定义一个混合宏，通过 @if…@else… 来判断传进参数的值来控制 display 的值。如下所示：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//SCSS</div><div class=\"line\">@mixin blockOrHidden(<span class=\"variable\">$boolean</span>:<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  @<span class=\"keyword\">if</span> <span class=\"variable\">$boolean</span> &#123;</div><div class=\"line\">      @debug <span class=\"string\">\"<span class=\"variable\">$boolean</span> is #&#123;<span class=\"variable\">$boolean</span>&#125;\"</span>;</div><div class=\"line\">      display: block;</div><div class=\"line\">    &#125;</div><div class=\"line\">  @<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      @debug <span class=\"string\">\"<span class=\"variable\">$boolean</span> is #&#123;<span class=\"variable\">$boolean</span>&#125;\"</span>;</div><div class=\"line\">      display: none;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.block &#123;</div><div class=\"line\">  @include blockOrHidden;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.hidden&#123;</div><div class=\"line\">  @include blockOrHidden(<span class=\"literal\">false</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.block &#123;</div><div class=\"line\">  display: block;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.hidden &#123;</div><div class=\"line\">  display: none;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"@for循环\"></a>@for循环</h3><p>在制作网格系统的时候，大家应该对 .col1~.col12 这样的印象较深。在 CSS 中你需要一个一个去书写，但在 Sass 中，可以使用 @for 循环来完成。在 Sass 的 @for 循环中有两种方式：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">for</span> <span class=\"variable\">$i</span> from &lt;start&gt; through &lt;end&gt;</div><div class=\"line\">@<span class=\"keyword\">for</span> <span class=\"variable\">$i</span> from &lt;start&gt; to &lt;end&gt;</div></pre></td></tr></table></figure></p>\n<pre><code>    $i 表示变量\nstart 表示起始值\nend 表示结束值\n</code></pre><p>这两个的区别是关键字 through 表示包括 end 这个数，而 to则不包括 end 这个数。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">for</span> <span class=\"variable\">$i</span> from 1 through 3 &#123;</div><div class=\"line\">  .item-<span class=\"comment\">#&#123;$i&#125; &#123; width: 2em * $i; &#125;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.item-1 &#123;</div><div class=\"line\">  width: 2em;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.item-2 &#123;</div><div class=\"line\">  width: 4em;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.item-3 &#123;</div><div class=\"line\">  width: 6em;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对to：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">for</span> <span class=\"variable\">$i</span> from 1 to 3 &#123;</div><div class=\"line\">  .item-<span class=\"comment\">#&#123;$i&#125; &#123; width: 2em * $i; &#125;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.item-1 &#123;</div><div class=\"line\">  width: 2em;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.item-2 &#123;</div><div class=\"line\">  width: 4em;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>@for应用在网格系统生成各个格子 class 的代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//SCSS </div><div class=\"line\"><span class=\"variable\">$grid</span>-prefix: span !default;</div><div class=\"line\"><span class=\"variable\">$grid</span>-width: 60px !default;</div><div class=\"line\"><span class=\"variable\">$grid</span>-gutter: 20px !default;</div><div class=\"line\"></div><div class=\"line\">%grid &#123;</div><div class=\"line\">  <span class=\"built_in\">float</span>: left;</div><div class=\"line\">  margin-left: <span class=\"variable\">$grid</span>-gutter / 2;</div><div class=\"line\">  margin-right: <span class=\"variable\">$grid</span>-gutter / 2;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">for</span> <span class=\"variable\">$i</span> from 1 through 12 &#123;</div><div class=\"line\">  .<span class=\"comment\">#&#123;$grid-prefix&#125;#&#123;$i&#125;&#123;</span></div><div class=\"line\">    width: <span class=\"variable\">$grid</span>-width * <span class=\"variable\">$i</span> + <span class=\"variable\">$grid</span>-gutter * (<span class=\"variable\">$i</span> - 1);</div><div class=\"line\">    @extend %grid;</div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.span1, .span2, .span3, .span4, .span5, .span6, .span7, .span8, .span9, .span10, .span11, .span12 &#123;</div><div class=\"line\">  <span class=\"built_in\">float</span>: left;</div><div class=\"line\">  margin-left: 10px;</div><div class=\"line\">  margin-right: 10px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.span1 &#123;</div><div class=\"line\">  width: 60px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.span2 &#123;</div><div class=\"line\">  width: 140px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.span3 &#123;</div><div class=\"line\">  width: 220px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.span4 &#123;</div><div class=\"line\">  width: 300px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.span5 &#123;</div><div class=\"line\">  width: 380px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.span6 &#123;</div><div class=\"line\">  width: 460px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.span7 &#123;</div><div class=\"line\">  width: 540px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.span8 &#123;</div><div class=\"line\">  width: 620px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.span9 &#123;</div><div class=\"line\">  width: 700px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.span10 &#123;</div><div class=\"line\">  width: 780px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.span11 &#123;</div><div class=\"line\">  width: 860px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.span12 &#123;</div><div class=\"line\">  width: 940px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"@while循环\"></a>@while循环</h3><p>@while 指令也需要 SassScript 表达式（像其他指令一样），并且会生成不同的样式块，直到表达式值为 false 时停止循环。这个和 @for 指令很相似，只要 @while 后面的条件为 true 就会执行。</p>\n<p>这里有一个 @while 指令的简单用例：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//SCSS</div><div class=\"line\"><span class=\"variable\">$types</span>: 4;</div><div class=\"line\"><span class=\"variable\">$type</span>-width: 20px;</div><div class=\"line\"></div><div class=\"line\">@<span class=\"keyword\">while</span> <span class=\"variable\">$types</span> &gt; 0 &#123;</div><div class=\"line\">    .while-<span class=\"comment\">#&#123;$types&#125; &#123;</span></div><div class=\"line\">        width: <span class=\"variable\">$type</span>-width + <span class=\"variable\">$types</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"variable\">$types</span>: <span class=\"variable\">$types</span> - 1;</div><div class=\"line\">\t\t//sass里赋值用冒号。</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.while-4 &#123;</div><div class=\"line\">  width: 24px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.while-3 &#123;</div><div class=\"line\">  width: 23px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.while-2 &#123;</div><div class=\"line\">  width: 22px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.while-1 &#123;</div><div class=\"line\">  width: 21px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"each循环\"><a href=\"#each循环\" class=\"headerlink\" title=\"@each循环\"></a>@each循环</h3><p>@each 循环就是去遍历一个列表，然后从列表中取出对应的值。<br>@each 循环指令的形式：<br>@each $var in <list><br>在下面的例子中你可以看到，$var 就是一个变量名，<list> 是一个 SassScript 表达式，他将返回一个列表值。变量 $var 会在列表中做遍历，并且遍历出与 $var 对应的样式块。这有一个 @each 指令的简单示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$list</span>: adam john wynn mason kuroir;//<span class=\"variable\">$list</span> 就是一个列表</div><div class=\"line\"></div><div class=\"line\">@mixin author-images &#123;</div><div class=\"line\">    @each <span class=\"variable\">$author</span> <span class=\"keyword\">in</span> <span class=\"variable\">$list</span> &#123;</div><div class=\"line\">        .photo-<span class=\"comment\">#&#123;$author&#125; &#123;</span></div><div class=\"line\">            background: url(<span class=\"string\">\"/images/avatars/#&#123;<span class=\"variable\">$author</span>&#125;.png\"</span>) no-repeat;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.author-bio &#123;</div><div class=\"line\">    @include author-images;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.author-bio .photo-adam &#123;</div><div class=\"line\">  background: url(<span class=\"string\">\"/images/avatars/adam.png\"</span>) no-repeat; &#125;</div><div class=\"line\">.author-bio .photo-john &#123;</div><div class=\"line\">  background: url(<span class=\"string\">\"/images/avatars/john.png\"</span>) no-repeat; &#125;</div><div class=\"line\">.author-bio .photo-wynn &#123;</div><div class=\"line\">  background: url(<span class=\"string\">\"/images/avatars/wynn.png\"</span>) no-repeat; &#125;</div><div class=\"line\">.author-bio .photo-mason &#123;</div><div class=\"line\">  background: url(<span class=\"string\">\"/images/avatars/mason.png\"</span>) no-repeat; &#125;</div><div class=\"line\">.author-bio .photo-kuroir &#123;</div><div class=\"line\">  background: url(<span class=\"string\">\"/images/avatars/kuroir.png\"</span>) no-repeat; &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Sass的函数简介\"><a href=\"#Sass的函数简介\" class=\"headerlink\" title=\"Sass的函数简介\"></a>Sass的函数简介</h2><p>在 Sass 中除了可以定义变量，具有 @extend、%placeholder 和 mixins 等特性之外，还自备了一系列的函数功能。其主要包括：</p>\n<ul>\n<li>字符串函数</li>\n<li>数字函数</li>\n<li>列表函数</li>\n<li>颜色函数</li>\n<li>Introspection 函数</li>\n<li>三元函数等<br>当然除了自备的函数功能之外，我们还可以根据自己的需求定义函数功能，常常称之为自定义函数。<h3 id=\"字符串函数-unquote-函数\"><a href=\"#字符串函数-unquote-函数\" class=\"headerlink\" title=\"字符串函数-unquote()函数\"></a>字符串函数-unquote()函数</h3>字符串函数顾名思意是用来处理字符串的函数。Sass 的字符串函数主要包括两个函数：</li>\n<li>unquote($string)：删除字符串中的引号； - quote($string)：给字符串添加引号。<br>unquote() 函数主要是用来删除一个字符串中的引号，如果这个字符串没有带有引号，将返回原始的字符串。<br>注意：从测试的效果中可以看出，unquote( ) 函数只能删除字符串最前和最后的引号（双引号或单引号），而无法删除字符串中间的引号。如果字符没有带引号，返回的将是字符串本身。<br>quote() 函数刚好与 unquote() 函数功能相反，主要用来给字符串添加引号。如果字符串，自身带有引号会统一换成双引号 “”。<br>使用 quote() 函数只能给字符串增加双引号，而且字符串中间有单引号或者空格时，需要用单引号或双引号括起，否则编译的时候将会报错。<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.test1 &#123;</div><div class=\"line\">    content:  quote(Hello Sass);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样使用，编译器马上会报错。解决方案就是去掉空格，或者加上引号。<br>同时 quote() 碰到特殊符号，比如： !、?、&gt; 等，除中折号 - 和 下划线_ 都需要使用双引号括起，否则编译器在进行编译的时候同样会报错。</p>\n<h3 id=\"字符串函数-To-upper-case-、To-lower-case\"><a href=\"#字符串函数-To-upper-case-、To-lower-case\" class=\"headerlink\" title=\"字符串函数-To-upper-case()、To-lower-case()\"></a>字符串函数-To-upper-case()、To-lower-case()</h3><p>To-upper-case()</p>\n<p>To-upper-case() 函数将字符串小写字母转换成大写字母。如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//SCSS</div><div class=\"line\">.test &#123;</div><div class=\"line\">  text: to-upper-case(aaaaa);</div><div class=\"line\">  text: to-upper-case(aA<span class=\"_\">-a</span>AAA-aaa);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//CSS</div><div class=\"line\">.test &#123;</div><div class=\"line\">  text: AAAAA;</div><div class=\"line\">  text: AA-AAAA-AAA;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>To-lower-case() 函数 与 To-upper-case() 刚好相反，将字符串转换成小写字母。</p>\n<h3 id=\"数字函数简介\"><a href=\"#数字函数简介\" class=\"headerlink\" title=\"数字函数简介\"></a>数字函数简介</h3><p>Sass 中的数字函数提要针对数字方面提供一系列的函数功能：</p>\n<ul>\n<li>percentage($value)：将一个不带单位的数转换成百分比值；</li>\n<li>round($value)：将数值四舍五入，转换成一个最接近的整数；</li>\n<li>ceil($value)：将大于自己的小数转换成下一位整数；</li>\n<li>floor($value)：将一个数去除他的小数部分；</li>\n<li>abs($value)：返回一个数的绝对值；</li>\n<li>min($numbers…)：找出几个数值之间的最小值；</li>\n<li>max($numbers…)：找出几个数值之间的最大值；</li>\n<li>random(): 获取随机数</li>\n</ul>\n<h4 id=\"数字函数-percentage\"><a href=\"#数字函数-percentage\" class=\"headerlink\" title=\"数字函数-percentage()\"></a>数字函数-percentage()</h4><p>percentage()函数主要是将一个不带单位的数字转换成百分比形式：<br>.footer{<br>    width : percentage(.2)<br>}<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.footer&#123;</div><div class=\"line\">    width : 20%</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果您转换的值是一个带有单位的值，那么在编译的时候会报错误信息</p>\n<h4 id=\"数字函数-round-函数\"><a href=\"#数字函数-round-函数\" class=\"headerlink\" title=\"数字函数-round()函数\"></a>数字函数-round()函数</h4><p>round() 函数可以将一个数四舍五入为一个最接近的整数<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.footer &#123;</div><div class=\"line\">   width:round(12.3px)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.footer &#123;</div><div class=\"line\">  width: 12px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"数字函数-ceil-函数\"><a href=\"#数字函数-ceil-函数\" class=\"headerlink\" title=\"数字函数-ceil()函数\"></a>数字函数-ceil()函数</h4><p>ceil() 函数将一个数转换成最接近于自己的整数，会将一个大于自身的任何小数转换成大于本身 1 的整数。也就是只做入，不做舍的计算：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.footer &#123;</div><div class=\"line\">   width:ceil(12.3px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.footer &#123;</div><div class=\"line\">  width: 13px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"数字函数-floor-函数\"><a href=\"#数字函数-floor-函数\" class=\"headerlink\" title=\"数字函数-floor()函数\"></a>数字函数-floor()函数</h4><p>floor() 函数刚好与 ceil() 函数功能相反，其主要将一个数去除其小数部分，并且不做任何的进位。也就是只做舍，不做入的计算：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.footer &#123;</div><div class=\"line\">   width:floor(12.3px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.footer &#123;</div><div class=\"line\">  width: 12px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"数字函数-abs-函数\"><a href=\"#数字函数-abs-函数\" class=\"headerlink\" title=\"数字函数-abs()函数\"></a>数字函数-abs()函数</h4><p>abs( ) 函数会返回一个数的绝对值。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.footer &#123;</div><div class=\"line\">   width:abs(-12.3px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.footer &#123;</div><div class=\"line\">  width: 12.3px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"数字函数-min-函数、max-函数\"><a href=\"#数字函数-min-函数、max-函数\" class=\"headerlink\" title=\"数字函数-min()函数、max()函数\"></a>数字函数-min()函数、max()函数</h4><p>min() 函数功能主要是在多个数之中找到最小的一个，这个函数可以设置任意多个参数<br>不过在 min() 函数中同时出现两种不同类型的单位，将会报错误信息<br>max() 函数和 min() 函数一样，不同的是，max() 函数用来获取一系列数中的最大那个值</p>\n<h4 id=\"数字函数-random-函数\"><a href=\"#数字函数-random-函数\" class=\"headerlink\" title=\"数字函数-random()函数\"></a>数字函数-random()函数</h4><p>random() 函数是用来获取一个随机数</p>\n<h3 id=\"列表函数简介\"><a href=\"#列表函数简介\" class=\"headerlink\" title=\"列表函数简介\"></a>列表函数简介</h3><p>列表函数主要包括一些对列表参数的函数使用，主要包括以下几种：</p>\n<ul>\n<li>length($list)：返回一个列表的长度值；</li>\n<li>nth($list, $n)：返回一个列表中指定的某个标签值</li>\n<li>join($list1, $list2, [$separator])：将两个列给连接在一起，变成一个列表；</li>\n<li>append($list1, $val, [$separator])：将某个值放在列表的最后；</li>\n<li>zip($lists…)：将几个列表结合成一个多维的列表；</li>\n<li>index($list, $value)：返回一个值在列表中的位置值。<h4 id=\"length-函数\"><a href=\"#length-函数\" class=\"headerlink\" title=\"length()函数\"></a>length()函数</h4>length() 函数主要用来返回一个列表中有几个值，简单点说就是返回列表清单中有多少个值：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt;&gt; length(10px)</div><div class=\"line\">1</div><div class=\"line\">&gt;&gt; length(10px 20px (border 1px solid) 2em)</div><div class=\"line\">4</div><div class=\"line\">&gt;&gt; length(border 1px solid)</div><div class=\"line\">3</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>length() 函数中的列表参数之间使用空格隔开，不能使用逗号，否则函数将会出错.</p>\n<h4 id=\"nth-函数\"><a href=\"#nth-函数\" class=\"headerlink\" title=\"nth()函数\"></a>nth()函数</h4><p><strong>nth($list,$n)</strong><br>nth() 函数用来指定列表中某个位置的值。不过在 Sass 中，nth() 函数和其他语言不同，1 是指列表中的第一个标签值，2 是指列给中的第二个标签值，依此类推。如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt;&gt; nth(10px 20px 30px,1)</div><div class=\"line\">10px</div><div class=\"line\">&gt;&gt; nth((Helvetica,Arial,sans-serif),2)</div><div class=\"line\"><span class=\"string\">\"Arial\"</span></div><div class=\"line\">&gt;&gt; nth((1px solid red) border-top green,1)</div><div class=\"line\">(1px <span class=\"string\">\"solid\"</span> <span class=\"comment\">#ff0000)</span></div></pre></td></tr></table></figure></p>\n<p>注：在 nth($list,$n) 函数中的 $n 必须是大于 0 的整数.</p>\n<h4 id=\"join-函数\"><a href=\"#join-函数\" class=\"headerlink\" title=\"join()函数\"></a>join()函数</h4><p>join() 函数是将两个列表连接合并成一个列表。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt;&gt; join(10px 20px, 30px 40px)</div><div class=\"line\">(10px 20px 30px 40px)</div><div class=\"line\">&gt;&gt; join((blue,red),(<span class=\"comment\">#abc,#def))</span></div><div class=\"line\">(<span class=\"comment\">#0000ff, #ff0000, #aabbcc, #ddeeff)</span></div><div class=\"line\">&gt;&gt; join((blue,red),(<span class=\"comment\">#abc #def))</span></div><div class=\"line\">(<span class=\"comment\">#0000ff, #ff0000, #aabbcc, #ddeeff)</span></div></pre></td></tr></table></figure></p>\n<p>不过 join() 只能将两个列表连接成一个列表，如果直接连接两个以上的列表将会报错.<br>但很多时候不只碰到两个列表连接成一个列表，这个时候就需要将多个 join() 函数合并在一起使用:<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt;&gt; join((blue red), join((<span class=\"comment\">#abc #def),(#dee #eff)))</span></div><div class=\"line\">(<span class=\"comment\">#0000ff #ff0000 #aabbcc #ddeeff #ddeeee #eeffff)</span></div></pre></td></tr></table></figure></p>\n<p>在 join() 函数中还有一个很特别的参数 $separator，这个参数主要是用来给列表函数连接列表值是，使用的分隔符号，默认值为 auto。<br>建议大家使用 join() 函数合并列表项的时候就明确指定 $separator 参数.</p>\n<h4 id=\"append-函数\"><a href=\"#append-函数\" class=\"headerlink\" title=\"append()函数\"></a>append()函数</h4><p>append() 函数是用来将某个值插入到列表中，并且处于最末位。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt;&gt; append(10px 20px ,30px)</div><div class=\"line\">(10px 20px 30px)</div><div class=\"line\">&gt;&gt; append((10px,20px),30px)</div><div class=\"line\">(10px, 20px, 30px)</div><div class=\"line\">&gt;&gt; append(green,red)</div><div class=\"line\">(<span class=\"comment\">#008000 #ff0000)</span></div><div class=\"line\">&gt;&gt; append(red,(green,blue))</div><div class=\"line\">(<span class=\"comment\">#ff0000 (#008000, #0000ff))</span></div></pre></td></tr></table></figure></p>\n<p>当然，在 append() 函数中，可以显示的设置 $separator 参数，<br>如果取值为 comma 将会以逗号分隔列表项<br>如果取值为 space 将会以空格分隔列表项</p>\n<h4 id=\"zip-函数\"><a href=\"#zip-函数\" class=\"headerlink\" title=\"zip()函数\"></a>zip()函数</h4><p>zip()函数将多个列表值转成一个多维的列表：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt;&gt; zip(1px 2px 3px,solid dashed dotted,green blue red)</div><div class=\"line\">((1px <span class=\"string\">\"solid\"</span> <span class=\"comment\">#008000), (2px \"dashed\" #0000ff), (3px \"dotted\" #ff0000))</span></div></pre></td></tr></table></figure></p>\n<p>在使用zip()函数时，每个单一的列表个数值必须是相同的.</p>\n<h4 id=\"index-函数\"><a href=\"#index-函数\" class=\"headerlink\" title=\"index()函数\"></a>index()函数</h4><p>index() 函数类似于索引一样，主要让你找到某个值在列表中所处的位置。在 Sass 中，第一个值就是1，第二个值就是 2，依此类推：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt;&gt; index(1px solid red, 1px)</div><div class=\"line\">1</div><div class=\"line\">&gt;&gt; index(1px solid red, solid)</div><div class=\"line\">2</div><div class=\"line\">&gt;&gt; index(1px solid red, red)</div><div class=\"line\">3</div></pre></td></tr></table></figure></p>\n<p>在 index() 函数中，如果指定的值不在列表中（没有找到相应的值），那么返回的值将是 false，相反就会返回对应的值在列表中所处的位置。</p>\n<h3 id=\"Introspection函数\"><a href=\"#Introspection函数\" class=\"headerlink\" title=\"Introspection函数\"></a>Introspection函数</h3><p>Introspection 函数包括了几个判断型函数：</p>\n<ul>\n<li>type-of($value)：返回一个值的类型</li>\n<li>unit($number)：返回一个值的单位</li>\n<li>unitless($number)：判断一个值是否带有单位</li>\n<li>comparable($number-1, $number-2)：判断两个值是否可以做加、减和合并.<h4 id=\"Introspection-函数-type-of\"><a href=\"#Introspection-函数-type-of\" class=\"headerlink\" title=\"Introspection 函数 -type-of()\"></a>Introspection 函数 -type-of()</h4>type-of() 函数主要用来判断一个值是属于什么类型：</li>\n</ul>\n<p>返回值：</p>\n<ul>\n<li>number 为数值型。</li>\n<li>string 为字符串型。</li>\n<li>bool 为布尔型。</li>\n<li>color 为颜色型<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt;&gt; <span class=\"built_in\">type</span>-of(100)</div><div class=\"line\"><span class=\"string\">\"number\"</span></div><div class=\"line\">&gt;&gt; <span class=\"built_in\">type</span>-of(100px)</div><div class=\"line\"><span class=\"string\">\"number\"</span></div><div class=\"line\">&gt;&gt; <span class=\"built_in\">type</span>-of(<span class=\"string\">\"asdf\"</span>)</div><div class=\"line\"><span class=\"string\">\"string\"</span></div><div class=\"line\">&gt;&gt; <span class=\"built_in\">type</span>-of(asdf)</div><div class=\"line\"><span class=\"string\">\"string\"</span></div><div class=\"line\">&gt;&gt; <span class=\"built_in\">type</span>-of(<span class=\"literal\">true</span>)</div><div class=\"line\"><span class=\"string\">\"bool\"</span></div><div class=\"line\">&gt;&gt; <span class=\"built_in\">type</span>-of(<span class=\"literal\">false</span>)</div><div class=\"line\"><span class=\"string\">\"bool\"</span></div><div class=\"line\">&gt;&gt; <span class=\"built_in\">type</span>-of(<span class=\"comment\">#fff)</span></div><div class=\"line\"><span class=\"string\">\"color\"</span></div><div class=\"line\">&gt;&gt; <span class=\"built_in\">type</span>-of(blue)</div><div class=\"line\"><span class=\"string\">\"color\"</span></div><div class=\"line\">&gt;&gt; <span class=\"built_in\">type</span>-of(1 / 2 = 1)</div><div class=\"line\"><span class=\"string\">\"string\"</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"unit-函数\"><a href=\"#unit-函数\" class=\"headerlink\" title=\"unit()函数\"></a>unit()函数</h4><p>unit() 函数主要是用来获取一个值所使用的单位，碰到复杂的计算时，其能根据运算得到一个“多单位组合”的值，不过只充许乘、除运算：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt;&gt; unit(100)</div><div class=\"line\"><span class=\"string\">\"\"</span></div><div class=\"line\">&gt;&gt; unit(100px)</div><div class=\"line\"><span class=\"string\">\"px\"</span></div><div class=\"line\">&gt;&gt; unit(20%)</div><div class=\"line\"><span class=\"string\">\"%\"</span></div><div class=\"line\">&gt;&gt; unit(1em)</div><div class=\"line\"><span class=\"string\">\"em\"</span></div><div class=\"line\">&gt;&gt; unit(10px * 3em)</div><div class=\"line\"><span class=\"string\">\"em*px\"</span></div><div class=\"line\">&gt;&gt; unit(10px / 3em)</div><div class=\"line\"><span class=\"string\">\"px/em\"</span></div><div class=\"line\">&gt;&gt; unit(10px * 2em / 3cm / 1rem)</div><div class=\"line\"><span class=\"string\">\"em/rem\"</span></div></pre></td></tr></table></figure></p>\n<p>但加、减碰到不同单位时，unit() 函数将会报错，除 px 与 cm、mm 运算之外.</p>\n<h4 id=\"unitless-函数\"><a href=\"#unitless-函数\" class=\"headerlink\" title=\"unitless()函数\"></a>unitless()函数</h4><p>unitless() 函数相对来说简单明了些，只是用来判断一个值是否带有单位，如果不带单位返回的值为 true，带单位返回的值为 false：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&gt;&gt; unitless(100)</div><div class=\"line\"><span class=\"literal\">true</span></div><div class=\"line\">&gt;&gt; unitless(100px)</div><div class=\"line\"><span class=\"literal\">false</span></div><div class=\"line\">&gt;&gt; unitless(100em)</div><div class=\"line\"><span class=\"literal\">false</span></div><div class=\"line\">&gt;&gt; unitless(100%)</div><div class=\"line\"><span class=\"literal\">false</span></div><div class=\"line\">&gt;&gt; unitless(1 /2 )</div><div class=\"line\"><span class=\"literal\">true</span></div><div class=\"line\">&gt;&gt; unitless(1 /2 + 2 )</div><div class=\"line\"><span class=\"literal\">true</span></div><div class=\"line\">&gt;&gt; unitless(1px /2 + 2 )</div><div class=\"line\"><span class=\"literal\">false</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"comparable-函数\"><a href=\"#comparable-函数\" class=\"headerlink\" title=\"comparable()函数\\\"></a>comparable()函数\\</h4><p>comparable() 函数主要是用来判断两个数是否可以进行“加，减”以及“合并”。如果可以返回的值为 true，如果不可以返回的值是 false</p>\n<h4 id=\"Miscellaneous函数\"><a href=\"#Miscellaneous函数\" class=\"headerlink\" title=\"Miscellaneous函数\"></a>Miscellaneous函数</h4><p>在这里把 Miscellaneous 函数称为三元条件函数，主要因为他和 JavaScript 中的三元判断非常的相似。他有两个值，当条件成立返回一种值，当条件不成立时返回另一种值：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable\">$condition</span>,<span class=\"variable\">$if</span>-true,<span class=\"variable\">$if</span>-false)</div></pre></td></tr></table></figure></p>\n<h4 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h4><p>Sass 的 map 常常被称为数据地图，也有人称其为数组，因为他总是以 key:value 成对的出现，但其更像是一个 JSON 数据。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"string\">\"employees\"</span>: [</div><div class=\"line\">&#123; <span class=\"string\">\"firstName\"</span>:<span class=\"string\">\"John\"</span> , <span class=\"string\">\"lastName\"</span>:<span class=\"string\">\"Doe\"</span> &#125;,</div><div class=\"line\">&#123; <span class=\"string\">\"firstName\"</span>:<span class=\"string\">\"Anna\"</span> , <span class=\"string\">\"lastName\"</span>:<span class=\"string\">\"Smith\"</span> &#125;,</div><div class=\"line\">&#123; <span class=\"string\">\"firstName\"</span>:<span class=\"string\">\"Peter\"</span> , <span class=\"string\">\"lastName\"</span>:<span class=\"string\">\"Jones\"</span> &#125;</div><div class=\"line\">]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>对于 Sass 的 map，还可以让 map 嵌套 map。其实就是 map 的某一个 key 当成 map，里面可以继续放一对或者多对 key:value：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$map</span>: (</div><div class=\"line\">    key1: value1,</div><div class=\"line\">    key2: (</div><div class=\"line\">        key-1: value-1,</div><div class=\"line\">        key-2: value-2,</div><div class=\"line\">    ),</div><div class=\"line\">    key3: value3</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>map 的嵌套实用性也非常的强，大家可能有碰到过换皮肤的项目，可能每一套皮肤对应的颜色蛮多的，那么使用此功能来管理颜色的变量就非常的有条理性，便于维护与管理。你可以这样使用：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$theme</span>-color: (</div><div class=\"line\">    default: (</div><div class=\"line\">        bgcolor: <span class=\"comment\">#fff,</span></div><div class=\"line\">        text-color: <span class=\"comment\">#444,</span></div><div class=\"line\">        link-color: <span class=\"comment\">#39f</span></div><div class=\"line\">    ),</div><div class=\"line\">    primary:(</div><div class=\"line\">        bgcolor: <span class=\"comment\">#000,</span></div><div class=\"line\">        text-color:<span class=\"comment\">#fff,</span></div><div class=\"line\">        link-color: <span class=\"comment\">#93f</span></div><div class=\"line\">    ),</div><div class=\"line\">    negative: (</div><div class=\"line\">        bgcolor: <span class=\"comment\">#f36,</span></div><div class=\"line\">        text-color: <span class=\"comment\">#fefefe,</span></div><div class=\"line\">        link-color: <span class=\"comment\">#d4e</span></div><div class=\"line\">    )</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<h3 id=\"Sass-Maps的函数\"><a href=\"#Sass-Maps的函数\" class=\"headerlink\" title=\"Sass Maps的函数\"></a>Sass Maps的函数</h3><p>前面介绍了使用 map 来管理变量，但要在 Sass 中获取变量，或者对 map 做更多有意义的操作，我们必须借助于 map 的函数功能。在 Sass 中 map 自身带了七个函数：</p>\n<ul>\n<li>map-get($map,$key)：根据给定的 key 值，返回 map 中相关的值。</li>\n<li>map-merge($map1,$map2)：将两个 map 合并成一个新的 map。</li>\n<li>map-remove($map,$key)：从 map 中删除一个 key，返回一个新 map。</li>\n<li>map-keys($map)：返回 map 中所有的 key。</li>\n<li>map-values($map)：返回 map 中所有的 value。</li>\n<li>map-has-key($map,$key)：根据给定的 key 值判断 map 是否有对应的 value 值，如果有返回 true，否则返回 false。</li>\n<li>keywords($args)：返回一个函数的参数，这个参数可以动态的设置 key 和 value。</li>\n</ul>\n<h4 id=\"Sass-Maps的函数-map-get-map-key\"><a href=\"#Sass-Maps的函数-map-get-map-key\" class=\"headerlink\" title=\"Sass Maps的函数-map-get($map,$key)\"></a>Sass Maps的函数-map-get($map,$key)</h4><p>map-get($map,$key) 函数的作用是根据 $key 参数，返回 $key 在 $map 中对应的 value 值。如果 $key 不存在 $map中，将返回 null 值。此函数包括两个参数：</p>\n<ul>\n<li>$map：定义好的 map。</li>\n<li>$key：需要遍历的 key。<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$social</span>-colors: (</div><div class=\"line\">    dribble: <span class=\"comment\">#ea4c89,</span></div><div class=\"line\">    facebook: <span class=\"comment\">#3b5998,</span></div><div class=\"line\">    github: <span class=\"comment\">#171515,</span></div><div class=\"line\">    google: <span class=\"comment\">#db4437,</span></div><div class=\"line\">    twitter: <span class=\"comment\">#55acee</span></div><div class=\"line\">);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>假设要获取 facebook 键值对应的值 #3b5998，我们就可以使用 map-get() 函数来实现：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.btn-dribble&#123;</div><div class=\"line\">  color: map-get(<span class=\"variable\">$social</span>-colors,facebook);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.btn-dribble &#123;</div><div class=\"line\">  color: <span class=\"comment\">#3b5998;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们来看另一种情况，假设 $social-colors 这个 map 没有 $weibo 这个 key:<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.btn-weibo&#123;</div><div class=\"line\">  font-size: 12px;</div><div class=\"line\">  color: map-get(<span class=\"variable\">$social</span>-colors,weibo);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.btn-weibo &#123;</div><div class=\"line\">  font-size: 12px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从 编译出来的 CSS 可以得知，如果 $key 不在 $map 中，不会编译出 CSS，其实在 Sass 中，map-get($social- colors,weibo) 返回了一个 null 值。但在编译出来的 CSS 中，你只知道他没有编译出样式，而且在命令终端编译时，也没有任何错误或者警告信息。说实话，你并不知道他为什么编译不出来样式，或者说他已返回了值为 null。体验不强，也不好排错。其实如果我们自定义一个函数，另外加个判断，那就截然不同。</p>\n<h4 id=\"Sass-Maps的函数-map-has-key-map-key\"><a href=\"#Sass-Maps的函数-map-has-key-map-key\" class=\"headerlink\" title=\"Sass Maps的函数-map-has-key($map,$key)\"></a>Sass Maps的函数-map-has-key($map,$key)</h4><p>map-has-key($map,$key) 函数将返回一个布尔值。当 $map 中有这个 $key，则函数返回 true，否则返回 false。<br>前面的示例，当 $key 不在 $map 中时，使用 map-get($map,$key) 函数将返回一个 null 值。但对于开发人员，并看不到任何提示信息。如果使用 map-has-key($map,$key) 函数就可以改变这一状态。我们来看一个简单的示例。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">if</span> map-has-key(<span class=\"variable\">$social</span>-colors,facebook)&#123;</div><div class=\"line\">    .btn-facebook &#123;</div><div class=\"line\">        color: map-get(<span class=\"variable\">$social</span>-colors,facebook);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; @<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    @warn <span class=\"string\">\"No color found for faceboo in <span class=\"variable\">$social</span>-colors map. Property ommitted.\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.btn-fackbook&#123;</div><div class=\"line\">    color: <span class=\"comment\">#3b5998;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面看到的示例是 facebook 这个 key 已存在 $social-colors 这个 map 当中。所以能正常编译。如果你手误，将 facebook 输错了：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">if</span> map-has-key(<span class=\"variable\">$social</span>-colors,faceboo)&#123;</div><div class=\"line\">    .btn-facebook &#123;</div><div class=\"line\">        color: map-get(<span class=\"variable\">$social</span>-colors,facebook);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; @<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    @warn <span class=\"string\">\"No color found for faceboo in <span class=\"variable\">$social</span>-colors map. Property ommitted.\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个时候，你编译出来的 CSS 代码中，不会有新代码添加，但在命令终端可以看到提示信息：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">WARNING: No color found <span class=\"keyword\">for</span> faceboo <span class=\"keyword\">in</span> <span class=\"variable\">$social</span>-colors map. Property ommitted.</div><div class=\"line\">         on line 25 of test.scss</div></pre></td></tr></table></figure></p>\n<p>是不是非常的友好。但总觉得这样写是傻傻的，总不可能每获取一个 key 都写一个 @if 语句吧。其实不用这么复杂，我们可以自定义一个函数，比如 colors():<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">function</span> colors(<span class=\"variable\">$color</span>)&#123;</div><div class=\"line\">    @<span class=\"keyword\">if</span> not map-has-key(<span class=\"variable\">$social</span>-colors,<span class=\"variable\">$color</span>)&#123;</div><div class=\"line\">        @warn <span class=\"string\">\"No color found for `#&#123;<span class=\"variable\">$color</span>&#125;` in <span class=\"variable\">$social</span>-colors map. Property omitted.\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @<span class=\"built_in\">return</span> map-get(<span class=\"variable\">$social</span>-colors,<span class=\"variable\">$color</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>有了这个函数之后，我们就可以这样使用<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.btn-dribble &#123;</div><div class=\"line\">    color: colors(dribble);</div><div class=\"line\">&#125;</div><div class=\"line\">.btn-facebook &#123;</div><div class=\"line\">    color: colors(facebook);</div><div class=\"line\">&#125;</div><div class=\"line\">.btn-github &#123;</div><div class=\"line\">    color: colors(github);</div><div class=\"line\">&#125;</div><div class=\"line\">.btn-google &#123;</div><div class=\"line\">    color: colors(google);</div><div class=\"line\">&#125;</div><div class=\"line\">.btn-twitter &#123;</div><div class=\"line\">    color: colors(twitter);</div><div class=\"line\">&#125;</div><div class=\"line\">.btn-weibo &#123;</div><div class=\"line\">    color: colors(weibo);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>编译出来的 CSS:<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.btn-dribble &#123;</div><div class=\"line\">  color: <span class=\"comment\">#ea4c89;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-facebook &#123;</div><div class=\"line\">  color: <span class=\"comment\">#3b5998;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-github &#123;</div><div class=\"line\">  color: <span class=\"comment\">#171515;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-google &#123;</div><div class=\"line\">  color: <span class=\"comment\">#db4437;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-twitter &#123;</div><div class=\"line\">  color: <span class=\"comment\">#55acee;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>同时你不难发现，命令终端提示信息：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">WARNING: No color found <span class=\"keyword\">for</span> `weibo` <span class=\"keyword\">in</span> <span class=\"variable\">$social</span>-colors map. Property omitted.</div><div class=\"line\">         on line 13 of test.scss</div></pre></td></tr></table></figure></p>\n<p>那是在 $social-colors 这个 map 中没有 weibo 这个 key。是不是很有意思。</p>\n<p>当然，如果你对 Sass 的指令熟悉的话，上面编译出来的 CSS 可以使用 @each：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@each <span class=\"variable\">$social</span>-network,<span class=\"variable\">$social</span>-color <span class=\"keyword\">in</span> <span class=\"variable\">$social</span>-colors &#123;</div><div class=\"line\">    .btn-<span class=\"comment\">#&#123;$social-network&#125; &#123;</span></div><div class=\"line\">        color: colors(<span class=\"variable\">$social</span>-network);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Sass-Maps的函数-map-keys-map\"><a href=\"#Sass-Maps的函数-map-keys-map\" class=\"headerlink\" title=\"Sass Maps的函数-map-keys($map)\"></a>Sass Maps的函数-map-keys($map)</h4><p>map-keys($map) 函数将会返回 $map 中的所有 key。这些值赋予给一个变量，那他就是一个列表。如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$list</span>: map-keys(<span class=\"variable\">$social</span>-colors);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">function</span> colors(<span class=\"variable\">$color</span>)&#123;</div><div class=\"line\">    <span class=\"variable\">$names</span>: map-keys(<span class=\"variable\">$social</span>-colors);</div><div class=\"line\">    @<span class=\"keyword\">if</span> not index(<span class=\"variable\">$names</span>,<span class=\"variable\">$color</span>)&#123;</div><div class=\"line\">        @warn <span class=\"string\">\"Waring: `#&#123;<span class=\"variable\">$color</span>&#125; is not a valid color name.`\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @<span class=\"built_in\">return</span> map-get(<span class=\"variable\">$social</span>-colors,<span class=\"variable\">$color</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面代码中最不同之处，我们使 用map-key s将 $social-colors 这个 map 的所有 key 取出，并赋予给一个名 为 $names 的列表。然后通过 index($names,$color) 返回 $color 在 $names 位置，如果这个位置不存在，将返回提示信息，如果存在将返回正确的值。<br>同样，也可以通过 @each 或者 @for 遍历出所有值：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@each <span class=\"variable\">$name</span> <span class=\"keyword\">in</span> map-keys(<span class=\"variable\">$social</span>-colors)&#123;</div><div class=\"line\">    .btn-<span class=\"comment\">#&#123;$name&#125;&#123;</span></div><div class=\"line\">        color: colors(<span class=\"variable\">$name</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>用for：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">for</span> <span class=\"variable\">$i</span> from 1 through length(map-keys(<span class=\"variable\">$social</span>-colors))&#123;</div><div class=\"line\">    .btn-<span class=\"comment\">#&#123;nth(map-keys($social-colors),$i)&#125; &#123;</span></div><div class=\"line\">        color: colors(nth(map-keys(<span class=\"variable\">$social</span>-colors),<span class=\"variable\">$i</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>虽然使用的方法不一样，但最终得到的 CSS 是一样的：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.btn-dribble &#123;</div><div class=\"line\">  color: <span class=\"comment\">#ea4c89;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-facebook &#123;</div><div class=\"line\">  color: <span class=\"comment\">#3b5998;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-github &#123;</div><div class=\"line\">  color: <span class=\"comment\">#171515;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-google &#123;</div><div class=\"line\">  color: <span class=\"comment\">#db4437;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.btn-twitter &#123;</div><div class=\"line\">  color: <span class=\"comment\">#55acee;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Sass-Maps的函数-map-values-map-、map-merge-map1-map2\"><a href=\"#Sass-Maps的函数-map-values-map-、map-merge-map1-map2\" class=\"headerlink\" title=\"Sass Maps的函数-map-values($map)、map-merge($map1,$map2)\"></a>Sass Maps的函数-map-values($map)、map-merge($map1,$map2)</h4><p>map-values($map) 函数类似于 map-keys($map) 功能，不同的是 map-values($map )获取的是 $map 的所有 value 值，可以说也将是一个列表。而且，map-values($map) 中如果有相同的 value 也将会全部获取出来。<br>map-merge($map1,$map2) 函数是将 $map1 和 $map2 合并，然后得到一个新的 $map。如果你要快速将新的值插入到 $map 中的话，这种方法是最佳方法。假设我们有两个 $map:<br>$color: (<br>    text: #f36,<br>    link: #f63,<br>    border: #ddd,<br>    backround: #fff<br>);<br>$typo:(<br>    font-size: 12px,<br>    line-height: 1.6<br>);<br>如果希望将这两个 $map 合并成一个 map，我们只要这样做：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$newmap</span>: map-merge(<span class=\"variable\">$color</span>,<span class=\"variable\">$typo</span>);</div></pre></td></tr></table></figure></p>\n<p>将会生成一个新的 map:<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$newmap</span>:(</div><div class=\"line\">    text: <span class=\"comment\">#f36,</span></div><div class=\"line\">    link: <span class=\"comment\">#f63,</span></div><div class=\"line\">    border: <span class=\"comment\">#ddd,</span></div><div class=\"line\">    background: <span class=\"comment\">#fff,</span></div><div class=\"line\">    font-size: 12px,</div><div class=\"line\">    line-height: 1.6</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>不过有一点需要注意，如果 $map1 和 $map2 中有相同的 $key 名，那么将 $map2 中的 $key 会取代 $map1 中的：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$color</span>: (</div><div class=\"line\">    text: <span class=\"comment\">#f36,</span></div><div class=\"line\">    link: <span class=\"comment\">#f63,</span></div><div class=\"line\">    border: <span class=\"comment\">#ddd,</span></div><div class=\"line\">    backround: <span class=\"comment\">#fff</span></div><div class=\"line\">);</div><div class=\"line\"><span class=\"variable\">$typo</span>:(</div><div class=\"line\">    font-size: 12px,</div><div class=\"line\">    line-height: 1.6,</div><div class=\"line\">    border: <span class=\"comment\">#ccc,</span></div><div class=\"line\">    background: <span class=\"comment\">#000</span></div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>执行：<br>$newmap: map-merge($color,$typo);<br>得到的新 map:<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$newmap</span>:(</div><div class=\"line\">    text: <span class=\"comment\">#f36,</span></div><div class=\"line\">    link: <span class=\"comment\">#f63,</span></div><div class=\"line\">    font-size: 12px,</div><div class=\"line\">    line-height: 1.6,</div><div class=\"line\">    border: <span class=\"comment\">#ccc,</span></div><div class=\"line\">    background: <span class=\"comment\">#000</span></div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<h4 id=\"Sass-Maps的函数-map-remove-map-key-、keywords-args\"><a href=\"#Sass-Maps的函数-map-remove-map-key-、keywords-args\" class=\"headerlink\" title=\"Sass Maps的函数-map-remove($map,$key)、keywords($args)\"></a>Sass Maps的函数-map-remove($map,$key)、keywords($args)</h4><p>map-remove($map,$key) 函数是用来删除当前 $map 中的某一个 $key，从而得到一个新的 map。其返回的值还是一个 map。他并不能直接从一个 map 中删除另一个 map，仅能通过删除 map 中的某个 key 得到新 map.<br>如果删除的 key 并不存在于 $map 中，那么 map-remove() 函数返回的新 map 和以前的 map 一样。</p>\n<p>keywords($args) 函数可以说是一个动态创建 map 的函数。可以通过混合宏或函数的参数变创建 map。参数也是成对出现，其中 $args 变成 key(会自动去掉$符号)，而 $args 对应的值就是value。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@mixin map(<span class=\"variable\">$args</span>...)&#123;</div><div class=\"line\">    @debug keywords(<span class=\"variable\">$args</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@include map(</div><div class=\"line\">  <span class=\"variable\">$dribble</span>: <span class=\"comment\">#ea4c89,</span></div><div class=\"line\">  <span class=\"variable\">$facebook</span>: <span class=\"comment\">#3b5998,</span></div><div class=\"line\">  <span class=\"variable\">$github</span>: <span class=\"comment\">#171515,</span></div><div class=\"line\">  <span class=\"variable\">$google</span>: <span class=\"comment\">#db4437,</span></div><div class=\"line\">  <span class=\"variable\">$twitter</span>: <span class=\"comment\">#55acee</span></div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>在命令终端可以看到一个输入的 @debug 信息：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">DEBUG: (dribble: <span class=\"comment\">#ea4c89, facebook: #3b5998, github: #171515, google: #db4437, twitter: #55acee)</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"RGB颜色函数-RGB-颜色函数\"><a href=\"#RGB颜色函数-RGB-颜色函数\" class=\"headerlink\" title=\"RGB颜色函数-RGB()颜色函数\"></a>RGB颜色函数-RGB()颜色函数</h3><p>在 Sass 的官方文档中，列出了 Sass 的颜色函数清单，从大的方面主要分为 RGB , HSL 和 Opacity 三大函数，当然其还包括一些其他的颜色函数，比如说 adjust-color 和 change-color 等。在这章节中，将主要和大家一起探讨 Sass 颜色函数中常见的 RGB、HSL 和 Opacity 函数。<br>RGB 颜色只是颜色中的一种表达式，其中 R 是 red 表示红色，G 是 green 表示绿色而 B 是 blue 表示蓝色。在 Sass 中为 RGB 颜色提供六种函数：</p>\n<ul>\n<li>rgb($red,$green,$blue)：根据红、绿、蓝三个值创建一个颜色；</li>\n<li>rgba($red,$green,$blue,$alpha)：根据红、绿、蓝和透明度值创建一个颜色；</li>\n<li>red($color)：从一个颜色中获取其中红色值；</li>\n<li>green($color)：从一个颜色中获取其中绿色值；</li>\n<li>blue($color)：从一个颜色中获取其中蓝色值；</li>\n<li>mix($color-1,$color-2,[$weight])：把两种颜色混合在一起。<br>仅从概念上，或许大家没有太多的概念，我们通过下面的命令来做一个简单的测试：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sass -i</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>在命令终端开启这个命令，相当于开启 Sass 的函数计算。<br>接下来，分别在终端使用 RGB 函数来进行计算，看其最终结果：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ sass -i</div><div class=\"line\">&gt;&gt; rgb(200,40,88) //根据r:200,g:40,b:88计算出一个十六进制颜色值</div><div class=\"line\"><span class=\"comment\">#c82858</span></div><div class=\"line\">&gt;&gt; rgba(<span class=\"comment\">#c82858,.65) //根据#c82858的65%透明度计算出一个rgba颜色值</span></div><div class=\"line\">rgba(200, 40, 88, 0.65)</div><div class=\"line\">&gt;&gt; red(<span class=\"comment\">#c82858) //从#c82858颜色值中得到红色值 200</span></div><div class=\"line\">200</div><div class=\"line\">&gt;&gt; green(<span class=\"comment\">#c82858) //从#c82858颜色值中得到绿色值 40</span></div><div class=\"line\">40</div><div class=\"line\">&gt;&gt; blue(<span class=\"comment\">#c82858) //从#c82858颜色值中得到蓝色值 88</span></div><div class=\"line\">88</div><div class=\"line\">&gt;&gt; mix(<span class=\"comment\">#c82858,rgba(200,40,80,.65),.3) //把#c82858和rgba(200,40,88,.65) 两颜色按比例混合得到一个新颜色</span></div><div class=\"line\">rgba(200, 40, 80, 0.65105)</div></pre></td></tr></table></figure></p>\n<p>从上面的简单运算结果可以很清晰的知道。在 RGB 颜色函数中，在实际中常用的主要是 rgba() 和 mix() 两个函数，而 rgb() 函数只能快速的将一个 rgb 颜色转换成十六进制颜色表达，red()、green() 和 blue() 函数，只能取得某一颜色的一个值，对于颜色上使用并无太大作用（或许他的好处，我还没有理解过来）。</p>\n<h4 id=\"RGB颜色函数-RGBA-函数\"><a href=\"#RGB颜色函数-RGBA-函数\" class=\"headerlink\" title=\"RGB颜色函数-RGBA()函数\"></a>RGB颜色函数-RGBA()函数</h4><p>rgba() 函数主要用来将一个颜色根据透明度转换成 rgba 颜色。<br>其语法有两种格式：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">rgba(<span class=\"variable\">$red</span>,<span class=\"variable\">$green</span>,<span class=\"variable\">$blue</span>,<span class=\"variable\">$alpha</span>)  //将一个rgba颜色转译出来，和未转译的值一样</div><div class=\"line\">rgba(<span class=\"variable\">$color</span>,<span class=\"variable\">$alpha</span>)  //将一个Hex颜色转换成rgba颜色</div></pre></td></tr></table></figure></p>\n<p>其中 rgba($color,$alpha) 函数作用更大，主要运用在这样的情形之中：假设在实际中知道的颜色值是 #f36 或者 red，但在使用中，需要给他们配上一个透明度，这个时候在原来的 CSS 中，首先需要通过制图工具，得到 #f36 或 red 颜色的 R、G、B 值，而不能直接使用（注意 css3 是可以的，但是存在浏览器兼容问题）：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//CSS</div><div class=\"line\">color: rgba(<span class=\"comment\">#f36,.5); //在css中，这是无效的写法</span></div></pre></td></tr></table></figure></p>\n<p>但在 Sass 中，RGBA() 函数就能解决这个问题。我们先来看一个简单的例子，假设在变量中定义了一个基本的变量：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//SCSS</div><div class=\"line\">.rgba &#123;</div><div class=\"line\">    color: rgba(<span class=\"comment\">#f36,.5);</span></div><div class=\"line\">    background: rgba(orange,.5);</div><div class=\"line\">    border-color: rgba(green,.5);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在这个实例中，我们使用了 Sass 的 rgba 函数，在括号是函数的参数，第一个参数是需要转换的颜色，他可以是任何颜色的表达方式，也可以是一个颜色变量；第二个参数是颜色的透明度，其值是 0~1 之间。上面的代码转译出来：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.rgba &#123;</div><div class=\"line\">  color: rgba(255, 51, 102, 0.5);</div><div class=\"line\">  background: rgba(255, 165, 0, 0.5);</div><div class=\"line\">  border-color: rgba(0, 128, 0, 0.5);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在来看一个调用前面定义的变量：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//SCSS</div><div class=\"line\">.rgba &#123;</div><div class=\"line\">    color: rgba(<span class=\"variable\">$color</span>,.5);</div><div class=\"line\">    background: rgba(<span class=\"variable\">$bgColor</span>,.5);</div><div class=\"line\">    border-color: rgba(<span class=\"variable\">$borderColor</span>,.5);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//CSS</div><div class=\"line\">.rgba &#123;</div><div class=\"line\">  color: rgba(255, 51, 102, 0.5);</div><div class=\"line\">  background: rgba(255, 165, 0, 0.5);</div><div class=\"line\">  border-color: rgba(0, 128, 0, 0.5);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"RGB颜色函数-Red-、Green-、Blue-函数\"><a href=\"#RGB颜色函数-Red-、Green-、Blue-函数\" class=\"headerlink\" title=\"RGB颜色函数-Red()、Green()、Blue()函数\"></a>RGB颜色函数-Red()、Green()、Blue()函数</h4><p>Red() 函数</p>\n<p>red() 函数非常简单，其主要用来获取一个颜色当中的红色值。假设有一个 #f36 的颜色，如果你想得到 #f36 中的 red 值是多少，这个时候使用 red() 函数就能很简单获取。<br>Green() 函数<br>green() 函数和red()函数一样，用来获取某一个颜色值中 green 的值。<br>Blue() 函数<br>同理，blue() 函数是用来获取某一个颜色值中 blue 的值，</p>\n<h4 id=\"RGB颜色函数-Mix-函数\"><a href=\"#RGB颜色函数-Mix-函数\" class=\"headerlink\" title=\"RGB颜色函数-Mix()函数\"></a>RGB颜色函数-Mix()函数</h4><p>Mix 函数是将两种颜色根据一定的比例混合在一起，生成另一种颜色。其使用语法如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">mix(<span class=\"variable\">$color</span>-1,<span class=\"variable\">$color</span>-2,<span class=\"variable\">$weight</span>);</div></pre></td></tr></table></figure></p>\n<p>$color-1 和 $color-2 指的是你需要合并的颜色，颜色可以是任何表达式，也可以是颜色变量。<br>$weight 为 合并的比例（选择权重），默认值为 50%，其取值范围是 0~1 之间。它是每个 RGB 的百分比来衡量，当然透明度也会有一定的权重。默认的比例是 50%，这意味着两个颜色各占一半，如果指定的比例是 25%，这意味着第一个颜色所占比例为 25%，第二个颜色所占比例为75%。<br>使用：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">mix(<span class=\"comment\">#f00, #00f) =&gt; #7f007f</span></div><div class=\"line\">mix(<span class=\"comment\">#f00, #00f, 25%) =&gt; #3f00bf</span></div><div class=\"line\">mix(rgba(255, 0, 0, 0.5), <span class=\"comment\">#00f) =&gt; rgba(63, 0, 191, 0.75)</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//SCSS</div><div class=\"line\"><span class=\"variable\">$color1</span>: <span class=\"comment\">#a63;</span></div><div class=\"line\"><span class=\"variable\">$color2</span>: <span class=\"comment\">#fff;</span></div><div class=\"line\"><span class=\"variable\">$bgColor1</span>: <span class=\"comment\">#f36;</span></div><div class=\"line\"><span class=\"variable\">$bgColor2</span>: <span class=\"comment\">#e36;</span></div><div class=\"line\"><span class=\"variable\">$borderColor1</span>:<span class=\"comment\">#c36;</span></div><div class=\"line\"><span class=\"variable\">$borderColor2</span>:<span class=\"comment\">#b36;</span></div><div class=\"line\">.mix &#123;</div><div class=\"line\">    background: mix(<span class=\"variable\">$bgColor1</span>,<span class=\"variable\">$bgColor2</span>,.75);</div><div class=\"line\">    color: mix(<span class=\"variable\">$color1</span>,<span class=\"variable\">$color2</span>,.25);</div><div class=\"line\">    border-color: mix(<span class=\"variable\">$borderColor1</span>,<span class=\"variable\">$bgColor2</span>,.05);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">//CSS</div><div class=\"line\">.mix &#123;</div><div class=\"line\">    background: <span class=\"comment\">#ee3366;</span></div><div class=\"line\">    color: <span class=\"comment\">#fefefe;</span></div><div class=\"line\">    border-color: <span class=\"comment\">#ed33</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"HSL函数简介\"><a href=\"#HSL函数简介\" class=\"headerlink\" title=\"HSL函数简介\"></a>HSL函数简介</h3><p>在 Sass 中提供了一系列有关于 HSL 的颜色函数，以供大家使用，其中常用的有 saturation、lightness、adjust-hue、lighten、darken 等等。接下来我们先来了解一下 HSL 颜色函数包括哪些具体的函数，所起的作用是什么：</p>\n<ul>\n<li>hsl($hue,$saturation,$lightness)：通过色相（hue）、饱和度(saturation)和亮度（lightness）的值创建一个颜色；</li>\n<li>hsla($hue,$saturation,$lightness,$alpha)：通过色相（hue）、饱和度(saturation)、亮度（lightness）和透明（alpha）的值创建一个颜色；</li>\n<li>hue($color)：从一个颜色中获取色相（hue）值；</li>\n<li>saturation($color)：从一个颜色中获取饱和度（saturation）值；</li>\n<li>lightness($color)：从一个颜色中获取亮度（lightness）值；</li>\n<li>adjust-hue($color,$degrees)：通过改变一个颜色的色相值，创建一个新的颜色；</li>\n<li>lighten($color,$amount)：通过改变颜色的亮度值，让颜色变亮，创建一个新的颜色；</li>\n<li>darken($color,$amount)：通过改变颜色的亮度值，让颜色变暗，创建一个新的颜色；</li>\n<li>saturate($color,$amount)：通过改变颜色的饱和度值，让颜色更饱和，从而创建一个新的颜色</li>\n<li>desaturate($color,$amount)：通过改变颜色的饱和度值，让颜色更少的饱和，从而创建出一个新的颜色；</li>\n<li>grayscale($color)：将一个颜色变成灰色，相当于desaturate($color,100%);</li>\n<li>complement($color)：返回一个补充色，相当于adjust-hue($color,180deg);</li>\n<li>invert($color)：反回一个反相色，红、绿、蓝色值倒过来，而透明度不变。<h3 id=\"Opacity函数简介\"><a href=\"#Opacity函数简介\" class=\"headerlink\" title=\"Opacity函数简介\"></a>Opacity函数简介</h3>在 CSS 中除了可以使用 rgba、hsla 和 transform 来控制颜色透明度之外，还可以使用 opacity 来控制，只不过前两者只是针对颜色上的透明通道做处理，而后者是控制整个元素的透明度。<br>在 Sass 中，也提供了系列透明函数，只不过这系列的透明函数主要用来处理颜色透明度：</li>\n<li>alpha($color) /opacity($color)：获取颜色透明度值；</li>\n<li>rgba($color, $alpha)：改变颜色的透明度值；</li>\n<li>opacify($color, $amount) / fade-in($color, $amount)：使颜色更不透明；</li>\n<li>transparentize($color, $amount) / fade-out($color, $amount)：使颜色更加透明。</li>\n</ul>\n<h3 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"@import\"></a>@import</h3><p>Sass 支持所有 CSS3 的 @ 规则， 以及一些 Sass 专属的规则，也被称为“指令（directives）”。 这些规则在 Sass 中具有不同的功效，详细解释如下。<br>@import</p>\n<p>Sass 扩展了 CSS 的 @import 规则，让它能够引入 SCSS 和 Sass 文件。 所有引入的 SCSS 和 Sass 文件都会被合并并输出一个单一的 CSS 文件。 另外，被导入的文件中所定义的变量或 mixins 都可以在主文件中使用。<br>Sass 会在当前目录下寻找其他 Sass 文件， 如果是 Rack、Rails 或 Merb 环境中则是 Sass 文件目录。 也可以通过 :load_paths 选项或者在命令行中使用 –load-path 选项来指定额外的搜索目录。</p>\n<p>@import 根据文件名引入。 默认情况下，它会寻找 Sass 文件并直接引入， 但是，在少数几种情况下，它会被编译成 CSS 的 @import 规则：</p>\n<ul>\n<li>如果文件的扩展名是 .css。</li>\n<li>如果文件名以 http:// 开头。</li>\n<li>如果文件名是 url()。</li>\n<li>如果 @import 包含了任何媒体查询（media queries）。<br>如果上述情况都没有出现，并且扩展名是 .scss 或 .sass， 该名称的 Sass 或 SCSS 文件就会被引入。 如果没有扩展名， Sass 将试着找出具有 .scss 或 .sass 扩展名的同名文件并将其引入。<br>\\@import “foo”;<br>\\@import “foo”;<br>如果你有一个 SCSS 或 Sass 文件需要引入， 但是你又不希望它被编译为一个 CSS 文件， 这时，你就可以在文件名前面加一个下划线，就能避免被编译。 这将告诉 Sass 不要把它编译成 CSS 文件。 然后，你就可以像往常一样引入这个文件了，而且还可以省略掉文件名前面的下划线。<br>注意，在同一个目录不能同时存在带下划线和不带下划线的同名文件。 例如， _colors.scss 不能与 colors.scss 并存。<br>嵌套 @import</li>\n</ul>\n<p>虽然大部分时间只需在顶层文件使用 @import 就行了， 但是，你还可以把他们包含在 CSS 规则 和 @media 规则中。</p>\n<h3 id=\"media\"><a href=\"#media\" class=\"headerlink\" title=\"@media\"></a>@media</h3><p>Sass 中的 @media 指令和 CSS 的使用规则一样的简单，但它有另外一个功能，可以嵌套在 CSS 规则中。有点类似 JS 的冒泡功能一样，如果在样式中使用 @media 指令，它将冒泡到外面。来看一个简单示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.sidebar &#123;</div><div class=\"line\">  width: 300px;</div><div class=\"line\">  @media screen and (orientation: landscape) &#123;</div><div class=\"line\">    width: 500px;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.sidebar &#123;</div><div class=\"line\">  width: 300px; &#125;</div><div class=\"line\">  @media screen and (orientation: landscape) &#123;</div><div class=\"line\">    .sidebar &#123;</div><div class=\"line\">      width: 500px; &#125; &#125;</div></pre></td></tr></table></figure>\n<p>@media 也可以嵌套 @media<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@media screen &#123;</div><div class=\"line\">  .sidebar &#123;</div><div class=\"line\">    @media (orientation: landscape) &#123;</div><div class=\"line\">      width: 500px;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@media screen and (orientation: landscape) &#123;</div><div class=\"line\">  .sidebar &#123;</div><div class=\"line\">    width: 500px; &#125; &#125;</div></pre></td></tr></table></figure>\n<p>在使用 @media 时，还可以使用插件#{}:<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$media</span>: screen;</div><div class=\"line\"><span class=\"variable\">$feature</span>: -webkit-min-device-pixel-ratio;</div><div class=\"line\"><span class=\"variable\">$value</span>: 1.5;</div><div class=\"line\"></div><div class=\"line\">@media <span class=\"comment\">#&#123;$media&#125; and ($feature: $value) &#123;</span></div><div class=\"line\">  .sidebar &#123;</div><div class=\"line\">    width: 500px;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@media screen and (-webkit-min-device-pixel-ratio: 1.5) &#123;</div><div class=\"line\">  .sidebar &#123;</div><div class=\"line\">    width: 500px; &#125; &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"extend\"><a href=\"#extend\" class=\"headerlink\" title=\"@extend\"></a>@extend</h3><p>Sass 中的 @extend 是用来扩展选择器或占位符。比如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.error &#123;</div><div class=\"line\">  border: 1px <span class=\"comment\">#f00;</span></div><div class=\"line\">  background-color: <span class=\"comment\">#fdd;</span></div><div class=\"line\">&#125;</div><div class=\"line\">.error.intrusion &#123;</div><div class=\"line\">  background-image: url(<span class=\"string\">\"/image/hacked.png\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">.seriousError &#123;</div><div class=\"line\">  @extend .error;</div><div class=\"line\">  border-width: 3px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.error, .seriousError &#123;</div><div class=\"line\">  border: 1px <span class=\"comment\">#f00;</span></div><div class=\"line\">  background-color: <span class=\"comment\">#fdd; &#125;</span></div><div class=\"line\"></div><div class=\"line\">.error.intrusion, .seriousError.intrusion &#123;</div><div class=\"line\">  background-image: url(<span class=\"string\">\"/image/hacked.png\"</span>); &#125;</div><div class=\"line\"></div><div class=\"line\">.seriousError &#123;</div><div class=\"line\">  border-width: 3px; &#125;</div></pre></td></tr></table></figure>\n<p>多个扩展</p>\n<p>所设某个样式要继承多个地方的样式，那么可以使用 @extend 来继承多个选择器或占位符的样式，如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.error &#123;</div><div class=\"line\">  border: 1px <span class=\"comment\">#f00;</span></div><div class=\"line\">  background-color: <span class=\"comment\">#fdd;</span></div><div class=\"line\">&#125;</div><div class=\"line\">.attention &#123;</div><div class=\"line\">  font-size: 3em;</div><div class=\"line\">  background-color: <span class=\"comment\">#ff0;</span></div><div class=\"line\">&#125;</div><div class=\"line\">.seriousError &#123;</div><div class=\"line\">  @extend .error;</div><div class=\"line\">  @extend .attention;</div><div class=\"line\">  border-width: 3px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.error, .seriousError &#123;</div><div class=\"line\">  border: 1px <span class=\"comment\">#f00;</span></div><div class=\"line\">  background-color: <span class=\"comment\">#fdd; &#125;</span></div><div class=\"line\"></div><div class=\"line\">.attention, .seriousError &#123;</div><div class=\"line\">  font-size: 3em;</div><div class=\"line\">  background-color: <span class=\"comment\">#ff0; &#125;</span></div><div class=\"line\"></div><div class=\"line\">.seriousError &#123;</div><div class=\"line\">  border-width: 3px; &#125;</div></pre></td></tr></table></figure>\n<p>扩展单一选择器</p>\n<p>前面我们知道 %placeholder 不使用@extend显示调用是不会生成任何样式代码。那么在选择器中使用占位符一样。比如下面的代码:<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#context a%extreme &#123;</span></div><div class=\"line\">  color: blue;</div><div class=\"line\">  font-weight: bold;</div><div class=\"line\">  font-size: 2em;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.notice &#123;</div><div class=\"line\">  @extend %extreme;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#context a.notice &#123;</span></div><div class=\"line\">  color: blue;</div><div class=\"line\">  font-weight: bold;</div><div class=\"line\">  font-size: 2em;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"at-root\"><a href=\"#at-root\" class=\"headerlink\" title=\"@at-root\"></a>@at-root</h3><p>@at-root 从字面上解释就是跳出根元素。当你选择器嵌套多层之后，想让某个选择器跳出，此时就可以使用 @at-root。来看一个简单的示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.a &#123;</div><div class=\"line\">  color: red;</div><div class=\"line\"></div><div class=\"line\">  .b &#123;</div><div class=\"line\">    color: orange;</div><div class=\"line\"></div><div class=\"line\">    .c &#123;</div><div class=\"line\">      color: yellow;</div><div class=\"line\"></div><div class=\"line\">      @at-root .d &#123;</div><div class=\"line\">        color: green;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.a &#123;</div><div class=\"line\">  color: red;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.a .b &#123;</div><div class=\"line\">  color: orange;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.a .b .c &#123;</div><div class=\"line\">  color: yellow;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.d &#123;</div><div class=\"line\">  color: green;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"debug\"><a href=\"#debug\" class=\"headerlink\" title=\"@debug\"></a>@debug</h3><p>@debug 在 Sass 中是用来调试的，当你的在 Sass 的源码中使用了 @debug 指令之后，Sass 代码在编译出错时，在命令终端会输出你设置的提示 Bug:<br>\\@debug 10em + 12em;<br>output:Line 1 DEBUG: 22em</p>\n<h3 id=\"warn\"><a href=\"#warn\" class=\"headerlink\" title=\"@warn\"></a>@warn</h3><p>@warn 和 @debug 功能类似，用来帮助我们更好的调试 Sass。如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@mixin adjust-location(<span class=\"variable\">$x</span>, <span class=\"variable\">$y</span>) &#123;</div><div class=\"line\">  @<span class=\"keyword\">if</span> unitless(<span class=\"variable\">$x</span>) &#123;</div><div class=\"line\">    @warn <span class=\"string\">\"Assuming #&#123;<span class=\"variable\">$x</span>&#125; to be in pixels\"</span>;</div><div class=\"line\">    <span class=\"variable\">$x</span>: 1px * <span class=\"variable\">$x</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  @<span class=\"keyword\">if</span> unitless(<span class=\"variable\">$y</span>) &#123;</div><div class=\"line\">    @warn <span class=\"string\">\"Assuming #&#123;<span class=\"variable\">$y</span>&#125; to be in pixels\"</span>;</div><div class=\"line\">    <span class=\"variable\">$y</span>: 1px * <span class=\"variable\">$y</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  position: relative; left: <span class=\"variable\">$x</span>; top: <span class=\"variable\">$y</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"error\"><a href=\"#error\" class=\"headerlink\" title=\"@error\"></a>@error</h3><p>@error 和 @warn、@debug 功能是如出一辙.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">@mixin error(<span class=\"variable\">$x</span>)&#123;</div><div class=\"line\">  @<span class=\"keyword\">if</span> <span class=\"variable\">$x</span> &lt; 10 &#123;</div><div class=\"line\">    width: <span class=\"variable\">$x</span> * 10px;</div><div class=\"line\">  &#125; @<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"variable\">$x</span> == 10 &#123;</div><div class=\"line\">    width: <span class=\"variable\">$x</span>;</div><div class=\"line\">  &#125; @<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    @error <span class=\"string\">\"你需要将#&#123;<span class=\"variable\">$x</span>&#125;值设置在10以内的数\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.test &#123;</div><div class=\"line\">  @include error(15);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>编译时，提示：你需要将15值设置在10以内的数 on line 7 at column 5</p>"},{"title":"学习随笔","date":"2016-09-17T22:13:34.000Z","_content":"bootstrap的js文件中函数面前‘+’号是什么意思？\n相当于 (function($) {...})($)，意思就是把当前这个闭包立即执行。注意这个函数末尾有 ($)，千万不要以为函数前面加个 + 就会执行。\n如果不写 + 直接写 function() {...}()，这会造成 js 语法错误，这是因为 function() {...} 是函数声明，它不是表达式，它必须有一个名字。但就算有了名字，它也不会返回函数，在后面加 () 并不会变成函数调用，而是变成简单的括号表达式。\n而前面写了个 + 之后 +function() {...}() 变成一个表达式，末尾的 () 由于运算优先级高会先执行，于是就把刚定义的函数执行了一遍。\n现在流行这样写大概是因为比加括号的写法少一个字符吧\n\n无论在标签中class属性里类的顺序如何，最终相同的属性值取css文件中声明位置最后的那个。\n\n<!--more-->\n\nMac中设置在当前目录中打开Terminal：System Preferences -> Keyboard -> Shortcuts -> Services -> New Terminal at Folders/New Terminal Tab at Folder 这二项都勾上。在目录上的菜单里就有。\n\n\n","source":"_posts/学习随笔.md","raw":"---\ntitle: 学习随笔\ndate: 2016-09-17 22:13:34\ntags:\n---\nbootstrap的js文件中函数面前‘+’号是什么意思？\n相当于 (function($) {...})($)，意思就是把当前这个闭包立即执行。注意这个函数末尾有 ($)，千万不要以为函数前面加个 + 就会执行。\n如果不写 + 直接写 function() {...}()，这会造成 js 语法错误，这是因为 function() {...} 是函数声明，它不是表达式，它必须有一个名字。但就算有了名字，它也不会返回函数，在后面加 () 并不会变成函数调用，而是变成简单的括号表达式。\n而前面写了个 + 之后 +function() {...}() 变成一个表达式，末尾的 () 由于运算优先级高会先执行，于是就把刚定义的函数执行了一遍。\n现在流行这样写大概是因为比加括号的写法少一个字符吧\n\n无论在标签中class属性里类的顺序如何，最终相同的属性值取css文件中声明位置最后的那个。\n\n<!--more-->\n\nMac中设置在当前目录中打开Terminal：System Preferences -> Keyboard -> Shortcuts -> Services -> New Terminal at Folders/New Terminal Tab at Folder 这二项都勾上。在目录上的菜单里就有。\n\n\n","slug":"学习随笔","published":1,"updated":"2016-10-31T10:26:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuy6rzkl000mmsq43vyfefxc","content":"<p>bootstrap的js文件中函数面前‘+’号是什么意思？<br>相当于 (function($) {…})($)，意思就是把当前这个闭包立即执行。注意这个函数末尾有 ($)，千万不要以为函数前面加个 + 就会执行。<br>如果不写 + 直接写 function() {…}()，这会造成 js 语法错误，这是因为 function() {…} 是函数声明，它不是表达式，它必须有一个名字。但就算有了名字，它也不会返回函数，在后面加 () 并不会变成函数调用，而是变成简单的括号表达式。<br>而前面写了个 + 之后 +function() {…}() 变成一个表达式，末尾的 () 由于运算优先级高会先执行，于是就把刚定义的函数执行了一遍。<br>现在流行这样写大概是因为比加括号的写法少一个字符吧</p>\n<p>无论在标签中class属性里类的顺序如何，最终相同的属性值取css文件中声明位置最后的那个。</p>\n<a id=\"more\"></a>\n<p>Mac中设置在当前目录中打开Terminal：System Preferences -&gt; Keyboard -&gt; Shortcuts -&gt; Services -&gt; New Terminal at Folders/New Terminal Tab at Folder 这二项都勾上。在目录上的菜单里就有。</p>\n","excerpt":"<p>bootstrap的js文件中函数面前‘+’号是什么意思？<br>相当于 (function($) {…})($)，意思就是把当前这个闭包立即执行。注意这个函数末尾有 ($)，千万不要以为函数前面加个 + 就会执行。<br>如果不写 + 直接写 function() {…}()，这会造成 js 语法错误，这是因为 function() {…} 是函数声明，它不是表达式，它必须有一个名字。但就算有了名字，它也不会返回函数，在后面加 () 并不会变成函数调用，而是变成简单的括号表达式。<br>而前面写了个 + 之后 +function() {…}() 变成一个表达式，末尾的 () 由于运算优先级高会先执行，于是就把刚定义的函数执行了一遍。<br>现在流行这样写大概是因为比加括号的写法少一个字符吧</p>\n<p>无论在标签中class属性里类的顺序如何，最终相同的属性值取css文件中声明位置最后的那个。</p>","more":"<p>Mac中设置在当前目录中打开Terminal：System Preferences -&gt; Keyboard -&gt; Shortcuts -&gt; Services -&gt; New Terminal at Folders/New Terminal Tab at Folder 这二项都勾上。在目录上的菜单里就有。</p>"},{"title":"慕课学习","date":"2016-09-12T22:15:46.000Z","_content":"\n# CSS margin\n## margin对于容器的尺寸可以影响可视尺寸和占据尺寸。\n可视尺寸：1，使用于没有设定width、height的普通block水平元素。2，只适用于水平方向尺寸。\n占据尺寸：1,block、inline-block水平元素均适用；2，与 有没有设定width、height值无关；3，适用于水平方向和垂直方向。\n应用:滚动容器内上下留白.\n## 普通元素的百分比margin都是相对于容器的宽度计算的。 \n绝对定位元素的百分比margin 是相对于第一个定位祖先元素（relative，absolute，fixed）的宽度计算的。\n应用：自适应矩形。\n<!--more-->\n## margin重叠\n1,block水平元素(不包括float和absolute)2,不考虑 writing-mode , 只发生在垂直方向(margin bottom_top)\n发生重叠的情况: 相邻的兄弟元素  父级和第一个/最后一个  空的block元素\n解决margin-top重叠 1,父元素非块状格式化上下文元素 2,父元素没有border-top设置 3, 父元素没有padding-top设置 4,父元素和第一个子元素之间没有inline元素分割.\n解决margin-bottom重叠  前4同上 5,父元素没有height相关声明\n空block元素margin重叠条件; 1,元素没有border设置,2,没有padding设置,3,没有inline元素 4,没有height,或者min-height\n\n正正取大值,正负值相加,负负最负值\nmargin重叠意义:  \n列表.垂直: 多使用margin-top和margin-bottom一起用\n\n## margin AUTO \n自动填充特性: 元素有时候,就算没有设置width或height, 也会自动填充对应的方位.\n设置width或height,自动填充特性就会被覆盖.\nauto 一侧为定值, 一侧为auto, 则为剩余空间大小\n两侧都是auto, 平分空间大小\n问: 为什么图片 margin: 0 auto 不水平居中? 因为此时图片是inline水平, 就算没有width, 其也不会占据整个容器. 默认的img本身就不能占据整个容器. 解决方法, display: block; \n问: 为什么明明容器定高, 元素定高, margin: auto 0 无法垂直居中?\n.father { height: 200px;}\n.son { height: 100px; width: 500px; margin: auto; }\n如果 .son没有设置height: 100px 高度会自动200px高吗? 不会. \nmargin垂直居中的方法:\n1. writing-mode\n父元素writing-mode设置为: vertical-lr;\n2. 绝对定位(IE8+)\n先设置4个方位, 再设置width,height, 最后设置margin: auto\n\n## CSSmargin 负值定位\n### margin下的两端对齐(可视尺寸)\n\n### margin下的等高对齐(占据尺寸)\n\t在父元素中 overflow: hidden;\n\t同时使用margin-bottom: -600px; padding-bottom:600px; \n\t背景在padding内填充.\n### margin 负值下的两栏自适应布局\n\t元素占据空间随margin移动\n浮动元素会收缩, 有个wrap属性. ???\nDOM顺序和最终视觉顺序相符 是很好的. \n\n## 有时候margin无效, 为啥?\n### 元素本身特性\n\tinline水平元素的垂直margin无效\n\t1, 不是替换元素\n\t2, 正常书写模式\n### margin重叠\n### display:table-cell与margin\n\tdisplay:table-cell/table-row等声明的margin无效!\n例外的替换元素.img, \n### 绝对定位与margin\n\t绝对定位元素非定位方位的margin\"无效\", 实际上影响了占据空间.但由于是绝对定位, 脱离文档流, 所以肉眼感觉没有效果. \n### 鞭长莫及.\n### 内联特性导致的margin无效.\n内联元素内的文字不会跑出容器.\n\n## margin-start /end 等属性.\nstart的意义: 不一定是左方向(跟direction方向有关).表示当前文档流开始的地方.\nborder-start: \n\n# overflow\n## 基本内容\n基本属性:visible(默认), hidden, scroll, auto, inherit(IE8+). \noverflow-x: hidden;//水平被隐藏, 垂直方向为scroll (IE8+)\noverflow-y:\n如果overflow-x与overflow-y值相同, 则等同于overflow; 如果不相同,如其中一个为visible, 另一个hidden, scroll, auto, 则visible会被重置为auto.\n兼容性\noverflow起作用的前提:\n1. 非display: inline水平\n2. 对应方位的尺寸限制.width/ height/ max-width/ max-height/ absolute.\n3. 对于单元格td等, 还需要设置table为table-layout: fixed状态才行. \nIE7下, 文字越多, 按钮两侧的padding留白就越大. 用overflow: visible可以解决.\n## 滚动条与overflow\n1. 有些元素自带overflow: auto/overflow: scroll属性 比如: html, textarea\n无论什么浏览器, 默认滚动条都来自HTML 而不是 BODY\nIE8+ overflow: auto\n滚动高度: var st = document.body.scrollTop || document.documentElement.scrollTop;\n//第一个是Chrome浏览器的写法, 第二个是其他浏览器的.\noverflow的padding-bottom缺失现象. 导致不一样的scrollHeight(元素内容高度)\n滚动条的宽度.\noverflow: auto的潜在布局隐患. \n水平居中跳动问题.修复:\n1. html { overflow-y: scroll; }\n2. .container{padding-left: calc(100vw - 100%); }//IE9+\n\n## overflow与BFC\nBFC: (block formatting context)  块级格式化上下文\noverflow属性值为 auto, scroll, hidden时, 有效, 为visible时, 无效.\n作用:\n1. 清除浮动影响\n2. 避免margin穿透问题\n3. 两栏自适应布局\n\n内部浮动无影响:\n使用scroll, auto, hidden中的一种. IE7+等;\n.clearfix { *zoom: 1; }\n.clearfix:after { content:''; display:table; clear: both; }\n### margin 穿透问题\n``` bash\n<div style=\"background-color: yellow; height:200px;\">\n    <div style=\"background-color: blue;height: 100px; margin-top: 30px;\"></div>\n</div>\n```\n``` bash\n<div style=\"background-color: yellow; height:200px;\">\n    <div style=\"background-color: blue;height: 100px; \"></div>\n</div>\n```\n上面两种中, 第一种由于设置了margin-top, 导致穿透,使父级容器下移.\n当外层容器增加 overflow: hidden属性后, 能够避免穿透问题.\nscroll, auto, hidden (overflow只是万千方法中的一种) \n或者可以用边框, padding, margin自身元素BFC化\n### 两栏布局\n``` bash\n<img style=\"float:left;height: 250px;\" src=\"images/901.jpg\">\n<div style=\"background-color: yellow;overflow: hidden\">\n    <img style=\"display: block;\" src=\"images/img1.jpg\">\n    <img style=\"display: block;\" src=\"images/img1.jpg\">\n</div>\n```\n![1](/images/BFC_1.png);\n\n两栏自适应布局写法:\n.cell {\n\tdisplay: table-cell; width: 2000px;//IE8+ BFC table-cell不溢出父容器.\n\t\\*display:inline-block;\\*width:auto;//IE7 伪BFC特性\n}\n\n## overflow与absolute绝对定位\n### overflow: hidden失效\n当子元素的position设置为: absolute.\nhidden时, 子元素全部显示. scroll时滚动无效\n失效原因:绝对定位元素不总是被父级overflow属性剪裁, 尤其当overflow在绝对定位元素及其包含块之间的时候.(包含块指position不为none的父级元素, 没有则为body)\n如何避免失效:\n1. overflow元素自身为包含块\n2. overflow元素的子元素为包含块\n3. 任意合法transform声明当做包含块.\n\n## overflow与抱大腿\n### resize拉伸\n要想resize起作用, 元素的overflow不能为visible.\nresize的拖拽区域默认大小: 17\\*17px(滚动条的尺寸)\n### ellipsis文字溢出\ntext-overflow: ellipsis 文本溢出,省略号表示.必须设置overflow属性不为visible. \n\n## overflow与锚点技术\n\n锚链与锚点. 选项卡\n单页应用.overflow:hidden.\n\n\n# float\n初衷: 文字环绕效果.\n## 包裹与破坏\n收缩, 坚挺, 隔绝(BFC).\n破坏,父容器高度塌陷.\n\n## 如果使高度不塌陷\n原本作用.文字环绕效果. 特性使然.\n\n## 清除浮动带来的影响\n1. 底部插入clear:both;\n2. BFC化\nclear通常应用形式:\n1. html block水平元素底部加清除浮动元素.(很多裸露的div)\n2. CSS after为元素底部生成.(不兼容IE6, IE7)\nBFC通常声明:\nfloat: left/right;\nposition:absolute/fixed;\noverflow:hidden/scroll(IE7+)\ndisplay:inline-block/table-cell;\nwidth/height/zoom:1/...(IE6/IE7).\n\n## clear与margin重叠\n\n## 浮动的滥用\n浮动可以让元素block化. \n浮动可以去空格化.\n问题:\n1. 容错性差\n2. 固定尺寸\n3. 在低版本的IE下有很多问题.\n少使用FLOAT布局.\n\n## float浮动\n流体布局,单侧固定\n智能自适应布局.\n.mib_cell { display: table-cell; *display: inline-block; width: 2000px; *width: auto; } \n/* 下面这个是固定布局写法 */\n.mib_feed_fixed { width: 484px; float: right; } <---固定布局写法，右侧的内容无法自适应窗体的宽度变化\n\n/* 下面这个是流体布局写法 */\n.mib_feed_flow { margin-left: 76px; } <---比固定布局写法好一些，缺点是，必须知道左侧浮动元素的宽度，在这个里例子中，就是必须要知道头像的宽度56px，加上右侧内容与头像的距离20px，56+20=76px，才能确定 margin-left 的值。所以这个写法无法大规模整站应用。\n\n## 浮动与兼容性\nIE7浮动问题:\n1. 含clear元素包裹出现问题\n2. 浮动元素倒数2个莫名垂直间距问题\n3. 浮动元素最后一个字符重复问题.\n4. 浮动元素楼梯排列问题.\n5. 浮动元素和文本不在同一行的问题.\n\n绝对定位时，若元素没有设置宽度，则宽度会根据内容自动变化。（同浮动）\n横向布局，一栏宽度固定，一栏自适应。则可以用绝对定位。要求：宽度固定的一栏的高度要大于绝对定位的高度。\n\n如何去除内联元素（inline-block元素）之间的间距\n1、可以在html中直接把元素写在一行上或把闭合标签和第二个开始标签写在一行或两行间添加注释或直接去掉闭合标签但最后一个不能去掉。（换行占一个空格）\n2、设置margin-right为负值，但要考虑上下文的字体和文字大小。\n3、先设定子元素字体，再设置父元素font-size:0px;////chrome中：-webkit-text-size-adjust:none;\n4、设置父元素letter-spacing或word-spacing为负值，要考虑字体，子元素有文字也要注意设置letter-spacing或word-spacing的值。\n5.float:left;\n\n\n# relative\n作用：\n1. 限制absolute。 在relative里的absolute受限制于外包含块。\n2. 作用于z-index。 若absolute中的z-index设置后，若有外包含块relative，则受外层z-index作用。不受内部z-index设置的作用。\n3. 限制overflow。 设置了absolute的元素，不受overflow:hidden的限制，在超出内容的范围仍然能够显示.若外层包含块设置了relative, 则受hidden影响.\n对fixed, 则只能第二条有效.其余失效.\n## relative定位\n相对自身, 无侵入性.\nmargin-top和top将元素提高的影响: 第一个会影响别人. relative的top不会影响其他元素.\ntop/bottom同时设置时, top起作用. left起作用.\n## relative与层级\n1. 提交层叠上下文--鬼畜级别. 默认为DOM流后面的元素覆盖前面的. 但元素设置了position:relative后, 层级提高.\n2. 对不同的relative设置不同的z-index;若z-index:auto 则不会限制;\n\n## relative的最小化影响原则\n指的是尽量降低relative属性对其他元素或布局的潜在影响.\n1,尽量不使用relative.\nabsolute定位不依赖relative \n2,relative最小化. 需要使用absolute定位依赖于relative的元素, 单独用一个div设置relative包裹.\n\n# absolute定位\n## absolute与浮动的关系.\n具有: 包裹性(对容器的absolute化。容器设置absolute后，容器变为了 inline-block),破坏性(从文档流中脱离)\n绝对定位生效时, 浮动失效.\n## 位置跟随\n原来是块级, 则absolute后也是块级;原来是内联块,之后也是内联块\n## 无依赖的absolute更强大\n### 图标图片的覆盖(无依赖relative)\n可以直接通过absolute,再设置margin即可.不必使用父容器的relative,更干净.\n### 下拉列表项等\n### 图片居中\n利用跟随,\n``` bash\n<div class=\"course-loading-x\">\n  &nbsp;<img src=\"http://img.mukewang.com/5453077400015bba00010001.gif\" class=\"course-loading\" alt=\"加载中...\">\n</div>\n```\n``` bash\ncss代码\n.course-loading-x { height: 100px; margin-top: 20px; text-align: center; letter-spacing: -.25em; overflow: hidden; }\n.course-loading { position: absolute; margin-left: -26px; }\n```\n\n\n``` bash\n<div class=\"course-fixed-x\">\n&nbsp;<div class=\"course-fixed\">\n\t<a href=\"http://www.imooc.com/activity/diaocha\" class=\"goto_top_diaocha\"></a>\n\t<a href=\"http://www.imooc.com/mobile/app\" class=\"goto_top_app\"></a>\n\t<a href=\"http://www.imooc.com/user/feedback\" class=\"goto_top_feed\"></a>\n</div>\n固定定位: 右方.\n.course-fixed-x { height: 0px; text-align: right; overflow: hidden; }\n.course-fixed { display: inline; position: fixed; margin-left: 20px; bottom: 100px; }\n```\n## \n动画尽量作用在绝对定位元素上.\n层叠,后来居上原则.\n\n## top/bottom/left/right\n若只设置了top, 则水平方向不变.同理...\n## absolute与width和height\n在没有设置width时, left和right可以同时设置,width类似于right-left;(IE7+)同理top/bottom\n元素百分比height想要起作用, 则需要父级容器的height不是auto. 但当父容器为absolute时, 内部元素可以用百分比.\n如果width与left/right同时设置, 则以width为准.\n如果width与left/right,margin:auto同时设置\n.image {\n    position: absolute; left: 0; right: 0; width:80%;margin:auto;\n}\n居中\n\n## absolute与整体布局\n\n# line-height\n## 定义\n行高,两行文字基线的距离.\n\n## line-height与盒子模型\n盒子模型.\n1. 内容区域\n2. 内联盒子\n3. 行框盒子\n4. 包含盒子\n## line-height机理\n内联元素的高度从何而来? 不是文字撑开的.是由line-height决定的.\n内容区域高度+行间距=行高\n内容区域高度只与字号以及字体有关, 与line-height没有任何关系.\n在simsun字体下, font-size = 内容区域高度\n行框盒子里多个内联盒子,高度怎么? \nvertical-align对内联元素影响. \n\n## line-height各类属性值\nnormal: 正常,默认.跟着浏览器的默认, 且与元素字体有关. \n数字: 根据当前元素的font-size大小计算. (倍数)\n长度: em,rem,px,pt\n百分比:相对于设置了font-size大小的倍数.\n继承: .\n\nline-height:1.5/150%/1.5em区别? 计算无区别. 差别在应用元素上. 1.5所有可继承元素根据font-size重计算行高. 150%/1.5em 当前元素根据font-size计算行高, 继承给下面的元素.\n\nbody全局数值行高使用经验:\nbody { font-size: 14px; line-height: ? }\n20px, 方便心算.line-height: 1.4286\n \n## 行高与图片的表现\n行高不会影响图片实际占据的高度.   \n如何消除图片底部的间隙? \n1. 图片块状化, 就没有基线对齐了.(vertical-align适合内联,内联块)\n2. 图片底线对齐 vertical-align: bottom;\n3. 行高足够小-基线位置上移 line-height: 0;\n\n## 行高实际应用\n1. 大小不固定的图片, 多行文字垂直居中.  (IE8+)\n父容器设置行高, 图片或文字(设置displa: inline-block)设置vertical-align: middle;\n2. 代替height (IE6/IE7)\n\n\n\n# padding\n## 对元素尺寸的影响\n### 对block水平元素\n1, padding会影响尺寸; 2, 当width:auto或border-sizing: border-box时, 影响内容区域, 不影响尺寸. 当padding很大时(左右两边加起来超过width),这是width为0, 此时影响了元素的尺寸. \n对于block水平元素:\n1. padding值很大,一定会影响尺寸.\n2. width不是auto(有固定的值), 加padding会影响尺寸.\n3. width为auto或border-sizing:border-box, padding值小的时候, 不影响尺寸. \n### 内联水平元素\n水平padding影响尺寸, 垂直padding不影响尺寸.但是会影响背景色(占据空间).\n如何利用这一特性? 高度可控的分割线\n``` bash\n注册<span></span>退出登录\ncss\nspan {\n\tpadding: 16px 6px 1px;margin-left:12px; border-left:2px solid; font-size: 0;\n}\n```\n## 关于padding负值和百分比\n不支持任何形式的负值.\npadding的百分比均是相对于宽度计算的. \n内联元素的padding百分比值.1,相对于宽度计算;2,默认的高度宽度有细节差异;3,padding会断行.\ninline元素的垂直padding会显示规范中的\"strut\",导致不是完全的正方形.设置font-size为0即可.\n\n## 标签元素的内置padding\n1, ol/ul列表\na,ol/ul内置padding-left, 但是单位是px, 而不是em;\nb,Chrome下是40px\nc,如果字号很小, 间距很开\nd,如果字号很大, 序号会跑到容器外.\n文字大小12px,14px, padding-left,22,25px\n2, 表单元素\ninput/textarea内置padding, button内置padding, 部分浏览器select下拉内置padding(FF,IE8+), 所有浏览器radio/checkbox无内置padding. button的padding难控制.(padding计算有问题)\n## padding与图形绘制\n三道杠的效果\n``` bash\n.line-tri {\n\twidth: 150px;\n\theight: 30px;\n\tpadding: 15px 0;\n\tborder-top: 30px solid;\n\tborder-bottom: 30px solid;\n\tbackground-color: gray;\n\tbackground-clip: content-box;./*  背景色只能在内容区域显示. */\n}\n```\n## padding应用\n1, 正方体, padding: 50%;\n2, 配合margin实现等高布局.\n3, 两栏自适应布局.使子元素在padding上.\n\n# vertical-align\n垂直对齐. \n1. 线类\n\tbaseline(默认), top, middle, bottom\n2. 文本类 \n  text-top, text-bottom\n3. 上标下标\n\tsub, super\n4. 数值百分比类\n\t20px, 2em, 20%, ...\n数字百分比类: 都带数字, 都支持负值, 行为表现一致.百分比是相对于行高计算的.\n(IE6/7)百分比不支持小数line-height.\n\n## 起作用的前提\n应用于inline和table-cell\ninline包括: inline: <img>, <span>, <strong>, <em>, 未知元素...\ninline-block:<input>(IE8+), <button>(IE8+)\ntable-cell包括\ntable-cell:<td>\n默认状态下, 支持 图片,按钮, 文字和单元格.\n改变显示水平:1, display, 2, CSS声明间接改变display(float, absolute)\n不居中的可能性: 1, line-height太短.\ndisplay:table-cell;//只对自身作用, 对子元素没有作用.\n\n## vertical-align和line-height\n一个图片在div内底部有留白, 消除, 则可以设置display:block;或者改变vertical-align的默认为bottom/Middle/top,或者改变line-height为0, 或者font-size为0;\n近似垂直居中:vertical-align: middle; line-height: 250px;\n\n## vertical-align线性属性值\nvertical-align:bottom;\n1,inline/inline-block: 元素底部和整行的底部对齐.\n2,table-cell: 单元格底padding边缘和表格行的底部对齐.\n\n---\nvertical-align:top;\n1,inline/inline-block: 元素顶部和整行的顶部对齐.\n2,table-cell: 单元格顶padding边缘和表格行的顶部对齐.\n\n---\nvertical-align: middle;\n1,inline/inline-block: 元素的垂直中心点和父元素基线上1/2 x-height处对齐\n2,table-cell: 单元格填充盒子相对于外面的表格行居中对齐.\n完全居中:font-size:0;\n\n## 文本类属性值\n1,vertical-align:text-top;盒子的顶部和父级content area的顶部对齐\n2,vertical-align:text-bottom;盒子的底部和父级content area的底部对齐.\n注意点:\n1. 元素vertical-align垂直对齐的位置与前后的元素都没有关系;\n2. 元素vertical-align垂直对齐的位置与行高line-height没有关系,与字体大小font-size有关;\n实际作用: 表情图片与文字的对齐效果.\n使用顶线/底线的问题在于受其他内联元素影响, 造成巨大定位偏差.\n使用文本底部较合适.\n\n## 上标下标\nsub/super: 与HTML里的sub/sup一样.调整基线.\n\n## vertical-align前后\n只需关注元素与父级的关系即可. \n\n## vertical-align应用\n负值对齐;\n不定尺寸图片或多行文字的垂直居中:1, 主题元素inline-block化;2, 0宽度100%高度辅助元素;3, vertical-align: middle.\n\n\n# z-index\n\n## z-index基础\nauto, <integer>, inherit.\n特性: 支持负值, 支持css3动画, css2.1需要和定位一起使用\n\n## z-index与定位属性\n除了static属性的定位属性都可以. \n定位没有发生嵌套:1, 后来居上原则;2, 哪个大(z-index),哪个上.\n发生了嵌套:祖先优先原则. 层叠上下文, 层叠水平 \n\n## 层叠上下文, 层叠水平\n\n## 层叠顺序\n7阶层叠水平:最底 层叠上下文  负z-index  block块状水平盒子  float浮动盒子 inline/inline-block水平盒子 z-index:auto或看成z-index:0 正z-index\n\n## z-index与层叠上下文\n1. 定位元素默认z-index:auto可以看成是z-index: 0;\n2. z-index不为auto的定位元素会创建层叠上下文\n3. z-index层叠顺序的比较受制于父级层叠上下文  \n\n## 其他css属性与层叠上下文\n![css1](/image/css1.png)\n\n## z-index与其他CSS属性\n## z-index实践\n1. 最小化影响原则\n2. 不犯二准则 对于非浮层元素,避免数值 z-index值, z-index值没有任何道理超过2\n3. 组件层级计算器\n4. 可访问性隐藏\n\n# 重拾CSS\n所有可以用js写出来的, 一定可以用js重写一遍.  \ncss权威指南, 精通css(高级Web标准解决方案), CSS Secrets\n用CSS实现内凹圆角.\n\nDOMReady 实现策略:\n1. 支持DOMContentLoaded时间的, 就使用支持DOMContentLoaded时间的\n2. 不支持的,就用HACK兼容. 通过IE中的document.documentElement.doScroll('left')来判断DOM树是否创建完毕.\n块状元素与内联元素嵌套规则\n1. 块元素可以包含内联或某些块状,但内联元素不能包含块元素,只能包含其他的块元素.\n2. 块元素不能放在p里面.\n3. 有几个特殊的块元素只能包含内联元素,不能再包含块元素,这几个特殊标签是:h1~h6,p,,dt\n4. li内可以包含div标签\n5. 块级元素与块级元素并列,内联元素与内联元素并列.\n\nanimation-delay:为负值. 跳过这一段时间的动画.\n\n加载条(利用animation-delay负值实现)\n``` bash\n<!-- html -->\n<div class=\"spinner\">\n  <div class=\"line1\"></div>\n  <div class=\"line2\"></div>\n  <div class=\"line3\"></div>\n  <div class=\"line4\"></div>\n  <div class=\"line5\"></div>\n</div>\n\n/* CSS */\n.spinner{\n  width:50px;\n  height:50px;\n  margin:100px auto;\n  text-align:center;\n}\n.spinner > div{\n  display:inline-block;\n  width:6px;\n  height:100%;\n  background:green;\n  -webkit-animation: strechdelay 1.2s infinite ease-in-out ;\n}\n.spinner .line2{\n  -webkit-animation-delay:-1.1s;\n}\n.spinner .line3{\n  -webkit-animation-delay:-1.0s;\n}\n\n.spinner .line4{\n  -webkit-animation-delay:-0.9s;\n}\n\n.spinner .line5{\n  -webkit-animation-delay:-0.8s;\n}/**/\n@-webkit-keyframes strechdelay{\n  0%,40%,100%{\n    -webkit-transform:scaleY(.4);\n  }\n  20%{\n    -webkit-transform:scaleY(1);\n  }\n}\n\n```\n加载时的圆环(border颜色实现)\n``` bash\n<div class=\"spinner\"></div>\n\nbody{\n  background:#000;\n}\n.spinner{\n  width:10em;\n  height:10em;\n  border-radius:50%;\n  margin:100px auto;\n  border:1.1em solid rgba(255,255,255,.2);\n  border-left-color:#fff;\n  -webkit-animation:load 1.1s infinite linear;\n}\n@-webkit-keyframes load{\n  from{\n    transform:rotate(0deg);\n  }\n  to{\n    transform:rotate(360deg);\n  }\n}\n```\nCSS Sprite\ncss 雪碧图 1, 静态图片, 2, 小图片(3.5k以下)3, 加载量大   一些大图不用雪碧图\n通过css background-position来实现. \n雪碧图生成方式:1, PS手动拼图; 2,使用sprite工具自动生成.\n\n\nHTTP请求\n1, 建立TCP连接\n2, Web浏览器向Web服务器发送请求命令\n3, Web浏览器发送请求头信息\n4, Web浏览器应答\n5, Web浏览器发送应答头信息\n6, Web服务器向浏览器发送数据\n7, Web服务器关闭TCP连接.\n\nHTTP请求:\n1, 请求方法\n2, 正在请求的URL\n3, 请求头\n4, 请求体\n![httprequest1](images/httprequest1.png);\n\n相应\n1, 状态码\n![statuscode](images/statuscode.png);\n2, 响应头\n3, 相应体\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/慕课学习.md","raw":"---\ntitle: 慕课学习\ndate: 2016-09-12 22:15:46\ntags:\n---\n\n# CSS margin\n## margin对于容器的尺寸可以影响可视尺寸和占据尺寸。\n可视尺寸：1，使用于没有设定width、height的普通block水平元素。2，只适用于水平方向尺寸。\n占据尺寸：1,block、inline-block水平元素均适用；2，与 有没有设定width、height值无关；3，适用于水平方向和垂直方向。\n应用:滚动容器内上下留白.\n## 普通元素的百分比margin都是相对于容器的宽度计算的。 \n绝对定位元素的百分比margin 是相对于第一个定位祖先元素（relative，absolute，fixed）的宽度计算的。\n应用：自适应矩形。\n<!--more-->\n## margin重叠\n1,block水平元素(不包括float和absolute)2,不考虑 writing-mode , 只发生在垂直方向(margin bottom_top)\n发生重叠的情况: 相邻的兄弟元素  父级和第一个/最后一个  空的block元素\n解决margin-top重叠 1,父元素非块状格式化上下文元素 2,父元素没有border-top设置 3, 父元素没有padding-top设置 4,父元素和第一个子元素之间没有inline元素分割.\n解决margin-bottom重叠  前4同上 5,父元素没有height相关声明\n空block元素margin重叠条件; 1,元素没有border设置,2,没有padding设置,3,没有inline元素 4,没有height,或者min-height\n\n正正取大值,正负值相加,负负最负值\nmargin重叠意义:  \n列表.垂直: 多使用margin-top和margin-bottom一起用\n\n## margin AUTO \n自动填充特性: 元素有时候,就算没有设置width或height, 也会自动填充对应的方位.\n设置width或height,自动填充特性就会被覆盖.\nauto 一侧为定值, 一侧为auto, 则为剩余空间大小\n两侧都是auto, 平分空间大小\n问: 为什么图片 margin: 0 auto 不水平居中? 因为此时图片是inline水平, 就算没有width, 其也不会占据整个容器. 默认的img本身就不能占据整个容器. 解决方法, display: block; \n问: 为什么明明容器定高, 元素定高, margin: auto 0 无法垂直居中?\n.father { height: 200px;}\n.son { height: 100px; width: 500px; margin: auto; }\n如果 .son没有设置height: 100px 高度会自动200px高吗? 不会. \nmargin垂直居中的方法:\n1. writing-mode\n父元素writing-mode设置为: vertical-lr;\n2. 绝对定位(IE8+)\n先设置4个方位, 再设置width,height, 最后设置margin: auto\n\n## CSSmargin 负值定位\n### margin下的两端对齐(可视尺寸)\n\n### margin下的等高对齐(占据尺寸)\n\t在父元素中 overflow: hidden;\n\t同时使用margin-bottom: -600px; padding-bottom:600px; \n\t背景在padding内填充.\n### margin 负值下的两栏自适应布局\n\t元素占据空间随margin移动\n浮动元素会收缩, 有个wrap属性. ???\nDOM顺序和最终视觉顺序相符 是很好的. \n\n## 有时候margin无效, 为啥?\n### 元素本身特性\n\tinline水平元素的垂直margin无效\n\t1, 不是替换元素\n\t2, 正常书写模式\n### margin重叠\n### display:table-cell与margin\n\tdisplay:table-cell/table-row等声明的margin无效!\n例外的替换元素.img, \n### 绝对定位与margin\n\t绝对定位元素非定位方位的margin\"无效\", 实际上影响了占据空间.但由于是绝对定位, 脱离文档流, 所以肉眼感觉没有效果. \n### 鞭长莫及.\n### 内联特性导致的margin无效.\n内联元素内的文字不会跑出容器.\n\n## margin-start /end 等属性.\nstart的意义: 不一定是左方向(跟direction方向有关).表示当前文档流开始的地方.\nborder-start: \n\n# overflow\n## 基本内容\n基本属性:visible(默认), hidden, scroll, auto, inherit(IE8+). \noverflow-x: hidden;//水平被隐藏, 垂直方向为scroll (IE8+)\noverflow-y:\n如果overflow-x与overflow-y值相同, 则等同于overflow; 如果不相同,如其中一个为visible, 另一个hidden, scroll, auto, 则visible会被重置为auto.\n兼容性\noverflow起作用的前提:\n1. 非display: inline水平\n2. 对应方位的尺寸限制.width/ height/ max-width/ max-height/ absolute.\n3. 对于单元格td等, 还需要设置table为table-layout: fixed状态才行. \nIE7下, 文字越多, 按钮两侧的padding留白就越大. 用overflow: visible可以解决.\n## 滚动条与overflow\n1. 有些元素自带overflow: auto/overflow: scroll属性 比如: html, textarea\n无论什么浏览器, 默认滚动条都来自HTML 而不是 BODY\nIE8+ overflow: auto\n滚动高度: var st = document.body.scrollTop || document.documentElement.scrollTop;\n//第一个是Chrome浏览器的写法, 第二个是其他浏览器的.\noverflow的padding-bottom缺失现象. 导致不一样的scrollHeight(元素内容高度)\n滚动条的宽度.\noverflow: auto的潜在布局隐患. \n水平居中跳动问题.修复:\n1. html { overflow-y: scroll; }\n2. .container{padding-left: calc(100vw - 100%); }//IE9+\n\n## overflow与BFC\nBFC: (block formatting context)  块级格式化上下文\noverflow属性值为 auto, scroll, hidden时, 有效, 为visible时, 无效.\n作用:\n1. 清除浮动影响\n2. 避免margin穿透问题\n3. 两栏自适应布局\n\n内部浮动无影响:\n使用scroll, auto, hidden中的一种. IE7+等;\n.clearfix { *zoom: 1; }\n.clearfix:after { content:''; display:table; clear: both; }\n### margin 穿透问题\n``` bash\n<div style=\"background-color: yellow; height:200px;\">\n    <div style=\"background-color: blue;height: 100px; margin-top: 30px;\"></div>\n</div>\n```\n``` bash\n<div style=\"background-color: yellow; height:200px;\">\n    <div style=\"background-color: blue;height: 100px; \"></div>\n</div>\n```\n上面两种中, 第一种由于设置了margin-top, 导致穿透,使父级容器下移.\n当外层容器增加 overflow: hidden属性后, 能够避免穿透问题.\nscroll, auto, hidden (overflow只是万千方法中的一种) \n或者可以用边框, padding, margin自身元素BFC化\n### 两栏布局\n``` bash\n<img style=\"float:left;height: 250px;\" src=\"images/901.jpg\">\n<div style=\"background-color: yellow;overflow: hidden\">\n    <img style=\"display: block;\" src=\"images/img1.jpg\">\n    <img style=\"display: block;\" src=\"images/img1.jpg\">\n</div>\n```\n![1](/images/BFC_1.png);\n\n两栏自适应布局写法:\n.cell {\n\tdisplay: table-cell; width: 2000px;//IE8+ BFC table-cell不溢出父容器.\n\t\\*display:inline-block;\\*width:auto;//IE7 伪BFC特性\n}\n\n## overflow与absolute绝对定位\n### overflow: hidden失效\n当子元素的position设置为: absolute.\nhidden时, 子元素全部显示. scroll时滚动无效\n失效原因:绝对定位元素不总是被父级overflow属性剪裁, 尤其当overflow在绝对定位元素及其包含块之间的时候.(包含块指position不为none的父级元素, 没有则为body)\n如何避免失效:\n1. overflow元素自身为包含块\n2. overflow元素的子元素为包含块\n3. 任意合法transform声明当做包含块.\n\n## overflow与抱大腿\n### resize拉伸\n要想resize起作用, 元素的overflow不能为visible.\nresize的拖拽区域默认大小: 17\\*17px(滚动条的尺寸)\n### ellipsis文字溢出\ntext-overflow: ellipsis 文本溢出,省略号表示.必须设置overflow属性不为visible. \n\n## overflow与锚点技术\n\n锚链与锚点. 选项卡\n单页应用.overflow:hidden.\n\n\n# float\n初衷: 文字环绕效果.\n## 包裹与破坏\n收缩, 坚挺, 隔绝(BFC).\n破坏,父容器高度塌陷.\n\n## 如果使高度不塌陷\n原本作用.文字环绕效果. 特性使然.\n\n## 清除浮动带来的影响\n1. 底部插入clear:both;\n2. BFC化\nclear通常应用形式:\n1. html block水平元素底部加清除浮动元素.(很多裸露的div)\n2. CSS after为元素底部生成.(不兼容IE6, IE7)\nBFC通常声明:\nfloat: left/right;\nposition:absolute/fixed;\noverflow:hidden/scroll(IE7+)\ndisplay:inline-block/table-cell;\nwidth/height/zoom:1/...(IE6/IE7).\n\n## clear与margin重叠\n\n## 浮动的滥用\n浮动可以让元素block化. \n浮动可以去空格化.\n问题:\n1. 容错性差\n2. 固定尺寸\n3. 在低版本的IE下有很多问题.\n少使用FLOAT布局.\n\n## float浮动\n流体布局,单侧固定\n智能自适应布局.\n.mib_cell { display: table-cell; *display: inline-block; width: 2000px; *width: auto; } \n/* 下面这个是固定布局写法 */\n.mib_feed_fixed { width: 484px; float: right; } <---固定布局写法，右侧的内容无法自适应窗体的宽度变化\n\n/* 下面这个是流体布局写法 */\n.mib_feed_flow { margin-left: 76px; } <---比固定布局写法好一些，缺点是，必须知道左侧浮动元素的宽度，在这个里例子中，就是必须要知道头像的宽度56px，加上右侧内容与头像的距离20px，56+20=76px，才能确定 margin-left 的值。所以这个写法无法大规模整站应用。\n\n## 浮动与兼容性\nIE7浮动问题:\n1. 含clear元素包裹出现问题\n2. 浮动元素倒数2个莫名垂直间距问题\n3. 浮动元素最后一个字符重复问题.\n4. 浮动元素楼梯排列问题.\n5. 浮动元素和文本不在同一行的问题.\n\n绝对定位时，若元素没有设置宽度，则宽度会根据内容自动变化。（同浮动）\n横向布局，一栏宽度固定，一栏自适应。则可以用绝对定位。要求：宽度固定的一栏的高度要大于绝对定位的高度。\n\n如何去除内联元素（inline-block元素）之间的间距\n1、可以在html中直接把元素写在一行上或把闭合标签和第二个开始标签写在一行或两行间添加注释或直接去掉闭合标签但最后一个不能去掉。（换行占一个空格）\n2、设置margin-right为负值，但要考虑上下文的字体和文字大小。\n3、先设定子元素字体，再设置父元素font-size:0px;////chrome中：-webkit-text-size-adjust:none;\n4、设置父元素letter-spacing或word-spacing为负值，要考虑字体，子元素有文字也要注意设置letter-spacing或word-spacing的值。\n5.float:left;\n\n\n# relative\n作用：\n1. 限制absolute。 在relative里的absolute受限制于外包含块。\n2. 作用于z-index。 若absolute中的z-index设置后，若有外包含块relative，则受外层z-index作用。不受内部z-index设置的作用。\n3. 限制overflow。 设置了absolute的元素，不受overflow:hidden的限制，在超出内容的范围仍然能够显示.若外层包含块设置了relative, 则受hidden影响.\n对fixed, 则只能第二条有效.其余失效.\n## relative定位\n相对自身, 无侵入性.\nmargin-top和top将元素提高的影响: 第一个会影响别人. relative的top不会影响其他元素.\ntop/bottom同时设置时, top起作用. left起作用.\n## relative与层级\n1. 提交层叠上下文--鬼畜级别. 默认为DOM流后面的元素覆盖前面的. 但元素设置了position:relative后, 层级提高.\n2. 对不同的relative设置不同的z-index;若z-index:auto 则不会限制;\n\n## relative的最小化影响原则\n指的是尽量降低relative属性对其他元素或布局的潜在影响.\n1,尽量不使用relative.\nabsolute定位不依赖relative \n2,relative最小化. 需要使用absolute定位依赖于relative的元素, 单独用一个div设置relative包裹.\n\n# absolute定位\n## absolute与浮动的关系.\n具有: 包裹性(对容器的absolute化。容器设置absolute后，容器变为了 inline-block),破坏性(从文档流中脱离)\n绝对定位生效时, 浮动失效.\n## 位置跟随\n原来是块级, 则absolute后也是块级;原来是内联块,之后也是内联块\n## 无依赖的absolute更强大\n### 图标图片的覆盖(无依赖relative)\n可以直接通过absolute,再设置margin即可.不必使用父容器的relative,更干净.\n### 下拉列表项等\n### 图片居中\n利用跟随,\n``` bash\n<div class=\"course-loading-x\">\n  &nbsp;<img src=\"http://img.mukewang.com/5453077400015bba00010001.gif\" class=\"course-loading\" alt=\"加载中...\">\n</div>\n```\n``` bash\ncss代码\n.course-loading-x { height: 100px; margin-top: 20px; text-align: center; letter-spacing: -.25em; overflow: hidden; }\n.course-loading { position: absolute; margin-left: -26px; }\n```\n\n\n``` bash\n<div class=\"course-fixed-x\">\n&nbsp;<div class=\"course-fixed\">\n\t<a href=\"http://www.imooc.com/activity/diaocha\" class=\"goto_top_diaocha\"></a>\n\t<a href=\"http://www.imooc.com/mobile/app\" class=\"goto_top_app\"></a>\n\t<a href=\"http://www.imooc.com/user/feedback\" class=\"goto_top_feed\"></a>\n</div>\n固定定位: 右方.\n.course-fixed-x { height: 0px; text-align: right; overflow: hidden; }\n.course-fixed { display: inline; position: fixed; margin-left: 20px; bottom: 100px; }\n```\n## \n动画尽量作用在绝对定位元素上.\n层叠,后来居上原则.\n\n## top/bottom/left/right\n若只设置了top, 则水平方向不变.同理...\n## absolute与width和height\n在没有设置width时, left和right可以同时设置,width类似于right-left;(IE7+)同理top/bottom\n元素百分比height想要起作用, 则需要父级容器的height不是auto. 但当父容器为absolute时, 内部元素可以用百分比.\n如果width与left/right同时设置, 则以width为准.\n如果width与left/right,margin:auto同时设置\n.image {\n    position: absolute; left: 0; right: 0; width:80%;margin:auto;\n}\n居中\n\n## absolute与整体布局\n\n# line-height\n## 定义\n行高,两行文字基线的距离.\n\n## line-height与盒子模型\n盒子模型.\n1. 内容区域\n2. 内联盒子\n3. 行框盒子\n4. 包含盒子\n## line-height机理\n内联元素的高度从何而来? 不是文字撑开的.是由line-height决定的.\n内容区域高度+行间距=行高\n内容区域高度只与字号以及字体有关, 与line-height没有任何关系.\n在simsun字体下, font-size = 内容区域高度\n行框盒子里多个内联盒子,高度怎么? \nvertical-align对内联元素影响. \n\n## line-height各类属性值\nnormal: 正常,默认.跟着浏览器的默认, 且与元素字体有关. \n数字: 根据当前元素的font-size大小计算. (倍数)\n长度: em,rem,px,pt\n百分比:相对于设置了font-size大小的倍数.\n继承: .\n\nline-height:1.5/150%/1.5em区别? 计算无区别. 差别在应用元素上. 1.5所有可继承元素根据font-size重计算行高. 150%/1.5em 当前元素根据font-size计算行高, 继承给下面的元素.\n\nbody全局数值行高使用经验:\nbody { font-size: 14px; line-height: ? }\n20px, 方便心算.line-height: 1.4286\n \n## 行高与图片的表现\n行高不会影响图片实际占据的高度.   \n如何消除图片底部的间隙? \n1. 图片块状化, 就没有基线对齐了.(vertical-align适合内联,内联块)\n2. 图片底线对齐 vertical-align: bottom;\n3. 行高足够小-基线位置上移 line-height: 0;\n\n## 行高实际应用\n1. 大小不固定的图片, 多行文字垂直居中.  (IE8+)\n父容器设置行高, 图片或文字(设置displa: inline-block)设置vertical-align: middle;\n2. 代替height (IE6/IE7)\n\n\n\n# padding\n## 对元素尺寸的影响\n### 对block水平元素\n1, padding会影响尺寸; 2, 当width:auto或border-sizing: border-box时, 影响内容区域, 不影响尺寸. 当padding很大时(左右两边加起来超过width),这是width为0, 此时影响了元素的尺寸. \n对于block水平元素:\n1. padding值很大,一定会影响尺寸.\n2. width不是auto(有固定的值), 加padding会影响尺寸.\n3. width为auto或border-sizing:border-box, padding值小的时候, 不影响尺寸. \n### 内联水平元素\n水平padding影响尺寸, 垂直padding不影响尺寸.但是会影响背景色(占据空间).\n如何利用这一特性? 高度可控的分割线\n``` bash\n注册<span></span>退出登录\ncss\nspan {\n\tpadding: 16px 6px 1px;margin-left:12px; border-left:2px solid; font-size: 0;\n}\n```\n## 关于padding负值和百分比\n不支持任何形式的负值.\npadding的百分比均是相对于宽度计算的. \n内联元素的padding百分比值.1,相对于宽度计算;2,默认的高度宽度有细节差异;3,padding会断行.\ninline元素的垂直padding会显示规范中的\"strut\",导致不是完全的正方形.设置font-size为0即可.\n\n## 标签元素的内置padding\n1, ol/ul列表\na,ol/ul内置padding-left, 但是单位是px, 而不是em;\nb,Chrome下是40px\nc,如果字号很小, 间距很开\nd,如果字号很大, 序号会跑到容器外.\n文字大小12px,14px, padding-left,22,25px\n2, 表单元素\ninput/textarea内置padding, button内置padding, 部分浏览器select下拉内置padding(FF,IE8+), 所有浏览器radio/checkbox无内置padding. button的padding难控制.(padding计算有问题)\n## padding与图形绘制\n三道杠的效果\n``` bash\n.line-tri {\n\twidth: 150px;\n\theight: 30px;\n\tpadding: 15px 0;\n\tborder-top: 30px solid;\n\tborder-bottom: 30px solid;\n\tbackground-color: gray;\n\tbackground-clip: content-box;./*  背景色只能在内容区域显示. */\n}\n```\n## padding应用\n1, 正方体, padding: 50%;\n2, 配合margin实现等高布局.\n3, 两栏自适应布局.使子元素在padding上.\n\n# vertical-align\n垂直对齐. \n1. 线类\n\tbaseline(默认), top, middle, bottom\n2. 文本类 \n  text-top, text-bottom\n3. 上标下标\n\tsub, super\n4. 数值百分比类\n\t20px, 2em, 20%, ...\n数字百分比类: 都带数字, 都支持负值, 行为表现一致.百分比是相对于行高计算的.\n(IE6/7)百分比不支持小数line-height.\n\n## 起作用的前提\n应用于inline和table-cell\ninline包括: inline: <img>, <span>, <strong>, <em>, 未知元素...\ninline-block:<input>(IE8+), <button>(IE8+)\ntable-cell包括\ntable-cell:<td>\n默认状态下, 支持 图片,按钮, 文字和单元格.\n改变显示水平:1, display, 2, CSS声明间接改变display(float, absolute)\n不居中的可能性: 1, line-height太短.\ndisplay:table-cell;//只对自身作用, 对子元素没有作用.\n\n## vertical-align和line-height\n一个图片在div内底部有留白, 消除, 则可以设置display:block;或者改变vertical-align的默认为bottom/Middle/top,或者改变line-height为0, 或者font-size为0;\n近似垂直居中:vertical-align: middle; line-height: 250px;\n\n## vertical-align线性属性值\nvertical-align:bottom;\n1,inline/inline-block: 元素底部和整行的底部对齐.\n2,table-cell: 单元格底padding边缘和表格行的底部对齐.\n\n---\nvertical-align:top;\n1,inline/inline-block: 元素顶部和整行的顶部对齐.\n2,table-cell: 单元格顶padding边缘和表格行的顶部对齐.\n\n---\nvertical-align: middle;\n1,inline/inline-block: 元素的垂直中心点和父元素基线上1/2 x-height处对齐\n2,table-cell: 单元格填充盒子相对于外面的表格行居中对齐.\n完全居中:font-size:0;\n\n## 文本类属性值\n1,vertical-align:text-top;盒子的顶部和父级content area的顶部对齐\n2,vertical-align:text-bottom;盒子的底部和父级content area的底部对齐.\n注意点:\n1. 元素vertical-align垂直对齐的位置与前后的元素都没有关系;\n2. 元素vertical-align垂直对齐的位置与行高line-height没有关系,与字体大小font-size有关;\n实际作用: 表情图片与文字的对齐效果.\n使用顶线/底线的问题在于受其他内联元素影响, 造成巨大定位偏差.\n使用文本底部较合适.\n\n## 上标下标\nsub/super: 与HTML里的sub/sup一样.调整基线.\n\n## vertical-align前后\n只需关注元素与父级的关系即可. \n\n## vertical-align应用\n负值对齐;\n不定尺寸图片或多行文字的垂直居中:1, 主题元素inline-block化;2, 0宽度100%高度辅助元素;3, vertical-align: middle.\n\n\n# z-index\n\n## z-index基础\nauto, <integer>, inherit.\n特性: 支持负值, 支持css3动画, css2.1需要和定位一起使用\n\n## z-index与定位属性\n除了static属性的定位属性都可以. \n定位没有发生嵌套:1, 后来居上原则;2, 哪个大(z-index),哪个上.\n发生了嵌套:祖先优先原则. 层叠上下文, 层叠水平 \n\n## 层叠上下文, 层叠水平\n\n## 层叠顺序\n7阶层叠水平:最底 层叠上下文  负z-index  block块状水平盒子  float浮动盒子 inline/inline-block水平盒子 z-index:auto或看成z-index:0 正z-index\n\n## z-index与层叠上下文\n1. 定位元素默认z-index:auto可以看成是z-index: 0;\n2. z-index不为auto的定位元素会创建层叠上下文\n3. z-index层叠顺序的比较受制于父级层叠上下文  \n\n## 其他css属性与层叠上下文\n![css1](/image/css1.png)\n\n## z-index与其他CSS属性\n## z-index实践\n1. 最小化影响原则\n2. 不犯二准则 对于非浮层元素,避免数值 z-index值, z-index值没有任何道理超过2\n3. 组件层级计算器\n4. 可访问性隐藏\n\n# 重拾CSS\n所有可以用js写出来的, 一定可以用js重写一遍.  \ncss权威指南, 精通css(高级Web标准解决方案), CSS Secrets\n用CSS实现内凹圆角.\n\nDOMReady 实现策略:\n1. 支持DOMContentLoaded时间的, 就使用支持DOMContentLoaded时间的\n2. 不支持的,就用HACK兼容. 通过IE中的document.documentElement.doScroll('left')来判断DOM树是否创建完毕.\n块状元素与内联元素嵌套规则\n1. 块元素可以包含内联或某些块状,但内联元素不能包含块元素,只能包含其他的块元素.\n2. 块元素不能放在p里面.\n3. 有几个特殊的块元素只能包含内联元素,不能再包含块元素,这几个特殊标签是:h1~h6,p,,dt\n4. li内可以包含div标签\n5. 块级元素与块级元素并列,内联元素与内联元素并列.\n\nanimation-delay:为负值. 跳过这一段时间的动画.\n\n加载条(利用animation-delay负值实现)\n``` bash\n<!-- html -->\n<div class=\"spinner\">\n  <div class=\"line1\"></div>\n  <div class=\"line2\"></div>\n  <div class=\"line3\"></div>\n  <div class=\"line4\"></div>\n  <div class=\"line5\"></div>\n</div>\n\n/* CSS */\n.spinner{\n  width:50px;\n  height:50px;\n  margin:100px auto;\n  text-align:center;\n}\n.spinner > div{\n  display:inline-block;\n  width:6px;\n  height:100%;\n  background:green;\n  -webkit-animation: strechdelay 1.2s infinite ease-in-out ;\n}\n.spinner .line2{\n  -webkit-animation-delay:-1.1s;\n}\n.spinner .line3{\n  -webkit-animation-delay:-1.0s;\n}\n\n.spinner .line4{\n  -webkit-animation-delay:-0.9s;\n}\n\n.spinner .line5{\n  -webkit-animation-delay:-0.8s;\n}/**/\n@-webkit-keyframes strechdelay{\n  0%,40%,100%{\n    -webkit-transform:scaleY(.4);\n  }\n  20%{\n    -webkit-transform:scaleY(1);\n  }\n}\n\n```\n加载时的圆环(border颜色实现)\n``` bash\n<div class=\"spinner\"></div>\n\nbody{\n  background:#000;\n}\n.spinner{\n  width:10em;\n  height:10em;\n  border-radius:50%;\n  margin:100px auto;\n  border:1.1em solid rgba(255,255,255,.2);\n  border-left-color:#fff;\n  -webkit-animation:load 1.1s infinite linear;\n}\n@-webkit-keyframes load{\n  from{\n    transform:rotate(0deg);\n  }\n  to{\n    transform:rotate(360deg);\n  }\n}\n```\nCSS Sprite\ncss 雪碧图 1, 静态图片, 2, 小图片(3.5k以下)3, 加载量大   一些大图不用雪碧图\n通过css background-position来实现. \n雪碧图生成方式:1, PS手动拼图; 2,使用sprite工具自动生成.\n\n\nHTTP请求\n1, 建立TCP连接\n2, Web浏览器向Web服务器发送请求命令\n3, Web浏览器发送请求头信息\n4, Web浏览器应答\n5, Web浏览器发送应答头信息\n6, Web服务器向浏览器发送数据\n7, Web服务器关闭TCP连接.\n\nHTTP请求:\n1, 请求方法\n2, 正在请求的URL\n3, 请求头\n4, 请求体\n![httprequest1](images/httprequest1.png);\n\n相应\n1, 状态码\n![statuscode](images/statuscode.png);\n2, 响应头\n3, 相应体\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"慕课学习","published":1,"updated":"2016-10-31T03:55:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuy6rzkn000omsq4oa0xhahn","content":"<h1 id=\"CSS-margin\"><a href=\"#CSS-margin\" class=\"headerlink\" title=\"CSS margin\"></a>CSS margin</h1><h2 id=\"margin对于容器的尺寸可以影响可视尺寸和占据尺寸。\"><a href=\"#margin对于容器的尺寸可以影响可视尺寸和占据尺寸。\" class=\"headerlink\" title=\"margin对于容器的尺寸可以影响可视尺寸和占据尺寸。\"></a>margin对于容器的尺寸可以影响可视尺寸和占据尺寸。</h2><p>可视尺寸：1，使用于没有设定width、height的普通block水平元素。2，只适用于水平方向尺寸。<br>占据尺寸：1,block、inline-block水平元素均适用；2，与 有没有设定width、height值无关；3，适用于水平方向和垂直方向。<br>应用:滚动容器内上下留白.</p>\n<h2 id=\"普通元素的百分比margin都是相对于容器的宽度计算的。\"><a href=\"#普通元素的百分比margin都是相对于容器的宽度计算的。\" class=\"headerlink\" title=\"普通元素的百分比margin都是相对于容器的宽度计算的。\"></a>普通元素的百分比margin都是相对于容器的宽度计算的。</h2><p>绝对定位元素的百分比margin 是相对于第一个定位祖先元素（relative，absolute，fixed）的宽度计算的。<br>应用：自适应矩形。<br><a id=\"more\"></a></p>\n<h2 id=\"margin重叠\"><a href=\"#margin重叠\" class=\"headerlink\" title=\"margin重叠\"></a>margin重叠</h2><p>1,block水平元素(不包括float和absolute)2,不考虑 writing-mode , 只发生在垂直方向(margin bottom_top)<br>发生重叠的情况: 相邻的兄弟元素  父级和第一个/最后一个  空的block元素<br>解决margin-top重叠 1,父元素非块状格式化上下文元素 2,父元素没有border-top设置 3, 父元素没有padding-top设置 4,父元素和第一个子元素之间没有inline元素分割.<br>解决margin-bottom重叠  前4同上 5,父元素没有height相关声明<br>空block元素margin重叠条件; 1,元素没有border设置,2,没有padding设置,3,没有inline元素 4,没有height,或者min-height</p>\n<p>正正取大值,正负值相加,负负最负值<br>margin重叠意义:<br>列表.垂直: 多使用margin-top和margin-bottom一起用</p>\n<h2 id=\"margin-AUTO\"><a href=\"#margin-AUTO\" class=\"headerlink\" title=\"margin AUTO\"></a>margin AUTO</h2><p>自动填充特性: 元素有时候,就算没有设置width或height, 也会自动填充对应的方位.<br>设置width或height,自动填充特性就会被覆盖.<br>auto 一侧为定值, 一侧为auto, 则为剩余空间大小<br>两侧都是auto, 平分空间大小<br>问: 为什么图片 margin: 0 auto 不水平居中? 因为此时图片是inline水平, 就算没有width, 其也不会占据整个容器. 默认的img本身就不能占据整个容器. 解决方法, display: block;<br>问: 为什么明明容器定高, 元素定高, margin: auto 0 无法垂直居中?<br>.father { height: 200px;}<br>.son { height: 100px; width: 500px; margin: auto; }<br>如果 .son没有设置height: 100px 高度会自动200px高吗? 不会.<br>margin垂直居中的方法:</p>\n<ol>\n<li>writing-mode<br>父元素writing-mode设置为: vertical-lr;</li>\n<li>绝对定位(IE8+)<br>先设置4个方位, 再设置width,height, 最后设置margin: auto</li>\n</ol>\n<h2 id=\"CSSmargin-负值定位\"><a href=\"#CSSmargin-负值定位\" class=\"headerlink\" title=\"CSSmargin 负值定位\"></a>CSSmargin 负值定位</h2><h3 id=\"margin下的两端对齐-可视尺寸\"><a href=\"#margin下的两端对齐-可视尺寸\" class=\"headerlink\" title=\"margin下的两端对齐(可视尺寸)\"></a>margin下的两端对齐(可视尺寸)</h3><h3 id=\"margin下的等高对齐-占据尺寸\"><a href=\"#margin下的等高对齐-占据尺寸\" class=\"headerlink\" title=\"margin下的等高对齐(占据尺寸)\"></a>margin下的等高对齐(占据尺寸)</h3><pre><code>在父元素中 overflow: hidden;\n同时使用margin-bottom: -600px; padding-bottom:600px; \n背景在padding内填充.\n</code></pre><h3 id=\"margin-负值下的两栏自适应布局\"><a href=\"#margin-负值下的两栏自适应布局\" class=\"headerlink\" title=\"margin 负值下的两栏自适应布局\"></a>margin 负值下的两栏自适应布局</h3><pre><code>元素占据空间随margin移动\n</code></pre><p>浮动元素会收缩, 有个wrap属性. ???<br>DOM顺序和最终视觉顺序相符 是很好的. </p>\n<h2 id=\"有时候margin无效-为啥\"><a href=\"#有时候margin无效-为啥\" class=\"headerlink\" title=\"有时候margin无效, 为啥?\"></a>有时候margin无效, 为啥?</h2><h3 id=\"元素本身特性\"><a href=\"#元素本身特性\" class=\"headerlink\" title=\"元素本身特性\"></a>元素本身特性</h3><pre><code>inline水平元素的垂直margin无效\n1, 不是替换元素\n2, 正常书写模式\n</code></pre><h3 id=\"margin重叠-1\"><a href=\"#margin重叠-1\" class=\"headerlink\" title=\"margin重叠\"></a>margin重叠</h3><h3 id=\"display-table-cell与margin\"><a href=\"#display-table-cell与margin\" class=\"headerlink\" title=\"display:table-cell与margin\"></a>display:table-cell与margin</h3><pre><code>display:table-cell/table-row等声明的margin无效!\n</code></pre><p>例外的替换元素.img, </p>\n<h3 id=\"绝对定位与margin\"><a href=\"#绝对定位与margin\" class=\"headerlink\" title=\"绝对定位与margin\"></a>绝对定位与margin</h3><pre><code>绝对定位元素非定位方位的margin&quot;无效&quot;, 实际上影响了占据空间.但由于是绝对定位, 脱离文档流, 所以肉眼感觉没有效果. \n</code></pre><h3 id=\"鞭长莫及\"><a href=\"#鞭长莫及\" class=\"headerlink\" title=\"鞭长莫及.\"></a>鞭长莫及.</h3><h3 id=\"内联特性导致的margin无效\"><a href=\"#内联特性导致的margin无效\" class=\"headerlink\" title=\"内联特性导致的margin无效.\"></a>内联特性导致的margin无效.</h3><p>内联元素内的文字不会跑出容器.</p>\n<h2 id=\"margin-start-end-等属性\"><a href=\"#margin-start-end-等属性\" class=\"headerlink\" title=\"margin-start /end 等属性.\"></a>margin-start /end 等属性.</h2><p>start的意义: 不一定是左方向(跟direction方向有关).表示当前文档流开始的地方.<br>border-start: </p>\n<h1 id=\"overflow\"><a href=\"#overflow\" class=\"headerlink\" title=\"overflow\"></a>overflow</h1><h2 id=\"基本内容\"><a href=\"#基本内容\" class=\"headerlink\" title=\"基本内容\"></a>基本内容</h2><p>基本属性:visible(默认), hidden, scroll, auto, inherit(IE8+).<br>overflow-x: hidden;//水平被隐藏, 垂直方向为scroll (IE8+)<br>overflow-y:<br>如果overflow-x与overflow-y值相同, 则等同于overflow; 如果不相同,如其中一个为visible, 另一个hidden, scroll, auto, 则visible会被重置为auto.<br>兼容性<br>overflow起作用的前提:</p>\n<ol>\n<li>非display: inline水平</li>\n<li>对应方位的尺寸限制.width/ height/ max-width/ max-height/ absolute.</li>\n<li>对于单元格td等, 还需要设置table为table-layout: fixed状态才行.<br>IE7下, 文字越多, 按钮两侧的padding留白就越大. 用overflow: visible可以解决.<h2 id=\"滚动条与overflow\"><a href=\"#滚动条与overflow\" class=\"headerlink\" title=\"滚动条与overflow\"></a>滚动条与overflow</h2></li>\n<li>有些元素自带overflow: auto/overflow: scroll属性 比如: html, textarea<br>无论什么浏览器, 默认滚动条都来自HTML 而不是 BODY<br>IE8+ overflow: auto<br>滚动高度: var st = document.body.scrollTop || document.documentElement.scrollTop;<br>//第一个是Chrome浏览器的写法, 第二个是其他浏览器的.<br>overflow的padding-bottom缺失现象. 导致不一样的scrollHeight(元素内容高度)<br>滚动条的宽度.<br>overflow: auto的潜在布局隐患.<br>水平居中跳动问题.修复:</li>\n<li>html { overflow-y: scroll; }</li>\n<li>.container{padding-left: calc(100vw - 100%); }//IE9+</li>\n</ol>\n<h2 id=\"overflow与BFC\"><a href=\"#overflow与BFC\" class=\"headerlink\" title=\"overflow与BFC\"></a>overflow与BFC</h2><p>BFC: (block formatting context)  块级格式化上下文<br>overflow属性值为 auto, scroll, hidden时, 有效, 为visible时, 无效.<br>作用:</p>\n<ol>\n<li>清除浮动影响</li>\n<li>避免margin穿透问题</li>\n<li>两栏自适应布局</li>\n</ol>\n<p>内部浮动无影响:<br>使用scroll, auto, hidden中的一种. IE7+等;<br>.clearfix { *zoom: 1; }<br>.clearfix:after { content:’’; display:table; clear: both; }</p>\n<h3 id=\"margin-穿透问题\"><a href=\"#margin-穿透问题\" class=\"headerlink\" title=\"margin 穿透问题\"></a>margin 穿透问题</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div style=<span class=\"string\">\"background-color: yellow; height:200px;\"</span>&gt;</div><div class=\"line\">    &lt;div style=<span class=\"string\">\"background-color: blue;height: 100px; margin-top: 30px;\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div style=<span class=\"string\">\"background-color: yellow; height:200px;\"</span>&gt;</div><div class=\"line\">    &lt;div style=<span class=\"string\">\"background-color: blue;height: 100px; \"</span>&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>上面两种中, 第一种由于设置了margin-top, 导致穿透,使父级容器下移.<br>当外层容器增加 overflow: hidden属性后, 能够避免穿透问题.<br>scroll, auto, hidden (overflow只是万千方法中的一种)<br>或者可以用边框, padding, margin自身元素BFC化</p>\n<h3 id=\"两栏布局\"><a href=\"#两栏布局\" class=\"headerlink\" title=\"两栏布局\"></a>两栏布局</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;img style=<span class=\"string\">\"float:left;height: 250px;\"</span> src=<span class=\"string\">\"images/901.jpg\"</span>&gt;</div><div class=\"line\">&lt;div style=<span class=\"string\">\"background-color: yellow;overflow: hidden\"</span>&gt;</div><div class=\"line\">    &lt;img style=<span class=\"string\">\"display: block;\"</span> src=<span class=\"string\">\"images/img1.jpg\"</span>&gt;</div><div class=\"line\">    &lt;img style=<span class=\"string\">\"display: block;\"</span> src=<span class=\"string\">\"images/img1.jpg\"</span>&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p><img src=\"/images/BFC_1.png\" alt=\"1\">;</p>\n<p>两栏自适应布局写法:<br>.cell {<br>    display: table-cell; width: 2000px;//IE8+ BFC table-cell不溢出父容器.<br>    *display:inline-block;*width:auto;//IE7 伪BFC特性<br>}</p>\n<h2 id=\"overflow与absolute绝对定位\"><a href=\"#overflow与absolute绝对定位\" class=\"headerlink\" title=\"overflow与absolute绝对定位\"></a>overflow与absolute绝对定位</h2><h3 id=\"overflow-hidden失效\"><a href=\"#overflow-hidden失效\" class=\"headerlink\" title=\"overflow: hidden失效\"></a>overflow: hidden失效</h3><p>当子元素的position设置为: absolute.<br>hidden时, 子元素全部显示. scroll时滚动无效<br>失效原因:绝对定位元素不总是被父级overflow属性剪裁, 尤其当overflow在绝对定位元素及其包含块之间的时候.(包含块指position不为none的父级元素, 没有则为body)<br>如何避免失效:</p>\n<ol>\n<li>overflow元素自身为包含块</li>\n<li>overflow元素的子元素为包含块</li>\n<li>任意合法transform声明当做包含块.</li>\n</ol>\n<h2 id=\"overflow与抱大腿\"><a href=\"#overflow与抱大腿\" class=\"headerlink\" title=\"overflow与抱大腿\"></a>overflow与抱大腿</h2><h3 id=\"resize拉伸\"><a href=\"#resize拉伸\" class=\"headerlink\" title=\"resize拉伸\"></a>resize拉伸</h3><p>要想resize起作用, 元素的overflow不能为visible.<br>resize的拖拽区域默认大小: 17*17px(滚动条的尺寸)</p>\n<h3 id=\"ellipsis文字溢出\"><a href=\"#ellipsis文字溢出\" class=\"headerlink\" title=\"ellipsis文字溢出\"></a>ellipsis文字溢出</h3><p>text-overflow: ellipsis 文本溢出,省略号表示.必须设置overflow属性不为visible. </p>\n<h2 id=\"overflow与锚点技术\"><a href=\"#overflow与锚点技术\" class=\"headerlink\" title=\"overflow与锚点技术\"></a>overflow与锚点技术</h2><p>锚链与锚点. 选项卡<br>单页应用.overflow:hidden.</p>\n<h1 id=\"float\"><a href=\"#float\" class=\"headerlink\" title=\"float\"></a>float</h1><p>初衷: 文字环绕效果.</p>\n<h2 id=\"包裹与破坏\"><a href=\"#包裹与破坏\" class=\"headerlink\" title=\"包裹与破坏\"></a>包裹与破坏</h2><p>收缩, 坚挺, 隔绝(BFC).<br>破坏,父容器高度塌陷.</p>\n<h2 id=\"如果使高度不塌陷\"><a href=\"#如果使高度不塌陷\" class=\"headerlink\" title=\"如果使高度不塌陷\"></a>如果使高度不塌陷</h2><p>原本作用.文字环绕效果. 特性使然.</p>\n<h2 id=\"清除浮动带来的影响\"><a href=\"#清除浮动带来的影响\" class=\"headerlink\" title=\"清除浮动带来的影响\"></a>清除浮动带来的影响</h2><ol>\n<li>底部插入clear:both;</li>\n<li>BFC化<br>clear通常应用形式:</li>\n<li>html block水平元素底部加清除浮动元素.(很多裸露的div)</li>\n<li>CSS after为元素底部生成.(不兼容IE6, IE7)<br>BFC通常声明:<br>float: left/right;<br>position:absolute/fixed;<br>overflow:hidden/scroll(IE7+)<br>display:inline-block/table-cell;<br>width/height/zoom:1/…(IE6/IE7).</li>\n</ol>\n<h2 id=\"clear与margin重叠\"><a href=\"#clear与margin重叠\" class=\"headerlink\" title=\"clear与margin重叠\"></a>clear与margin重叠</h2><h2 id=\"浮动的滥用\"><a href=\"#浮动的滥用\" class=\"headerlink\" title=\"浮动的滥用\"></a>浮动的滥用</h2><p>浮动可以让元素block化.<br>浮动可以去空格化.<br>问题:</p>\n<ol>\n<li>容错性差</li>\n<li>固定尺寸</li>\n<li>在低版本的IE下有很多问题.<br>少使用FLOAT布局.</li>\n</ol>\n<h2 id=\"float浮动\"><a href=\"#float浮动\" class=\"headerlink\" title=\"float浮动\"></a>float浮动</h2><p>流体布局,单侧固定<br>智能自适应布局.<br>.mib_cell { display: table-cell; <em>display: inline-block; width: 2000px; </em>width: auto; }<br>/<em> 下面这个是固定布局写法 </em>/<br>.mib_feed_fixed { width: 484px; float: right; } &lt;—固定布局写法，右侧的内容无法自适应窗体的宽度变化</p>\n<p>/<em> 下面这个是流体布局写法 </em>/<br>.mib_feed_flow { margin-left: 76px; } &lt;—比固定布局写法好一些，缺点是，必须知道左侧浮动元素的宽度，在这个里例子中，就是必须要知道头像的宽度56px，加上右侧内容与头像的距离20px，56+20=76px，才能确定 margin-left 的值。所以这个写法无法大规模整站应用。</p>\n<h2 id=\"浮动与兼容性\"><a href=\"#浮动与兼容性\" class=\"headerlink\" title=\"浮动与兼容性\"></a>浮动与兼容性</h2><p>IE7浮动问题:</p>\n<ol>\n<li>含clear元素包裹出现问题</li>\n<li>浮动元素倒数2个莫名垂直间距问题</li>\n<li>浮动元素最后一个字符重复问题.</li>\n<li>浮动元素楼梯排列问题.</li>\n<li>浮动元素和文本不在同一行的问题.</li>\n</ol>\n<p>绝对定位时，若元素没有设置宽度，则宽度会根据内容自动变化。（同浮动）<br>横向布局，一栏宽度固定，一栏自适应。则可以用绝对定位。要求：宽度固定的一栏的高度要大于绝对定位的高度。</p>\n<p>如何去除内联元素（inline-block元素）之间的间距<br>1、可以在html中直接把元素写在一行上或把闭合标签和第二个开始标签写在一行或两行间添加注释或直接去掉闭合标签但最后一个不能去掉。（换行占一个空格）<br>2、设置margin-right为负值，但要考虑上下文的字体和文字大小。<br>3、先设定子元素字体，再设置父元素font-size:0px;////chrome中：-webkit-text-size-adjust:none;<br>4、设置父元素letter-spacing或word-spacing为负值，要考虑字体，子元素有文字也要注意设置letter-spacing或word-spacing的值。<br>5.float:left;</p>\n<h1 id=\"relative\"><a href=\"#relative\" class=\"headerlink\" title=\"relative\"></a>relative</h1><p>作用：</p>\n<ol>\n<li>限制absolute。 在relative里的absolute受限制于外包含块。</li>\n<li>作用于z-index。 若absolute中的z-index设置后，若有外包含块relative，则受外层z-index作用。不受内部z-index设置的作用。</li>\n<li>限制overflow。 设置了absolute的元素，不受overflow:hidden的限制，在超出内容的范围仍然能够显示.若外层包含块设置了relative, 则受hidden影响.<br>对fixed, 则只能第二条有效.其余失效.<h2 id=\"relative定位\"><a href=\"#relative定位\" class=\"headerlink\" title=\"relative定位\"></a>relative定位</h2>相对自身, 无侵入性.<br>margin-top和top将元素提高的影响: 第一个会影响别人. relative的top不会影响其他元素.<br>top/bottom同时设置时, top起作用. left起作用.<h2 id=\"relative与层级\"><a href=\"#relative与层级\" class=\"headerlink\" title=\"relative与层级\"></a>relative与层级</h2></li>\n<li>提交层叠上下文–鬼畜级别. 默认为DOM流后面的元素覆盖前面的. 但元素设置了position:relative后, 层级提高.</li>\n<li>对不同的relative设置不同的z-index;若z-index:auto 则不会限制;</li>\n</ol>\n<h2 id=\"relative的最小化影响原则\"><a href=\"#relative的最小化影响原则\" class=\"headerlink\" title=\"relative的最小化影响原则\"></a>relative的最小化影响原则</h2><p>指的是尽量降低relative属性对其他元素或布局的潜在影响.<br>1,尽量不使用relative.<br>absolute定位不依赖relative<br>2,relative最小化. 需要使用absolute定位依赖于relative的元素, 单独用一个div设置relative包裹.</p>\n<h1 id=\"absolute定位\"><a href=\"#absolute定位\" class=\"headerlink\" title=\"absolute定位\"></a>absolute定位</h1><h2 id=\"absolute与浮动的关系\"><a href=\"#absolute与浮动的关系\" class=\"headerlink\" title=\"absolute与浮动的关系.\"></a>absolute与浮动的关系.</h2><p>具有: 包裹性(对容器的absolute化。容器设置absolute后，容器变为了 inline-block),破坏性(从文档流中脱离)<br>绝对定位生效时, 浮动失效.</p>\n<h2 id=\"位置跟随\"><a href=\"#位置跟随\" class=\"headerlink\" title=\"位置跟随\"></a>位置跟随</h2><p>原来是块级, 则absolute后也是块级;原来是内联块,之后也是内联块</p>\n<h2 id=\"无依赖的absolute更强大\"><a href=\"#无依赖的absolute更强大\" class=\"headerlink\" title=\"无依赖的absolute更强大\"></a>无依赖的absolute更强大</h2><h3 id=\"图标图片的覆盖-无依赖relative\"><a href=\"#图标图片的覆盖-无依赖relative\" class=\"headerlink\" title=\"图标图片的覆盖(无依赖relative)\"></a>图标图片的覆盖(无依赖relative)</h3><p>可以直接通过absolute,再设置margin即可.不必使用父容器的relative,更干净.</p>\n<h3 id=\"下拉列表项等\"><a href=\"#下拉列表项等\" class=\"headerlink\" title=\"下拉列表项等\"></a>下拉列表项等</h3><h3 id=\"图片居中\"><a href=\"#图片居中\" class=\"headerlink\" title=\"图片居中\"></a>图片居中</h3><p>利用跟随,<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"course-loading-x\"</span>&gt;</div><div class=\"line\">  &amp;nbsp;&lt;img src=<span class=\"string\">\"http://img.mukewang.com/5453077400015bba00010001.gif\"</span> class=<span class=\"string\">\"course-loading\"</span> alt=<span class=\"string\">\"加载中...\"</span>&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">css代码</div><div class=\"line\">.course-loading-x &#123; height: 100px; margin-top: 20px; text-align: center; letter-spacing: -.25em; overflow: hidden; &#125;</div><div class=\"line\">.course-loading &#123; position: absolute; margin-left: -26px; &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"course-fixed-x\"</span>&gt;</div><div class=\"line\">&amp;nbsp;&lt;div class=<span class=\"string\">\"course-fixed\"</span>&gt;</div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"http://www.imooc.com/activity/diaocha\"</span> class=<span class=\"string\">\"goto_top_diaocha\"</span>&gt;&lt;/a&gt;</div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"http://www.imooc.com/mobile/app\"</span> class=<span class=\"string\">\"goto_top_app\"</span>&gt;&lt;/a&gt;</div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"http://www.imooc.com/user/feedback\"</span> class=<span class=\"string\">\"goto_top_feed\"</span>&gt;&lt;/a&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">固定定位: 右方.</div><div class=\"line\">.course-fixed-x &#123; height: 0px; text-align: right; overflow: hidden; &#125;</div><div class=\"line\">.course-fixed &#123; display: inline; position: fixed; margin-left: 20px; bottom: 100px; &#125;</div></pre></td></tr></table></figure>\n<p>##<br>动画尽量作用在绝对定位元素上.<br>层叠,后来居上原则.</p>\n<h2 id=\"top-bottom-left-right\"><a href=\"#top-bottom-left-right\" class=\"headerlink\" title=\"top/bottom/left/right\"></a>top/bottom/left/right</h2><p>若只设置了top, 则水平方向不变.同理…</p>\n<h2 id=\"absolute与width和height\"><a href=\"#absolute与width和height\" class=\"headerlink\" title=\"absolute与width和height\"></a>absolute与width和height</h2><p>在没有设置width时, left和right可以同时设置,width类似于right-left;(IE7+)同理top/bottom<br>元素百分比height想要起作用, 则需要父级容器的height不是auto. 但当父容器为absolute时, 内部元素可以用百分比.<br>如果width与left/right同时设置, 则以width为准.<br>如果width与left/right,margin:auto同时设置<br>.image {<br>    position: absolute; left: 0; right: 0; width:80%;margin:auto;<br>}<br>居中</p>\n<h2 id=\"absolute与整体布局\"><a href=\"#absolute与整体布局\" class=\"headerlink\" title=\"absolute与整体布局\"></a>absolute与整体布局</h2><h1 id=\"line-height\"><a href=\"#line-height\" class=\"headerlink\" title=\"line-height\"></a>line-height</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>行高,两行文字基线的距离.</p>\n<h2 id=\"line-height与盒子模型\"><a href=\"#line-height与盒子模型\" class=\"headerlink\" title=\"line-height与盒子模型\"></a>line-height与盒子模型</h2><p>盒子模型.</p>\n<ol>\n<li>内容区域</li>\n<li>内联盒子</li>\n<li>行框盒子</li>\n<li>包含盒子<h2 id=\"line-height机理\"><a href=\"#line-height机理\" class=\"headerlink\" title=\"line-height机理\"></a>line-height机理</h2>内联元素的高度从何而来? 不是文字撑开的.是由line-height决定的.<br>内容区域高度+行间距=行高<br>内容区域高度只与字号以及字体有关, 与line-height没有任何关系.<br>在simsun字体下, font-size = 内容区域高度<br>行框盒子里多个内联盒子,高度怎么?<br>vertical-align对内联元素影响. </li>\n</ol>\n<h2 id=\"line-height各类属性值\"><a href=\"#line-height各类属性值\" class=\"headerlink\" title=\"line-height各类属性值\"></a>line-height各类属性值</h2><p>normal: 正常,默认.跟着浏览器的默认, 且与元素字体有关.<br>数字: 根据当前元素的font-size大小计算. (倍数)<br>长度: em,rem,px,pt<br>百分比:相对于设置了font-size大小的倍数.<br>继承: .</p>\n<p>line-height:1.5/150%/1.5em区别? 计算无区别. 差别在应用元素上. 1.5所有可继承元素根据font-size重计算行高. 150%/1.5em 当前元素根据font-size计算行高, 继承给下面的元素.</p>\n<p>body全局数值行高使用经验:<br>body { font-size: 14px; line-height: ? }<br>20px, 方便心算.line-height: 1.4286</p>\n<h2 id=\"行高与图片的表现\"><a href=\"#行高与图片的表现\" class=\"headerlink\" title=\"行高与图片的表现\"></a>行高与图片的表现</h2><p>行高不会影响图片实际占据的高度.<br>如何消除图片底部的间隙? </p>\n<ol>\n<li>图片块状化, 就没有基线对齐了.(vertical-align适合内联,内联块)</li>\n<li>图片底线对齐 vertical-align: bottom;</li>\n<li>行高足够小-基线位置上移 line-height: 0;</li>\n</ol>\n<h2 id=\"行高实际应用\"><a href=\"#行高实际应用\" class=\"headerlink\" title=\"行高实际应用\"></a>行高实际应用</h2><ol>\n<li>大小不固定的图片, 多行文字垂直居中.  (IE8+)<br>父容器设置行高, 图片或文字(设置displa: inline-block)设置vertical-align: middle;</li>\n<li>代替height (IE6/IE7)</li>\n</ol>\n<h1 id=\"padding\"><a href=\"#padding\" class=\"headerlink\" title=\"padding\"></a>padding</h1><h2 id=\"对元素尺寸的影响\"><a href=\"#对元素尺寸的影响\" class=\"headerlink\" title=\"对元素尺寸的影响\"></a>对元素尺寸的影响</h2><h3 id=\"对block水平元素\"><a href=\"#对block水平元素\" class=\"headerlink\" title=\"对block水平元素\"></a>对block水平元素</h3><p>1, padding会影响尺寸; 2, 当width:auto或border-sizing: border-box时, 影响内容区域, 不影响尺寸. 当padding很大时(左右两边加起来超过width),这是width为0, 此时影响了元素的尺寸.<br>对于block水平元素:</p>\n<ol>\n<li>padding值很大,一定会影响尺寸.</li>\n<li>width不是auto(有固定的值), 加padding会影响尺寸.</li>\n<li>width为auto或border-sizing:border-box, padding值小的时候, 不影响尺寸. <h3 id=\"内联水平元素\"><a href=\"#内联水平元素\" class=\"headerlink\" title=\"内联水平元素\"></a>内联水平元素</h3>水平padding影响尺寸, 垂直padding不影响尺寸.但是会影响背景色(占据空间).<br>如何利用这一特性? 高度可控的分割线<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">注册&lt;span&gt;&lt;/span&gt;退出登录</div><div class=\"line\">css</div><div class=\"line\">span &#123;</div><div class=\"line\">\tpadding: 16px 6px 1px;margin-left:12px; border-left:2px solid; font-size: 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"关于padding负值和百分比\"><a href=\"#关于padding负值和百分比\" class=\"headerlink\" title=\"关于padding负值和百分比\"></a>关于padding负值和百分比</h2><p>不支持任何形式的负值.<br>padding的百分比均是相对于宽度计算的.<br>内联元素的padding百分比值.1,相对于宽度计算;2,默认的高度宽度有细节差异;3,padding会断行.<br>inline元素的垂直padding会显示规范中的”strut”,导致不是完全的正方形.设置font-size为0即可.</p>\n<h2 id=\"标签元素的内置padding\"><a href=\"#标签元素的内置padding\" class=\"headerlink\" title=\"标签元素的内置padding\"></a>标签元素的内置padding</h2><p>1, ol/ul列表<br>a,ol/ul内置padding-left, 但是单位是px, 而不是em;<br>b,Chrome下是40px<br>c,如果字号很小, 间距很开<br>d,如果字号很大, 序号会跑到容器外.<br>文字大小12px,14px, padding-left,22,25px<br>2, 表单元素<br>input/textarea内置padding, button内置padding, 部分浏览器select下拉内置padding(FF,IE8+), 所有浏览器radio/checkbox无内置padding. button的padding难控制.(padding计算有问题)</p>\n<h2 id=\"padding与图形绘制\"><a href=\"#padding与图形绘制\" class=\"headerlink\" title=\"padding与图形绘制\"></a>padding与图形绘制</h2><p>三道杠的效果<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.line-tri &#123;</div><div class=\"line\">\twidth: 150px;</div><div class=\"line\">\theight: 30px;</div><div class=\"line\">\tpadding: 15px 0;</div><div class=\"line\">\tborder-top: 30px solid;</div><div class=\"line\">\tborder-bottom: 30px solid;</div><div class=\"line\">\tbackground-color: gray;</div><div class=\"line\">\tbackground-clip: content-box;./*  背景色只能在内容区域显示. */</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"padding应用\"><a href=\"#padding应用\" class=\"headerlink\" title=\"padding应用\"></a>padding应用</h2><p>1, 正方体, padding: 50%;<br>2, 配合margin实现等高布局.<br>3, 两栏自适应布局.使子元素在padding上.</p>\n<h1 id=\"vertical-align\"><a href=\"#vertical-align\" class=\"headerlink\" title=\"vertical-align\"></a>vertical-align</h1><p>垂直对齐. </p>\n<ol>\n<li>线类<br> baseline(默认), top, middle, bottom</li>\n<li>文本类<br>text-top, text-bottom</li>\n<li>上标下标<br> sub, super</li>\n<li>数值百分比类<br> 20px, 2em, 20%, …<br>数字百分比类: 都带数字, 都支持负值, 行为表现一致.百分比是相对于行高计算的.<br>(IE6/7)百分比不支持小数line-height.</li>\n</ol>\n<h2 id=\"起作用的前提\"><a href=\"#起作用的前提\" class=\"headerlink\" title=\"起作用的前提\"></a>起作用的前提</h2><p>应用于inline和table-cell<br>inline包括: inline: <img>, <span>, <strong>, <em>, 未知元素…<br>inline-block:<input>(IE8+), <button>(IE8+)<br>table-cell包括<br>table-cell:<td><br>默认状态下, 支持 图片,按钮, 文字和单元格.<br>改变显示水平:1, display, 2, CSS声明间接改变display(float, absolute)<br>不居中的可能性: 1, line-height太短.<br>display:table-cell;//只对自身作用, 对子元素没有作用.</td></button></em></strong></span></p>\n<h2 id=\"vertical-align和line-height\"><a href=\"#vertical-align和line-height\" class=\"headerlink\" title=\"vertical-align和line-height\"></a>vertical-align和line-height</h2><p>一个图片在div内底部有留白, 消除, 则可以设置display:block;或者改变vertical-align的默认为bottom/Middle/top,或者改变line-height为0, 或者font-size为0;<br>近似垂直居中:vertical-align: middle; line-height: 250px;</p>\n<h2 id=\"vertical-align线性属性值\"><a href=\"#vertical-align线性属性值\" class=\"headerlink\" title=\"vertical-align线性属性值\"></a>vertical-align线性属性值</h2><p>vertical-align:bottom;<br>1,inline/inline-block: 元素底部和整行的底部对齐.<br>2,table-cell: 单元格底padding边缘和表格行的底部对齐.</p>\n<hr>\n<p>vertical-align:top;<br>1,inline/inline-block: 元素顶部和整行的顶部对齐.<br>2,table-cell: 单元格顶padding边缘和表格行的顶部对齐.</p>\n<hr>\n<p>vertical-align: middle;<br>1,inline/inline-block: 元素的垂直中心点和父元素基线上1/2 x-height处对齐<br>2,table-cell: 单元格填充盒子相对于外面的表格行居中对齐.<br>完全居中:font-size:0;</p>\n<h2 id=\"文本类属性值\"><a href=\"#文本类属性值\" class=\"headerlink\" title=\"文本类属性值\"></a>文本类属性值</h2><p>1,vertical-align:text-top;盒子的顶部和父级content area的顶部对齐<br>2,vertical-align:text-bottom;盒子的底部和父级content area的底部对齐.<br>注意点:</p>\n<ol>\n<li>元素vertical-align垂直对齐的位置与前后的元素都没有关系;</li>\n<li>元素vertical-align垂直对齐的位置与行高line-height没有关系,与字体大小font-size有关;<br>实际作用: 表情图片与文字的对齐效果.<br>使用顶线/底线的问题在于受其他内联元素影响, 造成巨大定位偏差.<br>使用文本底部较合适.</li>\n</ol>\n<h2 id=\"上标下标\"><a href=\"#上标下标\" class=\"headerlink\" title=\"上标下标\"></a>上标下标</h2><p>sub/super: 与HTML里的sub/sup一样.调整基线.</p>\n<h2 id=\"vertical-align前后\"><a href=\"#vertical-align前后\" class=\"headerlink\" title=\"vertical-align前后\"></a>vertical-align前后</h2><p>只需关注元素与父级的关系即可. </p>\n<h2 id=\"vertical-align应用\"><a href=\"#vertical-align应用\" class=\"headerlink\" title=\"vertical-align应用\"></a>vertical-align应用</h2><p>负值对齐;<br>不定尺寸图片或多行文字的垂直居中:1, 主题元素inline-block化;2, 0宽度100%高度辅助元素;3, vertical-align: middle.</p>\n<h1 id=\"z-index\"><a href=\"#z-index\" class=\"headerlink\" title=\"z-index\"></a>z-index</h1><h2 id=\"z-index基础\"><a href=\"#z-index基础\" class=\"headerlink\" title=\"z-index基础\"></a>z-index基础</h2><p>auto, <integer>, inherit.<br>特性: 支持负值, 支持css3动画, css2.1需要和定位一起使用</integer></p>\n<h2 id=\"z-index与定位属性\"><a href=\"#z-index与定位属性\" class=\"headerlink\" title=\"z-index与定位属性\"></a>z-index与定位属性</h2><p>除了static属性的定位属性都可以.<br>定位没有发生嵌套:1, 后来居上原则;2, 哪个大(z-index),哪个上.<br>发生了嵌套:祖先优先原则. 层叠上下文, 层叠水平 </p>\n<h2 id=\"层叠上下文-层叠水平\"><a href=\"#层叠上下文-层叠水平\" class=\"headerlink\" title=\"层叠上下文, 层叠水平\"></a>层叠上下文, 层叠水平</h2><h2 id=\"层叠顺序\"><a href=\"#层叠顺序\" class=\"headerlink\" title=\"层叠顺序\"></a>层叠顺序</h2><p>7阶层叠水平:最底 层叠上下文  负z-index  block块状水平盒子  float浮动盒子 inline/inline-block水平盒子 z-index:auto或看成z-index:0 正z-index</p>\n<h2 id=\"z-index与层叠上下文\"><a href=\"#z-index与层叠上下文\" class=\"headerlink\" title=\"z-index与层叠上下文\"></a>z-index与层叠上下文</h2><ol>\n<li>定位元素默认z-index:auto可以看成是z-index: 0;</li>\n<li>z-index不为auto的定位元素会创建层叠上下文</li>\n<li>z-index层叠顺序的比较受制于父级层叠上下文  </li>\n</ol>\n<h2 id=\"其他css属性与层叠上下文\"><a href=\"#其他css属性与层叠上下文\" class=\"headerlink\" title=\"其他css属性与层叠上下文\"></a>其他css属性与层叠上下文</h2><p><img src=\"/image/css1.png\" alt=\"css1\"></p>\n<h2 id=\"z-index与其他CSS属性\"><a href=\"#z-index与其他CSS属性\" class=\"headerlink\" title=\"z-index与其他CSS属性\"></a>z-index与其他CSS属性</h2><h2 id=\"z-index实践\"><a href=\"#z-index实践\" class=\"headerlink\" title=\"z-index实践\"></a>z-index实践</h2><ol>\n<li>最小化影响原则</li>\n<li>不犯二准则 对于非浮层元素,避免数值 z-index值, z-index值没有任何道理超过2</li>\n<li>组件层级计算器</li>\n<li>可访问性隐藏</li>\n</ol>\n<h1 id=\"重拾CSS\"><a href=\"#重拾CSS\" class=\"headerlink\" title=\"重拾CSS\"></a>重拾CSS</h1><p>所有可以用js写出来的, 一定可以用js重写一遍.<br>css权威指南, 精通css(高级Web标准解决方案), CSS Secrets<br>用CSS实现内凹圆角.</p>\n<p>DOMReady 实现策略:</p>\n<ol>\n<li>支持DOMContentLoaded时间的, 就使用支持DOMContentLoaded时间的</li>\n<li>不支持的,就用HACK兼容. 通过IE中的document.documentElement.doScroll(‘left’)来判断DOM树是否创建完毕.<br>块状元素与内联元素嵌套规则</li>\n<li>块元素可以包含内联或某些块状,但内联元素不能包含块元素,只能包含其他的块元素.</li>\n<li>块元素不能放在p里面.</li>\n<li>有几个特殊的块元素只能包含内联元素,不能再包含块元素,这几个特殊标签是:h1~h6,p,,dt</li>\n<li>li内可以包含div标签</li>\n<li>块级元素与块级元素并列,内联元素与内联元素并列.</li>\n</ol>\n<p>animation-delay:为负值. 跳过这一段时间的动画.</p>\n<p>加载条(利用animation-delay负值实现)<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;!-- html --&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"spinner\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"line1\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"line2\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"line3\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"line4\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"line5\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">/* CSS */</div><div class=\"line\">.spinner&#123;</div><div class=\"line\">  width:50px;</div><div class=\"line\">  height:50px;</div><div class=\"line\">  margin:100px auto;</div><div class=\"line\">  text-align:center;</div><div class=\"line\">&#125;</div><div class=\"line\">.spinner &gt; div&#123;</div><div class=\"line\">  display:inline-block;</div><div class=\"line\">  width:6px;</div><div class=\"line\">  height:100%;</div><div class=\"line\">  background:green;</div><div class=\"line\">  -webkit-animation: strechdelay 1.2s infinite ease-in-out ;</div><div class=\"line\">&#125;</div><div class=\"line\">.spinner .line2&#123;</div><div class=\"line\">  -webkit-animation-delay:-1.1s;</div><div class=\"line\">&#125;</div><div class=\"line\">.spinner .line3&#123;</div><div class=\"line\">  -webkit-animation-delay:-1.0s;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.spinner .line4&#123;</div><div class=\"line\">  -webkit-animation-delay:-0.9s;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.spinner .line5&#123;</div><div class=\"line\">  -webkit-animation-delay:-0.8s;</div><div class=\"line\">&#125;/**/</div><div class=\"line\">@-webkit-keyframes strechdelay&#123;</div><div class=\"line\">  0%,40%,100%&#123;</div><div class=\"line\">    -webkit-transform:scaleY(.4);</div><div class=\"line\">  &#125;</div><div class=\"line\">  20%&#123;</div><div class=\"line\">    -webkit-transform:scaleY(1);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>加载时的圆环(border颜色实现)<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"spinner\"</span>&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">body&#123;</div><div class=\"line\">  background:<span class=\"comment\">#000;</span></div><div class=\"line\">&#125;</div><div class=\"line\">.spinner&#123;</div><div class=\"line\">  width:10em;</div><div class=\"line\">  height:10em;</div><div class=\"line\">  border-radius:50%;</div><div class=\"line\">  margin:100px auto;</div><div class=\"line\">  border:1.1em solid rgba(255,255,255,.2);</div><div class=\"line\">  border-left-color:<span class=\"comment\">#fff;</span></div><div class=\"line\">  -webkit-animation:load 1.1s infinite linear;</div><div class=\"line\">&#125;</div><div class=\"line\">@-webkit-keyframes load&#123;</div><div class=\"line\">  from&#123;</div><div class=\"line\">    transform:rotate(0deg);</div><div class=\"line\">  &#125;</div><div class=\"line\">  to&#123;</div><div class=\"line\">    transform:rotate(360deg);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>CSS Sprite<br>css 雪碧图 1, 静态图片, 2, 小图片(3.5k以下)3, 加载量大   一些大图不用雪碧图<br>通过css background-position来实现.<br>雪碧图生成方式:1, PS手动拼图; 2,使用sprite工具自动生成.</p>\n<p>HTTP请求<br>1, 建立TCP连接<br>2, Web浏览器向Web服务器发送请求命令<br>3, Web浏览器发送请求头信息<br>4, Web浏览器应答<br>5, Web浏览器发送应答头信息<br>6, Web服务器向浏览器发送数据<br>7, Web服务器关闭TCP连接.</p>\n<p>HTTP请求:<br>1, 请求方法<br>2, 正在请求的URL<br>3, 请求头<br>4, 请求体<br><img src=\"images/httprequest1.png\" alt=\"httprequest1\">;</p>\n<p>相应<br>1, 状态码<br><img src=\"images/statuscode.png\" alt=\"statuscode\">;<br>2, 响应头<br>3, 相应体</p>\n","excerpt":"<h1 id=\"CSS-margin\"><a href=\"#CSS-margin\" class=\"headerlink\" title=\"CSS margin\"></a>CSS margin</h1><h2 id=\"margin对于容器的尺寸可以影响可视尺寸和占据尺寸。\"><a href=\"#margin对于容器的尺寸可以影响可视尺寸和占据尺寸。\" class=\"headerlink\" title=\"margin对于容器的尺寸可以影响可视尺寸和占据尺寸。\"></a>margin对于容器的尺寸可以影响可视尺寸和占据尺寸。</h2><p>可视尺寸：1，使用于没有设定width、height的普通block水平元素。2，只适用于水平方向尺寸。<br>占据尺寸：1,block、inline-block水平元素均适用；2，与 有没有设定width、height值无关；3，适用于水平方向和垂直方向。<br>应用:滚动容器内上下留白.</p>\n<h2 id=\"普通元素的百分比margin都是相对于容器的宽度计算的。\"><a href=\"#普通元素的百分比margin都是相对于容器的宽度计算的。\" class=\"headerlink\" title=\"普通元素的百分比margin都是相对于容器的宽度计算的。\"></a>普通元素的百分比margin都是相对于容器的宽度计算的。</h2><p>绝对定位元素的百分比margin 是相对于第一个定位祖先元素（relative，absolute，fixed）的宽度计算的。<br>应用：自适应矩形。<br>","more":"</p>\n<h2 id=\"margin重叠\"><a href=\"#margin重叠\" class=\"headerlink\" title=\"margin重叠\"></a>margin重叠</h2><p>1,block水平元素(不包括float和absolute)2,不考虑 writing-mode , 只发生在垂直方向(margin bottom_top)<br>发生重叠的情况: 相邻的兄弟元素  父级和第一个/最后一个  空的block元素<br>解决margin-top重叠 1,父元素非块状格式化上下文元素 2,父元素没有border-top设置 3, 父元素没有padding-top设置 4,父元素和第一个子元素之间没有inline元素分割.<br>解决margin-bottom重叠  前4同上 5,父元素没有height相关声明<br>空block元素margin重叠条件; 1,元素没有border设置,2,没有padding设置,3,没有inline元素 4,没有height,或者min-height</p>\n<p>正正取大值,正负值相加,负负最负值<br>margin重叠意义:<br>列表.垂直: 多使用margin-top和margin-bottom一起用</p>\n<h2 id=\"margin-AUTO\"><a href=\"#margin-AUTO\" class=\"headerlink\" title=\"margin AUTO\"></a>margin AUTO</h2><p>自动填充特性: 元素有时候,就算没有设置width或height, 也会自动填充对应的方位.<br>设置width或height,自动填充特性就会被覆盖.<br>auto 一侧为定值, 一侧为auto, 则为剩余空间大小<br>两侧都是auto, 平分空间大小<br>问: 为什么图片 margin: 0 auto 不水平居中? 因为此时图片是inline水平, 就算没有width, 其也不会占据整个容器. 默认的img本身就不能占据整个容器. 解决方法, display: block;<br>问: 为什么明明容器定高, 元素定高, margin: auto 0 无法垂直居中?<br>.father { height: 200px;}<br>.son { height: 100px; width: 500px; margin: auto; }<br>如果 .son没有设置height: 100px 高度会自动200px高吗? 不会.<br>margin垂直居中的方法:</p>\n<ol>\n<li>writing-mode<br>父元素writing-mode设置为: vertical-lr;</li>\n<li>绝对定位(IE8+)<br>先设置4个方位, 再设置width,height, 最后设置margin: auto</li>\n</ol>\n<h2 id=\"CSSmargin-负值定位\"><a href=\"#CSSmargin-负值定位\" class=\"headerlink\" title=\"CSSmargin 负值定位\"></a>CSSmargin 负值定位</h2><h3 id=\"margin下的两端对齐-可视尺寸\"><a href=\"#margin下的两端对齐-可视尺寸\" class=\"headerlink\" title=\"margin下的两端对齐(可视尺寸)\"></a>margin下的两端对齐(可视尺寸)</h3><h3 id=\"margin下的等高对齐-占据尺寸\"><a href=\"#margin下的等高对齐-占据尺寸\" class=\"headerlink\" title=\"margin下的等高对齐(占据尺寸)\"></a>margin下的等高对齐(占据尺寸)</h3><pre><code>在父元素中 overflow: hidden;\n同时使用margin-bottom: -600px; padding-bottom:600px; \n背景在padding内填充.\n</code></pre><h3 id=\"margin-负值下的两栏自适应布局\"><a href=\"#margin-负值下的两栏自适应布局\" class=\"headerlink\" title=\"margin 负值下的两栏自适应布局\"></a>margin 负值下的两栏自适应布局</h3><pre><code>元素占据空间随margin移动\n</code></pre><p>浮动元素会收缩, 有个wrap属性. ???<br>DOM顺序和最终视觉顺序相符 是很好的. </p>\n<h2 id=\"有时候margin无效-为啥\"><a href=\"#有时候margin无效-为啥\" class=\"headerlink\" title=\"有时候margin无效, 为啥?\"></a>有时候margin无效, 为啥?</h2><h3 id=\"元素本身特性\"><a href=\"#元素本身特性\" class=\"headerlink\" title=\"元素本身特性\"></a>元素本身特性</h3><pre><code>inline水平元素的垂直margin无效\n1, 不是替换元素\n2, 正常书写模式\n</code></pre><h3 id=\"margin重叠-1\"><a href=\"#margin重叠-1\" class=\"headerlink\" title=\"margin重叠\"></a>margin重叠</h3><h3 id=\"display-table-cell与margin\"><a href=\"#display-table-cell与margin\" class=\"headerlink\" title=\"display:table-cell与margin\"></a>display:table-cell与margin</h3><pre><code>display:table-cell/table-row等声明的margin无效!\n</code></pre><p>例外的替换元素.img, </p>\n<h3 id=\"绝对定位与margin\"><a href=\"#绝对定位与margin\" class=\"headerlink\" title=\"绝对定位与margin\"></a>绝对定位与margin</h3><pre><code>绝对定位元素非定位方位的margin&quot;无效&quot;, 实际上影响了占据空间.但由于是绝对定位, 脱离文档流, 所以肉眼感觉没有效果. \n</code></pre><h3 id=\"鞭长莫及\"><a href=\"#鞭长莫及\" class=\"headerlink\" title=\"鞭长莫及.\"></a>鞭长莫及.</h3><h3 id=\"内联特性导致的margin无效\"><a href=\"#内联特性导致的margin无效\" class=\"headerlink\" title=\"内联特性导致的margin无效.\"></a>内联特性导致的margin无效.</h3><p>内联元素内的文字不会跑出容器.</p>\n<h2 id=\"margin-start-end-等属性\"><a href=\"#margin-start-end-等属性\" class=\"headerlink\" title=\"margin-start /end 等属性.\"></a>margin-start /end 等属性.</h2><p>start的意义: 不一定是左方向(跟direction方向有关).表示当前文档流开始的地方.<br>border-start: </p>\n<h1 id=\"overflow\"><a href=\"#overflow\" class=\"headerlink\" title=\"overflow\"></a>overflow</h1><h2 id=\"基本内容\"><a href=\"#基本内容\" class=\"headerlink\" title=\"基本内容\"></a>基本内容</h2><p>基本属性:visible(默认), hidden, scroll, auto, inherit(IE8+).<br>overflow-x: hidden;//水平被隐藏, 垂直方向为scroll (IE8+)<br>overflow-y:<br>如果overflow-x与overflow-y值相同, 则等同于overflow; 如果不相同,如其中一个为visible, 另一个hidden, scroll, auto, 则visible会被重置为auto.<br>兼容性<br>overflow起作用的前提:</p>\n<ol>\n<li>非display: inline水平</li>\n<li>对应方位的尺寸限制.width/ height/ max-width/ max-height/ absolute.</li>\n<li>对于单元格td等, 还需要设置table为table-layout: fixed状态才行.<br>IE7下, 文字越多, 按钮两侧的padding留白就越大. 用overflow: visible可以解决.<h2 id=\"滚动条与overflow\"><a href=\"#滚动条与overflow\" class=\"headerlink\" title=\"滚动条与overflow\"></a>滚动条与overflow</h2></li>\n<li>有些元素自带overflow: auto/overflow: scroll属性 比如: html, textarea<br>无论什么浏览器, 默认滚动条都来自HTML 而不是 BODY<br>IE8+ overflow: auto<br>滚动高度: var st = document.body.scrollTop || document.documentElement.scrollTop;<br>//第一个是Chrome浏览器的写法, 第二个是其他浏览器的.<br>overflow的padding-bottom缺失现象. 导致不一样的scrollHeight(元素内容高度)<br>滚动条的宽度.<br>overflow: auto的潜在布局隐患.<br>水平居中跳动问题.修复:</li>\n<li>html { overflow-y: scroll; }</li>\n<li>.container{padding-left: calc(100vw - 100%); }//IE9+</li>\n</ol>\n<h2 id=\"overflow与BFC\"><a href=\"#overflow与BFC\" class=\"headerlink\" title=\"overflow与BFC\"></a>overflow与BFC</h2><p>BFC: (block formatting context)  块级格式化上下文<br>overflow属性值为 auto, scroll, hidden时, 有效, 为visible时, 无效.<br>作用:</p>\n<ol>\n<li>清除浮动影响</li>\n<li>避免margin穿透问题</li>\n<li>两栏自适应布局</li>\n</ol>\n<p>内部浮动无影响:<br>使用scroll, auto, hidden中的一种. IE7+等;<br>.clearfix { *zoom: 1; }<br>.clearfix:after { content:’’; display:table; clear: both; }</p>\n<h3 id=\"margin-穿透问题\"><a href=\"#margin-穿透问题\" class=\"headerlink\" title=\"margin 穿透问题\"></a>margin 穿透问题</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div style=<span class=\"string\">\"background-color: yellow; height:200px;\"</span>&gt;</div><div class=\"line\">    &lt;div style=<span class=\"string\">\"background-color: blue;height: 100px; margin-top: 30px;\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div style=<span class=\"string\">\"background-color: yellow; height:200px;\"</span>&gt;</div><div class=\"line\">    &lt;div style=<span class=\"string\">\"background-color: blue;height: 100px; \"</span>&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>上面两种中, 第一种由于设置了margin-top, 导致穿透,使父级容器下移.<br>当外层容器增加 overflow: hidden属性后, 能够避免穿透问题.<br>scroll, auto, hidden (overflow只是万千方法中的一种)<br>或者可以用边框, padding, margin自身元素BFC化</p>\n<h3 id=\"两栏布局\"><a href=\"#两栏布局\" class=\"headerlink\" title=\"两栏布局\"></a>两栏布局</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;img style=<span class=\"string\">\"float:left;height: 250px;\"</span> src=<span class=\"string\">\"images/901.jpg\"</span>&gt;</div><div class=\"line\">&lt;div style=<span class=\"string\">\"background-color: yellow;overflow: hidden\"</span>&gt;</div><div class=\"line\">    &lt;img style=<span class=\"string\">\"display: block;\"</span> src=<span class=\"string\">\"images/img1.jpg\"</span>&gt;</div><div class=\"line\">    &lt;img style=<span class=\"string\">\"display: block;\"</span> src=<span class=\"string\">\"images/img1.jpg\"</span>&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p><img src=\"/images/BFC_1.png\" alt=\"1\">;</p>\n<p>两栏自适应布局写法:<br>.cell {<br>    display: table-cell; width: 2000px;//IE8+ BFC table-cell不溢出父容器.<br>    *display:inline-block;*width:auto;//IE7 伪BFC特性<br>}</p>\n<h2 id=\"overflow与absolute绝对定位\"><a href=\"#overflow与absolute绝对定位\" class=\"headerlink\" title=\"overflow与absolute绝对定位\"></a>overflow与absolute绝对定位</h2><h3 id=\"overflow-hidden失效\"><a href=\"#overflow-hidden失效\" class=\"headerlink\" title=\"overflow: hidden失效\"></a>overflow: hidden失效</h3><p>当子元素的position设置为: absolute.<br>hidden时, 子元素全部显示. scroll时滚动无效<br>失效原因:绝对定位元素不总是被父级overflow属性剪裁, 尤其当overflow在绝对定位元素及其包含块之间的时候.(包含块指position不为none的父级元素, 没有则为body)<br>如何避免失效:</p>\n<ol>\n<li>overflow元素自身为包含块</li>\n<li>overflow元素的子元素为包含块</li>\n<li>任意合法transform声明当做包含块.</li>\n</ol>\n<h2 id=\"overflow与抱大腿\"><a href=\"#overflow与抱大腿\" class=\"headerlink\" title=\"overflow与抱大腿\"></a>overflow与抱大腿</h2><h3 id=\"resize拉伸\"><a href=\"#resize拉伸\" class=\"headerlink\" title=\"resize拉伸\"></a>resize拉伸</h3><p>要想resize起作用, 元素的overflow不能为visible.<br>resize的拖拽区域默认大小: 17*17px(滚动条的尺寸)</p>\n<h3 id=\"ellipsis文字溢出\"><a href=\"#ellipsis文字溢出\" class=\"headerlink\" title=\"ellipsis文字溢出\"></a>ellipsis文字溢出</h3><p>text-overflow: ellipsis 文本溢出,省略号表示.必须设置overflow属性不为visible. </p>\n<h2 id=\"overflow与锚点技术\"><a href=\"#overflow与锚点技术\" class=\"headerlink\" title=\"overflow与锚点技术\"></a>overflow与锚点技术</h2><p>锚链与锚点. 选项卡<br>单页应用.overflow:hidden.</p>\n<h1 id=\"float\"><a href=\"#float\" class=\"headerlink\" title=\"float\"></a>float</h1><p>初衷: 文字环绕效果.</p>\n<h2 id=\"包裹与破坏\"><a href=\"#包裹与破坏\" class=\"headerlink\" title=\"包裹与破坏\"></a>包裹与破坏</h2><p>收缩, 坚挺, 隔绝(BFC).<br>破坏,父容器高度塌陷.</p>\n<h2 id=\"如果使高度不塌陷\"><a href=\"#如果使高度不塌陷\" class=\"headerlink\" title=\"如果使高度不塌陷\"></a>如果使高度不塌陷</h2><p>原本作用.文字环绕效果. 特性使然.</p>\n<h2 id=\"清除浮动带来的影响\"><a href=\"#清除浮动带来的影响\" class=\"headerlink\" title=\"清除浮动带来的影响\"></a>清除浮动带来的影响</h2><ol>\n<li>底部插入clear:both;</li>\n<li>BFC化<br>clear通常应用形式:</li>\n<li>html block水平元素底部加清除浮动元素.(很多裸露的div)</li>\n<li>CSS after为元素底部生成.(不兼容IE6, IE7)<br>BFC通常声明:<br>float: left/right;<br>position:absolute/fixed;<br>overflow:hidden/scroll(IE7+)<br>display:inline-block/table-cell;<br>width/height/zoom:1/…(IE6/IE7).</li>\n</ol>\n<h2 id=\"clear与margin重叠\"><a href=\"#clear与margin重叠\" class=\"headerlink\" title=\"clear与margin重叠\"></a>clear与margin重叠</h2><h2 id=\"浮动的滥用\"><a href=\"#浮动的滥用\" class=\"headerlink\" title=\"浮动的滥用\"></a>浮动的滥用</h2><p>浮动可以让元素block化.<br>浮动可以去空格化.<br>问题:</p>\n<ol>\n<li>容错性差</li>\n<li>固定尺寸</li>\n<li>在低版本的IE下有很多问题.<br>少使用FLOAT布局.</li>\n</ol>\n<h2 id=\"float浮动\"><a href=\"#float浮动\" class=\"headerlink\" title=\"float浮动\"></a>float浮动</h2><p>流体布局,单侧固定<br>智能自适应布局.<br>.mib_cell { display: table-cell; <em>display: inline-block; width: 2000px; </em>width: auto; }<br>/<em> 下面这个是固定布局写法 </em>/<br>.mib_feed_fixed { width: 484px; float: right; } &lt;—固定布局写法，右侧的内容无法自适应窗体的宽度变化</p>\n<p>/<em> 下面这个是流体布局写法 </em>/<br>.mib_feed_flow { margin-left: 76px; } &lt;—比固定布局写法好一些，缺点是，必须知道左侧浮动元素的宽度，在这个里例子中，就是必须要知道头像的宽度56px，加上右侧内容与头像的距离20px，56+20=76px，才能确定 margin-left 的值。所以这个写法无法大规模整站应用。</p>\n<h2 id=\"浮动与兼容性\"><a href=\"#浮动与兼容性\" class=\"headerlink\" title=\"浮动与兼容性\"></a>浮动与兼容性</h2><p>IE7浮动问题:</p>\n<ol>\n<li>含clear元素包裹出现问题</li>\n<li>浮动元素倒数2个莫名垂直间距问题</li>\n<li>浮动元素最后一个字符重复问题.</li>\n<li>浮动元素楼梯排列问题.</li>\n<li>浮动元素和文本不在同一行的问题.</li>\n</ol>\n<p>绝对定位时，若元素没有设置宽度，则宽度会根据内容自动变化。（同浮动）<br>横向布局，一栏宽度固定，一栏自适应。则可以用绝对定位。要求：宽度固定的一栏的高度要大于绝对定位的高度。</p>\n<p>如何去除内联元素（inline-block元素）之间的间距<br>1、可以在html中直接把元素写在一行上或把闭合标签和第二个开始标签写在一行或两行间添加注释或直接去掉闭合标签但最后一个不能去掉。（换行占一个空格）<br>2、设置margin-right为负值，但要考虑上下文的字体和文字大小。<br>3、先设定子元素字体，再设置父元素font-size:0px;////chrome中：-webkit-text-size-adjust:none;<br>4、设置父元素letter-spacing或word-spacing为负值，要考虑字体，子元素有文字也要注意设置letter-spacing或word-spacing的值。<br>5.float:left;</p>\n<h1 id=\"relative\"><a href=\"#relative\" class=\"headerlink\" title=\"relative\"></a>relative</h1><p>作用：</p>\n<ol>\n<li>限制absolute。 在relative里的absolute受限制于外包含块。</li>\n<li>作用于z-index。 若absolute中的z-index设置后，若有外包含块relative，则受外层z-index作用。不受内部z-index设置的作用。</li>\n<li>限制overflow。 设置了absolute的元素，不受overflow:hidden的限制，在超出内容的范围仍然能够显示.若外层包含块设置了relative, 则受hidden影响.<br>对fixed, 则只能第二条有效.其余失效.<h2 id=\"relative定位\"><a href=\"#relative定位\" class=\"headerlink\" title=\"relative定位\"></a>relative定位</h2>相对自身, 无侵入性.<br>margin-top和top将元素提高的影响: 第一个会影响别人. relative的top不会影响其他元素.<br>top/bottom同时设置时, top起作用. left起作用.<h2 id=\"relative与层级\"><a href=\"#relative与层级\" class=\"headerlink\" title=\"relative与层级\"></a>relative与层级</h2></li>\n<li>提交层叠上下文–鬼畜级别. 默认为DOM流后面的元素覆盖前面的. 但元素设置了position:relative后, 层级提高.</li>\n<li>对不同的relative设置不同的z-index;若z-index:auto 则不会限制;</li>\n</ol>\n<h2 id=\"relative的最小化影响原则\"><a href=\"#relative的最小化影响原则\" class=\"headerlink\" title=\"relative的最小化影响原则\"></a>relative的最小化影响原则</h2><p>指的是尽量降低relative属性对其他元素或布局的潜在影响.<br>1,尽量不使用relative.<br>absolute定位不依赖relative<br>2,relative最小化. 需要使用absolute定位依赖于relative的元素, 单独用一个div设置relative包裹.</p>\n<h1 id=\"absolute定位\"><a href=\"#absolute定位\" class=\"headerlink\" title=\"absolute定位\"></a>absolute定位</h1><h2 id=\"absolute与浮动的关系\"><a href=\"#absolute与浮动的关系\" class=\"headerlink\" title=\"absolute与浮动的关系.\"></a>absolute与浮动的关系.</h2><p>具有: 包裹性(对容器的absolute化。容器设置absolute后，容器变为了 inline-block),破坏性(从文档流中脱离)<br>绝对定位生效时, 浮动失效.</p>\n<h2 id=\"位置跟随\"><a href=\"#位置跟随\" class=\"headerlink\" title=\"位置跟随\"></a>位置跟随</h2><p>原来是块级, 则absolute后也是块级;原来是内联块,之后也是内联块</p>\n<h2 id=\"无依赖的absolute更强大\"><a href=\"#无依赖的absolute更强大\" class=\"headerlink\" title=\"无依赖的absolute更强大\"></a>无依赖的absolute更强大</h2><h3 id=\"图标图片的覆盖-无依赖relative\"><a href=\"#图标图片的覆盖-无依赖relative\" class=\"headerlink\" title=\"图标图片的覆盖(无依赖relative)\"></a>图标图片的覆盖(无依赖relative)</h3><p>可以直接通过absolute,再设置margin即可.不必使用父容器的relative,更干净.</p>\n<h3 id=\"下拉列表项等\"><a href=\"#下拉列表项等\" class=\"headerlink\" title=\"下拉列表项等\"></a>下拉列表项等</h3><h3 id=\"图片居中\"><a href=\"#图片居中\" class=\"headerlink\" title=\"图片居中\"></a>图片居中</h3><p>利用跟随,<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"course-loading-x\"</span>&gt;</div><div class=\"line\">  &amp;nbsp;&lt;img src=<span class=\"string\">\"http://img.mukewang.com/5453077400015bba00010001.gif\"</span> class=<span class=\"string\">\"course-loading\"</span> alt=<span class=\"string\">\"加载中...\"</span>&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">css代码</div><div class=\"line\">.course-loading-x &#123; height: 100px; margin-top: 20px; text-align: center; letter-spacing: -.25em; overflow: hidden; &#125;</div><div class=\"line\">.course-loading &#123; position: absolute; margin-left: -26px; &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"course-fixed-x\"</span>&gt;</div><div class=\"line\">&amp;nbsp;&lt;div class=<span class=\"string\">\"course-fixed\"</span>&gt;</div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"http://www.imooc.com/activity/diaocha\"</span> class=<span class=\"string\">\"goto_top_diaocha\"</span>&gt;&lt;/a&gt;</div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"http://www.imooc.com/mobile/app\"</span> class=<span class=\"string\">\"goto_top_app\"</span>&gt;&lt;/a&gt;</div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"http://www.imooc.com/user/feedback\"</span> class=<span class=\"string\">\"goto_top_feed\"</span>&gt;&lt;/a&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">固定定位: 右方.</div><div class=\"line\">.course-fixed-x &#123; height: 0px; text-align: right; overflow: hidden; &#125;</div><div class=\"line\">.course-fixed &#123; display: inline; position: fixed; margin-left: 20px; bottom: 100px; &#125;</div></pre></td></tr></table></figure>\n<p>##<br>动画尽量作用在绝对定位元素上.<br>层叠,后来居上原则.</p>\n<h2 id=\"top-bottom-left-right\"><a href=\"#top-bottom-left-right\" class=\"headerlink\" title=\"top/bottom/left/right\"></a>top/bottom/left/right</h2><p>若只设置了top, 则水平方向不变.同理…</p>\n<h2 id=\"absolute与width和height\"><a href=\"#absolute与width和height\" class=\"headerlink\" title=\"absolute与width和height\"></a>absolute与width和height</h2><p>在没有设置width时, left和right可以同时设置,width类似于right-left;(IE7+)同理top/bottom<br>元素百分比height想要起作用, 则需要父级容器的height不是auto. 但当父容器为absolute时, 内部元素可以用百分比.<br>如果width与left/right同时设置, 则以width为准.<br>如果width与left/right,margin:auto同时设置<br>.image {<br>    position: absolute; left: 0; right: 0; width:80%;margin:auto;<br>}<br>居中</p>\n<h2 id=\"absolute与整体布局\"><a href=\"#absolute与整体布局\" class=\"headerlink\" title=\"absolute与整体布局\"></a>absolute与整体布局</h2><h1 id=\"line-height\"><a href=\"#line-height\" class=\"headerlink\" title=\"line-height\"></a>line-height</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>行高,两行文字基线的距离.</p>\n<h2 id=\"line-height与盒子模型\"><a href=\"#line-height与盒子模型\" class=\"headerlink\" title=\"line-height与盒子模型\"></a>line-height与盒子模型</h2><p>盒子模型.</p>\n<ol>\n<li>内容区域</li>\n<li>内联盒子</li>\n<li>行框盒子</li>\n<li>包含盒子<h2 id=\"line-height机理\"><a href=\"#line-height机理\" class=\"headerlink\" title=\"line-height机理\"></a>line-height机理</h2>内联元素的高度从何而来? 不是文字撑开的.是由line-height决定的.<br>内容区域高度+行间距=行高<br>内容区域高度只与字号以及字体有关, 与line-height没有任何关系.<br>在simsun字体下, font-size = 内容区域高度<br>行框盒子里多个内联盒子,高度怎么?<br>vertical-align对内联元素影响. </li>\n</ol>\n<h2 id=\"line-height各类属性值\"><a href=\"#line-height各类属性值\" class=\"headerlink\" title=\"line-height各类属性值\"></a>line-height各类属性值</h2><p>normal: 正常,默认.跟着浏览器的默认, 且与元素字体有关.<br>数字: 根据当前元素的font-size大小计算. (倍数)<br>长度: em,rem,px,pt<br>百分比:相对于设置了font-size大小的倍数.<br>继承: .</p>\n<p>line-height:1.5/150%/1.5em区别? 计算无区别. 差别在应用元素上. 1.5所有可继承元素根据font-size重计算行高. 150%/1.5em 当前元素根据font-size计算行高, 继承给下面的元素.</p>\n<p>body全局数值行高使用经验:<br>body { font-size: 14px; line-height: ? }<br>20px, 方便心算.line-height: 1.4286</p>\n<h2 id=\"行高与图片的表现\"><a href=\"#行高与图片的表现\" class=\"headerlink\" title=\"行高与图片的表现\"></a>行高与图片的表现</h2><p>行高不会影响图片实际占据的高度.<br>如何消除图片底部的间隙? </p>\n<ol>\n<li>图片块状化, 就没有基线对齐了.(vertical-align适合内联,内联块)</li>\n<li>图片底线对齐 vertical-align: bottom;</li>\n<li>行高足够小-基线位置上移 line-height: 0;</li>\n</ol>\n<h2 id=\"行高实际应用\"><a href=\"#行高实际应用\" class=\"headerlink\" title=\"行高实际应用\"></a>行高实际应用</h2><ol>\n<li>大小不固定的图片, 多行文字垂直居中.  (IE8+)<br>父容器设置行高, 图片或文字(设置displa: inline-block)设置vertical-align: middle;</li>\n<li>代替height (IE6/IE7)</li>\n</ol>\n<h1 id=\"padding\"><a href=\"#padding\" class=\"headerlink\" title=\"padding\"></a>padding</h1><h2 id=\"对元素尺寸的影响\"><a href=\"#对元素尺寸的影响\" class=\"headerlink\" title=\"对元素尺寸的影响\"></a>对元素尺寸的影响</h2><h3 id=\"对block水平元素\"><a href=\"#对block水平元素\" class=\"headerlink\" title=\"对block水平元素\"></a>对block水平元素</h3><p>1, padding会影响尺寸; 2, 当width:auto或border-sizing: border-box时, 影响内容区域, 不影响尺寸. 当padding很大时(左右两边加起来超过width),这是width为0, 此时影响了元素的尺寸.<br>对于block水平元素:</p>\n<ol>\n<li>padding值很大,一定会影响尺寸.</li>\n<li>width不是auto(有固定的值), 加padding会影响尺寸.</li>\n<li>width为auto或border-sizing:border-box, padding值小的时候, 不影响尺寸. <h3 id=\"内联水平元素\"><a href=\"#内联水平元素\" class=\"headerlink\" title=\"内联水平元素\"></a>内联水平元素</h3>水平padding影响尺寸, 垂直padding不影响尺寸.但是会影响背景色(占据空间).<br>如何利用这一特性? 高度可控的分割线<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">注册&lt;span&gt;&lt;/span&gt;退出登录</div><div class=\"line\">css</div><div class=\"line\">span &#123;</div><div class=\"line\">\tpadding: 16px 6px 1px;margin-left:12px; border-left:2px solid; font-size: 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"关于padding负值和百分比\"><a href=\"#关于padding负值和百分比\" class=\"headerlink\" title=\"关于padding负值和百分比\"></a>关于padding负值和百分比</h2><p>不支持任何形式的负值.<br>padding的百分比均是相对于宽度计算的.<br>内联元素的padding百分比值.1,相对于宽度计算;2,默认的高度宽度有细节差异;3,padding会断行.<br>inline元素的垂直padding会显示规范中的”strut”,导致不是完全的正方形.设置font-size为0即可.</p>\n<h2 id=\"标签元素的内置padding\"><a href=\"#标签元素的内置padding\" class=\"headerlink\" title=\"标签元素的内置padding\"></a>标签元素的内置padding</h2><p>1, ol/ul列表<br>a,ol/ul内置padding-left, 但是单位是px, 而不是em;<br>b,Chrome下是40px<br>c,如果字号很小, 间距很开<br>d,如果字号很大, 序号会跑到容器外.<br>文字大小12px,14px, padding-left,22,25px<br>2, 表单元素<br>input/textarea内置padding, button内置padding, 部分浏览器select下拉内置padding(FF,IE8+), 所有浏览器radio/checkbox无内置padding. button的padding难控制.(padding计算有问题)</p>\n<h2 id=\"padding与图形绘制\"><a href=\"#padding与图形绘制\" class=\"headerlink\" title=\"padding与图形绘制\"></a>padding与图形绘制</h2><p>三道杠的效果<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">.line-tri &#123;</div><div class=\"line\">\twidth: 150px;</div><div class=\"line\">\theight: 30px;</div><div class=\"line\">\tpadding: 15px 0;</div><div class=\"line\">\tborder-top: 30px solid;</div><div class=\"line\">\tborder-bottom: 30px solid;</div><div class=\"line\">\tbackground-color: gray;</div><div class=\"line\">\tbackground-clip: content-box;./*  背景色只能在内容区域显示. */</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"padding应用\"><a href=\"#padding应用\" class=\"headerlink\" title=\"padding应用\"></a>padding应用</h2><p>1, 正方体, padding: 50%;<br>2, 配合margin实现等高布局.<br>3, 两栏自适应布局.使子元素在padding上.</p>\n<h1 id=\"vertical-align\"><a href=\"#vertical-align\" class=\"headerlink\" title=\"vertical-align\"></a>vertical-align</h1><p>垂直对齐. </p>\n<ol>\n<li>线类<br> baseline(默认), top, middle, bottom</li>\n<li>文本类<br>text-top, text-bottom</li>\n<li>上标下标<br> sub, super</li>\n<li>数值百分比类<br> 20px, 2em, 20%, …<br>数字百分比类: 都带数字, 都支持负值, 行为表现一致.百分比是相对于行高计算的.<br>(IE6/7)百分比不支持小数line-height.</li>\n</ol>\n<h2 id=\"起作用的前提\"><a href=\"#起作用的前提\" class=\"headerlink\" title=\"起作用的前提\"></a>起作用的前提</h2><p>应用于inline和table-cell<br>inline包括: inline: <img>, <span>, <strong>, <em>, 未知元素…<br>inline-block:<input>(IE8+), <button>(IE8+)<br>table-cell包括<br>table-cell:<td><br>默认状态下, 支持 图片,按钮, 文字和单元格.<br>改变显示水平:1, display, 2, CSS声明间接改变display(float, absolute)<br>不居中的可能性: 1, line-height太短.<br>display:table-cell;//只对自身作用, 对子元素没有作用.</p>\n<h2 id=\"vertical-align和line-height\"><a href=\"#vertical-align和line-height\" class=\"headerlink\" title=\"vertical-align和line-height\"></a>vertical-align和line-height</h2><p>一个图片在div内底部有留白, 消除, 则可以设置display:block;或者改变vertical-align的默认为bottom/Middle/top,或者改变line-height为0, 或者font-size为0;<br>近似垂直居中:vertical-align: middle; line-height: 250px;</p>\n<h2 id=\"vertical-align线性属性值\"><a href=\"#vertical-align线性属性值\" class=\"headerlink\" title=\"vertical-align线性属性值\"></a>vertical-align线性属性值</h2><p>vertical-align:bottom;<br>1,inline/inline-block: 元素底部和整行的底部对齐.<br>2,table-cell: 单元格底padding边缘和表格行的底部对齐.</p>\n<hr>\n<p>vertical-align:top;<br>1,inline/inline-block: 元素顶部和整行的顶部对齐.<br>2,table-cell: 单元格顶padding边缘和表格行的顶部对齐.</p>\n<hr>\n<p>vertical-align: middle;<br>1,inline/inline-block: 元素的垂直中心点和父元素基线上1/2 x-height处对齐<br>2,table-cell: 单元格填充盒子相对于外面的表格行居中对齐.<br>完全居中:font-size:0;</p>\n<h2 id=\"文本类属性值\"><a href=\"#文本类属性值\" class=\"headerlink\" title=\"文本类属性值\"></a>文本类属性值</h2><p>1,vertical-align:text-top;盒子的顶部和父级content area的顶部对齐<br>2,vertical-align:text-bottom;盒子的底部和父级content area的底部对齐.<br>注意点:</p>\n<ol>\n<li>元素vertical-align垂直对齐的位置与前后的元素都没有关系;</li>\n<li>元素vertical-align垂直对齐的位置与行高line-height没有关系,与字体大小font-size有关;<br>实际作用: 表情图片与文字的对齐效果.<br>使用顶线/底线的问题在于受其他内联元素影响, 造成巨大定位偏差.<br>使用文本底部较合适.</li>\n</ol>\n<h2 id=\"上标下标\"><a href=\"#上标下标\" class=\"headerlink\" title=\"上标下标\"></a>上标下标</h2><p>sub/super: 与HTML里的sub/sup一样.调整基线.</p>\n<h2 id=\"vertical-align前后\"><a href=\"#vertical-align前后\" class=\"headerlink\" title=\"vertical-align前后\"></a>vertical-align前后</h2><p>只需关注元素与父级的关系即可. </p>\n<h2 id=\"vertical-align应用\"><a href=\"#vertical-align应用\" class=\"headerlink\" title=\"vertical-align应用\"></a>vertical-align应用</h2><p>负值对齐;<br>不定尺寸图片或多行文字的垂直居中:1, 主题元素inline-block化;2, 0宽度100%高度辅助元素;3, vertical-align: middle.</p>\n<h1 id=\"z-index\"><a href=\"#z-index\" class=\"headerlink\" title=\"z-index\"></a>z-index</h1><h2 id=\"z-index基础\"><a href=\"#z-index基础\" class=\"headerlink\" title=\"z-index基础\"></a>z-index基础</h2><p>auto, <integer>, inherit.<br>特性: 支持负值, 支持css3动画, css2.1需要和定位一起使用</p>\n<h2 id=\"z-index与定位属性\"><a href=\"#z-index与定位属性\" class=\"headerlink\" title=\"z-index与定位属性\"></a>z-index与定位属性</h2><p>除了static属性的定位属性都可以.<br>定位没有发生嵌套:1, 后来居上原则;2, 哪个大(z-index),哪个上.<br>发生了嵌套:祖先优先原则. 层叠上下文, 层叠水平 </p>\n<h2 id=\"层叠上下文-层叠水平\"><a href=\"#层叠上下文-层叠水平\" class=\"headerlink\" title=\"层叠上下文, 层叠水平\"></a>层叠上下文, 层叠水平</h2><h2 id=\"层叠顺序\"><a href=\"#层叠顺序\" class=\"headerlink\" title=\"层叠顺序\"></a>层叠顺序</h2><p>7阶层叠水平:最底 层叠上下文  负z-index  block块状水平盒子  float浮动盒子 inline/inline-block水平盒子 z-index:auto或看成z-index:0 正z-index</p>\n<h2 id=\"z-index与层叠上下文\"><a href=\"#z-index与层叠上下文\" class=\"headerlink\" title=\"z-index与层叠上下文\"></a>z-index与层叠上下文</h2><ol>\n<li>定位元素默认z-index:auto可以看成是z-index: 0;</li>\n<li>z-index不为auto的定位元素会创建层叠上下文</li>\n<li>z-index层叠顺序的比较受制于父级层叠上下文  </li>\n</ol>\n<h2 id=\"其他css属性与层叠上下文\"><a href=\"#其他css属性与层叠上下文\" class=\"headerlink\" title=\"其他css属性与层叠上下文\"></a>其他css属性与层叠上下文</h2><p><img src=\"/image/css1.png\" alt=\"css1\"></p>\n<h2 id=\"z-index与其他CSS属性\"><a href=\"#z-index与其他CSS属性\" class=\"headerlink\" title=\"z-index与其他CSS属性\"></a>z-index与其他CSS属性</h2><h2 id=\"z-index实践\"><a href=\"#z-index实践\" class=\"headerlink\" title=\"z-index实践\"></a>z-index实践</h2><ol>\n<li>最小化影响原则</li>\n<li>不犯二准则 对于非浮层元素,避免数值 z-index值, z-index值没有任何道理超过2</li>\n<li>组件层级计算器</li>\n<li>可访问性隐藏</li>\n</ol>\n<h1 id=\"重拾CSS\"><a href=\"#重拾CSS\" class=\"headerlink\" title=\"重拾CSS\"></a>重拾CSS</h1><p>所有可以用js写出来的, 一定可以用js重写一遍.<br>css权威指南, 精通css(高级Web标准解决方案), CSS Secrets<br>用CSS实现内凹圆角.</p>\n<p>DOMReady 实现策略:</p>\n<ol>\n<li>支持DOMContentLoaded时间的, 就使用支持DOMContentLoaded时间的</li>\n<li>不支持的,就用HACK兼容. 通过IE中的document.documentElement.doScroll(‘left’)来判断DOM树是否创建完毕.<br>块状元素与内联元素嵌套规则</li>\n<li>块元素可以包含内联或某些块状,但内联元素不能包含块元素,只能包含其他的块元素.</li>\n<li>块元素不能放在p里面.</li>\n<li>有几个特殊的块元素只能包含内联元素,不能再包含块元素,这几个特殊标签是:h1~h6,p,,dt</li>\n<li>li内可以包含div标签</li>\n<li>块级元素与块级元素并列,内联元素与内联元素并列.</li>\n</ol>\n<p>animation-delay:为负值. 跳过这一段时间的动画.</p>\n<p>加载条(利用animation-delay负值实现)<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;!-- html --&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"spinner\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"line1\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"line2\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"line3\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"line4\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"line5\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">/* CSS */</div><div class=\"line\">.spinner&#123;</div><div class=\"line\">  width:50px;</div><div class=\"line\">  height:50px;</div><div class=\"line\">  margin:100px auto;</div><div class=\"line\">  text-align:center;</div><div class=\"line\">&#125;</div><div class=\"line\">.spinner &gt; div&#123;</div><div class=\"line\">  display:inline-block;</div><div class=\"line\">  width:6px;</div><div class=\"line\">  height:100%;</div><div class=\"line\">  background:green;</div><div class=\"line\">  -webkit-animation: strechdelay 1.2s infinite ease-in-out ;</div><div class=\"line\">&#125;</div><div class=\"line\">.spinner .line2&#123;</div><div class=\"line\">  -webkit-animation-delay:-1.1s;</div><div class=\"line\">&#125;</div><div class=\"line\">.spinner .line3&#123;</div><div class=\"line\">  -webkit-animation-delay:-1.0s;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.spinner .line4&#123;</div><div class=\"line\">  -webkit-animation-delay:-0.9s;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.spinner .line5&#123;</div><div class=\"line\">  -webkit-animation-delay:-0.8s;</div><div class=\"line\">&#125;/**/</div><div class=\"line\">@-webkit-keyframes strechdelay&#123;</div><div class=\"line\">  0%,40%,100%&#123;</div><div class=\"line\">    -webkit-transform:scaleY(.4);</div><div class=\"line\">  &#125;</div><div class=\"line\">  20%&#123;</div><div class=\"line\">    -webkit-transform:scaleY(1);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>加载时的圆环(border颜色实现)<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"spinner\"</span>&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">body&#123;</div><div class=\"line\">  background:<span class=\"comment\">#000;</span></div><div class=\"line\">&#125;</div><div class=\"line\">.spinner&#123;</div><div class=\"line\">  width:10em;</div><div class=\"line\">  height:10em;</div><div class=\"line\">  border-radius:50%;</div><div class=\"line\">  margin:100px auto;</div><div class=\"line\">  border:1.1em solid rgba(255,255,255,.2);</div><div class=\"line\">  border-left-color:<span class=\"comment\">#fff;</span></div><div class=\"line\">  -webkit-animation:load 1.1s infinite linear;</div><div class=\"line\">&#125;</div><div class=\"line\">@-webkit-keyframes load&#123;</div><div class=\"line\">  from&#123;</div><div class=\"line\">    transform:rotate(0deg);</div><div class=\"line\">  &#125;</div><div class=\"line\">  to&#123;</div><div class=\"line\">    transform:rotate(360deg);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>CSS Sprite<br>css 雪碧图 1, 静态图片, 2, 小图片(3.5k以下)3, 加载量大   一些大图不用雪碧图<br>通过css background-position来实现.<br>雪碧图生成方式:1, PS手动拼图; 2,使用sprite工具自动生成.</p>\n<p>HTTP请求<br>1, 建立TCP连接<br>2, Web浏览器向Web服务器发送请求命令<br>3, Web浏览器发送请求头信息<br>4, Web浏览器应答<br>5, Web浏览器发送应答头信息<br>6, Web服务器向浏览器发送数据<br>7, Web服务器关闭TCP连接.</p>\n<p>HTTP请求:<br>1, 请求方法<br>2, 正在请求的URL<br>3, 请求头<br>4, 请求体<br><img src=\"images/httprequest1.png\" alt=\"httprequest1\">;</p>\n<p>相应<br>1, 状态码<br><img src=\"images/statuscode.png\" alt=\"statuscode\">;<br>2, 响应头<br>3, 相应体</p>"},{"title":"遇到的问题集合","date":"2016-08-28T09:38:58.000Z","_content":"\n$ git clone git://github.com/Tzxhy/Tzxhy.github.io.git myWeb\n后, push时,提示:\n``` bash\n$ git push origin icc\nfatal: remote error:\n  You can't push to git://github.com/Tzxhy/Tzxhy.github.io.git\n  Use https://github.com/Tzxhy/Tzxhy.github.io.git\n```\n<!--more-->\n解决方法:\n如果在git clone的时候用的是git://github.com:xx/xxx.git 的形式, 那么就会出现这个问题，因为这个protocol是不支持push的\n用$git clone git@github.com:lujinjianst/myNCCL.git\n就可以用git push了。或者使用https形式的.\n\n在页面1用 location 属性跳转到页面2时, 再返回上一个页面1, 火狐中不会再从1跳转到2, 而其他浏览器会继续跳转.\n\n\n\n起因源于一道前端笔试题：\n\n``` bash\nvar fuc = [1,2,3];\nfor(var i in fuc){\n  setTimeout(function(){console.log(fuc[i])},0);\n  console.log(fuc[i]);\n}\n```\n问：控制台会如何打印？\n1 2 3 3 3 3 \n虽然setTimeout函数在每次循环的开始就调用了，但是却被放到循环结束才执行，循环结束，i=3,接连打印了3次3。\n这里涉及到javascript单线程执行的问题：javascript在浏览器中是单线程执行的，必须在完成当前任务后才执行队列中的下一个任务。\n另外，对于javascript还维护着一个setTimeout队列，未执行的setTimeout任务就按出现的顺序放到setTimeout队列，等待普通的任务队列中的任务执行完才开始按顺序执行积累在setTimeout中的任务。\n所以在这个问题里，会先打印1 2 3，而将setTimeout任务放到setTimeout任务队列，等循环中的打印任务执行完了，才开始执行setTimeout队列中的函数，所以在最后会接着打印3次3。\n由此，可以知道虽然设置为0秒后执行任务，实际上是大于0秒才执行的。可是这有什么用呢？\n用处就在于我们可以改变任务的执行顺序！因为浏览器会在执行完当前任务队列中的任务，再执行setTimeout队列中积累的的任务。\n通过设置任务在延迟到0s后执行，就能改变任务执行的先后顺序，延迟该任务发生，使之异步执行。\n\n例子:\n<!DOCTYPE html>\n<html lang=\"zh-cmn-Hans\">\n  <head>\n    <title>\n      图\n    </title>\n    <meta charset=\"utf-8\">\n  </head>\n  <body>\n  <p>\n    <input type=\"text\" id=\"input\" value=\"\"/>\n    <span id=\"preview\"></span>\n  </p>\n  </body>   \n<script type=\"text/javascript\">\n(function(){\n  function $(id){\n    return document.getElementById(id);\n  }\n  $(‘input‘).onkeypress = function(){\n    $(‘preview‘).innerHTML = this.value;\n  }\n})();\n</script>\n</html>\n\n这个keypress函数原意是监听到用户输入字符串就将其完整的显示出来，但是奇怪的是最后一个字符串总是没能显示出来\n\n但是只要改下onkeypress函数就好：\n``` bash\n$(‘input‘).onkeypress = function(){\n    setTimeout(function(){$(‘preview‘).innerHTML = $(‘input‘).value;},0);\n  }\n```\nPS:或者将keydown改为keyup也行, 具体原因猜测可能是keydown时, $(‘input‘).value未来得及变化,(或者只有执行某个回调后变化).\n原址:   (http://www.cnblogs.com/suspiderweb/)\n\n\n\n``` bash\n</head>\n<body>\n<p>\n    <input type=\"text\" value=\"\" name=\"inputtest\"/>\n    <span id=\"inputtest\" class=\"myclass\"><p>span > p</p>   </span>\n    <p id = \"pp\"><del>sdfef</del></p>\n    <button id=\"button1\">close this window</button>\n</p>\n</body>\n<script>\n    let test1 = document.getElementById(\"inputtest\");\n    alert(test1.lastElementChild.appendChild(document.createTextNode(\"1111\")));\n    test1.lastElementChild.appendChild(document.createTextNode(\"2222\"))\n```\n上文中报错, 提示test1.lastElementChild为空对象. 但把<body>下的<p>去掉后, 正常. why?\n\n\nonClick和onDblClick并存的解决方法 ：\n``` bash\n<script type=\"text/javascript\">\n  var clickTimer = null;\n  \n  function _click(){\n      if(clickTimer) {\n          window.clearTimeout(clickTimer);\n          clickTimer = null;\n      }\n      \n      clickTimer = window.setTimeout(function(){\n           // your click process code here\n           alert(\"你单击了我\");\n      }, 300);\n  }\n\n   function _dblclick(){\n      if(clickTimer) {\n          window.clearTimeout(clickTimer);\n          clickTimer = null;\n      }\n      \n     // your click process code here\n     alert(\"你双击了我\");\n  }\n</script>\n\n<button onclick=\"_click();\" ondblclick=\"_dblclick();\">单击或双击我</button>\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/遇到的问题集合.md","raw":"---\ntitle: 遇到的问题集合\ndate: 2016-08-28 09:38:58\ntags: \n---\n\n$ git clone git://github.com/Tzxhy/Tzxhy.github.io.git myWeb\n后, push时,提示:\n``` bash\n$ git push origin icc\nfatal: remote error:\n  You can't push to git://github.com/Tzxhy/Tzxhy.github.io.git\n  Use https://github.com/Tzxhy/Tzxhy.github.io.git\n```\n<!--more-->\n解决方法:\n如果在git clone的时候用的是git://github.com:xx/xxx.git 的形式, 那么就会出现这个问题，因为这个protocol是不支持push的\n用$git clone git@github.com:lujinjianst/myNCCL.git\n就可以用git push了。或者使用https形式的.\n\n在页面1用 location 属性跳转到页面2时, 再返回上一个页面1, 火狐中不会再从1跳转到2, 而其他浏览器会继续跳转.\n\n\n\n起因源于一道前端笔试题：\n\n``` bash\nvar fuc = [1,2,3];\nfor(var i in fuc){\n  setTimeout(function(){console.log(fuc[i])},0);\n  console.log(fuc[i]);\n}\n```\n问：控制台会如何打印？\n1 2 3 3 3 3 \n虽然setTimeout函数在每次循环的开始就调用了，但是却被放到循环结束才执行，循环结束，i=3,接连打印了3次3。\n这里涉及到javascript单线程执行的问题：javascript在浏览器中是单线程执行的，必须在完成当前任务后才执行队列中的下一个任务。\n另外，对于javascript还维护着一个setTimeout队列，未执行的setTimeout任务就按出现的顺序放到setTimeout队列，等待普通的任务队列中的任务执行完才开始按顺序执行积累在setTimeout中的任务。\n所以在这个问题里，会先打印1 2 3，而将setTimeout任务放到setTimeout任务队列，等循环中的打印任务执行完了，才开始执行setTimeout队列中的函数，所以在最后会接着打印3次3。\n由此，可以知道虽然设置为0秒后执行任务，实际上是大于0秒才执行的。可是这有什么用呢？\n用处就在于我们可以改变任务的执行顺序！因为浏览器会在执行完当前任务队列中的任务，再执行setTimeout队列中积累的的任务。\n通过设置任务在延迟到0s后执行，就能改变任务执行的先后顺序，延迟该任务发生，使之异步执行。\n\n例子:\n<!DOCTYPE html>\n<html lang=\"zh-cmn-Hans\">\n  <head>\n    <title>\n      图\n    </title>\n    <meta charset=\"utf-8\">\n  </head>\n  <body>\n  <p>\n    <input type=\"text\" id=\"input\" value=\"\"/>\n    <span id=\"preview\"></span>\n  </p>\n  </body>   \n<script type=\"text/javascript\">\n(function(){\n  function $(id){\n    return document.getElementById(id);\n  }\n  $(‘input‘).onkeypress = function(){\n    $(‘preview‘).innerHTML = this.value;\n  }\n})();\n</script>\n</html>\n\n这个keypress函数原意是监听到用户输入字符串就将其完整的显示出来，但是奇怪的是最后一个字符串总是没能显示出来\n\n但是只要改下onkeypress函数就好：\n``` bash\n$(‘input‘).onkeypress = function(){\n    setTimeout(function(){$(‘preview‘).innerHTML = $(‘input‘).value;},0);\n  }\n```\nPS:或者将keydown改为keyup也行, 具体原因猜测可能是keydown时, $(‘input‘).value未来得及变化,(或者只有执行某个回调后变化).\n原址:   (http://www.cnblogs.com/suspiderweb/)\n\n\n\n``` bash\n</head>\n<body>\n<p>\n    <input type=\"text\" value=\"\" name=\"inputtest\"/>\n    <span id=\"inputtest\" class=\"myclass\"><p>span > p</p>   </span>\n    <p id = \"pp\"><del>sdfef</del></p>\n    <button id=\"button1\">close this window</button>\n</p>\n</body>\n<script>\n    let test1 = document.getElementById(\"inputtest\");\n    alert(test1.lastElementChild.appendChild(document.createTextNode(\"1111\")));\n    test1.lastElementChild.appendChild(document.createTextNode(\"2222\"))\n```\n上文中报错, 提示test1.lastElementChild为空对象. 但把<body>下的<p>去掉后, 正常. why?\n\n\nonClick和onDblClick并存的解决方法 ：\n``` bash\n<script type=\"text/javascript\">\n  var clickTimer = null;\n  \n  function _click(){\n      if(clickTimer) {\n          window.clearTimeout(clickTimer);\n          clickTimer = null;\n      }\n      \n      clickTimer = window.setTimeout(function(){\n           // your click process code here\n           alert(\"你单击了我\");\n      }, 300);\n  }\n\n   function _dblclick(){\n      if(clickTimer) {\n          window.clearTimeout(clickTimer);\n          clickTimer = null;\n      }\n      \n     // your click process code here\n     alert(\"你双击了我\");\n  }\n</script>\n\n<button onclick=\"_click();\" ondblclick=\"_dblclick();\">单击或双击我</button>\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"遇到的问题集合","published":1,"updated":"2016-10-31T03:55:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuy6rzkp000qmsq4ix8105qj","content":"<p>$ git clone git://github.com/Tzxhy/Tzxhy.github.io.git myWeb<br>后, push时,提示:<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git push origin icc</div><div class=\"line\">fatal: remote error:</div><div class=\"line\">  You can<span class=\"string\">'t push to git://github.com/Tzxhy/Tzxhy.github.io.git</span></div><div class=\"line\">  Use https://github.com/Tzxhy/Tzxhy.github.io.git</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>解决方法:<br>如果在git clone的时候用的是git://github.com:xx/xxx.git 的形式, 那么就会出现这个问题，因为这个protocol是不支持push的<br>用$git clone git@github.com:lujinjianst/myNCCL.git<br>就可以用git push了。或者使用https形式的.</p>\n<p>在页面1用 location 属性跳转到页面2时, 再返回上一个页面1, 火狐中不会再从1跳转到2, 而其他浏览器会继续跳转.</p>\n<p>起因源于一道前端笔试题：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">var fuc = [1,2,3];</div><div class=\"line\"><span class=\"keyword\">for</span>(var i <span class=\"keyword\">in</span> fuc)&#123;</div><div class=\"line\">  <span class=\"built_in\">set</span>Timeout(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;console.log(fuc[i])&#125;,0);</div><div class=\"line\">  console.log(fuc[i]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>问：控制台会如何打印？<br>1 2 3 3 3 3<br>虽然setTimeout函数在每次循环的开始就调用了，但是却被放到循环结束才执行，循环结束，i=3,接连打印了3次3。<br>这里涉及到javascript单线程执行的问题：javascript在浏览器中是单线程执行的，必须在完成当前任务后才执行队列中的下一个任务。<br>另外，对于javascript还维护着一个setTimeout队列，未执行的setTimeout任务就按出现的顺序放到setTimeout队列，等待普通的任务队列中的任务执行完才开始按顺序执行积累在setTimeout中的任务。<br>所以在这个问题里，会先打印1 2 3，而将setTimeout任务放到setTimeout任务队列，等循环中的打印任务执行完了，才开始执行setTimeout队列中的函数，所以在最后会接着打印3次3。<br>由此，可以知道虽然设置为0秒后执行任务，实际上是大于0秒才执行的。可是这有什么用呢？<br>用处就在于我们可以改变任务的执行顺序！因为浏览器会在执行完当前任务队列中的任务，再执行setTimeout队列中积累的的任务。<br>通过设置任务在延迟到0s后执行，就能改变任务执行的先后顺序，延迟该任务发生，使之异步执行。</p>\n<p>例子:<br>&lt;!DOCTYPE html&gt;</p>\n<html lang=\"zh-cmn-Hans\"><br>  <head><br>    <title><br>      图<br>    </title><br>    <meta charset=\"utf-8\"><br>  </head><br>  <body><br>  <p><br>    <input type=\"text\" id=\"input\" value=\"\"><br>    <span id=\"preview\"></span><br>  </p><br>  </body><br><script type=\"text/javascript\"><br>(function(){<br>  function $(id){<br>    return document.getElementById(id);<br>  }<br>  $(‘input‘).onkeypress = function(){<br>    $(‘preview‘).innerHTML = this.value;<br>  }<br>})();<br></script><br></html>\n\n<p>这个keypress函数原意是监听到用户输入字符串就将其完整的显示出来，但是奇怪的是最后一个字符串总是没能显示出来</p>\n<p>但是只要改下onkeypress函数就好：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$(‘input‘).onkeypress = <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">    <span class=\"built_in\">set</span>Timeout(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;$(‘preview‘).innerHTML = $(‘input‘).value;&#125;,0);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>PS:或者将keydown改为keyup也行, 具体原因猜测可能是keydown时, $(‘input‘).value未来得及变化,(或者只有执行某个回调后变化).<br>原址:   (<a href=\"http://www.cnblogs.com/suspiderweb/\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/suspiderweb/</a>)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;p&gt;</div><div class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> value=<span class=\"string\">\"\"</span> name=<span class=\"string\">\"inputtest\"</span>/&gt;</div><div class=\"line\">    &lt;span id=<span class=\"string\">\"inputtest\"</span> class=<span class=\"string\">\"myclass\"</span>&gt;&lt;p&gt;span &gt; p&lt;/p&gt;   &lt;/span&gt;</div><div class=\"line\">    &lt;p id = <span class=\"string\">\"pp\"</span>&gt;&lt;del&gt;sdfef&lt;/del&gt;&lt;/p&gt;</div><div class=\"line\">    &lt;button id=<span class=\"string\">\"button1\"</span>&gt;close this window&lt;/button&gt;</div><div class=\"line\">&lt;/p&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    <span class=\"built_in\">let</span> <span class=\"built_in\">test</span>1 = document.getElementById(<span class=\"string\">\"inputtest\"</span>);</div><div class=\"line\">    alert(<span class=\"built_in\">test</span>1.lastElementChild.appendChild(document.createTextNode(<span class=\"string\">\"1111\"</span>)));</div><div class=\"line\">    <span class=\"built_in\">test</span>1.lastElementChild.appendChild(document.createTextNode(<span class=\"string\">\"2222\"</span>))</div></pre></td></tr></table></figure>\n<p>上文中报错, 提示test1.lastElementChild为空对象. 但把<body>下的<p>去掉后, 正常. why?</p>\n<p>onClick和onDblClick并存的解决方法 ：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</div><div class=\"line\">  var clickTimer = null;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">_click</span></span>()&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(clickTimer) &#123;</div><div class=\"line\">          window.clearTimeout(clickTimer);</div><div class=\"line\">          clickTimer = null;</div><div class=\"line\">      &#125;</div><div class=\"line\">      </div><div class=\"line\">      clickTimer = window.setTimeout(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">           // your click process code here</div><div class=\"line\">           alert(<span class=\"string\">\"你单击了我\"</span>);</div><div class=\"line\">      &#125;, 300);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">_dblclick</span></span>()&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(clickTimer) &#123;</div><div class=\"line\">          window.clearTimeout(clickTimer);</div><div class=\"line\">          clickTimer = null;</div><div class=\"line\">      &#125;</div><div class=\"line\">      </div><div class=\"line\">     // your click process code here</div><div class=\"line\">     alert(<span class=\"string\">\"你双击了我\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;button onclick=<span class=\"string\">\"_click();\"</span> ondblclick=<span class=\"string\">\"_dblclick();\"</span>&gt;单击或双击我&lt;/button&gt;</div></pre></td></tr></table></figure></p>\n</body></p>","excerpt":"<p>$ git clone git://github.com/Tzxhy/Tzxhy.github.io.git myWeb<br>后, push时,提示:<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ git push origin icc</div><div class=\"line\">fatal: remote error:</div><div class=\"line\">  You can<span class=\"string\">'t push to git://github.com/Tzxhy/Tzxhy.github.io.git</div><div class=\"line\">  Use https://github.com/Tzxhy/Tzxhy.github.io.git</span></div></pre></td></tr></table></figure></p>","more":"<p>解决方法:<br>如果在git clone的时候用的是git://github.com:xx/xxx.git 的形式, 那么就会出现这个问题，因为这个protocol是不支持push的<br>用$git clone git@github.com:lujinjianst/myNCCL.git<br>就可以用git push了。或者使用https形式的.</p>\n<p>在页面1用 location 属性跳转到页面2时, 再返回上一个页面1, 火狐中不会再从1跳转到2, 而其他浏览器会继续跳转.</p>\n<p>起因源于一道前端笔试题：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">var fuc = [1,2,3];</div><div class=\"line\"><span class=\"keyword\">for</span>(var i <span class=\"keyword\">in</span> fuc)&#123;</div><div class=\"line\">  <span class=\"built_in\">set</span>Timeout(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;console.log(fuc[i])&#125;,0);</div><div class=\"line\">  console.log(fuc[i]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>问：控制台会如何打印？<br>1 2 3 3 3 3<br>虽然setTimeout函数在每次循环的开始就调用了，但是却被放到循环结束才执行，循环结束，i=3,接连打印了3次3。<br>这里涉及到javascript单线程执行的问题：javascript在浏览器中是单线程执行的，必须在完成当前任务后才执行队列中的下一个任务。<br>另外，对于javascript还维护着一个setTimeout队列，未执行的setTimeout任务就按出现的顺序放到setTimeout队列，等待普通的任务队列中的任务执行完才开始按顺序执行积累在setTimeout中的任务。<br>所以在这个问题里，会先打印1 2 3，而将setTimeout任务放到setTimeout任务队列，等循环中的打印任务执行完了，才开始执行setTimeout队列中的函数，所以在最后会接着打印3次3。<br>由此，可以知道虽然设置为0秒后执行任务，实际上是大于0秒才执行的。可是这有什么用呢？<br>用处就在于我们可以改变任务的执行顺序！因为浏览器会在执行完当前任务队列中的任务，再执行setTimeout队列中积累的的任务。<br>通过设置任务在延迟到0s后执行，就能改变任务执行的先后顺序，延迟该任务发生，使之异步执行。</p>\n<p>例子:<br>&lt;!DOCTYPE html&gt;</p>\n<html lang=\"zh-cmn-Hans\"><br>  <head><br>    <title><br>      图<br>    </title><br>    <meta charset=\"utf-8\"><br>  </head><br>  <body><br>  <p><br>    <input type=\"text\" id=\"input\" value=\"\"/><br>    <span id=\"preview\"></span><br>  </p><br>  </body><br><script type=\"text/javascript\"><br>(function(){<br>  function $(id){<br>    return document.getElementById(id);<br>  }<br>  $(‘input‘).onkeypress = function(){<br>    $(‘preview‘).innerHTML = this.value;<br>  }<br>})();<br></script><br></html>\n\n<p>这个keypress函数原意是监听到用户输入字符串就将其完整的显示出来，但是奇怪的是最后一个字符串总是没能显示出来</p>\n<p>但是只要改下onkeypress函数就好：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$(‘input‘).onkeypress = <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">    <span class=\"built_in\">set</span>Timeout(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;$(‘preview‘).innerHTML = $(‘input‘).value;&#125;,0);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>PS:或者将keydown改为keyup也行, 具体原因猜测可能是keydown时, $(‘input‘).value未来得及变化,(或者只有执行某个回调后变化).<br>原址:   (<a href=\"http://www.cnblogs.com/suspiderweb/\">http://www.cnblogs.com/suspiderweb/</a>)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;p&gt;</div><div class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> value=<span class=\"string\">\"\"</span> name=<span class=\"string\">\"inputtest\"</span>/&gt;</div><div class=\"line\">    &lt;span id=<span class=\"string\">\"inputtest\"</span> class=<span class=\"string\">\"myclass\"</span>&gt;&lt;p&gt;span &gt; p&lt;/p&gt;   &lt;/span&gt;</div><div class=\"line\">    &lt;p id = <span class=\"string\">\"pp\"</span>&gt;&lt;del&gt;sdfef&lt;/del&gt;&lt;/p&gt;</div><div class=\"line\">    &lt;button id=<span class=\"string\">\"button1\"</span>&gt;close this window&lt;/button&gt;</div><div class=\"line\">&lt;/p&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">    <span class=\"built_in\">let</span> <span class=\"built_in\">test</span>1 = document.getElementById(<span class=\"string\">\"inputtest\"</span>);</div><div class=\"line\">    alert(<span class=\"built_in\">test</span>1.lastElementChild.appendChild(document.createTextNode(<span class=\"string\">\"1111\"</span>)));</div><div class=\"line\">    <span class=\"built_in\">test</span>1.lastElementChild.appendChild(document.createTextNode(<span class=\"string\">\"2222\"</span>))</div></pre></td></tr></table></figure>\n<p>上文中报错, 提示test1.lastElementChild为空对象. 但把<body>下的<p>去掉后, 正常. why?</p>\n<p>onClick和onDblClick并存的解决方法 ：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</div><div class=\"line\">  var clickTimer = null;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">_click</span></span>()&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(clickTimer) &#123;</div><div class=\"line\">          window.clearTimeout(clickTimer);</div><div class=\"line\">          clickTimer = null;</div><div class=\"line\">      &#125;</div><div class=\"line\">      </div><div class=\"line\">      clickTimer = window.setTimeout(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">           // your click process code here</div><div class=\"line\">           alert(<span class=\"string\">\"你单击了我\"</span>);</div><div class=\"line\">      &#125;, 300);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">_dblclick</span></span>()&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(clickTimer) &#123;</div><div class=\"line\">          window.clearTimeout(clickTimer);</div><div class=\"line\">          clickTimer = null;</div><div class=\"line\">      &#125;</div><div class=\"line\">      </div><div class=\"line\">     // your click process code here</div><div class=\"line\">     alert(<span class=\"string\">\"你双击了我\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;button onclick=<span class=\"string\">\"_click();\"</span> ondblclick=<span class=\"string\">\"_dblclick();\"</span>&gt;单击或双击我&lt;/button&gt;</div></pre></td></tr></table></figure></p>"},{"title":"bootsrap简单结构","date":"2016-09-18T22:26:52.000Z","_content":"\n---\n\n# 排版\n\n## 标题:\nBootstrap和普通的HTML页面一样, 定义标题都是使用标签&lt;h1&gt;到&lt;h6&gt;,只不过Bootstrap覆盖了其默认的样式, 使用其在所有浏览器下显示的效果一样.\n除此之外, 我们在Web的制作中, 常常会碰到在一个标题后面紧跟着一行小的副标题. 在Bootstrap中他也考虑了这种排版效果, 使用了&lt;small&gt;标签来制作副标题. 这个副标题具有其自己的一些独特样式.\n<!--more-->\n## 段落(正文文本)\n全局文本字号为14px(font-size),行高为1.42857143(line-height), 大约是20px,深灰色(#333),字体为\"Helvetica Neue\", Helvetica, Arial, sans-serif;(font-family)\n\n## 强调内容\n如果想让一个段落p突出显示, 可以通过添加类名**“.lead”**实现, 其作用就是增大文本字号, 加粗文本, 而且对行高和margin也做相应的处理. 除此之外, Bootstrap还通过元素标签:&lt;small&gt;、&lt;strong&gt;、&lt;em&gt;和&lt;cite&gt;给文本做突出样式处理. \n\n## 粗体\n粗体就是给文本加粗, 在普通的元素中我们一般通过font-weight设置为bold关键词给文本加粗. 在Bootstrap中, 可以使用&lt;b&gt;和&lt;strong&gt;标签让文本直接加粗. \n\n## 斜体\n斜体类似于加粗一样, 除了可以给元素设置样式font-style值为italic实现之外, 在Bootstrap中还可以通过使用标签&lt;em&gt;或&lt;i&gt;来实现. \n\n## 强调相关的类\n1.    \t.text-muted：提示, 使用浅灰色(#999)\n2.    \t.text-primary：主要, 使用蓝色(#428bca)\n3.   \t \t.text-success：成功, 使用浅绿色(#3c763d)\n4.   \t\t.text-info：通知信息, 使用浅蓝色(#31708f)\n5.   \t\t.text-warning：警告, 使用黄色(#8a6d3b)\n6.   \t \t.text-danger：危险, 使用褐色(#a94442)\n\n## 文本对齐风格\n为了简化操作, 方便使用, Bootstrap通过定义四个类名来控制文本的对齐风格：\n1. \t\t\t.text-left：左对齐\n2. \t\t\t.text-center：居中对齐\n3. \t\t\t.text-right：右对齐\n4. \t\t\t.text-justify：两端对齐\n\n## 列表--简介\nBootstrap根据平时的使用情形提供了六种形式的列表：\n☑  普通列表\n☑  有序列表\n☑  去点列表\n☑  内联列表\n☑  描述列表\n☑  水平描述列表\n\n### 无序列表和有序列表\n使用方式和我们平时使用的一样(无序列表使用ul, 有序列表使用ol标签), 在样式方面, Bootstrap只是在此基础上做了一些细微的优化.\n\n### 列表--去点列表\n在Bootstrap中默认情况下无序列表和有序列表是带有项目符号的, 但在实际工作中很多时候, 我们的列表是不需要这个编号的, 比如说用无序列表做导航的时候. Bootstrap为众多开发者考虑的非常周道, 通过给无序列表添加一个类名“.list-unstyled”,这样就可以去除默认的列表样式的风格. (ul/ol中加入CSS类).\n\n### 列表--内联列表\nBootstrap像去点列表一样, 通过添加类名“.list-inline”来实现内联列表, 简单点说就是把垂直列表换成水平列表, 而且去掉项目符号(编号), 保持水平显示. 也可以说内联列表就是为**制作水平导航**而生. \n\n### 列表--定义列表\n对于定义列表而言, Bootstrap并没有做太多的调整, 只是调整了行间距, 外边距和字体加粗效果. dl&gt;dt&gt;dd.\n\n### 列表--水平定义列表\n水平定义列表就像内联列表一样, Bootstrap可以给&lt;dl&gt;添加类名“.dl-horizontal”给定义列表实现水平显示效果. \n\n## 代码\n在Bootstrap主要提供了三种代码风格：\n1、使用&lt;code&gt;来显示单行内联代码\n2、使用&lt;pre&gt;来显示多行块代码\n3、使用&lt;kbd&gt;来显示用户输入代码\n在使用代码时, 用户可以根据具体的需求来使用不同的类型：\n1、&lt;code&gt;: 一般是针对于单个单词或单个句子的代码\n2、&lt;pre&gt;: 一般是针对于多行代码(也就是成块的代码)\n3、&lt;kbd&gt;: 一般是表示用户要通过键盘输入的内容\n正如前面所示, &lt;pre&gt;元素一般用于显示大块的代码, 并保证原有格式不变. 但有时候代码太多, 而且不想让其占有太大的页面篇幅, 就想控制代码块的大小. Bootstrap也考虑到这一点, 你只需要在&lt;pre&gt;标签上添加类名“.pre-scrollable”, 就可以控制代码块区域最大高度为340px, 一旦超出这个高度, 就会在Y轴出现滚动条. \n\n## 表格\nBootstrap为表格提供了1种基础样式和4种附加样式以及1个支持响应式的表格. Bootstrap为表格不同的样式风格提供了不同的类名, 主要包括：\n☑  .table：基础表格\n☑  .table-striped：斑马线表格\n☑  .table-bordered：带边框的表格\n☑  .table-hover：鼠标悬停高亮的表格\n☑  .table-condensed：紧凑型表格\n☑  .table-responsive：响应式表格\n表格--表格行的类:Bootstrap还为表格的行元素&lt;tr&gt;提供了五种不同的类名, 每种类名控制了行的不同背景颜色, active, success, info, warning, danger\n\n### 表格--基础表格\n在Bootstrap中, 对于基础表格是通过类名“.table”来控制. 如果在&lt;table&gt;元素中不添加任何类名, 表格是无任何样式效果的. 想得到基础表格, 我们只需要在&lt;table&gt;元素上添加“.table”类名, 就可以得到Bootstrap的基础表格.\n\n### 表格--斑马线表格\n有时候为了让表格更具阅读性, 需要将表格制作成类似于斑马线的效果. 简单点说就是让表格带有背景条纹效果. 在Bootstrap中实现这种表格效果并不困难, 只需要在&lt;table class=\"table\"&gt;的基础上增加类名“.table-striped”即可.\n\n### 表格--带边框的表格\n基础表格仅让表格部分地方有边框, 但有时候需要整个表格具有边框效果. Bootstrap出于实际运用, 也考虑这种表格效果, 即所有单元格具有一条1px的边框. \nBootstrap中带边框的表格使用方法和斑马线表格的使用方法类似, 只需要在基础表格&lt;table class=\"table\"&gt;基础上添加一个“.table-bordered”类名即可.\n\n### 表格--鼠标悬浮高亮的表格\n当鼠标悬停在表格的行上面有一个高亮的背景色, 这样的表格让人看起来就是舒服, 时刻告诉用户正在阅读表格哪一行的数据. Bootstrap的确没有让你失望, 他也考虑到这种效果, 其提供了一个“.table-hover”类名来实现这种表格效果. 鼠标悬停高亮的表格使用也简单, 仅需要&lt;table class=\"table\"&gt;元素上添加类名“table-hover”即可.\n\n### 表格--紧凑型表格\n何谓紧凑型表格, 简单理解, 就是单元格没内距或者内距较其他表格的内距更小. 换句话说, 要实现紧凑型表格只需要重置表格单元格的内距padding的值. 那么在Bootstrap中, 通过类名“table-condensed”重置了单元格内距值. 紧凑型表格的运用, 也只是需要在&lt;table class=\"table\"&gt;基础上添加类名“table-condensed”.另外从上面的示例中大家可能也发现了, 不管制作哪种表格都离不开类名“table”. 所以大家在使用Bootstrap表格时, **千万注意, 你的&lt;table&gt;元素中一定不能缺少类名“table”**. \n\n### 表格--响应式表格\n随着各种手持设备的出现, 要想让你的Web页面适合千罗万像的设备浏览, 响应式设计的呼声越来越高. 在Bootstrap中也为表格提供了响应式的效果, 将其称为响应式表格. \nBootstrap提供了一个容器, 并且此容器设置类名“.table-responsive”,此容器就具有响应式效果, 然后**将&lt;table class=\"table\"&gt;置于这个容器当中(多一个容器)**, 这样表格也就具有响应式效果. Bootstrap中响应式表格效果表现为：当你的浏览器可视区域小于768px时, 表格底部会出现水平滚动条. 当你的浏览器可视区域大于768px时, 表格底部水平滚动条就会消失. \n\n---\n\n# 表单\n## 基础表单\n表单中常见的元素主要包括：文本输入框、下拉选择框、单选按钮、复选按钮、文本域和按钮等. 其中每个控件所起的作用都各不相同, 而且不同的浏览器对表单控件渲染的风格都各有不同. 对于基础表单, Bootstrap并未对其做太多的定制性效果设计, 仅仅对表单内的fieldset、legend、label标签进行了定制. 当然表单除了这几个元素之外, 还有input、select、textarea等元素, 在Bootstrap框架中, 通过定制了一个类名`form-control`, 也就是说, 如果这几个元素使用了类名**“form-control”**, 将会实现一些设计上的定制效果. \n1、宽度变成了100%\n2、设置了一个浅灰色(#ccc)的边框\n3、具有4px的圆角\n4、设置阴影效果, 并且元素得到焦点之时, 阴影和边框效果会有所变化\n5、设置了placeholder的颜色为#999\n``` bash\n<div class=\"form-group\">\n    <label for=\"exampleInputEmail1\">邮箱：</label>\n    <input type=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" \n\t\t\tplaceholder=\"请输入您的邮箱地址\">\n  </div>\n```\n``` bash\n<div class=\"checkbox\">\n    <label>\n      <input type=\"checkbox\"> 记住密码\n    </label>\n  </div>\n```\n## 水平表单\n在Bootstrap框架中要实现水平表单效果, 必须满足以下两个条件：\n1、在&lt;form&gt;元素是使用类名“form-horizontal”. \n2、配合Bootstrap框架的网格系统. (网格布局会在以后的章节中详细讲解)\n\n在&lt;form&gt;元素上使用类名“form-horizontal”主要有以下几个作用：\n1、设置表单控件padding和margin值. \n2、改变“form-group”的表现形式, 类似于网格系统的“row”. \n``` bash\n<div class=\"form-group\">\n    <label for=\"inputPassword3\" class=\"col-sm-2 control-label\">密码</label>\n    <div class=\"col-sm-10\">\n      <input type=\"password\" class=\"form-control\" id=\"inputPassword3\"\n\t\t\t\tplaceholder=\"请输入您的邮箱密码\">\n    </div>\n  </div>\n```\n## 内联表单\n在Bootstrap框架中实现这样的表单效果是轻而易举的, 你只需要在&lt;form&gt;元素中添加类名“form-inline”即可. 内联表单实现原理非常简单, 欲将表单控件在一行显示, 就需要将表单控件设置成内联块元素(display:inline-block).如果你要在input前面添加一个label标签时, 会导致input换行显示. 如果你必须添加这样的一个label标签, 并且不想让input换行, 你需要将label标签也放在容器“form-group”中. 回过头来看示例, 你或许会问, 为什么添加了label标签, 而且没有放置在”form-group”这样的容器中, input也不会换行；还有label标签怎么没显示出来. 如果你仔细看, 在label标签运用了一个类名“sr-only”, 标签没显示就是这个样式将标签隐藏了.那么Bootstrap为什么要这么做呢？这样不是多此一举吗？其实不是的, 如果没有为输入控件设置label标签, 屏幕阅读器将无法正确识别. 这也是Bootstrap框架另一个优点之处, 为残障人员进行了一定的考虑. \n\n## 表单控件(输入框input)\n单行输入框,常见的文本输入框, 也就是input的type属性值为text. 在Bootstrap中使用input时也必须添加type类型, 如果没有指定type类型, 将无法得到正确的样式, 因为Bootstrap框架都是通过input\\[type=“?”\\](其中?号代表type类型, 比如说text类型, 对应的是input\\[type=“text”\\])的形式来定义样式的. \n为了让控件在各种表单风格中样式不出错, 需要添加类名“form-control”, \n**全部input类型都在这了**\n&lt;input type=\"email\" class=\"form-control\" placeholder=\"Enter email\"&gt;\ntext button checkbox date datetime datetime-local img file hidden month number password radio range reset search submit tel time url week hidden\n\n## 表单控件(下拉选择框select)\nBootstrap框架中的下拉选择框使用和原始的一致, 多行选择设置multiple属性的值为multiple. Bootstrap框架会为这些元素提供统一的样式风格. \n``` bash\n<select multiple class=\"form-control\"> \n  <option>1</option> \n  <option>2</option> \n  <option>3</option> \n  <option>4</option> \n  <option>5</option> \n</select>\n```\n\n## 表单控件(文本域textarea)\n文本域和原始使用方法一样, 设置rows可定义其高度, 设置cols可以设置其宽度. 但如果textarea元素中添加了类名“form-control”类名, 则无需设置cols属性. 因为Bootstrap框架中的“form-control”样式的表单控件宽度为100%或auto. \n``` bash\n<form role=\"form\">\n  <div class=\"form-group\">\n    <textarea class=\"form-control\" rows=\"3\"></textarea>\n  </div>\n</form>\n```\n\n## 表单控件(复选框checkbox和单选择按钮radio)\n<span style=\"color:blue;\">Bootstrap框架中checkbox和radio有点特殊</span>, Bootstrap针对他们做了一些特殊化处理, 主要是checkbox和radio与label标签配合使用会出现一些小问题(最头痛的是对齐问题). 使用Bootstrap框架, 开发人员无需考虑太多, 只需要按照下面的方法使用即可. \n``` bash\n<div class=\"checkbox\">\n    <label>\n      <input type=\"checkbox\" value=\"\">\n      记住密码\n    </label>\n  </div>\n```\n``` bash\n<div class=\"radio\">\n  <label>\n    <input type=\"radio\" name=\"optionsRadios\" id=\"optionsRadios1\" value=\"love\" checked>\n      喜欢\n  </label>\n</div>\n<div class=\"radio\">\n\t<label>\n\t\t<input type=\"radio\" name=\"optionsRadios\" id=\"optionsRadios2\" value=\"hate\">\n\t\t不喜欢\n\t</label>\n</div>\n```\n从上面的示例, 我们可以得知：\n1、**不管是checkbox还是radio都使用label包起来了**\n2、checkbox连同label标签放置在一个名为“.checkbox”的容器内\n3、radio连同label标签放置在一个名为“.radio”的容器内\n在Bootstrap框架中, 主要借助“.checkbox”和“.radio”样式, 来处理复选框、单选按钮与标签的对齐方式. \n\n## 表单控件(复选框和单选按钮水平排列)\n有时候, 为了布局的需要, 将复选框和单选按钮需要水平排列. Bootstrap框架也做了这方面的考虑：\n1、如果checkbox需要水平排列, 只需要在**label标签上添加类名“checkbox-inline”**\n2、如果radio需要水平排列, 只需要在**label标签上添加类名“radio-inline”**\n``` bash\n<div class=\"form-group\">\n  <label class=\"checkbox-inline\">\n    <input type=\"checkbox\"  value=\"option1\">游戏\n  </label>\n  <label class=\"checkbox-inline\">\n    <input type=\"checkbox\"  value=\"option2\">摄影\n  </label>\n  <label class=\"checkbox-inline\">\n    <input type=\"checkbox\"  value=\"option3\">旅游\n  </label>\n</div>\n```\n\n## 表单控件(按钮)\n按钮也是表单重要控件之一,制作按钮通常使用下面代码来实现：\n☑  input[type=“submit”]\n☑  input[type=“button”]\n☑  input[type=“reset”]\n☑  &lt;button&gt;\n在Bootstrap框架中的按钮都是采用&lt;button&gt;来实现. \n\n## 表单控件大小\n前面看到的表单控件都正常的大小. 可以通过设置控件的height, line-height, padding和font-size等属性来实现控件的高度设置. 不过Bootstrap框架还提供了两个不同的类名, 用来控制表单控件的高度. 这两个类名是：\n1、input-sm: 让控件比正常大小更小\n2、input-lg: 让控件比正常大小更大\n**这两个类适用于表单中的input, textarea和select控件.** 不管是“input-sm”还是“input-lg”仅对控件高度做了处理. 但往往很多时候, 我们需要控件宽度也要做一定的变化处理. 这个时候就要借住Bootstrap框架的网格系统. \n前面介绍水平表单时说过, **如果表单使用了类名“form-horizontal”, 其中“form-group”就相当于网格系统中的“row”**. 换句话说, 如果没有这样做, 要通过网格系统来控制表单控件宽度, 就需要这样使用：\n``` bash\n<div class=\"row\">\n\t<div class=\"col-xs-4\">\n\t\t<input class=\"form-control input-lg\" type=\"text\" placeholder=\".col-xs-4\">\n\t</div>\n</div>\n```\n\n## 表单控件状态(焦点状态)\n每一种状态都能给用户传递不同的信息, 比如表单有焦点的状态可以告诉用户可以输入或选择东西, 禁用状态可以告诉用户不可以输入或选择东西, 还有就是表单控件验证状态, 可以告诉用户的操作是否正确等. 那么在Bootstrap框架中的表单控件也具备这些状态.  从源码中我们可以看出, 要让控件在焦点状态下有上面样式效果, 需要给控件添加类名“form-control”.在Bootstrap框架中, file、radio和checkbox控件在焦点状态下的效果也与普通的input控件不太一样, 主要是因为Bootstrap对他们做了一些特殊处理\n\n## 表单控件状态(禁用状态)\nBootstrap框架的表单控件的禁用状态和普通的表单禁用状态实现方法是一样的, 在相应的表单控件上**添加属性“disabled”**(__不是添加类__). 和其他表单的禁用状态不同的是, Bootstrap框架做了一些样式风格的处理. 在使用了“form-control”的表单控件中, 样式设置了禁用表单背景色为灰色, 而且手型变成了不准输入的形状. 如果控件中不使用类名“form-control”, 禁用的控件只会有一个不准输入的手型出来. 在Bootstrap框架中, 如果fieldset设置了disabled属性, 整个域都将处于被禁用状态\n``` bash\n<form role=\"form\">\n<fieldset disabled>\n  <div class=\"form-group\">\n  <label for=\"disabledTextInput\">禁用的输入框</label>\n    <input type=\"text\" id=\"disabledTextInput\" class=\"form-control\" placeholder=\"禁止输入\">\n  </div>\n  <div class=\"form-group\">\n  <label for=\"disabledSelect\">禁用的下拉框</label>\n    <select id=\"disabledSelect\" class=\"form-control\">\n  <option>不可选择</option>\n  </select>\n  </div>\n  <div class=\"checkbox\">\n  <label>\n    <input type=\"checkbox\">无法选择\n  </label>\n  </div>\n  <button type=\"submit\" class=\"btnbtn-primary\">提交</button>\n</fieldset>\n</form>\n```\n据说对于整个禁用的域中, 如果legend中有输入框的话, 这个输入框是无法被禁用的. \n\n## 表单控件状态(验证状态)\n在制作表单时, 不免要做表单验证. 同样也需要提供验证状态样式, 在Bootstrap框架中同样提供这几种效果. \n1、.has-warning: 警告状态(黄色)\n2、.has-error: 错误状态(红色)\n3、.has-success: 成功状态(绿色)\n使用的时候只需要在form-group容器上对应添加状态类名. 很多时候, 在表单验证的时候, 不同的状态会提供不同的icon, 比如成功是一个对号(√), 错误是一个叉号(×)等. 在Bootstrap框中也提供了这样的效果. 如果你想让表单在对应的状态下显示icon出来, 只需要在对应的状态下添加类名“has-feedback”. 请注意, 此类名要与“has-error”、“has-warning”和“has-success”在一起\n``` bash\n<div class=\"form-group has-success has-feedback\">\n\t<label class=\"control-label\" for=\"inputSuccess1\">成功状态</label>\n\t<input type=\"text\" class=\"form-control\" id=\"inputSuccess1\" placeholder=\"成功状态\" >\n\t<span class=\"glyphicon glyphicon-ok form-control-feedback\"></span>\n\t<!-- 使用图标的话,必须加入之前的 成功状态 的 label -->\n</div>\n```\n\n## 表单提示信息\n平常在制作表单验证时, 要提供不同的提示信息. 在Bootstrap框架中也提供了这样的效果. 使用了一个\"help-block\"样式, 将提示信息以块状显示, 并且显示在控件底部. \n``` bash\n<div class=\"form-group has-success has-feedback\">\n  <label class=\"control-label\" for=\"inputSuccess1\">成功状态</label>\n  <input type=\"text\" class=\"form-control\" id=\"inputSuccess1\" placeholder=\"成功状态\" >\n  <span class=\"help-block\">你输入的信息是正确的</span>\n  <span class=\"glyphicon glyphicon-ok form-control-feedback\"></span>\n</div>\n```\n\n## 按钮\n**请始终为按钮规定 type 属性**. Internet Explorer 的默认类型是 \"button\", 而其他浏览器中(包括 W3C 规范)的默认值是 \"submit\". \n``` bash\n<button class=\"btn\" type=\"button\">基础按钮.btn</button>  \n<button class=\"btn btn-default\" type=\"button\">默认按钮.btn-default</button> \n<button class=\"btn btn-primary\" type=\"button\">主要按钮.btn-primary</button> \n<button class=\"btn btn-success\" type=\"button\">成功按钮.btn-success</button> \n<button class=\"btn btn-info\" type=\"button\">信息按钮.btn-info</button> \n<button class=\"btn btn-warning\" type=\"button\">警告按钮.btn-warning</button> \n<button class=\"btn btn-danger\" type=\"button\">危险按钮.btn-danger</button> \n<button class=\"btn btn-link\" type=\"button\">链接按钮.btn-link</button> \n```\n\n### 默认按钮\nBootstrap框架首先通过基础类名“.btn”定义了一个基础的按钮风格, 然后通过“.btn-default”定义了一个默认的按钮风格. 默认按钮的风格就是在基础按钮的风格的基础上修改了按钮的背景颜色、边框颜色和文本颜色. 使用默认按钮风格也非常的简单, 只需要在基础按钮“btn”的基础上增加类名“btn-default”即可\n\n### 多标签支持\n虽然在Bootstrap框架中使用任何标签元素都可以实现按钮风格, 但个人并不建议这样使用, 为了避免浏览器兼容性问题, 个人强烈建议使用button或a标签来制作按钮. \n\n### 定制风格\n在介绍按钮开篇就说过, Web页面可能会有不同的按钮风格. 那么在Bootstrap框架也考虑了. 在Bootstrap框架中除了默认的按钮风格之外, 还有其他六种按钮风格, 每种风格的其实都一样, 不同之处就是按钮的背景颜色、边框颜色和文本颜色. \n\n### 按钮大小\n在Bootstrap框架中, 对于按钮的大小, 也是可以定制的. 类似于input一样, 通过在基础按钮“.btn”的基础上追加类名来控制按钮的大小. \n``` bash\n<button class=\"btn btn-primary btn-lg\" type=\"button\">大型按钮.btn-lg</button> \n<button class=\"btn btn-primary\" type=\"button\">正常按钮</button>\n<button class=\"btn btn-primary btn-xs\" type=\"button\">小型按钮.btn-sm</button>\n<button class=\"btn btn-primary btn-xs\" type=\"button\">小型按钮.btn-sm</button>\n```\n\n### 块状按钮\nBootstrap框架中提供了一个类名“btn-block”. 按钮使用这个类名就可以让按钮充满整个容器, 并且这个按钮不会有任何的padding和margin值. 在实际当中, 常把这种按钮称为块状按钮. \n\n### 按钮状态——活动状态\nBootstrap框架针对按钮的状态做了一些特殊处理. 在Bootstrap框架中针对按钮的状态效果主要分为两种：活动状态和禁用状态. Bootstrap按钮的活动状态主要包括按钮的悬浮状态(:hover), 点击状态(:active)和焦点状态(:focus)几种. 而且不同风格下的按钮都具有这几种状态效果, 只是颜色做了一定的调整.当按钮处理正在点击状态(也就是鼠标按下的未松开的状态), __对于&lt;button&gt;元素是通过“:active”伪类实现__, __而对于&lt;a&gt;这样的标签元素则是通过添加类名“.active”来实现__. \n\n### 按钮状态——禁用状态\n和input等表单控件一样, 在Bootstrap框架的按钮中也具有禁用状态的设置. 禁用状态与其他状态按钮相比, 就是背景颜色的透明度做了一定的处理, opcity的值从100%调整为65%. 在Bootstrap框架中, 要禁用按钮有两种实现方式：\n方法1: 在标签中添加disabled属性\n方法2: 在元素标签中添加类名“disabled”\n\n## 图像\n图像在网页制作中也是常要用到的元素, 在Bootstrap框架中对于图像的样式风格提供以下几种风格：\n1、img-responsive：响应式图片, 主要针对于响应式设计\n2、img-rounded: 圆角图片\n3、img-circle: 圆形图片\n4、img-thumbnail: 缩略图片\n使用方法非常简单, 只需要在&lt;img&gt;标签上添加对应的类名.\n``` bash\n<img  alt=\"140x140\" src=\"http://placehold.it/140x140\">\n<img  class=\"img-rounded\" alt=\"140x140\" src=\"http://placehold.it/140x140\">\n<img  class=\"img-circle\" alt=\"140x140\" src=\"http://placehold.it/140x140\">\n<img  class=\"img-thumbnail\" alt=\"140x140\" src=\"http://placehold.it/140x140\">\n<img  class=\"img-responsive\" alt=\"140x140\" src=\"http://placehold.it/140x140\">\n```\n\n## 图标\n``` bash\n<span class=\"glyphicon glyphicon-search\"></span>\n<span class=\"glyphicon glyphicon-asterisk\"></span>\n<span class=\"glyphicon glyphicon-plus\"></span>\n<span class=\"glyphicon glyphicon-cloud\"></span>\n<span class=\"glyphicon glyphicon-phone\"></span>\n```\n在网页中使用图标也非常的简单, 在任何内联元素上应用所对应的样式即可.所有icon都是以”glyphicon-”前缀的类名开始, 然后后缀表示图标的名称. \n\n---\n\n# 网格系统\n网格系统的实现原理非常简单, 仅仅是通过定义容器大小, 平分12份(也有平分成24份或32份, 但12份是最常见的), 再调整内外边距, 最后结合媒体查询, 就制作出了强大的响应式网格系统. Bootstrap框架中的网格系统就是将容器平分成12份\nBootstrap框架的网格系统工作原理如下：\n1、**数据行(.row)**必须包含在容器(.container)中, 以便为其赋予合适的对齐方式和内距(padding). 如：\n``` bash\n<div class=\"container\">\n  <div class=\"row\"></div>\n</div>\n```\n2、在行(.row)中可以添加列(.column), 但列数之和不能超过平分的总列数, 比如12. 如：\n``` bash\n<div class=\"container\">\n\t<div class=\"row\">\n\t\t<div class=\"col-md-4\"></div>\n\t\t<div class=\"col-md-8\"></div>\n\t<div>\n<div>\n```\n3、具体内容应当放置在列容器(column)之内, 而且**只有列(column)才可以作为行容器(.row)的直接子元素**\n4、通过设置内距(padding)从而创建列与列之间的间距. 然后通过为第一列和最后一列设置负值的外距(margin)来抵消内距(padding)的影响\n\n## 列偏移\n有的时候, 我们不希望相邻的两个列紧靠在一起, 但又不想使用margin或者其他的技术手段来. 这个时候就可以使用列偏移(offset)功能来实现. 使用列偏移也非常简单, 只需要在列元素上添加类名“col-md-offset-*” (其中星号代表要偏移的列组合数), 那么具有这个类名的列就会向右偏移. 例如, 你在列元素上添加“col-md-offset-4”, 表示该列向右移动4个列的宽度. 不过有一个细节需要注意, 使用 ”col-md-offset-*” 对列进行向右偏移时, 要保证列与偏移列的总数不超过12, 不然会致列断行显示.\n\n## 列排序\n列排序其实就是改变列的方向, 就是改变左右浮动, 并且设置浮动的距离. 在Bootstrap框架的网格系统中是通过添加类名“col-md-push-*”(向右)和“col-md-pull-*”(向左) (其中星号代表移动的列组合数). \n\n## 列的嵌套\nBootstrap框架的网格系统还支持列的嵌套. 你可以在一个列中添加一个或者多个行(row)容器, 然后在这个行容器中插入列(像前面介绍的一样使用列). 但在列容器中的行容器(row), 宽度为100%时, 就是当前外部列的宽度. \n``` bash\n<div class=\"row\">\n\t<div class=\"col-md-8\">\n\t我的里面嵌套了一个网格\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">col-md-6</div>\n\t\t\t<div class=\"col-md-6\">col-md-6</div>\n\t\t</div>\n\t</div>\n</div>\n```\n\n---\n\n# 菜单、按钮和导航\n在Bootstrap框架中的下拉菜单组件是一个独立的组件, 根据不同的版本, 它对应的文件. 在使用Bootstrap框架的下拉菜单时, 必须调用Bootstrap框架提供的bootstrap.js文件. 当然, 如果你使用的是未编译版本, 在js文件夹下你能找到一个名为“dropdown.js”的文件. 你也可以调用这个js文件. \n<span style=\"color:red;\">特别声明</span>：因为Bootstrap的组件交互效果都是依赖于jQuery库写的插件, 所以在使用bootstrap.min.js之前一定要先加载jquery.min.js才会生效果. \n\n## 下拉菜单\n```bash\n<div class=\"dropdown\">\n\t<button class=\"btn btn-default dropdown-toggle\" type=\"button\"\n\t\tid=\"dropdownMenu1\" data-toggle=\"dropdown\">\n\t\t下拉菜单\n\t\t<span class=\"caret\"></span>\n\t</button>\n\t<ul class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"dropdownMenu1\">\n\t\t<li role=\"presentation\"><a role=\"menuitem\" tabindex=\"-1\" href=\"#\">\n\t\t\t下拉菜单项</a></li>\n\t\t<li role=\"presentation\" class=\"divider\"></li>\n\t\t<li role=\"presentation\"><a role=\"menuitem\" tabindex=\"-1\" href=\"#\">\n\t\t\t下拉菜单项</a></li>\n\t</ul>\n</div>\n```\n\n使用方法：在使用Bootstrap框架中的下拉菜单组件时, 其结构运用的正确与否非常的重要, 如果结构和类名未使用正确, 直接影响组件是否能正常运用. 我们来简单的看看：\n1、使用一个名为“dropdown”的容器包裹了整个下拉菜单元素, 示例中为:&lt;div class=\"dropdown\"&gt;&lt;/div&gt;\n2、使用了一个&lt;button&gt;按钮做为父菜单, 并且定义类名“dropdown-toggle”和自定义“data-toggle”属性, 属性指明触发后的动作：data-toggle=\"dropdown\"\n3、下拉菜单项使用一个ul列表, 并且定义一个类名为“dropdown-menu”, 此示例为:\n&lt;ul class=\"dropdown-menu\"&gt;\n\n### 下拉菜单(下拉分隔线)\n在Bootstrap框架中的下拉菜单还提供了下拉分隔线, 假设下拉菜单有两个组, 那么组与组之间可以通过添加一个空的&lt;li&gt;, 并且给这个&lt;li&gt;添加类名“divider”来实现添加下拉分隔线的功能. \n\n### 下拉菜单(菜单标题)\n``` bash\n<li role=\"presentation\" class=\"dropdown-header\">第一部分菜单头部</li>\n```\n\n### 下拉菜单(对齐方式)\nBootstrap框架中下拉菜单默认是左对齐, 如果你想让下拉菜单相对于父容器右对齐时, 可以在“dropdown-menu”上添加一个“pull-right”或者“dropdown-menu-right”类名\n\n### 下拉菜单(菜单项状态)\n下拉菜单项的默认的状态(不用设置)有悬浮状态(:hover)和焦点状态(:focus).下拉菜单项除了上面两种状态, 还有当前状态(.active)和禁用状态(.disabled). 这两种状态使用方法只需要在对应的菜单项上添加对应的类名\n\n## 按钮(按钮组)\n按钮组和下拉菜单组件一样, 需要依赖于button.js插件才能正常运行. 不过我们同样可以直接只调用bootstrap.js文件. 因为这个文件已集成了button.js插件功能. 对于结构方面, 非常的简单. 使用一个名为“btn-group”的容器, 把多个按钮放到这个容器中.btn-group 主要使自身容器为内联块, 使内部 .btn 左浮. 如下所示：\n```bash\n<div class=\"btn-group\">\n  <button type=\"button\" class=\"btn btn-default\">\n    <span class=\"glyphicon glyphicon-step-backward\"></span>\n  </button>\n  <button type=\"button\" class=\"btn btn-default\">\n    <span class=\"glyphicon glyphicon-step-forward\"></span>\n  </button>\n</div>\n```\n除了可以使用&lt;button&gt;元素之外, 还可以使用其他标签元素, 比如&lt;a&gt;标签. 唯一要保证的是：不管使用什么标签, “.btn-group”容器里的标签元素需要带有类名“.btn”. \n\n### 按钮(按钮工具栏)\n在富文本编辑器中, 将按钮组分组排列在一起,比如说复制、剪切和粘贴一组；左对齐、中间对齐、右对齐和两端对齐一组,那么Bootstrap框架按钮工具栏也提供了这样的制作方法,你只需要将按钮组“btn-group”按组放在一个大的容器“btn-toolbar”中, 如下所示：\n```bash\n<div class=\"btn-toolbar\">\n  <div class=\"btn-group\"></div>\n  <div class=\"btn-group\"></div>\n  <div class=\"btn-group\"></div>\n</div>\n```\n实现原理主要是让容器的多个分组“btn-group”元素进行浮动, 并且组与组之前保持5px的左外距.\n\n### 按钮组大小设置\n在介绍按钮一节中, 我们知道按钮是通过btn-lg、btn-sm和btn-xs三个类名来调整padding、font-size、line-height和border-radius属性值来改变按钮大小. 那么按钮组的大小, 我们也可以通过类似的方法：\n☑  .btn-group-lg:大按钮组\n☑  .btn-group-sm:小按钮组\n☑  .btn-group-xs:超小按钮组\n只需要在“.btn-group”类名上追加对应的类名, 就可以得到不同大小的按钮组. 如下所示：\n``` bash\n<div class=\"btn-toolbar\">\n  <div class=\"btn-group btn-group-lg\">\n    …\n  </div>\n  <div class=\"btn-group\">\n  …\n  </div>\n  <div class=\"btn-group btn-group-sm\">\n    …\n  </div>\n  <div class=\"btn-group btn-group-xs\">\n   …\n  </div>\n</div>\n```\n\n### 按钮(嵌套分组)\n很多时候, 我们常把下拉菜单和普通的按钮组排列在一起, 实现类似于导航菜单的效果. 使用的时候, 只需要把当初制作下拉菜单的“dropdown”的容器换成“btn-group”, 并且和普通的按钮放在同一级. \n```bash\n<div class=\"btn-group\">\n<button class=\"btn btn-default\" type=\"button\">首页</button>\n<button class=\"btn btn-default\" type=\"button\">产品展示</button>\n<button class=\"btn btn-default\" type=\"button\">案例分析</button>\n<button class=\"btn btn-default\" type=\"button\">联系我们</button>\n<div class=\"btn-group\">\n  <button class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" type=\"button\">关于我们<span class=\"caret\"></span></button>\n  <ul class=\"dropdown-menu\">\n\t\t<li><a href=\"##\">公司简介</a></li>\n\t\t<li><a href=\"##\">企业文化</a></li>\n\t\t<li><a href=\"##\">组织结构</a></li>\n\t\t<li><a href=\"##\">客服服务</a></li>\n\t</ul>\n</div>\n</div>\n```\n\n### 按钮(等分按钮)\n等分按钮的效果在移动端上特别的实用. 整个按钮组宽度是容器的100%, 而按钮组里面的每个按钮平分整个容器宽度. 例如, 如果你按钮组里面有五个按钮, 那么每个按钮是20%的宽度, 如果有四个按钮, 那么每个按钮是25%宽度, 以此类推.等分按钮也常被称为是自适应分组按钮, 其实现方法也非常的简单, 只需要在按钮组“btn-group”上追加一个“btn-group-justified”类名, 如下所示：\n```bash\n<div class=\"btn-group btn-group-justified\">\n  <a class=\"btnbtn-default\" href=\"#\">首页</a>\n  <a class=\"btnbtn-default\" href=\"#\">产品展示</a>\n  <a class=\"btnbtn-default\" href=\"#\">案例分析</a>\n  <a class=\"btnbtn-default\" href=\"#\">联系我们</a>\n</div>\n```\n**在制作等分按钮组时, 请尽量使用&lt;a&gt;标签元素来制作按钮**, 因为使用&lt;button&gt;标签元素时, 使用display:table在部分浏览器下支持并不友好. \n\n### 按钮(垂直分组)\n前面看到的示例, 按钮组都是水平显示的. 但在实际运用当中, 总会碰到垂直显示的效果. 在Bootstrap框架中也提供了这样的风格. 我们只需要把水平分组的“btn-group”类名**换成**“btn-group-vertical”即可. \n\n## 按钮下拉菜单\n按钮下拉菜单仅从外观上看和上一节介绍的下拉菜单效果基本上是一样的. 不同的是在普通的下拉菜单的基础上**封装了按钮(.btn)样式效果**. 简单点说就是点击一个按钮, 会显示隐藏的下拉菜单. 按钮下拉菜单其实就是普通的下拉菜单, 只不过把“&lt;a&gt;”标签元素换成了“&lt;button&gt;”标签元素. 唯一不同的是外部容器“div.dropdown”换成了“div.btn-group”. \n.btn-group 元素是内联元素 .dropdown 元素是块状元素\n按钮的向下向上三角形:按钮的向下三角形, 我们是通过在&lt;button&gt;标签中添加一个“&lt;span&gt;”标签元素, 并且命名为“caret”:\n``` bash\n<button class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" type=\"button\">\n\t按钮下拉菜单<span class=\"caret\"></span>\n</button>\n```\n\n有的时候我们的下拉菜单会向上弹起(接下来一个小节会介绍), 这个时候我们的三角方向需要朝上显示, 实现方法：需要在“.btn-group”类上**追加**“dropup”类名(这也是做向上弹起下拉菜单要用的类名). \n\n## 向上弹起的下拉菜单\n有些菜单是需要向上弹出的, 比如说你的菜单在页面最底部, 而这个菜单正好有一个下拉菜单, 为了让用户有更好的体验, 不得不让下拉菜单向上弹出. 在Bootstrap框架中专门为这种效果提代了一个类名“dropup”. 使用方法正如前面所示, 只需要在“btn-group”上添加这个类名(当然, 如果是普通向上弹出下拉菜单, 你只需要在“dropdown”类名基础上追加“dropup”类名即可). \n\n小笔记:\n1.实现普通下拉菜单：.dropdown>button.dropdown-toggle[data-toggle=\"dropdown\"]+ul.dropdown-menu;\n2.按钮下拉菜单：把.dropdown换成.btn-group即可. \n3.下拉菜单变上拉菜单：.dropdown.dropup或.btn-group.dropup\n4.下拉菜单通过绝对定位实现, 可通过设置top,bottom,left,right改变下拉菜单出现的位置. \n5.dropdown-header,li.divider,li.active,li.disabled\n\n## 导航(基础样式)\nBootstrap框架中制作导航条主要通过“.nav”样式. 默认的“.nav”样式不提供默认的导航样式, 必须附加另外一个样式才会有效, 比如“nav-tabs”、“nav-pills”之类. 比如有一个tab导航条的例子, 他的实现方法就是为ul标签加入.nav和nav-tabs两个类样式. \n``` bash\n<ul class=\"nav nav-tabs\">\n  <li><a href=\"##\">Home</a></li>\n  <li><a href=\"##\">CSS3</a></li>\n \t<li><a href=\"##\">Sass</a></li>\n \t<li><a href=\"##\">jQuery</a></li>\n \t<li><a href=\"##\">Responsive</a></li>\n</ul>\n```\n\n### 导航(标签形tab导航)\n标签形导航, 也称为选项卡导航. 特别是在很多内容分块显示的时, 使用这种选项卡来分组十分适合.标签形导航是通过“nav-tabs”样式来实现.在制作标签形导航时需要在原导航“nav”上追加此类名.其实上例的效果和我们平时看到的选项卡效果并不一致. 一般情况之下, 选项卡教会有一个当前选中项. 其实在Bootstrap框架也相应提供了. 假设我们想让“Home”项为当前选中项, 只需要在其标签上添加类名“active”即可; 除了当前项之外, 有的选项卡还带有禁用状态, 实现这样的效果, 只需要在标签项上添加“disabled”即可.\n\n### 导航(胶囊形(pills)导航)\n胶囊形(pills)导航听起来有点别扭, 因为其外形看起来有点像胶囊形状. 但其更像我们平时看到的大众形导航. 当前项高亮显示, 并带有圆角效果. 其实现方法和“nav-tabs”类似,同样的结构, 只需要把类名“nav-tabs”换成“nav-pills”即可.\n\n### 导航(垂直堆叠的导航)\n在实际运用当中, 除了水平导航之外, 还有垂直导航, 就类似前面介绍的垂直排列按钮一样. 制作**垂直堆叠导航只需要在“nav-pills”的基础上添加一个“nav-stacked”类名**即可.\n大家是否还记得, 在下拉菜单一节中, 下拉菜单组与组之间有一个分隔线. 其实在垂直堆叠导航也具有这样的效果, 只需要添加在导航项之间添加“&lt;li class=”nav-divider”&gt;&lt;/li&gt;”即可\n\n### 自适应导航\n自适应导航指的是导航占据容器全部宽度, 而且菜单项可以像表格的单元格一样自适应宽度. 自适应导航和前面使用“btn-group-justified”制作的自适应按钮组是一样的. 只不过在制作自适应导航时更换了另一个类名“nav-justified”. 当然他需要和“nav-tabs”或者“nav-pills”配合在一起使用. 如：\n``` bash\n<ul class=\"nav nav-tabs nav-justified\">\n\t<li class=\"active\"><a href=\"##\">Home</a></li>\n\t<li><a href=\"##\">CSS3</a></li>\n\t<li><a href=\"##\">Sass</a></li>\n\t<li><a href=\"##\">jQuery</a></li>\n\t<li><a href=\"##\">Responsive</a></li>\n</ul>\n```\n\n## 导航加下拉菜单(二级导航)\n在Bootstrap框架中制作二级导航就更容易了. 只需要将li当作父容器, 使用类名“dropdown”, 同时在li中嵌套另一个列表ul, 使用前面介绍下拉菜单的方法就可以：\n``` bash\n<ul class=\"nav nav-pills\">\n\t<li class=\"active\"><a href=\"##\">首页</a></li>\n\t<li class=\"dropdown\">\n\t\t<a href=\"##\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">教程<span class=\"caret\"></span></a>\n\t\t\t<ul class=\"dropdown-menu\">\n\t\t\t\t<li><a href=\"##\">CSS3</a></li>\n            …\n\t\t\t</ul>\n\t</li>\n\t<li><a href=\"##\">关于我们</a></li>\n</ul>\n```\n\n## 面包屑式导航\n面包屑(Breadcrumb)一般用于导航, 主要是起的作用是告诉用户现在所处页面的位置(当前位置). 在Bootstrap框架中面包屑也是一个独立模块组件\n``` bash\n<ol class=\"breadcrumb\">\n  <li><a href=\"#\">首页</a></li>\n  <li><a href=\"#\">我的书</a></li>\n  <li class=\"active\">《图解CSS3》</li>\n</ol> \n```\n\n---\n\n\n# 导航条,分页导航\n## 导航条基础\n导航条(navbar)和上一节介绍的导航(nav), 就相差一个字, 多了一个“条”字. 其实在Bootstrap框架中他们还是明显的区别. 在导航条(navbar)中有一个**背景色、而且导航条可以是纯链接(类似导航), 也可以是表单, 还有就是表单和导航一起结合等多种形式**. 在这一节中将一起探讨Bootstrap框架中导航条的使用. \n``` bash\n<!--基本导航条-->\n<div class=\"navbar navbar-default\" role=\"navigation\">\n\t<ul class=\"nav navbar-nav\">\n\t\t<li class=\"active\"><a href=\"##\">网站首页</a></li>\n\t\t<li><a href=\"##\">系列教程</a></li>\n\t\t<li><a href=\"##\">名师介绍</a></li>\n\t\t<li><a href=\"##\">成功案例</a></li>\n\t\t<li><a href=\"##\">关于我们</a></li>\n\t</ul>\n</div>\n```\n``` bash\n<div class=\"navbar navbar-default\" role=\"navigation\">\n  <div class=\"navbar-header\">\n  　 <a href=\"##\" class=\"navbar-brand\">慕课网</a>\n  </div>\n  <ul class=\"nav navbar-nav\">\n\t  <li class=\"active\"><a href=\"##\">网站首页</a></li>\n      <li class=\"dropdown\">\n        <a href=\"##\" data-toggle=\"dropdown\" class=\" dropdown-toggle\">系列教程<span class=\"caret\"></span></a>\n        <ul class=\"dropdown-menu\">\n        \t<li><a href=\"##\">CSS3</a></li>\n        \t<li><a href=\"##\">JavaScript</a></li>\n        \t<li class=\"\"><a href=\"##\">PHP</a></li>\n        </ul>\n     </li>\n      <li><a href=\"##\">名师介绍</a></li>\n      <li><a href=\"##\">成功案例</a></li>\n      <li><a href=\"##\">关于我们</a></li>\n\t  </ul>\n  <form action=\"##\" class=\"navbar-form navbar-left\" rol=\"search\">\n   \t<div class=\"form-group\">\n   \t\t<input type=\"text\" class=\"form-control\" placeholder=\"请输入关键词\" />\n   \t</div>\n      <button type=\"submit\" class=\"btn btn-default\">搜索</button>\n    </form>\n</div>\n```\n\n## 基础导航条\n在Bootstrap框中, 导航条和导航从外观上差别不是太多, 但在实际使用中导航条要比导航复杂得多. 我们先来看导航条中最基础的一个——基础导航条. \n第一步：首先在制作导航的列表(&lt;ul class=”nav”&gt;)基础上添加类名“navbar-nav”\n第二步：在列表外部添加一个容器(div), 并且使用类名“navbar”和“navbar-default”\n\n## 为导航条添加标题、二级菜单及状态\n### 加入导航条标题\n在Web页面制作中, 常常在菜单前面都会有一个标题(文字字号比其它文字稍大一些), 其实在Bootstrap框架也为大家做了这方面考虑, 其通过“navbar-header”和“navbar-brand”来实现.\n``` bash\n<div class=\"navbar-header\">\n\t<a href=\"##\" class=\"navbar-brand\">慕课网</a>\n</div>\n```\n\n### 导航条状态、二级菜单\n同样的, 在基础导航条中对菜单提供了当前状态, 禁用状态, 悬浮状态等效果, 而且也可以带有二级菜单的导航条\n``` bash\n<!--导航条状态及二级菜单-->\n<div class=\"navbar navbar-default\" role=\"navigation\">\n  <div class=\"navbar-header\">\n  　<a href=\"##\" class=\"navbar-brand\">慕课网</a>\n  </div>\n\t<ul class=\"nav navbar-nav\">\n\t \t<li class=\"active\"><a href=\"##\">网站首页</a></li>\n        <li class=\"dropdown\">\n          <a href=\"##\" data-toggle=\"dropdown\" class=\"dropdown-toggle\">系列教程<span class=\"caret\"></span></a>\n          <ul class=\"dropdown-menu\">\n\t\t\t\t\t\t<li><a href=\"##\">CSS3</a></li>\n\t\t\t\t\t\t<li><a href=\"##\">JavaScript</a></li>\n\t\t\t\t\t\t<li class=\"disabled\"><a href=\"##\">PHP</a></li>\n          </ul>\n\t\t\t\t</li>\n\t\t<li><a href=\"##\">名师介绍</a></li>\n\t\t<li class=\"active\"><a href=\"##\">成功案例</a></li>\n\t\t<li><a href=\"##\">关于我们</a></li>\n\t</ul>\n</div>\n```\n**注意: a 中类不要加 btn ,否则样式不一致.**\n\n## 带表单的导航条\n在Bootstrap框架中提供了一个“navbar-form”, 使用方法很简单, 在navbar容器中放置一个带有navbar-form类名的表单.大家看到了“navbar-left”让表单左浮动, 更好实现对齐. 在Bootstrap框架中, 还提供了“navbar-right”样式, 让元素在导航条靠右对齐. \n\n## 导航条中的按钮、文本和链接\nBootstrap框架的导航条中除了使用navbar-brand中的a元素和navbar-nav的ul和navbar-form之外, 还可以使用其他元素. 框架提供了三种其他样式\n1、导航条中的按钮navbar-btn\n2、导航条中的文本navbar-text\n3、导航条中的普通链接navbar-link\n\n## 固定导航条\n使用方法很简单, 只需要在制作导航条最外部容器navbar上追加对应的类名即可：\n``` bash\n<div class=\"navbar navbar-default navbar-fixed-top\" role=\"navigation\"> 或\n<div class=\"navbar navbar-default navbar-fixed-bottom\" role=\"navigation\">\n```\n从运行效果中大家不难发现, 页面主内容顶部和底部都被固定导航条给遮住了. **为了避免固定导航条遮盖内容, 我们需要在body上做一些处理**\n\n## 响应式导航条\n如今浏览Web页面的终端不在是一尘不变了, 前面示例实现的导航条仅能适配于大屏幕的浏览器, 但当浏览器屏幕变小的时候, 就不适合了. 因此响应式设计也就随之而来. 那么在一个响应式的Web页面中, 对于响应式的导航条也就非常的重要. \n使用方法：\n1、保证在窄屏时需要折叠的内容必须包裹在带一个div内, 并且为这个div加入collapse、navbar-collapse两个类名. 最后为这个div添加一个class类名或者id名. \n2、保证在窄屏时要显示的图标样式(固定写法)：\n``` bash\n<button class=\"navbar-toggle\" type=\"button\" data-toggle=\"collapse\">\n  <span class=\"sr-only\">Toggle Navigation</span>\n  <span class=\"icon-bar\"></span>\n  <span class=\"icon-bar\"></span>\n  <span class=\"icon-bar\"></span>\n</button>\n```\n3、并为button添加data-target=\".类名/#id名\", 究竞是类名还是id名呢？由需要折叠的div来决定. 如：\n需要折叠的div代码段：\n``` bash\n<div class=\"collapse navbar-collapse\" id=\"example\">\n\t<ul class=\"nav navbar-nav\">\n\t…\n\t</ul>\n</div>\n```\n窄屏时显示的图标代码段：\n``` bash\n<button class=\"navbar-toggle\" type=\"button\" data-toggle=\"collapse\" data-target=\"#example\">\n  ...\n</button>\n```\n也可以这么写, 需要折叠的div代码段：\n``` bash\n<div class=\"collapse navbar-collapse example\" >\n\t<ul class=\"nav navbar-nav\">\n\t…\n\t</ul>\n</div>\n```\n窄屏时要显示的图标：\n``` bash\n<button class=\"navbar-toggle\" type=\"button\" data-toggle=\"collapse\" data-target=\".example\">\n  ...\n</button>\n```\n\n\n完整:\n``` bash\n<div class=\"navbar navbar-default\" role=\"navigation\">\n  <div class=\"navbar-header\">\n\t　<!-- .navbar-toggle样式用于toggle收缩的内容, 即nav-collapse collapse样式所在元素 -->\n\t\t<button class=\"navbar-toggle\" type=\"button\" data-toggle=\"collapse\" data-target=\"#ff\">\n\t\t<!--<span class=\"sr-only\">Toggle Navigation</span>-->\n\t\t<span class=\"icon-bar\"></span>\n\t\t<span class=\"icon-bar\"></span>\n\t\t<span class=\"icon-bar\"></span>\n\t\t</button>\n\t\t<!-- 确保无论是宽屏还是窄屏, navbar-brand都显示 -->\n\t\t<a href=\"##\" class=\"navbar-brand\">慕课网</a>\n  </div>\n  <!-- 屏幕宽度小于768px时, div.navbar-responsive-collapse容器里的内容都会隐藏, \n\t\t显示icon-bar图标, 当点击icon-bar图标时, 再展开. 屏幕大于768px时, 默认显示.  -->\n  <div class=\"collapse navbar-collapse navbar-responsive-collapse\" id=\"ff\">\n\t\t<ul class=\"nav navbar-nav\">\n\t\t\t<li class=\"active\"><a href=\"##\">网站首页</a></li>\n\t\t\t<li><a href=\"##\">系列教程</a></li>\n\t\t\t<li><a href=\"##\">名师介绍</a></li>\n\t\t\t<li><a href=\"##\">成功案例</a></li>\n\t\t\t<li><a href=\"##\">关于我们</a></li>\n\t \t</ul>\n  </div>\n</div>\n```\n\n## 反色导航条\n反色导航条其实是Bootstrap框架为大家提供的第二种风格的导航条, 与默认的导航条相比, 使用方法并无区别, 只是将navbar-deafult类名换成navbar-inverse. 其变化只是导航条的背景色和文本做了修改. \n\nnav navbar-default默认导航条 nav-inverse反色导航条\nnavbar-fixed-top/bottom固定导航条\nnav navbar-nav 导航条中的导航div类\nnavbar-form 导航表单\nnavbar-left左对齐\nnavbar-right右对齐\n\n## 分页导航(带页码的分页导航)\n使用方法：\n平时很多同学喜欢用div&gt;a和div&gt;span结构来制作带页码的分页导航. 不过, 在Bootstrap框架中使用的是ul&gt;li&gt;a这样的结构, 在ul标签上加入pagination方法：\n``` bash\n<ul class=\"pagination\">\n   <li><a href=\"#\">&laquo;</a></li>\n   <li><a href=\"#\">1</a></li>\n   <li><a href=\"#\">2</a></li>\n   <li><a href=\"#\">3</a></li>\n   <li><a href=\"#\">4</a></li>\n   <li><a href=\"#\">5</a></li>\n   <li><a href=\"#\">&raquo;</a></li>\n</ul>\n```\n注意：要禁用当前状态和禁用状态不能点击, 我们还要依靠js来实现, 或者将这两状态下的a标签换成span标签. \n\n大小设置：\n在Bootstrap框架中, 也可以通过几个不同的情况来设置其大小. 类似于按钮一样：\n1、通过“pagination-lg”让分页导航变大；\n2、通过“pagination-sm”让分页导航变小：  没有xs 这一说.\n\n### 分页导航(翻页分页导航)\nBootstrap框架除了提供带页码的分页导航之外还提供了翻页导航. 这种分页导航常常在一些简单的网站上看到, 比如说个人博客, 杂志网站等. 这种分页导航是看不到具体的页码, 只会提供一个“上一页”和“下一页”的按钮. \n使用方法：\n在实际使用中, 翻页分页导航和带页码的分页导航类似, 为ul标签加入pager类\n\n#### 对齐样式设置\n默认情况之下, 翻页分页导航是居中显示, 但有的时候我们需要一个居左, 一个居右. Bootstrap框架提供了两个样式：\n☑   previous: 让“上一步”按钮居左\n☑   next: 让“下一步”按钮居右\n\n#### 状态样式设置：\n和带页码分页导航一样, 如果在li标签上添加了disabled类名的时候, 分页按钮处于禁用状态, 但同样不能禁止其点击功能. 你可以通过js来处理, 或将a标签换成span标签. \n\n## 标签\n使用方法很简单, 你可以在使用span这样的行内标签：\n``` bash\n<span class=\"label label-default\">默认标签</span>\n<span class=\"label label-primary\">主要标签</span>\n<span class=\"label label-success\">成功标签</span>\n<span class=\"label label-info\">信息标签</span>\n<span class=\"label label-warning\">警告标签</span>\n<span class=\"label label-danger\">错误标签</span> \n```\n## 徽章\n使用方法, 其实也没什么太多可说的, 你可以像标签一样, 使用span标签来制作, 然后为他加入badge类：\n``` bash\n<a href=\"#\">Inbox <span class=\"badge\">42</span></a>\n<span class=\"badge pull-right\">42</span>\n```\n\n---\n\n# 其他内置组件\n## 缩略图\n缩略图在网站中最常用的地方就是产品列表页面, 一行显示几张图片, 有的在图片底下(左侧或右侧)带有标题、描述等信息. Bootstrap框架将这一部独立成一个模块组件. 并通过“thumbnail”样式配合bootstrap的网格系统来实现. 可以将产品列表页变得更好看. \n通过“thumbnail”样式配合bootstrap的网格系统来实现. \n``` bash\n<div class=\"container\">\n\t<div class=\"row\">\n\t\t<div class=\"col-xs-6 col-md-3\">\n\t\t\t<a href=\"#\" class=\"thumbnail\">\n\t\t\t\t<img src=\"http://img.mukewang.com/5434eba100014fe906000338.png\" style=\"height: 180px; width: 100%; display: block;\" alt=\"\">\n\t\t\t</a>\n\t\t</div>\n    …\n\t</div>\n</div>\n```\n\n上面的结构表示的是在宽屏幕(可视区域大于768px)的时候, 一行显示四个缩略图(单击全屏查看效果).\n在窄屏(可视区域小于768px)的时候, 一行只显示两个缩略图.\n上一小节, 展示的仅只有缩略图的一种使用方式, 除了这种方式之外, 还可以让缩略图配合标题、描述内容, 按钮等\n在仅有缩略图的基础上, 添加了一个div名为“caption“的容器, 在这个容器中放置其他内容, 比如说标题, 文本描述, 按钮等：\n``` bash\n<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-xs-6 col-md-3\">\n      <a href=\"#\" class=\"thumbnail\">\n        <img src=\"http://a.hiphotos.baidu.com/image/w%3D400/sign=c56d7638b0b7d0a27bc9059dfbee760d/3b292df5e0fe9925d46873da36a85edf8cb171d7.jpg\" style=\"height: 180px; width: 100%; display: block;\" alt=\"\">\n      </a>\n\t\t\t<div class=\"caption\">\n\t\t\t\t<h3>Bootstrap框架系列教程</h3>\n\t\t\t\t<p>Bootstrap框架是一个优秀的前端框, 就算您是一位后端程序员或者你是一位不懂设计的前端人员, 你也能依赖于Bootstrap制作做优美的网站...</p>\n\t\t\t\t<p>\n\t\t\t\t\t<a href=\"##\" class=\"btn btn-primary\">开始学习</a>\n\t\t\t\t\t<a href=\"##\" class=\"btn btn-info\">正在学习</a>\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</div>\n    …\n  </div>\n</div>\n```\n\n\n## 警示框\n在网站中, 网页总是需要和用户一起做沟通与交流. 特别是当用户操作上下文为用户提供一些有效的警示框, 比如说告诉用户操作成功、操作错误、提示或者警告等. \n``` bash\n<h2>默认警示框</h2>\n<div class=\"alert alert-success\" role=\"alert\">恭喜您操作成功！</div>\n```\n``` bash\n<h2>可关闭的警示框</h2>\n<div class=\"alert alert-success alert-dismissable\" role=\"alert\">\n恭喜您操作成功！\n    <button class=\"close\" type=\"button\" data-dismiss=\"alert\">&times;</button>\n</div>\n```\n**data-dismiss=\"alert\"**\n\n``` bash\n<h2>警示框的链接</h2>\n<div class=\"alert alert-success\" role=\"alert\">\n    <strong>Well done!</strong> \n    You successfully read \n\t<a href=\"#\" class=\"alert-link\">this important alert message</a>\n\t.\n</div>\n```\n\n\n## 进度条\n在网页中, 进度条的效果并不少见, 比如一个评分系统, 比如加载状态等. \n``` bash\n<h2>基本进度条</h2>\n<div class=\"progress\">\n  <div class=\"progress-bar\" style=\"width:40%\">\n  </div>\n</div> \n```\n``` bash\n<h2>彩色进度条</h2>\n<div class=\"progress\">\n  <div class=\"progress-bar progress-bar-success\" style=\"width:40%\"></div>\n</div> \n```\n``` bash\n<h2>条纹进度条</h2> // 把progress-striped active 加在最外层的div \n//就不用一个个的来控制这个斑马纹了 可以全部控制\n<div class=\"progress progress-striped\">\n  <div class=\"progress-bar progress-bar-success\" style=\"width:40%\"></div>\n</div>\n```\n``` bash\n<h2>动态条纹进度条</h2>\n<div class=\"progress progress-striped active\">\n  <div class=\"progress-bar progress-bar-success\" style=\"width:40%\"></div>\n</div> \n```\n``` bash\n<h2>层叠进度条</h2>\n<h5>正常层叠进度条</h5>    // width 总和小于100%\n<div class=\"progress\">\n\t<div class=\"progress-bar progress-bar-success\" style=\"width:20%\"></div>\n\t<div class=\"progress-bar progress-bar-info\" style=\"width:10%\"></div>\n\t<div class=\"progress-bar progress-bar-warning\" style=\"width:30%\"></div>\n\t<div class=\"progress-bar progress-bar-danger\" style=\"width:15%\"></div>\n</div> \n```\n``` bash\n<h2>带Label的进度条</h2>\n<h5>进度条1</h5>\n<div class=\"progress\">\n  <div class=\"progress-bar progress-bar-success\"  role=\"progressbar\" aria-valuenow=\"20\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width:20%\">20%</div>  \n</div>  \n```\n\n\n## 媒体对象\n``` bash\n<h3>默认媒体对象</h3>\n<div class=\"media\">\n  <a class=\"pull-left\" href=\"#\">\n    <img class=\"media-object\" src=\"http://img.mukewang.com/52e1d29d000161fe06000338-300-170.jpg\" alt=\"...\">\n  </a>\n  <div class=\"media-body\">\n    <h4 class=\"media-heading\">系列：十天精通CSS3</h4>\n    <div>全方位深刻详解CSS3模块知识, 经典案例分析, 代码同步调试, 让网页穿上绚丽装备！</div>\n  </div>\n</div>\n```\n``` bash\n<h3>媒体对象的嵌套</h3>\n<div class=\"media\">\n  <a class=\"pull-left\" href=\"#\">\n    <img class=\"media-object\" src=\"http://a.disquscdn.com/uploads/users/3740/2069/avatar92.jpg?1406972031\" alt=\"...\">\n\t</a>\n\t<div class=\"media-body\">\n\t\t<h4 class=\"media-heading\">我是大漠</h4>\n\t\t<div>我是W3cplus站长大漠, 我在写Bootstrap框中的媒体对象测试用例</div>\n\t\t<div class=\"media\">\n\t\t\t<a class=\"pull-left\" href=\"#\">\n\t\t\t\t<img class=\"media-object\" src=\"http://tp2.sinaimg.cn/3306361973/50/22875318196/0\" alt=\"...\">\n\t\t\t</a>\n\t\t\t<div class=\"media-body\">\n\t\t\t\t<h4 class=\"media-heading\">慕课网</h4>\n\t\t\t\t<div>大漠写的《玩转Bootstrap》系列教程即将会在慕课网上发布</div>\n\t\t\t\t<div class=\"media\">\n\t\t\t\t\t<a class=\"pull-left\" href=\"#\">\n\t\t\t\t\t\t<img class=\"media-object\" src=\"http://tp4.sinaimg.cn/1167075935/50/22838101204/1\" alt=\"...\">\n\t\t\t\t\t</a>\n\t\t\t\t\t<div class=\"media-body\">\n\t\t\t\t\t\t<h4 class=\"media-heading\">W3cplus</h4>\n\t\t\t\t\t\t<div>W3cplus站上还有很多教程....</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n```\n``` bash\n<h3>媒体对象列表</h3>\n<ul class=\"media-list\">\n  <li class=\"media\">\n    <a class=\"pull-left\" href=\"#\">\n      <img class=\"media-object\" src=\"http://a.disquscdn.com/uploads/users/3740/2069/avatar92.jpg?1406972031\" alt=\"...\">\n    </a>\n\t\t<div class=\"media-body\">\n\t\t\t<h4 class=\"media-heading\">我是大漠</h4>\n      <div>我是W3cplus站长大漠, 我在写Bootstrap框中的媒体对象测试用例</div>\n    </div>\n  </li>\n  <li class=\"media\">\n\t\t<a class=\"pull-left\" href=\"#\">\n\t\t\t\t<img class=\"media-object\" src=\"http://tp2.sinaimg.cn/3306361973/50/22875318196/0\" alt=\"...\">\n\t\t</a>\n    <div class=\"media-body\">\n      <h4 class=\"media-heading\">慕课网</h4>\n      <div>大漠写的《玩转Bootstrap》系列教程即将会在慕课网上发布</div>\n    </div>\n  </li>\n  <li class=\"media\">\n\t\t<a class=\"pull-left\" href=\"#\">\n\t\t\t<img class=\"media-object\" src=\"http://tp4.sinaimg.cn/1167075935/50/22838101204/1\" alt=\"...\">\n\t\t</a>\n\t\t<div class=\"media-body\">\n\t\t\t<h4 class=\"media-heading\">W3cplus</h4>\n\t\t\t<div>W3cplus站上还有很多教程....</div>\n\t\t</div>\n  </li>\n</ul>\n```\n\n默认:媒体对象一般是成组出现, 而一组媒体对象常常包括以下几个部分：\n☑  媒体对像的容器：常使用“media”类名表示, 用来容纳媒体对象的所有内容\n☑  媒体对像的对象：常使用“media-object”表示, 就是媒体对象中的对象, 常常是图片\n☑  媒体对象的主体：常使用“media-body”表示, 就是媒体对像中的主体内容, 可以是任何元素, 常常是图片侧边内容\n☑  媒体对象的标题：常使用“media-heading”表示, 就是用来描述对象的一个标题, 此部分可选\n除了上面四个部分之外, 在Bootstrap框架中还常常使用“pull-left”或者“pull-right”来控制媒体对象中的对象浮动方式. \n嵌套:从外往里看, 这里有三个媒体对象, 只不过是一个嵌套在另一个的里面. 那么在Bootstrap框架中的媒体对象也具备这样的功能, 只需要将另一个媒体对象结构放置在媒体对象的主体内“media-body”, \n列表:针对上图的媒体对象列表效果, Bootstrap框架提供了一个列表展示的效果, 在写结构的时候可以使用ul, 并且在ul上添加类名“media-list”, 而在li上使用“media”.\n\n\n\n## 列表组\n``` bash\n<h3>基础列表组</h3>\n<ul class=\"list-group\">\n  <li class=\"list-group-item\">揭开CSS3的面纱</li>\n  <li class=\"list-group-item\">CSS3选择器</li>\n\t<li class=\"list-group-item\">CSS3边框</li>\n\t<li class=\"list-group-item\">CSS3背景</li>\n\t<li class=\"list-group-item\">CSS3文本</li>\n</ul>\n```\n``` bash\n<h3>带徽章的列表组</h3>\n<ul class=\"list-group\">\n  <li class=\"list-group-item\">\n    <span class=\"badge\">13</span>揭开CSS3的面\n\t</li>\n\t<li class=\"list-group-item\">\n\t\t<span class=\"badge\">456</span>CSS3选择器\n\t</li>\n\t<li class=\"list-group-item\">\n\t\t<span class=\"badge\">892</span>CSS3边框\n\t</li>\n\t<li class=\"list-group-item\">\n\t\t<span class=\"badge\">90</span>CSS3背景\n\t</li>\n\t<li class=\"list-group-item\">\n\t\t<span class=\"badge\">1290</span>CSS3文本\n\t</li>\n</ul>\n```\n``` bash\n<h3>带链接的列表组</h3>\n<ul class=\"list-group\">\n    <li class=\"list-group-item\">\n    \t<a href=\"##\">揭开CSS3的面</a>\n\t</li>\n\t<li class=\"list-group-item\">\n\t\t<a href=\"##\">CSS3选择器</a>\n\t</li>\n\t<li class=\"list-group-item\">\n\t\t<a href=\"##\">CSS3边框</a>\n\t</li>\n\t<li class=\"list-group-item\">\n\t\t<a href=\"##\">CSS3背景</a>\n\t</li>\n\t<li class=\"list-group-item\">\n\t\t<a href=\"##\">CSS3文本</a>\n\t</li>\n</ul>\n```\n``` bash\n<h3>自定义列表组</h3>\n<div class=\"list-group\">\n\t<a href=\"##\" class=\"list-group-item\">\n\t\t<h4 class=\"list-group-item-heading\">图解CSS3</h4>\n\t\t<p class=\"list-group-item-text\">\n\t\t\t详细讲解了选择器、边框、背景、文本、颜色、盒模型、伸缩布局盒模型、多列布局、渐变、过渡、动画、媒体、响应Web设计、Web字体等主题下涵盖的所有CSS3新特性...\n\t\t</p>\n\t</a>\n\t<a href=\"##\" class=\"list-group-item\">\n\t\t<h4 class=\"list-group-item-heading\">Sass中国</h4>\n\t\t<p class=\"list-group-item-text\">致力于为中国开发者提供最全面, 最具影响力, 最前沿的Sass相关技术与教程...</p>\n\t</a>\n</div>\n```\n``` bash\n<h3>组合列表项的状态</h3>\n<div class=\"list-group\">\n\t<a href=\"##\" class=\"list-group-item active\"><span class=\"badge\">5902</span>图解CSS3</a>\n\t<a href=\"##\" class=\"list-group-item\"><span class=\"badge\">15902</span>W3cplus</a>\n\t<a href=\"##\" class=\"list-group-item\"><span class=\"badge\">59020</span>慕课网</a>\n\t<a href=\"##\" class=\"list-group-item disabled\"><span class=\"badge\">0</span>Sass中国</a>\n</div>\n```\n``` bash\n<h3>多彩列表组</h3>\n<div class=\"list-group\">\n\t<a href=\"##\" class=\"list-group-item active\"><span class=\"badge\">5902</span>图解CSS3</a>\n\t<a href=\"##\" class=\"list-group-item list-group-item-success\"><span class=\"badge\">15902</span>W3cplus</a>\n\t<a href=\"##\" class=\"list-group-item list-group-item-info\"><span class=\"badge\">59020</span>慕课网</a>\n\t<a href=\"##\" class=\"list-group-item list-group-item-warning\"><span class=\"badge\">0</span>Sass中国</a>\n\t<a href=\"##\" class=\"list-group-item list-group-item-danger\"><span class=\"badge\">10</span>Mobile教程</a>\n</div>\n```\n\n\n\n## 面板\n``` bash\n<h3>基础面板</h3>\n<div class=\"panel panel-default\">\n  <div class=\"panel-body\">我是一个基础面板, 带有默认主题样式风格</div>\n</div>\n```\n``` bash\n<h3>带有头和尾的面板</h3>\n<div class=\"panel panel-default\">\n  <div class=\"panel-heading\">图解CSS3</div>\n  <div class=\"panel-body\">\n\t\t详细讲解了选择器、边框、背景、文本、颜色、盒模型、伸缩布局盒模型、多列布局、渐变、过渡、动画、媒体、响应Web设计、Web字体等主题下涵盖的所有CSS3新特性\n\t</div>\n\t<div class=\"panel-footer\">作者：大漠</div>\n</div>\n```\n``` bash\n<h3>彩色面板</h3>\n<div class=\"panel panel-default\">\n\t<div class=\"panel-heading\">图解CSS3</div>\n\t<div class=\"panel-body\">\t\t\t详细讲解了选择器、边框、背景、文本、颜色、盒模型、伸缩布局盒模型、多列布局、渐变、过渡、动画、媒体、响应Web设计、Web字体等主题下涵盖的所有CSS3新特性\n\t</div>\n\t<div class=\"panel-footer\">作者：大漠</div>\n</div>\n<div class=\"panel panel-primary\">\n\t<div class=\"panel-heading\">图解CSS3</div>\n\t<div class=\"panel-body\">\n\t详细讲解了选择器、边框、背景、文本、颜色、盒模型、伸缩布局盒模型、多列布局、渐变、过渡、动画、媒体、响应Web设计、Web字体等主题下涵盖的所有CSS3新特性\n\t</div>\n```\n``` bash\n<h3>面板中嵌套表格</h3>\n<div class=\"panel panel-default\">\n\t<div class=\"panel-heading\">图解CSS3</div>\n\t<div class=\"panel-body\">\n\t\t<p>详细讲解了选择器、边框、背景、文本、颜色、盒模型、伸缩布局盒模型、多列布局、渐变、过渡、动画、媒体、响应Web设计、Web字体等主题下涵盖的所有CSS3新特性\n\t\t</p>\n\t\t<table class=\"table table-bordered\">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>＃</th>\n\t\t\t\t\t<th>我的书</th>\n\t\t\t\t\t<th>发布时间</th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>1</td>\n\t\t\t\t\t<td>《图解CSS3》</td>\n\t\t\t\t\t<td>2014-07-10</td>\n\t\t\t\t</tr>\n\t\t\t</tbody>\n\t\t</table>\n\t</div>\n\t<div class=\"panel-footer\">作者：大漠</div>\n</div>\n```\n在实际应用运中, 你或许希望表格和面板边缘不需要有任何的间距. 但由于panel-body设置了一个padding：15px的值, 为了实现这样的效果. 我们在**实际使用的时候需要把table提取到panel-body外面.**\n\n---\n\n# js插件简介\n## js库\nBootstrap除了包含丰富的Web组件之外, 如前面介绍的下拉菜单、按钮组、导航、分页等. 他还包括一些JavaScript的插件. \nBootstrap的JavaScript插件可以单独导入到页面中, 也可以一次性导入到页面中. 因为在Bootstrap中的JavaScript插件都是依赖于jQuery库, 所以不论是单独导入还一次性导入之前必须先导入jQuery库. \n``` bash\n<!—导入jQuery版本库, 因为Bootstrap的JavaScript插件依赖于jQuery -->\n<script src=\"http://libs.baidu.com/jquery/1.9.0/jquery.js\"></script>\n<!—- 一次性导入所有Bootstrap的JavaScript插件(压缩版本) -->\n<script src=\"js/bootstrap.min.js\"></script>\n```\n特别声明：jQuery版本库也可以加载你本地的jQuery版本. \n\n## 动画过渡(Transitions)\ntransition.js文件为Bootstrap具有过渡动画效果的组件提供了动画过渡效果. 不过需要注意的是, 这些过渡动画都是采用CSS3来实现的, 所以IE6-8浏览器是不具备这些过渡动画效果. \n默认情况之下, Bootstrap框架中以下组件使用了过渡动画效果：\n☑ 模态弹出窗(Modal)的滑动和渐变效果；\n☑ 选项卡(Tab)的渐变效果；\n☑ 警告框(Alert)的渐变效果；\n☑ 图片轮播(Carousel)的滑动效果. \n\n``` bash\n<button class=\"btn btn-primary\" type=\"button\">点击我</button>\n<div class=\"modal fade\" id=\"mymodal\">\n\t<div class=\"modal-dialog\">\n\t\t<div class=\"modal-content\">\n\t\t\t<div class=\"modal-header\">\n\t\t\t\t<button type=\"button\" class=\"close\" data-dismiss=\"modal\"><span aria-hidden=\"true\">&times;</span><span class=\"sr-only\">Close</span></button>\n\t\t\t\t<h4 class=\"modal-title\">模态弹出窗标题</h4>\n\t\t\t</div>\n\t\t\t<div class=\"modal-body\">\n\t\t\t\t<p>模态弹出窗主体内容</p>\n\t\t\t</div>\n\t\t\t<div class=\"modal-footer\">\n\t\t\t\t<button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">关闭</button>\n\t\t\t\t<button type=\"button\" class=\"btn btn-primary\">保存</button>\n\t\t\t</div>\n\t\t</div><!-- /.modal-content -->\n\t</div><!-- /.modal-dialog -->\n</div><!-- /.modal -->\n\n<script>\n  $(function(){\n    $(\".btn\").click(function(){\n      $(\"#mymodal\").modal(\"toggle\");\n    });\n  });\n</script>\n```\n\n## 模态弹出框(Modals)\n在 Bootstrap 框架中把模态弹出框统一称为 Modal. 这种弹出框效果在大多数 Web 网站的交互中都可见. 比如点击一个按钮弹出一个框, 弹出的框可能是一段文件描述, 也可能带有按钮操作, 也有可能弹出的是一张图片. \n\n## 模态弹出框--结构分析\nBootstrap框架中的模态弹出框, 分别运用了“modal”、“modal-dialog”和“modal-content”样式, 而弹出窗真正的内容都放置在“modal-content”中, 其主要又包括三个部分：\n☑ 弹出框头部, 一般使用“modal-header”表示, 主要包括标题和关闭按钮\n☑ 弹出框主体, 一般使用“modal-body”表示, 弹出框的主要内容\n☑ 弹出框脚部, 一般使用“modal-footer”表示, 主要放置操作按钮\n\n## 模态弹出框--实现原理解析\n实现原理解析：\nbootstrap中的“模态弹出框”有以下几个特点：\n1、模态弹出窗是固定在浏览器中的. \n2、单击右侧全屏按钮, 在全屏状态下, 模态弹出窗宽度是自适应的, 而且modal-dialog水平居中. \n3、当浏览器视窗大于768px时, 模态弹出窗的宽度为600px. \n\n两种尺寸选择：\n除此之外, Bootstrap框架还为模态弹出窗提供了不同尺寸, 一个是大尺寸样式“modal-lg”, 另一个是小尺寸样式“modal-sm”. 其结构上稍做调整\n``` bash\n<div class=\"modal-dialog modal-lg\">\n       <divclass=\"modal-content\"> ... </div>\n</div>\n```\n\n## 模态弹出框--触发模态弹出窗2种方法\n声明式触发方法：\n方法一：模态弹出窗声明, 只需要自定义两个必要的属性：data-toggle和data-target(bootstrap中声明式触发方法一般依赖于这些自定义的data-xxx 属性. 比如data-toggle=\"\" 或者 data-dismiss=\"\"). \n``` bash\n<!-- 触发模态弹出窗的元素 -->\n<button type=\"button\" data-toggle=\"modal\" data-target=\"#mymodal\" class=\"btn btn-primary\">点击我会弹出模态弹出窗</button>\n<!-- 模态弹出窗 -->\n<div class=\"modal fade\" id=\"mymodal\">\n\t<div class=\"modal-dialog\">\n\t\t<div class=\"modal-content\">\n\t\t\t<!-- 模态弹出窗内容 -->\n\t\t</div>\n\t</div>\n</div>\n```\n注意以下事项：\n1、data-toggle必须设置为modal(toggle中文翻译过来就是触发器)；\n2、data-target可以设置为CSS的选择符, 也可以设置为模态弹出窗的ID值, 一般情况设置为模态弹出窗的ID值, 因为ID值是唯一的值. \n\n方法二：触发模态弹出窗也可以是一个链接&lt;a&gt;元素, 那么可以使用链接元素自带的href属性替代data-target属性, 如：\n``` bash\n<!-- 触发模态弹出窗的元素 -->\n<a data-toggle=\"modal\" href=\"#mymodal\" class=\" btn btn-primary\" >点击我会弹出模态弹出窗</a>\n<!-- 模态弹出窗 -->\n<div class=\"modal fade\"  id=\"mymodal\" >\n  <div class=\"modal-dialog\" >\n    <div class=\"modal-content\" >\n      <!-- 模态弹出窗内容 -->\n    </div>\n  </div>\n</div>\n```\n不过建议还是使用统一使用data-target的方式来触发.\n \n## 模态弹出框--为弹出框增加过度动画效果\n可通过给“.modal”增加类名“fade”为模态弹出框增加一个过渡动画效果. \n\n## 模态弹出框--模态弹出窗的使用(data-参数说明)\n除了通过data-toggle和data-target来控制模态弹出窗之外, Bootstrap框架针对模态弹出框还提供了其他自定义data-属性, 来控制模态弹出窗. 比如说:是否有灰色背景modal-backdrop, 是否可以按ESC键关闭模态弹出窗. 有关于Modal弹出窗自定义属性相关说明如下所示\n![modal-attr](/images/modal-attr.png)\n\n## 模态弹出框--模态弹出窗的使用(JavaScript触发)\nJavaScript触发方法\n除了使用自定义属性触发模态弹出框之外, 还可以通过JavaScript方法来触发模态弹出窗. 通过给一个元素一个事件, 来触发. 比如说给一个按钮一个单击事件, 然后触发模态弹出窗. \n\n## JavaScript触发时的参数设置\n使用JavaScript触发模态弹出窗时, Bootstrap框架提供了一些设置, 主要包括属性设置、参数设置和事件设置. 比如你不想让用户按ESC键关闭模态弹出窗, 你就可以这样做：\n``` bash\n$(function(){\n  $(\".btn\").click(function(){\n    $(\"#mymodal\").modal({\n      keyboard:false\n    });\n  });\n});\n```\n","source":"_posts/bootsrap简单结构.md","raw":"---\ntitle: bootsrap简单结构\ndate: 2016-09-18 22:26:52\ntags:\n---\n\n---\n\n# 排版\n\n## 标题:\nBootstrap和普通的HTML页面一样, 定义标题都是使用标签&lt;h1&gt;到&lt;h6&gt;,只不过Bootstrap覆盖了其默认的样式, 使用其在所有浏览器下显示的效果一样.\n除此之外, 我们在Web的制作中, 常常会碰到在一个标题后面紧跟着一行小的副标题. 在Bootstrap中他也考虑了这种排版效果, 使用了&lt;small&gt;标签来制作副标题. 这个副标题具有其自己的一些独特样式.\n<!--more-->\n## 段落(正文文本)\n全局文本字号为14px(font-size),行高为1.42857143(line-height), 大约是20px,深灰色(#333),字体为\"Helvetica Neue\", Helvetica, Arial, sans-serif;(font-family)\n\n## 强调内容\n如果想让一个段落p突出显示, 可以通过添加类名**“.lead”**实现, 其作用就是增大文本字号, 加粗文本, 而且对行高和margin也做相应的处理. 除此之外, Bootstrap还通过元素标签:&lt;small&gt;、&lt;strong&gt;、&lt;em&gt;和&lt;cite&gt;给文本做突出样式处理. \n\n## 粗体\n粗体就是给文本加粗, 在普通的元素中我们一般通过font-weight设置为bold关键词给文本加粗. 在Bootstrap中, 可以使用&lt;b&gt;和&lt;strong&gt;标签让文本直接加粗. \n\n## 斜体\n斜体类似于加粗一样, 除了可以给元素设置样式font-style值为italic实现之外, 在Bootstrap中还可以通过使用标签&lt;em&gt;或&lt;i&gt;来实现. \n\n## 强调相关的类\n1.    \t.text-muted：提示, 使用浅灰色(#999)\n2.    \t.text-primary：主要, 使用蓝色(#428bca)\n3.   \t \t.text-success：成功, 使用浅绿色(#3c763d)\n4.   \t\t.text-info：通知信息, 使用浅蓝色(#31708f)\n5.   \t\t.text-warning：警告, 使用黄色(#8a6d3b)\n6.   \t \t.text-danger：危险, 使用褐色(#a94442)\n\n## 文本对齐风格\n为了简化操作, 方便使用, Bootstrap通过定义四个类名来控制文本的对齐风格：\n1. \t\t\t.text-left：左对齐\n2. \t\t\t.text-center：居中对齐\n3. \t\t\t.text-right：右对齐\n4. \t\t\t.text-justify：两端对齐\n\n## 列表--简介\nBootstrap根据平时的使用情形提供了六种形式的列表：\n☑  普通列表\n☑  有序列表\n☑  去点列表\n☑  内联列表\n☑  描述列表\n☑  水平描述列表\n\n### 无序列表和有序列表\n使用方式和我们平时使用的一样(无序列表使用ul, 有序列表使用ol标签), 在样式方面, Bootstrap只是在此基础上做了一些细微的优化.\n\n### 列表--去点列表\n在Bootstrap中默认情况下无序列表和有序列表是带有项目符号的, 但在实际工作中很多时候, 我们的列表是不需要这个编号的, 比如说用无序列表做导航的时候. Bootstrap为众多开发者考虑的非常周道, 通过给无序列表添加一个类名“.list-unstyled”,这样就可以去除默认的列表样式的风格. (ul/ol中加入CSS类).\n\n### 列表--内联列表\nBootstrap像去点列表一样, 通过添加类名“.list-inline”来实现内联列表, 简单点说就是把垂直列表换成水平列表, 而且去掉项目符号(编号), 保持水平显示. 也可以说内联列表就是为**制作水平导航**而生. \n\n### 列表--定义列表\n对于定义列表而言, Bootstrap并没有做太多的调整, 只是调整了行间距, 外边距和字体加粗效果. dl&gt;dt&gt;dd.\n\n### 列表--水平定义列表\n水平定义列表就像内联列表一样, Bootstrap可以给&lt;dl&gt;添加类名“.dl-horizontal”给定义列表实现水平显示效果. \n\n## 代码\n在Bootstrap主要提供了三种代码风格：\n1、使用&lt;code&gt;来显示单行内联代码\n2、使用&lt;pre&gt;来显示多行块代码\n3、使用&lt;kbd&gt;来显示用户输入代码\n在使用代码时, 用户可以根据具体的需求来使用不同的类型：\n1、&lt;code&gt;: 一般是针对于单个单词或单个句子的代码\n2、&lt;pre&gt;: 一般是针对于多行代码(也就是成块的代码)\n3、&lt;kbd&gt;: 一般是表示用户要通过键盘输入的内容\n正如前面所示, &lt;pre&gt;元素一般用于显示大块的代码, 并保证原有格式不变. 但有时候代码太多, 而且不想让其占有太大的页面篇幅, 就想控制代码块的大小. Bootstrap也考虑到这一点, 你只需要在&lt;pre&gt;标签上添加类名“.pre-scrollable”, 就可以控制代码块区域最大高度为340px, 一旦超出这个高度, 就会在Y轴出现滚动条. \n\n## 表格\nBootstrap为表格提供了1种基础样式和4种附加样式以及1个支持响应式的表格. Bootstrap为表格不同的样式风格提供了不同的类名, 主要包括：\n☑  .table：基础表格\n☑  .table-striped：斑马线表格\n☑  .table-bordered：带边框的表格\n☑  .table-hover：鼠标悬停高亮的表格\n☑  .table-condensed：紧凑型表格\n☑  .table-responsive：响应式表格\n表格--表格行的类:Bootstrap还为表格的行元素&lt;tr&gt;提供了五种不同的类名, 每种类名控制了行的不同背景颜色, active, success, info, warning, danger\n\n### 表格--基础表格\n在Bootstrap中, 对于基础表格是通过类名“.table”来控制. 如果在&lt;table&gt;元素中不添加任何类名, 表格是无任何样式效果的. 想得到基础表格, 我们只需要在&lt;table&gt;元素上添加“.table”类名, 就可以得到Bootstrap的基础表格.\n\n### 表格--斑马线表格\n有时候为了让表格更具阅读性, 需要将表格制作成类似于斑马线的效果. 简单点说就是让表格带有背景条纹效果. 在Bootstrap中实现这种表格效果并不困难, 只需要在&lt;table class=\"table\"&gt;的基础上增加类名“.table-striped”即可.\n\n### 表格--带边框的表格\n基础表格仅让表格部分地方有边框, 但有时候需要整个表格具有边框效果. Bootstrap出于实际运用, 也考虑这种表格效果, 即所有单元格具有一条1px的边框. \nBootstrap中带边框的表格使用方法和斑马线表格的使用方法类似, 只需要在基础表格&lt;table class=\"table\"&gt;基础上添加一个“.table-bordered”类名即可.\n\n### 表格--鼠标悬浮高亮的表格\n当鼠标悬停在表格的行上面有一个高亮的背景色, 这样的表格让人看起来就是舒服, 时刻告诉用户正在阅读表格哪一行的数据. Bootstrap的确没有让你失望, 他也考虑到这种效果, 其提供了一个“.table-hover”类名来实现这种表格效果. 鼠标悬停高亮的表格使用也简单, 仅需要&lt;table class=\"table\"&gt;元素上添加类名“table-hover”即可.\n\n### 表格--紧凑型表格\n何谓紧凑型表格, 简单理解, 就是单元格没内距或者内距较其他表格的内距更小. 换句话说, 要实现紧凑型表格只需要重置表格单元格的内距padding的值. 那么在Bootstrap中, 通过类名“table-condensed”重置了单元格内距值. 紧凑型表格的运用, 也只是需要在&lt;table class=\"table\"&gt;基础上添加类名“table-condensed”.另外从上面的示例中大家可能也发现了, 不管制作哪种表格都离不开类名“table”. 所以大家在使用Bootstrap表格时, **千万注意, 你的&lt;table&gt;元素中一定不能缺少类名“table”**. \n\n### 表格--响应式表格\n随着各种手持设备的出现, 要想让你的Web页面适合千罗万像的设备浏览, 响应式设计的呼声越来越高. 在Bootstrap中也为表格提供了响应式的效果, 将其称为响应式表格. \nBootstrap提供了一个容器, 并且此容器设置类名“.table-responsive”,此容器就具有响应式效果, 然后**将&lt;table class=\"table\"&gt;置于这个容器当中(多一个容器)**, 这样表格也就具有响应式效果. Bootstrap中响应式表格效果表现为：当你的浏览器可视区域小于768px时, 表格底部会出现水平滚动条. 当你的浏览器可视区域大于768px时, 表格底部水平滚动条就会消失. \n\n---\n\n# 表单\n## 基础表单\n表单中常见的元素主要包括：文本输入框、下拉选择框、单选按钮、复选按钮、文本域和按钮等. 其中每个控件所起的作用都各不相同, 而且不同的浏览器对表单控件渲染的风格都各有不同. 对于基础表单, Bootstrap并未对其做太多的定制性效果设计, 仅仅对表单内的fieldset、legend、label标签进行了定制. 当然表单除了这几个元素之外, 还有input、select、textarea等元素, 在Bootstrap框架中, 通过定制了一个类名`form-control`, 也就是说, 如果这几个元素使用了类名**“form-control”**, 将会实现一些设计上的定制效果. \n1、宽度变成了100%\n2、设置了一个浅灰色(#ccc)的边框\n3、具有4px的圆角\n4、设置阴影效果, 并且元素得到焦点之时, 阴影和边框效果会有所变化\n5、设置了placeholder的颜色为#999\n``` bash\n<div class=\"form-group\">\n    <label for=\"exampleInputEmail1\">邮箱：</label>\n    <input type=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" \n\t\t\tplaceholder=\"请输入您的邮箱地址\">\n  </div>\n```\n``` bash\n<div class=\"checkbox\">\n    <label>\n      <input type=\"checkbox\"> 记住密码\n    </label>\n  </div>\n```\n## 水平表单\n在Bootstrap框架中要实现水平表单效果, 必须满足以下两个条件：\n1、在&lt;form&gt;元素是使用类名“form-horizontal”. \n2、配合Bootstrap框架的网格系统. (网格布局会在以后的章节中详细讲解)\n\n在&lt;form&gt;元素上使用类名“form-horizontal”主要有以下几个作用：\n1、设置表单控件padding和margin值. \n2、改变“form-group”的表现形式, 类似于网格系统的“row”. \n``` bash\n<div class=\"form-group\">\n    <label for=\"inputPassword3\" class=\"col-sm-2 control-label\">密码</label>\n    <div class=\"col-sm-10\">\n      <input type=\"password\" class=\"form-control\" id=\"inputPassword3\"\n\t\t\t\tplaceholder=\"请输入您的邮箱密码\">\n    </div>\n  </div>\n```\n## 内联表单\n在Bootstrap框架中实现这样的表单效果是轻而易举的, 你只需要在&lt;form&gt;元素中添加类名“form-inline”即可. 内联表单实现原理非常简单, 欲将表单控件在一行显示, 就需要将表单控件设置成内联块元素(display:inline-block).如果你要在input前面添加一个label标签时, 会导致input换行显示. 如果你必须添加这样的一个label标签, 并且不想让input换行, 你需要将label标签也放在容器“form-group”中. 回过头来看示例, 你或许会问, 为什么添加了label标签, 而且没有放置在”form-group”这样的容器中, input也不会换行；还有label标签怎么没显示出来. 如果你仔细看, 在label标签运用了一个类名“sr-only”, 标签没显示就是这个样式将标签隐藏了.那么Bootstrap为什么要这么做呢？这样不是多此一举吗？其实不是的, 如果没有为输入控件设置label标签, 屏幕阅读器将无法正确识别. 这也是Bootstrap框架另一个优点之处, 为残障人员进行了一定的考虑. \n\n## 表单控件(输入框input)\n单行输入框,常见的文本输入框, 也就是input的type属性值为text. 在Bootstrap中使用input时也必须添加type类型, 如果没有指定type类型, 将无法得到正确的样式, 因为Bootstrap框架都是通过input\\[type=“?”\\](其中?号代表type类型, 比如说text类型, 对应的是input\\[type=“text”\\])的形式来定义样式的. \n为了让控件在各种表单风格中样式不出错, 需要添加类名“form-control”, \n**全部input类型都在这了**\n&lt;input type=\"email\" class=\"form-control\" placeholder=\"Enter email\"&gt;\ntext button checkbox date datetime datetime-local img file hidden month number password radio range reset search submit tel time url week hidden\n\n## 表单控件(下拉选择框select)\nBootstrap框架中的下拉选择框使用和原始的一致, 多行选择设置multiple属性的值为multiple. Bootstrap框架会为这些元素提供统一的样式风格. \n``` bash\n<select multiple class=\"form-control\"> \n  <option>1</option> \n  <option>2</option> \n  <option>3</option> \n  <option>4</option> \n  <option>5</option> \n</select>\n```\n\n## 表单控件(文本域textarea)\n文本域和原始使用方法一样, 设置rows可定义其高度, 设置cols可以设置其宽度. 但如果textarea元素中添加了类名“form-control”类名, 则无需设置cols属性. 因为Bootstrap框架中的“form-control”样式的表单控件宽度为100%或auto. \n``` bash\n<form role=\"form\">\n  <div class=\"form-group\">\n    <textarea class=\"form-control\" rows=\"3\"></textarea>\n  </div>\n</form>\n```\n\n## 表单控件(复选框checkbox和单选择按钮radio)\n<span style=\"color:blue;\">Bootstrap框架中checkbox和radio有点特殊</span>, Bootstrap针对他们做了一些特殊化处理, 主要是checkbox和radio与label标签配合使用会出现一些小问题(最头痛的是对齐问题). 使用Bootstrap框架, 开发人员无需考虑太多, 只需要按照下面的方法使用即可. \n``` bash\n<div class=\"checkbox\">\n    <label>\n      <input type=\"checkbox\" value=\"\">\n      记住密码\n    </label>\n  </div>\n```\n``` bash\n<div class=\"radio\">\n  <label>\n    <input type=\"radio\" name=\"optionsRadios\" id=\"optionsRadios1\" value=\"love\" checked>\n      喜欢\n  </label>\n</div>\n<div class=\"radio\">\n\t<label>\n\t\t<input type=\"radio\" name=\"optionsRadios\" id=\"optionsRadios2\" value=\"hate\">\n\t\t不喜欢\n\t</label>\n</div>\n```\n从上面的示例, 我们可以得知：\n1、**不管是checkbox还是radio都使用label包起来了**\n2、checkbox连同label标签放置在一个名为“.checkbox”的容器内\n3、radio连同label标签放置在一个名为“.radio”的容器内\n在Bootstrap框架中, 主要借助“.checkbox”和“.radio”样式, 来处理复选框、单选按钮与标签的对齐方式. \n\n## 表单控件(复选框和单选按钮水平排列)\n有时候, 为了布局的需要, 将复选框和单选按钮需要水平排列. Bootstrap框架也做了这方面的考虑：\n1、如果checkbox需要水平排列, 只需要在**label标签上添加类名“checkbox-inline”**\n2、如果radio需要水平排列, 只需要在**label标签上添加类名“radio-inline”**\n``` bash\n<div class=\"form-group\">\n  <label class=\"checkbox-inline\">\n    <input type=\"checkbox\"  value=\"option1\">游戏\n  </label>\n  <label class=\"checkbox-inline\">\n    <input type=\"checkbox\"  value=\"option2\">摄影\n  </label>\n  <label class=\"checkbox-inline\">\n    <input type=\"checkbox\"  value=\"option3\">旅游\n  </label>\n</div>\n```\n\n## 表单控件(按钮)\n按钮也是表单重要控件之一,制作按钮通常使用下面代码来实现：\n☑  input[type=“submit”]\n☑  input[type=“button”]\n☑  input[type=“reset”]\n☑  &lt;button&gt;\n在Bootstrap框架中的按钮都是采用&lt;button&gt;来实现. \n\n## 表单控件大小\n前面看到的表单控件都正常的大小. 可以通过设置控件的height, line-height, padding和font-size等属性来实现控件的高度设置. 不过Bootstrap框架还提供了两个不同的类名, 用来控制表单控件的高度. 这两个类名是：\n1、input-sm: 让控件比正常大小更小\n2、input-lg: 让控件比正常大小更大\n**这两个类适用于表单中的input, textarea和select控件.** 不管是“input-sm”还是“input-lg”仅对控件高度做了处理. 但往往很多时候, 我们需要控件宽度也要做一定的变化处理. 这个时候就要借住Bootstrap框架的网格系统. \n前面介绍水平表单时说过, **如果表单使用了类名“form-horizontal”, 其中“form-group”就相当于网格系统中的“row”**. 换句话说, 如果没有这样做, 要通过网格系统来控制表单控件宽度, 就需要这样使用：\n``` bash\n<div class=\"row\">\n\t<div class=\"col-xs-4\">\n\t\t<input class=\"form-control input-lg\" type=\"text\" placeholder=\".col-xs-4\">\n\t</div>\n</div>\n```\n\n## 表单控件状态(焦点状态)\n每一种状态都能给用户传递不同的信息, 比如表单有焦点的状态可以告诉用户可以输入或选择东西, 禁用状态可以告诉用户不可以输入或选择东西, 还有就是表单控件验证状态, 可以告诉用户的操作是否正确等. 那么在Bootstrap框架中的表单控件也具备这些状态.  从源码中我们可以看出, 要让控件在焦点状态下有上面样式效果, 需要给控件添加类名“form-control”.在Bootstrap框架中, file、radio和checkbox控件在焦点状态下的效果也与普通的input控件不太一样, 主要是因为Bootstrap对他们做了一些特殊处理\n\n## 表单控件状态(禁用状态)\nBootstrap框架的表单控件的禁用状态和普通的表单禁用状态实现方法是一样的, 在相应的表单控件上**添加属性“disabled”**(__不是添加类__). 和其他表单的禁用状态不同的是, Bootstrap框架做了一些样式风格的处理. 在使用了“form-control”的表单控件中, 样式设置了禁用表单背景色为灰色, 而且手型变成了不准输入的形状. 如果控件中不使用类名“form-control”, 禁用的控件只会有一个不准输入的手型出来. 在Bootstrap框架中, 如果fieldset设置了disabled属性, 整个域都将处于被禁用状态\n``` bash\n<form role=\"form\">\n<fieldset disabled>\n  <div class=\"form-group\">\n  <label for=\"disabledTextInput\">禁用的输入框</label>\n    <input type=\"text\" id=\"disabledTextInput\" class=\"form-control\" placeholder=\"禁止输入\">\n  </div>\n  <div class=\"form-group\">\n  <label for=\"disabledSelect\">禁用的下拉框</label>\n    <select id=\"disabledSelect\" class=\"form-control\">\n  <option>不可选择</option>\n  </select>\n  </div>\n  <div class=\"checkbox\">\n  <label>\n    <input type=\"checkbox\">无法选择\n  </label>\n  </div>\n  <button type=\"submit\" class=\"btnbtn-primary\">提交</button>\n</fieldset>\n</form>\n```\n据说对于整个禁用的域中, 如果legend中有输入框的话, 这个输入框是无法被禁用的. \n\n## 表单控件状态(验证状态)\n在制作表单时, 不免要做表单验证. 同样也需要提供验证状态样式, 在Bootstrap框架中同样提供这几种效果. \n1、.has-warning: 警告状态(黄色)\n2、.has-error: 错误状态(红色)\n3、.has-success: 成功状态(绿色)\n使用的时候只需要在form-group容器上对应添加状态类名. 很多时候, 在表单验证的时候, 不同的状态会提供不同的icon, 比如成功是一个对号(√), 错误是一个叉号(×)等. 在Bootstrap框中也提供了这样的效果. 如果你想让表单在对应的状态下显示icon出来, 只需要在对应的状态下添加类名“has-feedback”. 请注意, 此类名要与“has-error”、“has-warning”和“has-success”在一起\n``` bash\n<div class=\"form-group has-success has-feedback\">\n\t<label class=\"control-label\" for=\"inputSuccess1\">成功状态</label>\n\t<input type=\"text\" class=\"form-control\" id=\"inputSuccess1\" placeholder=\"成功状态\" >\n\t<span class=\"glyphicon glyphicon-ok form-control-feedback\"></span>\n\t<!-- 使用图标的话,必须加入之前的 成功状态 的 label -->\n</div>\n```\n\n## 表单提示信息\n平常在制作表单验证时, 要提供不同的提示信息. 在Bootstrap框架中也提供了这样的效果. 使用了一个\"help-block\"样式, 将提示信息以块状显示, 并且显示在控件底部. \n``` bash\n<div class=\"form-group has-success has-feedback\">\n  <label class=\"control-label\" for=\"inputSuccess1\">成功状态</label>\n  <input type=\"text\" class=\"form-control\" id=\"inputSuccess1\" placeholder=\"成功状态\" >\n  <span class=\"help-block\">你输入的信息是正确的</span>\n  <span class=\"glyphicon glyphicon-ok form-control-feedback\"></span>\n</div>\n```\n\n## 按钮\n**请始终为按钮规定 type 属性**. Internet Explorer 的默认类型是 \"button\", 而其他浏览器中(包括 W3C 规范)的默认值是 \"submit\". \n``` bash\n<button class=\"btn\" type=\"button\">基础按钮.btn</button>  \n<button class=\"btn btn-default\" type=\"button\">默认按钮.btn-default</button> \n<button class=\"btn btn-primary\" type=\"button\">主要按钮.btn-primary</button> \n<button class=\"btn btn-success\" type=\"button\">成功按钮.btn-success</button> \n<button class=\"btn btn-info\" type=\"button\">信息按钮.btn-info</button> \n<button class=\"btn btn-warning\" type=\"button\">警告按钮.btn-warning</button> \n<button class=\"btn btn-danger\" type=\"button\">危险按钮.btn-danger</button> \n<button class=\"btn btn-link\" type=\"button\">链接按钮.btn-link</button> \n```\n\n### 默认按钮\nBootstrap框架首先通过基础类名“.btn”定义了一个基础的按钮风格, 然后通过“.btn-default”定义了一个默认的按钮风格. 默认按钮的风格就是在基础按钮的风格的基础上修改了按钮的背景颜色、边框颜色和文本颜色. 使用默认按钮风格也非常的简单, 只需要在基础按钮“btn”的基础上增加类名“btn-default”即可\n\n### 多标签支持\n虽然在Bootstrap框架中使用任何标签元素都可以实现按钮风格, 但个人并不建议这样使用, 为了避免浏览器兼容性问题, 个人强烈建议使用button或a标签来制作按钮. \n\n### 定制风格\n在介绍按钮开篇就说过, Web页面可能会有不同的按钮风格. 那么在Bootstrap框架也考虑了. 在Bootstrap框架中除了默认的按钮风格之外, 还有其他六种按钮风格, 每种风格的其实都一样, 不同之处就是按钮的背景颜色、边框颜色和文本颜色. \n\n### 按钮大小\n在Bootstrap框架中, 对于按钮的大小, 也是可以定制的. 类似于input一样, 通过在基础按钮“.btn”的基础上追加类名来控制按钮的大小. \n``` bash\n<button class=\"btn btn-primary btn-lg\" type=\"button\">大型按钮.btn-lg</button> \n<button class=\"btn btn-primary\" type=\"button\">正常按钮</button>\n<button class=\"btn btn-primary btn-xs\" type=\"button\">小型按钮.btn-sm</button>\n<button class=\"btn btn-primary btn-xs\" type=\"button\">小型按钮.btn-sm</button>\n```\n\n### 块状按钮\nBootstrap框架中提供了一个类名“btn-block”. 按钮使用这个类名就可以让按钮充满整个容器, 并且这个按钮不会有任何的padding和margin值. 在实际当中, 常把这种按钮称为块状按钮. \n\n### 按钮状态——活动状态\nBootstrap框架针对按钮的状态做了一些特殊处理. 在Bootstrap框架中针对按钮的状态效果主要分为两种：活动状态和禁用状态. Bootstrap按钮的活动状态主要包括按钮的悬浮状态(:hover), 点击状态(:active)和焦点状态(:focus)几种. 而且不同风格下的按钮都具有这几种状态效果, 只是颜色做了一定的调整.当按钮处理正在点击状态(也就是鼠标按下的未松开的状态), __对于&lt;button&gt;元素是通过“:active”伪类实现__, __而对于&lt;a&gt;这样的标签元素则是通过添加类名“.active”来实现__. \n\n### 按钮状态——禁用状态\n和input等表单控件一样, 在Bootstrap框架的按钮中也具有禁用状态的设置. 禁用状态与其他状态按钮相比, 就是背景颜色的透明度做了一定的处理, opcity的值从100%调整为65%. 在Bootstrap框架中, 要禁用按钮有两种实现方式：\n方法1: 在标签中添加disabled属性\n方法2: 在元素标签中添加类名“disabled”\n\n## 图像\n图像在网页制作中也是常要用到的元素, 在Bootstrap框架中对于图像的样式风格提供以下几种风格：\n1、img-responsive：响应式图片, 主要针对于响应式设计\n2、img-rounded: 圆角图片\n3、img-circle: 圆形图片\n4、img-thumbnail: 缩略图片\n使用方法非常简单, 只需要在&lt;img&gt;标签上添加对应的类名.\n``` bash\n<img  alt=\"140x140\" src=\"http://placehold.it/140x140\">\n<img  class=\"img-rounded\" alt=\"140x140\" src=\"http://placehold.it/140x140\">\n<img  class=\"img-circle\" alt=\"140x140\" src=\"http://placehold.it/140x140\">\n<img  class=\"img-thumbnail\" alt=\"140x140\" src=\"http://placehold.it/140x140\">\n<img  class=\"img-responsive\" alt=\"140x140\" src=\"http://placehold.it/140x140\">\n```\n\n## 图标\n``` bash\n<span class=\"glyphicon glyphicon-search\"></span>\n<span class=\"glyphicon glyphicon-asterisk\"></span>\n<span class=\"glyphicon glyphicon-plus\"></span>\n<span class=\"glyphicon glyphicon-cloud\"></span>\n<span class=\"glyphicon glyphicon-phone\"></span>\n```\n在网页中使用图标也非常的简单, 在任何内联元素上应用所对应的样式即可.所有icon都是以”glyphicon-”前缀的类名开始, 然后后缀表示图标的名称. \n\n---\n\n# 网格系统\n网格系统的实现原理非常简单, 仅仅是通过定义容器大小, 平分12份(也有平分成24份或32份, 但12份是最常见的), 再调整内外边距, 最后结合媒体查询, 就制作出了强大的响应式网格系统. Bootstrap框架中的网格系统就是将容器平分成12份\nBootstrap框架的网格系统工作原理如下：\n1、**数据行(.row)**必须包含在容器(.container)中, 以便为其赋予合适的对齐方式和内距(padding). 如：\n``` bash\n<div class=\"container\">\n  <div class=\"row\"></div>\n</div>\n```\n2、在行(.row)中可以添加列(.column), 但列数之和不能超过平分的总列数, 比如12. 如：\n``` bash\n<div class=\"container\">\n\t<div class=\"row\">\n\t\t<div class=\"col-md-4\"></div>\n\t\t<div class=\"col-md-8\"></div>\n\t<div>\n<div>\n```\n3、具体内容应当放置在列容器(column)之内, 而且**只有列(column)才可以作为行容器(.row)的直接子元素**\n4、通过设置内距(padding)从而创建列与列之间的间距. 然后通过为第一列和最后一列设置负值的外距(margin)来抵消内距(padding)的影响\n\n## 列偏移\n有的时候, 我们不希望相邻的两个列紧靠在一起, 但又不想使用margin或者其他的技术手段来. 这个时候就可以使用列偏移(offset)功能来实现. 使用列偏移也非常简单, 只需要在列元素上添加类名“col-md-offset-*” (其中星号代表要偏移的列组合数), 那么具有这个类名的列就会向右偏移. 例如, 你在列元素上添加“col-md-offset-4”, 表示该列向右移动4个列的宽度. 不过有一个细节需要注意, 使用 ”col-md-offset-*” 对列进行向右偏移时, 要保证列与偏移列的总数不超过12, 不然会致列断行显示.\n\n## 列排序\n列排序其实就是改变列的方向, 就是改变左右浮动, 并且设置浮动的距离. 在Bootstrap框架的网格系统中是通过添加类名“col-md-push-*”(向右)和“col-md-pull-*”(向左) (其中星号代表移动的列组合数). \n\n## 列的嵌套\nBootstrap框架的网格系统还支持列的嵌套. 你可以在一个列中添加一个或者多个行(row)容器, 然后在这个行容器中插入列(像前面介绍的一样使用列). 但在列容器中的行容器(row), 宽度为100%时, 就是当前外部列的宽度. \n``` bash\n<div class=\"row\">\n\t<div class=\"col-md-8\">\n\t我的里面嵌套了一个网格\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6\">col-md-6</div>\n\t\t\t<div class=\"col-md-6\">col-md-6</div>\n\t\t</div>\n\t</div>\n</div>\n```\n\n---\n\n# 菜单、按钮和导航\n在Bootstrap框架中的下拉菜单组件是一个独立的组件, 根据不同的版本, 它对应的文件. 在使用Bootstrap框架的下拉菜单时, 必须调用Bootstrap框架提供的bootstrap.js文件. 当然, 如果你使用的是未编译版本, 在js文件夹下你能找到一个名为“dropdown.js”的文件. 你也可以调用这个js文件. \n<span style=\"color:red;\">特别声明</span>：因为Bootstrap的组件交互效果都是依赖于jQuery库写的插件, 所以在使用bootstrap.min.js之前一定要先加载jquery.min.js才会生效果. \n\n## 下拉菜单\n```bash\n<div class=\"dropdown\">\n\t<button class=\"btn btn-default dropdown-toggle\" type=\"button\"\n\t\tid=\"dropdownMenu1\" data-toggle=\"dropdown\">\n\t\t下拉菜单\n\t\t<span class=\"caret\"></span>\n\t</button>\n\t<ul class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"dropdownMenu1\">\n\t\t<li role=\"presentation\"><a role=\"menuitem\" tabindex=\"-1\" href=\"#\">\n\t\t\t下拉菜单项</a></li>\n\t\t<li role=\"presentation\" class=\"divider\"></li>\n\t\t<li role=\"presentation\"><a role=\"menuitem\" tabindex=\"-1\" href=\"#\">\n\t\t\t下拉菜单项</a></li>\n\t</ul>\n</div>\n```\n\n使用方法：在使用Bootstrap框架中的下拉菜单组件时, 其结构运用的正确与否非常的重要, 如果结构和类名未使用正确, 直接影响组件是否能正常运用. 我们来简单的看看：\n1、使用一个名为“dropdown”的容器包裹了整个下拉菜单元素, 示例中为:&lt;div class=\"dropdown\"&gt;&lt;/div&gt;\n2、使用了一个&lt;button&gt;按钮做为父菜单, 并且定义类名“dropdown-toggle”和自定义“data-toggle”属性, 属性指明触发后的动作：data-toggle=\"dropdown\"\n3、下拉菜单项使用一个ul列表, 并且定义一个类名为“dropdown-menu”, 此示例为:\n&lt;ul class=\"dropdown-menu\"&gt;\n\n### 下拉菜单(下拉分隔线)\n在Bootstrap框架中的下拉菜单还提供了下拉分隔线, 假设下拉菜单有两个组, 那么组与组之间可以通过添加一个空的&lt;li&gt;, 并且给这个&lt;li&gt;添加类名“divider”来实现添加下拉分隔线的功能. \n\n### 下拉菜单(菜单标题)\n``` bash\n<li role=\"presentation\" class=\"dropdown-header\">第一部分菜单头部</li>\n```\n\n### 下拉菜单(对齐方式)\nBootstrap框架中下拉菜单默认是左对齐, 如果你想让下拉菜单相对于父容器右对齐时, 可以在“dropdown-menu”上添加一个“pull-right”或者“dropdown-menu-right”类名\n\n### 下拉菜单(菜单项状态)\n下拉菜单项的默认的状态(不用设置)有悬浮状态(:hover)和焦点状态(:focus).下拉菜单项除了上面两种状态, 还有当前状态(.active)和禁用状态(.disabled). 这两种状态使用方法只需要在对应的菜单项上添加对应的类名\n\n## 按钮(按钮组)\n按钮组和下拉菜单组件一样, 需要依赖于button.js插件才能正常运行. 不过我们同样可以直接只调用bootstrap.js文件. 因为这个文件已集成了button.js插件功能. 对于结构方面, 非常的简单. 使用一个名为“btn-group”的容器, 把多个按钮放到这个容器中.btn-group 主要使自身容器为内联块, 使内部 .btn 左浮. 如下所示：\n```bash\n<div class=\"btn-group\">\n  <button type=\"button\" class=\"btn btn-default\">\n    <span class=\"glyphicon glyphicon-step-backward\"></span>\n  </button>\n  <button type=\"button\" class=\"btn btn-default\">\n    <span class=\"glyphicon glyphicon-step-forward\"></span>\n  </button>\n</div>\n```\n除了可以使用&lt;button&gt;元素之外, 还可以使用其他标签元素, 比如&lt;a&gt;标签. 唯一要保证的是：不管使用什么标签, “.btn-group”容器里的标签元素需要带有类名“.btn”. \n\n### 按钮(按钮工具栏)\n在富文本编辑器中, 将按钮组分组排列在一起,比如说复制、剪切和粘贴一组；左对齐、中间对齐、右对齐和两端对齐一组,那么Bootstrap框架按钮工具栏也提供了这样的制作方法,你只需要将按钮组“btn-group”按组放在一个大的容器“btn-toolbar”中, 如下所示：\n```bash\n<div class=\"btn-toolbar\">\n  <div class=\"btn-group\"></div>\n  <div class=\"btn-group\"></div>\n  <div class=\"btn-group\"></div>\n</div>\n```\n实现原理主要是让容器的多个分组“btn-group”元素进行浮动, 并且组与组之前保持5px的左外距.\n\n### 按钮组大小设置\n在介绍按钮一节中, 我们知道按钮是通过btn-lg、btn-sm和btn-xs三个类名来调整padding、font-size、line-height和border-radius属性值来改变按钮大小. 那么按钮组的大小, 我们也可以通过类似的方法：\n☑  .btn-group-lg:大按钮组\n☑  .btn-group-sm:小按钮组\n☑  .btn-group-xs:超小按钮组\n只需要在“.btn-group”类名上追加对应的类名, 就可以得到不同大小的按钮组. 如下所示：\n``` bash\n<div class=\"btn-toolbar\">\n  <div class=\"btn-group btn-group-lg\">\n    …\n  </div>\n  <div class=\"btn-group\">\n  …\n  </div>\n  <div class=\"btn-group btn-group-sm\">\n    …\n  </div>\n  <div class=\"btn-group btn-group-xs\">\n   …\n  </div>\n</div>\n```\n\n### 按钮(嵌套分组)\n很多时候, 我们常把下拉菜单和普通的按钮组排列在一起, 实现类似于导航菜单的效果. 使用的时候, 只需要把当初制作下拉菜单的“dropdown”的容器换成“btn-group”, 并且和普通的按钮放在同一级. \n```bash\n<div class=\"btn-group\">\n<button class=\"btn btn-default\" type=\"button\">首页</button>\n<button class=\"btn btn-default\" type=\"button\">产品展示</button>\n<button class=\"btn btn-default\" type=\"button\">案例分析</button>\n<button class=\"btn btn-default\" type=\"button\">联系我们</button>\n<div class=\"btn-group\">\n  <button class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" type=\"button\">关于我们<span class=\"caret\"></span></button>\n  <ul class=\"dropdown-menu\">\n\t\t<li><a href=\"##\">公司简介</a></li>\n\t\t<li><a href=\"##\">企业文化</a></li>\n\t\t<li><a href=\"##\">组织结构</a></li>\n\t\t<li><a href=\"##\">客服服务</a></li>\n\t</ul>\n</div>\n</div>\n```\n\n### 按钮(等分按钮)\n等分按钮的效果在移动端上特别的实用. 整个按钮组宽度是容器的100%, 而按钮组里面的每个按钮平分整个容器宽度. 例如, 如果你按钮组里面有五个按钮, 那么每个按钮是20%的宽度, 如果有四个按钮, 那么每个按钮是25%宽度, 以此类推.等分按钮也常被称为是自适应分组按钮, 其实现方法也非常的简单, 只需要在按钮组“btn-group”上追加一个“btn-group-justified”类名, 如下所示：\n```bash\n<div class=\"btn-group btn-group-justified\">\n  <a class=\"btnbtn-default\" href=\"#\">首页</a>\n  <a class=\"btnbtn-default\" href=\"#\">产品展示</a>\n  <a class=\"btnbtn-default\" href=\"#\">案例分析</a>\n  <a class=\"btnbtn-default\" href=\"#\">联系我们</a>\n</div>\n```\n**在制作等分按钮组时, 请尽量使用&lt;a&gt;标签元素来制作按钮**, 因为使用&lt;button&gt;标签元素时, 使用display:table在部分浏览器下支持并不友好. \n\n### 按钮(垂直分组)\n前面看到的示例, 按钮组都是水平显示的. 但在实际运用当中, 总会碰到垂直显示的效果. 在Bootstrap框架中也提供了这样的风格. 我们只需要把水平分组的“btn-group”类名**换成**“btn-group-vertical”即可. \n\n## 按钮下拉菜单\n按钮下拉菜单仅从外观上看和上一节介绍的下拉菜单效果基本上是一样的. 不同的是在普通的下拉菜单的基础上**封装了按钮(.btn)样式效果**. 简单点说就是点击一个按钮, 会显示隐藏的下拉菜单. 按钮下拉菜单其实就是普通的下拉菜单, 只不过把“&lt;a&gt;”标签元素换成了“&lt;button&gt;”标签元素. 唯一不同的是外部容器“div.dropdown”换成了“div.btn-group”. \n.btn-group 元素是内联元素 .dropdown 元素是块状元素\n按钮的向下向上三角形:按钮的向下三角形, 我们是通过在&lt;button&gt;标签中添加一个“&lt;span&gt;”标签元素, 并且命名为“caret”:\n``` bash\n<button class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" type=\"button\">\n\t按钮下拉菜单<span class=\"caret\"></span>\n</button>\n```\n\n有的时候我们的下拉菜单会向上弹起(接下来一个小节会介绍), 这个时候我们的三角方向需要朝上显示, 实现方法：需要在“.btn-group”类上**追加**“dropup”类名(这也是做向上弹起下拉菜单要用的类名). \n\n## 向上弹起的下拉菜单\n有些菜单是需要向上弹出的, 比如说你的菜单在页面最底部, 而这个菜单正好有一个下拉菜单, 为了让用户有更好的体验, 不得不让下拉菜单向上弹出. 在Bootstrap框架中专门为这种效果提代了一个类名“dropup”. 使用方法正如前面所示, 只需要在“btn-group”上添加这个类名(当然, 如果是普通向上弹出下拉菜单, 你只需要在“dropdown”类名基础上追加“dropup”类名即可). \n\n小笔记:\n1.实现普通下拉菜单：.dropdown>button.dropdown-toggle[data-toggle=\"dropdown\"]+ul.dropdown-menu;\n2.按钮下拉菜单：把.dropdown换成.btn-group即可. \n3.下拉菜单变上拉菜单：.dropdown.dropup或.btn-group.dropup\n4.下拉菜单通过绝对定位实现, 可通过设置top,bottom,left,right改变下拉菜单出现的位置. \n5.dropdown-header,li.divider,li.active,li.disabled\n\n## 导航(基础样式)\nBootstrap框架中制作导航条主要通过“.nav”样式. 默认的“.nav”样式不提供默认的导航样式, 必须附加另外一个样式才会有效, 比如“nav-tabs”、“nav-pills”之类. 比如有一个tab导航条的例子, 他的实现方法就是为ul标签加入.nav和nav-tabs两个类样式. \n``` bash\n<ul class=\"nav nav-tabs\">\n  <li><a href=\"##\">Home</a></li>\n  <li><a href=\"##\">CSS3</a></li>\n \t<li><a href=\"##\">Sass</a></li>\n \t<li><a href=\"##\">jQuery</a></li>\n \t<li><a href=\"##\">Responsive</a></li>\n</ul>\n```\n\n### 导航(标签形tab导航)\n标签形导航, 也称为选项卡导航. 特别是在很多内容分块显示的时, 使用这种选项卡来分组十分适合.标签形导航是通过“nav-tabs”样式来实现.在制作标签形导航时需要在原导航“nav”上追加此类名.其实上例的效果和我们平时看到的选项卡效果并不一致. 一般情况之下, 选项卡教会有一个当前选中项. 其实在Bootstrap框架也相应提供了. 假设我们想让“Home”项为当前选中项, 只需要在其标签上添加类名“active”即可; 除了当前项之外, 有的选项卡还带有禁用状态, 实现这样的效果, 只需要在标签项上添加“disabled”即可.\n\n### 导航(胶囊形(pills)导航)\n胶囊形(pills)导航听起来有点别扭, 因为其外形看起来有点像胶囊形状. 但其更像我们平时看到的大众形导航. 当前项高亮显示, 并带有圆角效果. 其实现方法和“nav-tabs”类似,同样的结构, 只需要把类名“nav-tabs”换成“nav-pills”即可.\n\n### 导航(垂直堆叠的导航)\n在实际运用当中, 除了水平导航之外, 还有垂直导航, 就类似前面介绍的垂直排列按钮一样. 制作**垂直堆叠导航只需要在“nav-pills”的基础上添加一个“nav-stacked”类名**即可.\n大家是否还记得, 在下拉菜单一节中, 下拉菜单组与组之间有一个分隔线. 其实在垂直堆叠导航也具有这样的效果, 只需要添加在导航项之间添加“&lt;li class=”nav-divider”&gt;&lt;/li&gt;”即可\n\n### 自适应导航\n自适应导航指的是导航占据容器全部宽度, 而且菜单项可以像表格的单元格一样自适应宽度. 自适应导航和前面使用“btn-group-justified”制作的自适应按钮组是一样的. 只不过在制作自适应导航时更换了另一个类名“nav-justified”. 当然他需要和“nav-tabs”或者“nav-pills”配合在一起使用. 如：\n``` bash\n<ul class=\"nav nav-tabs nav-justified\">\n\t<li class=\"active\"><a href=\"##\">Home</a></li>\n\t<li><a href=\"##\">CSS3</a></li>\n\t<li><a href=\"##\">Sass</a></li>\n\t<li><a href=\"##\">jQuery</a></li>\n\t<li><a href=\"##\">Responsive</a></li>\n</ul>\n```\n\n## 导航加下拉菜单(二级导航)\n在Bootstrap框架中制作二级导航就更容易了. 只需要将li当作父容器, 使用类名“dropdown”, 同时在li中嵌套另一个列表ul, 使用前面介绍下拉菜单的方法就可以：\n``` bash\n<ul class=\"nav nav-pills\">\n\t<li class=\"active\"><a href=\"##\">首页</a></li>\n\t<li class=\"dropdown\">\n\t\t<a href=\"##\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">教程<span class=\"caret\"></span></a>\n\t\t\t<ul class=\"dropdown-menu\">\n\t\t\t\t<li><a href=\"##\">CSS3</a></li>\n            …\n\t\t\t</ul>\n\t</li>\n\t<li><a href=\"##\">关于我们</a></li>\n</ul>\n```\n\n## 面包屑式导航\n面包屑(Breadcrumb)一般用于导航, 主要是起的作用是告诉用户现在所处页面的位置(当前位置). 在Bootstrap框架中面包屑也是一个独立模块组件\n``` bash\n<ol class=\"breadcrumb\">\n  <li><a href=\"#\">首页</a></li>\n  <li><a href=\"#\">我的书</a></li>\n  <li class=\"active\">《图解CSS3》</li>\n</ol> \n```\n\n---\n\n\n# 导航条,分页导航\n## 导航条基础\n导航条(navbar)和上一节介绍的导航(nav), 就相差一个字, 多了一个“条”字. 其实在Bootstrap框架中他们还是明显的区别. 在导航条(navbar)中有一个**背景色、而且导航条可以是纯链接(类似导航), 也可以是表单, 还有就是表单和导航一起结合等多种形式**. 在这一节中将一起探讨Bootstrap框架中导航条的使用. \n``` bash\n<!--基本导航条-->\n<div class=\"navbar navbar-default\" role=\"navigation\">\n\t<ul class=\"nav navbar-nav\">\n\t\t<li class=\"active\"><a href=\"##\">网站首页</a></li>\n\t\t<li><a href=\"##\">系列教程</a></li>\n\t\t<li><a href=\"##\">名师介绍</a></li>\n\t\t<li><a href=\"##\">成功案例</a></li>\n\t\t<li><a href=\"##\">关于我们</a></li>\n\t</ul>\n</div>\n```\n``` bash\n<div class=\"navbar navbar-default\" role=\"navigation\">\n  <div class=\"navbar-header\">\n  　 <a href=\"##\" class=\"navbar-brand\">慕课网</a>\n  </div>\n  <ul class=\"nav navbar-nav\">\n\t  <li class=\"active\"><a href=\"##\">网站首页</a></li>\n      <li class=\"dropdown\">\n        <a href=\"##\" data-toggle=\"dropdown\" class=\" dropdown-toggle\">系列教程<span class=\"caret\"></span></a>\n        <ul class=\"dropdown-menu\">\n        \t<li><a href=\"##\">CSS3</a></li>\n        \t<li><a href=\"##\">JavaScript</a></li>\n        \t<li class=\"\"><a href=\"##\">PHP</a></li>\n        </ul>\n     </li>\n      <li><a href=\"##\">名师介绍</a></li>\n      <li><a href=\"##\">成功案例</a></li>\n      <li><a href=\"##\">关于我们</a></li>\n\t  </ul>\n  <form action=\"##\" class=\"navbar-form navbar-left\" rol=\"search\">\n   \t<div class=\"form-group\">\n   \t\t<input type=\"text\" class=\"form-control\" placeholder=\"请输入关键词\" />\n   \t</div>\n      <button type=\"submit\" class=\"btn btn-default\">搜索</button>\n    </form>\n</div>\n```\n\n## 基础导航条\n在Bootstrap框中, 导航条和导航从外观上差别不是太多, 但在实际使用中导航条要比导航复杂得多. 我们先来看导航条中最基础的一个——基础导航条. \n第一步：首先在制作导航的列表(&lt;ul class=”nav”&gt;)基础上添加类名“navbar-nav”\n第二步：在列表外部添加一个容器(div), 并且使用类名“navbar”和“navbar-default”\n\n## 为导航条添加标题、二级菜单及状态\n### 加入导航条标题\n在Web页面制作中, 常常在菜单前面都会有一个标题(文字字号比其它文字稍大一些), 其实在Bootstrap框架也为大家做了这方面考虑, 其通过“navbar-header”和“navbar-brand”来实现.\n``` bash\n<div class=\"navbar-header\">\n\t<a href=\"##\" class=\"navbar-brand\">慕课网</a>\n</div>\n```\n\n### 导航条状态、二级菜单\n同样的, 在基础导航条中对菜单提供了当前状态, 禁用状态, 悬浮状态等效果, 而且也可以带有二级菜单的导航条\n``` bash\n<!--导航条状态及二级菜单-->\n<div class=\"navbar navbar-default\" role=\"navigation\">\n  <div class=\"navbar-header\">\n  　<a href=\"##\" class=\"navbar-brand\">慕课网</a>\n  </div>\n\t<ul class=\"nav navbar-nav\">\n\t \t<li class=\"active\"><a href=\"##\">网站首页</a></li>\n        <li class=\"dropdown\">\n          <a href=\"##\" data-toggle=\"dropdown\" class=\"dropdown-toggle\">系列教程<span class=\"caret\"></span></a>\n          <ul class=\"dropdown-menu\">\n\t\t\t\t\t\t<li><a href=\"##\">CSS3</a></li>\n\t\t\t\t\t\t<li><a href=\"##\">JavaScript</a></li>\n\t\t\t\t\t\t<li class=\"disabled\"><a href=\"##\">PHP</a></li>\n          </ul>\n\t\t\t\t</li>\n\t\t<li><a href=\"##\">名师介绍</a></li>\n\t\t<li class=\"active\"><a href=\"##\">成功案例</a></li>\n\t\t<li><a href=\"##\">关于我们</a></li>\n\t</ul>\n</div>\n```\n**注意: a 中类不要加 btn ,否则样式不一致.**\n\n## 带表单的导航条\n在Bootstrap框架中提供了一个“navbar-form”, 使用方法很简单, 在navbar容器中放置一个带有navbar-form类名的表单.大家看到了“navbar-left”让表单左浮动, 更好实现对齐. 在Bootstrap框架中, 还提供了“navbar-right”样式, 让元素在导航条靠右对齐. \n\n## 导航条中的按钮、文本和链接\nBootstrap框架的导航条中除了使用navbar-brand中的a元素和navbar-nav的ul和navbar-form之外, 还可以使用其他元素. 框架提供了三种其他样式\n1、导航条中的按钮navbar-btn\n2、导航条中的文本navbar-text\n3、导航条中的普通链接navbar-link\n\n## 固定导航条\n使用方法很简单, 只需要在制作导航条最外部容器navbar上追加对应的类名即可：\n``` bash\n<div class=\"navbar navbar-default navbar-fixed-top\" role=\"navigation\"> 或\n<div class=\"navbar navbar-default navbar-fixed-bottom\" role=\"navigation\">\n```\n从运行效果中大家不难发现, 页面主内容顶部和底部都被固定导航条给遮住了. **为了避免固定导航条遮盖内容, 我们需要在body上做一些处理**\n\n## 响应式导航条\n如今浏览Web页面的终端不在是一尘不变了, 前面示例实现的导航条仅能适配于大屏幕的浏览器, 但当浏览器屏幕变小的时候, 就不适合了. 因此响应式设计也就随之而来. 那么在一个响应式的Web页面中, 对于响应式的导航条也就非常的重要. \n使用方法：\n1、保证在窄屏时需要折叠的内容必须包裹在带一个div内, 并且为这个div加入collapse、navbar-collapse两个类名. 最后为这个div添加一个class类名或者id名. \n2、保证在窄屏时要显示的图标样式(固定写法)：\n``` bash\n<button class=\"navbar-toggle\" type=\"button\" data-toggle=\"collapse\">\n  <span class=\"sr-only\">Toggle Navigation</span>\n  <span class=\"icon-bar\"></span>\n  <span class=\"icon-bar\"></span>\n  <span class=\"icon-bar\"></span>\n</button>\n```\n3、并为button添加data-target=\".类名/#id名\", 究竞是类名还是id名呢？由需要折叠的div来决定. 如：\n需要折叠的div代码段：\n``` bash\n<div class=\"collapse navbar-collapse\" id=\"example\">\n\t<ul class=\"nav navbar-nav\">\n\t…\n\t</ul>\n</div>\n```\n窄屏时显示的图标代码段：\n``` bash\n<button class=\"navbar-toggle\" type=\"button\" data-toggle=\"collapse\" data-target=\"#example\">\n  ...\n</button>\n```\n也可以这么写, 需要折叠的div代码段：\n``` bash\n<div class=\"collapse navbar-collapse example\" >\n\t<ul class=\"nav navbar-nav\">\n\t…\n\t</ul>\n</div>\n```\n窄屏时要显示的图标：\n``` bash\n<button class=\"navbar-toggle\" type=\"button\" data-toggle=\"collapse\" data-target=\".example\">\n  ...\n</button>\n```\n\n\n完整:\n``` bash\n<div class=\"navbar navbar-default\" role=\"navigation\">\n  <div class=\"navbar-header\">\n\t　<!-- .navbar-toggle样式用于toggle收缩的内容, 即nav-collapse collapse样式所在元素 -->\n\t\t<button class=\"navbar-toggle\" type=\"button\" data-toggle=\"collapse\" data-target=\"#ff\">\n\t\t<!--<span class=\"sr-only\">Toggle Navigation</span>-->\n\t\t<span class=\"icon-bar\"></span>\n\t\t<span class=\"icon-bar\"></span>\n\t\t<span class=\"icon-bar\"></span>\n\t\t</button>\n\t\t<!-- 确保无论是宽屏还是窄屏, navbar-brand都显示 -->\n\t\t<a href=\"##\" class=\"navbar-brand\">慕课网</a>\n  </div>\n  <!-- 屏幕宽度小于768px时, div.navbar-responsive-collapse容器里的内容都会隐藏, \n\t\t显示icon-bar图标, 当点击icon-bar图标时, 再展开. 屏幕大于768px时, 默认显示.  -->\n  <div class=\"collapse navbar-collapse navbar-responsive-collapse\" id=\"ff\">\n\t\t<ul class=\"nav navbar-nav\">\n\t\t\t<li class=\"active\"><a href=\"##\">网站首页</a></li>\n\t\t\t<li><a href=\"##\">系列教程</a></li>\n\t\t\t<li><a href=\"##\">名师介绍</a></li>\n\t\t\t<li><a href=\"##\">成功案例</a></li>\n\t\t\t<li><a href=\"##\">关于我们</a></li>\n\t \t</ul>\n  </div>\n</div>\n```\n\n## 反色导航条\n反色导航条其实是Bootstrap框架为大家提供的第二种风格的导航条, 与默认的导航条相比, 使用方法并无区别, 只是将navbar-deafult类名换成navbar-inverse. 其变化只是导航条的背景色和文本做了修改. \n\nnav navbar-default默认导航条 nav-inverse反色导航条\nnavbar-fixed-top/bottom固定导航条\nnav navbar-nav 导航条中的导航div类\nnavbar-form 导航表单\nnavbar-left左对齐\nnavbar-right右对齐\n\n## 分页导航(带页码的分页导航)\n使用方法：\n平时很多同学喜欢用div&gt;a和div&gt;span结构来制作带页码的分页导航. 不过, 在Bootstrap框架中使用的是ul&gt;li&gt;a这样的结构, 在ul标签上加入pagination方法：\n``` bash\n<ul class=\"pagination\">\n   <li><a href=\"#\">&laquo;</a></li>\n   <li><a href=\"#\">1</a></li>\n   <li><a href=\"#\">2</a></li>\n   <li><a href=\"#\">3</a></li>\n   <li><a href=\"#\">4</a></li>\n   <li><a href=\"#\">5</a></li>\n   <li><a href=\"#\">&raquo;</a></li>\n</ul>\n```\n注意：要禁用当前状态和禁用状态不能点击, 我们还要依靠js来实现, 或者将这两状态下的a标签换成span标签. \n\n大小设置：\n在Bootstrap框架中, 也可以通过几个不同的情况来设置其大小. 类似于按钮一样：\n1、通过“pagination-lg”让分页导航变大；\n2、通过“pagination-sm”让分页导航变小：  没有xs 这一说.\n\n### 分页导航(翻页分页导航)\nBootstrap框架除了提供带页码的分页导航之外还提供了翻页导航. 这种分页导航常常在一些简单的网站上看到, 比如说个人博客, 杂志网站等. 这种分页导航是看不到具体的页码, 只会提供一个“上一页”和“下一页”的按钮. \n使用方法：\n在实际使用中, 翻页分页导航和带页码的分页导航类似, 为ul标签加入pager类\n\n#### 对齐样式设置\n默认情况之下, 翻页分页导航是居中显示, 但有的时候我们需要一个居左, 一个居右. Bootstrap框架提供了两个样式：\n☑   previous: 让“上一步”按钮居左\n☑   next: 让“下一步”按钮居右\n\n#### 状态样式设置：\n和带页码分页导航一样, 如果在li标签上添加了disabled类名的时候, 分页按钮处于禁用状态, 但同样不能禁止其点击功能. 你可以通过js来处理, 或将a标签换成span标签. \n\n## 标签\n使用方法很简单, 你可以在使用span这样的行内标签：\n``` bash\n<span class=\"label label-default\">默认标签</span>\n<span class=\"label label-primary\">主要标签</span>\n<span class=\"label label-success\">成功标签</span>\n<span class=\"label label-info\">信息标签</span>\n<span class=\"label label-warning\">警告标签</span>\n<span class=\"label label-danger\">错误标签</span> \n```\n## 徽章\n使用方法, 其实也没什么太多可说的, 你可以像标签一样, 使用span标签来制作, 然后为他加入badge类：\n``` bash\n<a href=\"#\">Inbox <span class=\"badge\">42</span></a>\n<span class=\"badge pull-right\">42</span>\n```\n\n---\n\n# 其他内置组件\n## 缩略图\n缩略图在网站中最常用的地方就是产品列表页面, 一行显示几张图片, 有的在图片底下(左侧或右侧)带有标题、描述等信息. Bootstrap框架将这一部独立成一个模块组件. 并通过“thumbnail”样式配合bootstrap的网格系统来实现. 可以将产品列表页变得更好看. \n通过“thumbnail”样式配合bootstrap的网格系统来实现. \n``` bash\n<div class=\"container\">\n\t<div class=\"row\">\n\t\t<div class=\"col-xs-6 col-md-3\">\n\t\t\t<a href=\"#\" class=\"thumbnail\">\n\t\t\t\t<img src=\"http://img.mukewang.com/5434eba100014fe906000338.png\" style=\"height: 180px; width: 100%; display: block;\" alt=\"\">\n\t\t\t</a>\n\t\t</div>\n    …\n\t</div>\n</div>\n```\n\n上面的结构表示的是在宽屏幕(可视区域大于768px)的时候, 一行显示四个缩略图(单击全屏查看效果).\n在窄屏(可视区域小于768px)的时候, 一行只显示两个缩略图.\n上一小节, 展示的仅只有缩略图的一种使用方式, 除了这种方式之外, 还可以让缩略图配合标题、描述内容, 按钮等\n在仅有缩略图的基础上, 添加了一个div名为“caption“的容器, 在这个容器中放置其他内容, 比如说标题, 文本描述, 按钮等：\n``` bash\n<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-xs-6 col-md-3\">\n      <a href=\"#\" class=\"thumbnail\">\n        <img src=\"http://a.hiphotos.baidu.com/image/w%3D400/sign=c56d7638b0b7d0a27bc9059dfbee760d/3b292df5e0fe9925d46873da36a85edf8cb171d7.jpg\" style=\"height: 180px; width: 100%; display: block;\" alt=\"\">\n      </a>\n\t\t\t<div class=\"caption\">\n\t\t\t\t<h3>Bootstrap框架系列教程</h3>\n\t\t\t\t<p>Bootstrap框架是一个优秀的前端框, 就算您是一位后端程序员或者你是一位不懂设计的前端人员, 你也能依赖于Bootstrap制作做优美的网站...</p>\n\t\t\t\t<p>\n\t\t\t\t\t<a href=\"##\" class=\"btn btn-primary\">开始学习</a>\n\t\t\t\t\t<a href=\"##\" class=\"btn btn-info\">正在学习</a>\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</div>\n    …\n  </div>\n</div>\n```\n\n\n## 警示框\n在网站中, 网页总是需要和用户一起做沟通与交流. 特别是当用户操作上下文为用户提供一些有效的警示框, 比如说告诉用户操作成功、操作错误、提示或者警告等. \n``` bash\n<h2>默认警示框</h2>\n<div class=\"alert alert-success\" role=\"alert\">恭喜您操作成功！</div>\n```\n``` bash\n<h2>可关闭的警示框</h2>\n<div class=\"alert alert-success alert-dismissable\" role=\"alert\">\n恭喜您操作成功！\n    <button class=\"close\" type=\"button\" data-dismiss=\"alert\">&times;</button>\n</div>\n```\n**data-dismiss=\"alert\"**\n\n``` bash\n<h2>警示框的链接</h2>\n<div class=\"alert alert-success\" role=\"alert\">\n    <strong>Well done!</strong> \n    You successfully read \n\t<a href=\"#\" class=\"alert-link\">this important alert message</a>\n\t.\n</div>\n```\n\n\n## 进度条\n在网页中, 进度条的效果并不少见, 比如一个评分系统, 比如加载状态等. \n``` bash\n<h2>基本进度条</h2>\n<div class=\"progress\">\n  <div class=\"progress-bar\" style=\"width:40%\">\n  </div>\n</div> \n```\n``` bash\n<h2>彩色进度条</h2>\n<div class=\"progress\">\n  <div class=\"progress-bar progress-bar-success\" style=\"width:40%\"></div>\n</div> \n```\n``` bash\n<h2>条纹进度条</h2> // 把progress-striped active 加在最外层的div \n//就不用一个个的来控制这个斑马纹了 可以全部控制\n<div class=\"progress progress-striped\">\n  <div class=\"progress-bar progress-bar-success\" style=\"width:40%\"></div>\n</div>\n```\n``` bash\n<h2>动态条纹进度条</h2>\n<div class=\"progress progress-striped active\">\n  <div class=\"progress-bar progress-bar-success\" style=\"width:40%\"></div>\n</div> \n```\n``` bash\n<h2>层叠进度条</h2>\n<h5>正常层叠进度条</h5>    // width 总和小于100%\n<div class=\"progress\">\n\t<div class=\"progress-bar progress-bar-success\" style=\"width:20%\"></div>\n\t<div class=\"progress-bar progress-bar-info\" style=\"width:10%\"></div>\n\t<div class=\"progress-bar progress-bar-warning\" style=\"width:30%\"></div>\n\t<div class=\"progress-bar progress-bar-danger\" style=\"width:15%\"></div>\n</div> \n```\n``` bash\n<h2>带Label的进度条</h2>\n<h5>进度条1</h5>\n<div class=\"progress\">\n  <div class=\"progress-bar progress-bar-success\"  role=\"progressbar\" aria-valuenow=\"20\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width:20%\">20%</div>  \n</div>  \n```\n\n\n## 媒体对象\n``` bash\n<h3>默认媒体对象</h3>\n<div class=\"media\">\n  <a class=\"pull-left\" href=\"#\">\n    <img class=\"media-object\" src=\"http://img.mukewang.com/52e1d29d000161fe06000338-300-170.jpg\" alt=\"...\">\n  </a>\n  <div class=\"media-body\">\n    <h4 class=\"media-heading\">系列：十天精通CSS3</h4>\n    <div>全方位深刻详解CSS3模块知识, 经典案例分析, 代码同步调试, 让网页穿上绚丽装备！</div>\n  </div>\n</div>\n```\n``` bash\n<h3>媒体对象的嵌套</h3>\n<div class=\"media\">\n  <a class=\"pull-left\" href=\"#\">\n    <img class=\"media-object\" src=\"http://a.disquscdn.com/uploads/users/3740/2069/avatar92.jpg?1406972031\" alt=\"...\">\n\t</a>\n\t<div class=\"media-body\">\n\t\t<h4 class=\"media-heading\">我是大漠</h4>\n\t\t<div>我是W3cplus站长大漠, 我在写Bootstrap框中的媒体对象测试用例</div>\n\t\t<div class=\"media\">\n\t\t\t<a class=\"pull-left\" href=\"#\">\n\t\t\t\t<img class=\"media-object\" src=\"http://tp2.sinaimg.cn/3306361973/50/22875318196/0\" alt=\"...\">\n\t\t\t</a>\n\t\t\t<div class=\"media-body\">\n\t\t\t\t<h4 class=\"media-heading\">慕课网</h4>\n\t\t\t\t<div>大漠写的《玩转Bootstrap》系列教程即将会在慕课网上发布</div>\n\t\t\t\t<div class=\"media\">\n\t\t\t\t\t<a class=\"pull-left\" href=\"#\">\n\t\t\t\t\t\t<img class=\"media-object\" src=\"http://tp4.sinaimg.cn/1167075935/50/22838101204/1\" alt=\"...\">\n\t\t\t\t\t</a>\n\t\t\t\t\t<div class=\"media-body\">\n\t\t\t\t\t\t<h4 class=\"media-heading\">W3cplus</h4>\n\t\t\t\t\t\t<div>W3cplus站上还有很多教程....</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n```\n``` bash\n<h3>媒体对象列表</h3>\n<ul class=\"media-list\">\n  <li class=\"media\">\n    <a class=\"pull-left\" href=\"#\">\n      <img class=\"media-object\" src=\"http://a.disquscdn.com/uploads/users/3740/2069/avatar92.jpg?1406972031\" alt=\"...\">\n    </a>\n\t\t<div class=\"media-body\">\n\t\t\t<h4 class=\"media-heading\">我是大漠</h4>\n      <div>我是W3cplus站长大漠, 我在写Bootstrap框中的媒体对象测试用例</div>\n    </div>\n  </li>\n  <li class=\"media\">\n\t\t<a class=\"pull-left\" href=\"#\">\n\t\t\t\t<img class=\"media-object\" src=\"http://tp2.sinaimg.cn/3306361973/50/22875318196/0\" alt=\"...\">\n\t\t</a>\n    <div class=\"media-body\">\n      <h4 class=\"media-heading\">慕课网</h4>\n      <div>大漠写的《玩转Bootstrap》系列教程即将会在慕课网上发布</div>\n    </div>\n  </li>\n  <li class=\"media\">\n\t\t<a class=\"pull-left\" href=\"#\">\n\t\t\t<img class=\"media-object\" src=\"http://tp4.sinaimg.cn/1167075935/50/22838101204/1\" alt=\"...\">\n\t\t</a>\n\t\t<div class=\"media-body\">\n\t\t\t<h4 class=\"media-heading\">W3cplus</h4>\n\t\t\t<div>W3cplus站上还有很多教程....</div>\n\t\t</div>\n  </li>\n</ul>\n```\n\n默认:媒体对象一般是成组出现, 而一组媒体对象常常包括以下几个部分：\n☑  媒体对像的容器：常使用“media”类名表示, 用来容纳媒体对象的所有内容\n☑  媒体对像的对象：常使用“media-object”表示, 就是媒体对象中的对象, 常常是图片\n☑  媒体对象的主体：常使用“media-body”表示, 就是媒体对像中的主体内容, 可以是任何元素, 常常是图片侧边内容\n☑  媒体对象的标题：常使用“media-heading”表示, 就是用来描述对象的一个标题, 此部分可选\n除了上面四个部分之外, 在Bootstrap框架中还常常使用“pull-left”或者“pull-right”来控制媒体对象中的对象浮动方式. \n嵌套:从外往里看, 这里有三个媒体对象, 只不过是一个嵌套在另一个的里面. 那么在Bootstrap框架中的媒体对象也具备这样的功能, 只需要将另一个媒体对象结构放置在媒体对象的主体内“media-body”, \n列表:针对上图的媒体对象列表效果, Bootstrap框架提供了一个列表展示的效果, 在写结构的时候可以使用ul, 并且在ul上添加类名“media-list”, 而在li上使用“media”.\n\n\n\n## 列表组\n``` bash\n<h3>基础列表组</h3>\n<ul class=\"list-group\">\n  <li class=\"list-group-item\">揭开CSS3的面纱</li>\n  <li class=\"list-group-item\">CSS3选择器</li>\n\t<li class=\"list-group-item\">CSS3边框</li>\n\t<li class=\"list-group-item\">CSS3背景</li>\n\t<li class=\"list-group-item\">CSS3文本</li>\n</ul>\n```\n``` bash\n<h3>带徽章的列表组</h3>\n<ul class=\"list-group\">\n  <li class=\"list-group-item\">\n    <span class=\"badge\">13</span>揭开CSS3的面\n\t</li>\n\t<li class=\"list-group-item\">\n\t\t<span class=\"badge\">456</span>CSS3选择器\n\t</li>\n\t<li class=\"list-group-item\">\n\t\t<span class=\"badge\">892</span>CSS3边框\n\t</li>\n\t<li class=\"list-group-item\">\n\t\t<span class=\"badge\">90</span>CSS3背景\n\t</li>\n\t<li class=\"list-group-item\">\n\t\t<span class=\"badge\">1290</span>CSS3文本\n\t</li>\n</ul>\n```\n``` bash\n<h3>带链接的列表组</h3>\n<ul class=\"list-group\">\n    <li class=\"list-group-item\">\n    \t<a href=\"##\">揭开CSS3的面</a>\n\t</li>\n\t<li class=\"list-group-item\">\n\t\t<a href=\"##\">CSS3选择器</a>\n\t</li>\n\t<li class=\"list-group-item\">\n\t\t<a href=\"##\">CSS3边框</a>\n\t</li>\n\t<li class=\"list-group-item\">\n\t\t<a href=\"##\">CSS3背景</a>\n\t</li>\n\t<li class=\"list-group-item\">\n\t\t<a href=\"##\">CSS3文本</a>\n\t</li>\n</ul>\n```\n``` bash\n<h3>自定义列表组</h3>\n<div class=\"list-group\">\n\t<a href=\"##\" class=\"list-group-item\">\n\t\t<h4 class=\"list-group-item-heading\">图解CSS3</h4>\n\t\t<p class=\"list-group-item-text\">\n\t\t\t详细讲解了选择器、边框、背景、文本、颜色、盒模型、伸缩布局盒模型、多列布局、渐变、过渡、动画、媒体、响应Web设计、Web字体等主题下涵盖的所有CSS3新特性...\n\t\t</p>\n\t</a>\n\t<a href=\"##\" class=\"list-group-item\">\n\t\t<h4 class=\"list-group-item-heading\">Sass中国</h4>\n\t\t<p class=\"list-group-item-text\">致力于为中国开发者提供最全面, 最具影响力, 最前沿的Sass相关技术与教程...</p>\n\t</a>\n</div>\n```\n``` bash\n<h3>组合列表项的状态</h3>\n<div class=\"list-group\">\n\t<a href=\"##\" class=\"list-group-item active\"><span class=\"badge\">5902</span>图解CSS3</a>\n\t<a href=\"##\" class=\"list-group-item\"><span class=\"badge\">15902</span>W3cplus</a>\n\t<a href=\"##\" class=\"list-group-item\"><span class=\"badge\">59020</span>慕课网</a>\n\t<a href=\"##\" class=\"list-group-item disabled\"><span class=\"badge\">0</span>Sass中国</a>\n</div>\n```\n``` bash\n<h3>多彩列表组</h3>\n<div class=\"list-group\">\n\t<a href=\"##\" class=\"list-group-item active\"><span class=\"badge\">5902</span>图解CSS3</a>\n\t<a href=\"##\" class=\"list-group-item list-group-item-success\"><span class=\"badge\">15902</span>W3cplus</a>\n\t<a href=\"##\" class=\"list-group-item list-group-item-info\"><span class=\"badge\">59020</span>慕课网</a>\n\t<a href=\"##\" class=\"list-group-item list-group-item-warning\"><span class=\"badge\">0</span>Sass中国</a>\n\t<a href=\"##\" class=\"list-group-item list-group-item-danger\"><span class=\"badge\">10</span>Mobile教程</a>\n</div>\n```\n\n\n\n## 面板\n``` bash\n<h3>基础面板</h3>\n<div class=\"panel panel-default\">\n  <div class=\"panel-body\">我是一个基础面板, 带有默认主题样式风格</div>\n</div>\n```\n``` bash\n<h3>带有头和尾的面板</h3>\n<div class=\"panel panel-default\">\n  <div class=\"panel-heading\">图解CSS3</div>\n  <div class=\"panel-body\">\n\t\t详细讲解了选择器、边框、背景、文本、颜色、盒模型、伸缩布局盒模型、多列布局、渐变、过渡、动画、媒体、响应Web设计、Web字体等主题下涵盖的所有CSS3新特性\n\t</div>\n\t<div class=\"panel-footer\">作者：大漠</div>\n</div>\n```\n``` bash\n<h3>彩色面板</h3>\n<div class=\"panel panel-default\">\n\t<div class=\"panel-heading\">图解CSS3</div>\n\t<div class=\"panel-body\">\t\t\t详细讲解了选择器、边框、背景、文本、颜色、盒模型、伸缩布局盒模型、多列布局、渐变、过渡、动画、媒体、响应Web设计、Web字体等主题下涵盖的所有CSS3新特性\n\t</div>\n\t<div class=\"panel-footer\">作者：大漠</div>\n</div>\n<div class=\"panel panel-primary\">\n\t<div class=\"panel-heading\">图解CSS3</div>\n\t<div class=\"panel-body\">\n\t详细讲解了选择器、边框、背景、文本、颜色、盒模型、伸缩布局盒模型、多列布局、渐变、过渡、动画、媒体、响应Web设计、Web字体等主题下涵盖的所有CSS3新特性\n\t</div>\n```\n``` bash\n<h3>面板中嵌套表格</h3>\n<div class=\"panel panel-default\">\n\t<div class=\"panel-heading\">图解CSS3</div>\n\t<div class=\"panel-body\">\n\t\t<p>详细讲解了选择器、边框、背景、文本、颜色、盒模型、伸缩布局盒模型、多列布局、渐变、过渡、动画、媒体、响应Web设计、Web字体等主题下涵盖的所有CSS3新特性\n\t\t</p>\n\t\t<table class=\"table table-bordered\">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>＃</th>\n\t\t\t\t\t<th>我的书</th>\n\t\t\t\t\t<th>发布时间</th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>1</td>\n\t\t\t\t\t<td>《图解CSS3》</td>\n\t\t\t\t\t<td>2014-07-10</td>\n\t\t\t\t</tr>\n\t\t\t</tbody>\n\t\t</table>\n\t</div>\n\t<div class=\"panel-footer\">作者：大漠</div>\n</div>\n```\n在实际应用运中, 你或许希望表格和面板边缘不需要有任何的间距. 但由于panel-body设置了一个padding：15px的值, 为了实现这样的效果. 我们在**实际使用的时候需要把table提取到panel-body外面.**\n\n---\n\n# js插件简介\n## js库\nBootstrap除了包含丰富的Web组件之外, 如前面介绍的下拉菜单、按钮组、导航、分页等. 他还包括一些JavaScript的插件. \nBootstrap的JavaScript插件可以单独导入到页面中, 也可以一次性导入到页面中. 因为在Bootstrap中的JavaScript插件都是依赖于jQuery库, 所以不论是单独导入还一次性导入之前必须先导入jQuery库. \n``` bash\n<!—导入jQuery版本库, 因为Bootstrap的JavaScript插件依赖于jQuery -->\n<script src=\"http://libs.baidu.com/jquery/1.9.0/jquery.js\"></script>\n<!—- 一次性导入所有Bootstrap的JavaScript插件(压缩版本) -->\n<script src=\"js/bootstrap.min.js\"></script>\n```\n特别声明：jQuery版本库也可以加载你本地的jQuery版本. \n\n## 动画过渡(Transitions)\ntransition.js文件为Bootstrap具有过渡动画效果的组件提供了动画过渡效果. 不过需要注意的是, 这些过渡动画都是采用CSS3来实现的, 所以IE6-8浏览器是不具备这些过渡动画效果. \n默认情况之下, Bootstrap框架中以下组件使用了过渡动画效果：\n☑ 模态弹出窗(Modal)的滑动和渐变效果；\n☑ 选项卡(Tab)的渐变效果；\n☑ 警告框(Alert)的渐变效果；\n☑ 图片轮播(Carousel)的滑动效果. \n\n``` bash\n<button class=\"btn btn-primary\" type=\"button\">点击我</button>\n<div class=\"modal fade\" id=\"mymodal\">\n\t<div class=\"modal-dialog\">\n\t\t<div class=\"modal-content\">\n\t\t\t<div class=\"modal-header\">\n\t\t\t\t<button type=\"button\" class=\"close\" data-dismiss=\"modal\"><span aria-hidden=\"true\">&times;</span><span class=\"sr-only\">Close</span></button>\n\t\t\t\t<h4 class=\"modal-title\">模态弹出窗标题</h4>\n\t\t\t</div>\n\t\t\t<div class=\"modal-body\">\n\t\t\t\t<p>模态弹出窗主体内容</p>\n\t\t\t</div>\n\t\t\t<div class=\"modal-footer\">\n\t\t\t\t<button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">关闭</button>\n\t\t\t\t<button type=\"button\" class=\"btn btn-primary\">保存</button>\n\t\t\t</div>\n\t\t</div><!-- /.modal-content -->\n\t</div><!-- /.modal-dialog -->\n</div><!-- /.modal -->\n\n<script>\n  $(function(){\n    $(\".btn\").click(function(){\n      $(\"#mymodal\").modal(\"toggle\");\n    });\n  });\n</script>\n```\n\n## 模态弹出框(Modals)\n在 Bootstrap 框架中把模态弹出框统一称为 Modal. 这种弹出框效果在大多数 Web 网站的交互中都可见. 比如点击一个按钮弹出一个框, 弹出的框可能是一段文件描述, 也可能带有按钮操作, 也有可能弹出的是一张图片. \n\n## 模态弹出框--结构分析\nBootstrap框架中的模态弹出框, 分别运用了“modal”、“modal-dialog”和“modal-content”样式, 而弹出窗真正的内容都放置在“modal-content”中, 其主要又包括三个部分：\n☑ 弹出框头部, 一般使用“modal-header”表示, 主要包括标题和关闭按钮\n☑ 弹出框主体, 一般使用“modal-body”表示, 弹出框的主要内容\n☑ 弹出框脚部, 一般使用“modal-footer”表示, 主要放置操作按钮\n\n## 模态弹出框--实现原理解析\n实现原理解析：\nbootstrap中的“模态弹出框”有以下几个特点：\n1、模态弹出窗是固定在浏览器中的. \n2、单击右侧全屏按钮, 在全屏状态下, 模态弹出窗宽度是自适应的, 而且modal-dialog水平居中. \n3、当浏览器视窗大于768px时, 模态弹出窗的宽度为600px. \n\n两种尺寸选择：\n除此之外, Bootstrap框架还为模态弹出窗提供了不同尺寸, 一个是大尺寸样式“modal-lg”, 另一个是小尺寸样式“modal-sm”. 其结构上稍做调整\n``` bash\n<div class=\"modal-dialog modal-lg\">\n       <divclass=\"modal-content\"> ... </div>\n</div>\n```\n\n## 模态弹出框--触发模态弹出窗2种方法\n声明式触发方法：\n方法一：模态弹出窗声明, 只需要自定义两个必要的属性：data-toggle和data-target(bootstrap中声明式触发方法一般依赖于这些自定义的data-xxx 属性. 比如data-toggle=\"\" 或者 data-dismiss=\"\"). \n``` bash\n<!-- 触发模态弹出窗的元素 -->\n<button type=\"button\" data-toggle=\"modal\" data-target=\"#mymodal\" class=\"btn btn-primary\">点击我会弹出模态弹出窗</button>\n<!-- 模态弹出窗 -->\n<div class=\"modal fade\" id=\"mymodal\">\n\t<div class=\"modal-dialog\">\n\t\t<div class=\"modal-content\">\n\t\t\t<!-- 模态弹出窗内容 -->\n\t\t</div>\n\t</div>\n</div>\n```\n注意以下事项：\n1、data-toggle必须设置为modal(toggle中文翻译过来就是触发器)；\n2、data-target可以设置为CSS的选择符, 也可以设置为模态弹出窗的ID值, 一般情况设置为模态弹出窗的ID值, 因为ID值是唯一的值. \n\n方法二：触发模态弹出窗也可以是一个链接&lt;a&gt;元素, 那么可以使用链接元素自带的href属性替代data-target属性, 如：\n``` bash\n<!-- 触发模态弹出窗的元素 -->\n<a data-toggle=\"modal\" href=\"#mymodal\" class=\" btn btn-primary\" >点击我会弹出模态弹出窗</a>\n<!-- 模态弹出窗 -->\n<div class=\"modal fade\"  id=\"mymodal\" >\n  <div class=\"modal-dialog\" >\n    <div class=\"modal-content\" >\n      <!-- 模态弹出窗内容 -->\n    </div>\n  </div>\n</div>\n```\n不过建议还是使用统一使用data-target的方式来触发.\n \n## 模态弹出框--为弹出框增加过度动画效果\n可通过给“.modal”增加类名“fade”为模态弹出框增加一个过渡动画效果. \n\n## 模态弹出框--模态弹出窗的使用(data-参数说明)\n除了通过data-toggle和data-target来控制模态弹出窗之外, Bootstrap框架针对模态弹出框还提供了其他自定义data-属性, 来控制模态弹出窗. 比如说:是否有灰色背景modal-backdrop, 是否可以按ESC键关闭模态弹出窗. 有关于Modal弹出窗自定义属性相关说明如下所示\n![modal-attr](/images/modal-attr.png)\n\n## 模态弹出框--模态弹出窗的使用(JavaScript触发)\nJavaScript触发方法\n除了使用自定义属性触发模态弹出框之外, 还可以通过JavaScript方法来触发模态弹出窗. 通过给一个元素一个事件, 来触发. 比如说给一个按钮一个单击事件, 然后触发模态弹出窗. \n\n## JavaScript触发时的参数设置\n使用JavaScript触发模态弹出窗时, Bootstrap框架提供了一些设置, 主要包括属性设置、参数设置和事件设置. 比如你不想让用户按ESC键关闭模态弹出窗, 你就可以这样做：\n``` bash\n$(function(){\n  $(\".btn\").click(function(){\n    $(\"#mymodal\").modal({\n      keyboard:false\n    });\n  });\n});\n```\n","slug":"bootsrap简单结构","published":1,"updated":"2016-10-31T03:55:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciuy6rzsh000smsq47q23x7dv","content":"<hr>\n<h1 id=\"排版\"><a href=\"#排版\" class=\"headerlink\" title=\"排版\"></a>排版</h1><h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题:\"></a>标题:</h2><p>Bootstrap和普通的HTML页面一样, 定义标题都是使用标签&lt;h1&gt;到&lt;h6&gt;,只不过Bootstrap覆盖了其默认的样式, 使用其在所有浏览器下显示的效果一样.<br>除此之外, 我们在Web的制作中, 常常会碰到在一个标题后面紧跟着一行小的副标题. 在Bootstrap中他也考虑了这种排版效果, 使用了&lt;small&gt;标签来制作副标题. 这个副标题具有其自己的一些独特样式.<br><a id=\"more\"></a></p>\n<h2 id=\"段落-正文文本\"><a href=\"#段落-正文文本\" class=\"headerlink\" title=\"段落(正文文本)\"></a>段落(正文文本)</h2><p>全局文本字号为14px(font-size),行高为1.42857143(line-height), 大约是20px,深灰色(#333),字体为”Helvetica Neue”, Helvetica, Arial, sans-serif;(font-family)</p>\n<h2 id=\"强调内容\"><a href=\"#强调内容\" class=\"headerlink\" title=\"强调内容\"></a>强调内容</h2><p>如果想让一个段落p突出显示, 可以通过添加类名<strong>“.lead”</strong>实现, 其作用就是增大文本字号, 加粗文本, 而且对行高和margin也做相应的处理. 除此之外, Bootstrap还通过元素标签:&lt;small&gt;、&lt;strong&gt;、&lt;em&gt;和&lt;cite&gt;给文本做突出样式处理. </p>\n<h2 id=\"粗体\"><a href=\"#粗体\" class=\"headerlink\" title=\"粗体\"></a>粗体</h2><p>粗体就是给文本加粗, 在普通的元素中我们一般通过font-weight设置为bold关键词给文本加粗. 在Bootstrap中, 可以使用&lt;b&gt;和&lt;strong&gt;标签让文本直接加粗. </p>\n<h2 id=\"斜体\"><a href=\"#斜体\" class=\"headerlink\" title=\"斜体\"></a>斜体</h2><p>斜体类似于加粗一样, 除了可以给元素设置样式font-style值为italic实现之外, 在Bootstrap中还可以通过使用标签&lt;em&gt;或&lt;i&gt;来实现. </p>\n<h2 id=\"强调相关的类\"><a href=\"#强调相关的类\" class=\"headerlink\" title=\"强调相关的类\"></a>强调相关的类</h2><ol>\n<li>.text-muted：提示, 使用浅灰色(#999)</li>\n<li>.text-primary：主要, 使用蓝色(#428bca)</li>\n<li>.text-success：成功, 使用浅绿色(#3c763d)</li>\n<li>.text-info：通知信息, 使用浅蓝色(#31708f)</li>\n<li>.text-warning：警告, 使用黄色(#8a6d3b)</li>\n<li>.text-danger：危险, 使用褐色(#a94442)</li>\n</ol>\n<h2 id=\"文本对齐风格\"><a href=\"#文本对齐风格\" class=\"headerlink\" title=\"文本对齐风格\"></a>文本对齐风格</h2><p>为了简化操作, 方便使用, Bootstrap通过定义四个类名来控制文本的对齐风格：</p>\n<ol>\n<li>.text-left：左对齐</li>\n<li>.text-center：居中对齐</li>\n<li>.text-right：右对齐</li>\n<li>.text-justify：两端对齐</li>\n</ol>\n<h2 id=\"列表–简介\"><a href=\"#列表–简介\" class=\"headerlink\" title=\"列表–简介\"></a>列表–简介</h2><p>Bootstrap根据平时的使用情形提供了六种形式的列表：<br>☑  普通列表<br>☑  有序列表<br>☑  去点列表<br>☑  内联列表<br>☑  描述列表<br>☑  水平描述列表</p>\n<h3 id=\"无序列表和有序列表\"><a href=\"#无序列表和有序列表\" class=\"headerlink\" title=\"无序列表和有序列表\"></a>无序列表和有序列表</h3><p>使用方式和我们平时使用的一样(无序列表使用ul, 有序列表使用ol标签), 在样式方面, Bootstrap只是在此基础上做了一些细微的优化.</p>\n<h3 id=\"列表–去点列表\"><a href=\"#列表–去点列表\" class=\"headerlink\" title=\"列表–去点列表\"></a>列表–去点列表</h3><p>在Bootstrap中默认情况下无序列表和有序列表是带有项目符号的, 但在实际工作中很多时候, 我们的列表是不需要这个编号的, 比如说用无序列表做导航的时候. Bootstrap为众多开发者考虑的非常周道, 通过给无序列表添加一个类名“.list-unstyled”,这样就可以去除默认的列表样式的风格. (ul/ol中加入CSS类).</p>\n<h3 id=\"列表–内联列表\"><a href=\"#列表–内联列表\" class=\"headerlink\" title=\"列表–内联列表\"></a>列表–内联列表</h3><p>Bootstrap像去点列表一样, 通过添加类名“.list-inline”来实现内联列表, 简单点说就是把垂直列表换成水平列表, 而且去掉项目符号(编号), 保持水平显示. 也可以说内联列表就是为<strong>制作水平导航</strong>而生. </p>\n<h3 id=\"列表–定义列表\"><a href=\"#列表–定义列表\" class=\"headerlink\" title=\"列表–定义列表\"></a>列表–定义列表</h3><p>对于定义列表而言, Bootstrap并没有做太多的调整, 只是调整了行间距, 外边距和字体加粗效果. dl&gt;dt&gt;dd.</p>\n<h3 id=\"列表–水平定义列表\"><a href=\"#列表–水平定义列表\" class=\"headerlink\" title=\"列表–水平定义列表\"></a>列表–水平定义列表</h3><p>水平定义列表就像内联列表一样, Bootstrap可以给&lt;dl&gt;添加类名“.dl-horizontal”给定义列表实现水平显示效果. </p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>在Bootstrap主要提供了三种代码风格：<br>1、使用&lt;code&gt;来显示单行内联代码<br>2、使用&lt;pre&gt;来显示多行块代码<br>3、使用&lt;kbd&gt;来显示用户输入代码<br>在使用代码时, 用户可以根据具体的需求来使用不同的类型：<br>1、&lt;code&gt;: 一般是针对于单个单词或单个句子的代码<br>2、&lt;pre&gt;: 一般是针对于多行代码(也就是成块的代码)<br>3、&lt;kbd&gt;: 一般是表示用户要通过键盘输入的内容<br>正如前面所示, &lt;pre&gt;元素一般用于显示大块的代码, 并保证原有格式不变. 但有时候代码太多, 而且不想让其占有太大的页面篇幅, 就想控制代码块的大小. Bootstrap也考虑到这一点, 你只需要在&lt;pre&gt;标签上添加类名“.pre-scrollable”, 就可以控制代码块区域最大高度为340px, 一旦超出这个高度, 就会在Y轴出现滚动条. </p>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><p>Bootstrap为表格提供了1种基础样式和4种附加样式以及1个支持响应式的表格. Bootstrap为表格不同的样式风格提供了不同的类名, 主要包括：<br>☑  .table：基础表格<br>☑  .table-striped：斑马线表格<br>☑  .table-bordered：带边框的表格<br>☑  .table-hover：鼠标悬停高亮的表格<br>☑  .table-condensed：紧凑型表格<br>☑  .table-responsive：响应式表格<br>表格–表格行的类:Bootstrap还为表格的行元素&lt;tr&gt;提供了五种不同的类名, 每种类名控制了行的不同背景颜色, active, success, info, warning, danger</p>\n<h3 id=\"表格–基础表格\"><a href=\"#表格–基础表格\" class=\"headerlink\" title=\"表格–基础表格\"></a>表格–基础表格</h3><p>在Bootstrap中, 对于基础表格是通过类名“.table”来控制. 如果在&lt;table&gt;元素中不添加任何类名, 表格是无任何样式效果的. 想得到基础表格, 我们只需要在&lt;table&gt;元素上添加“.table”类名, 就可以得到Bootstrap的基础表格.</p>\n<h3 id=\"表格–斑马线表格\"><a href=\"#表格–斑马线表格\" class=\"headerlink\" title=\"表格–斑马线表格\"></a>表格–斑马线表格</h3><p>有时候为了让表格更具阅读性, 需要将表格制作成类似于斑马线的效果. 简单点说就是让表格带有背景条纹效果. 在Bootstrap中实现这种表格效果并不困难, 只需要在&lt;table class=”table”&gt;的基础上增加类名“.table-striped”即可.</p>\n<h3 id=\"表格–带边框的表格\"><a href=\"#表格–带边框的表格\" class=\"headerlink\" title=\"表格–带边框的表格\"></a>表格–带边框的表格</h3><p>基础表格仅让表格部分地方有边框, 但有时候需要整个表格具有边框效果. Bootstrap出于实际运用, 也考虑这种表格效果, 即所有单元格具有一条1px的边框.<br>Bootstrap中带边框的表格使用方法和斑马线表格的使用方法类似, 只需要在基础表格&lt;table class=”table”&gt;基础上添加一个“.table-bordered”类名即可.</p>\n<h3 id=\"表格–鼠标悬浮高亮的表格\"><a href=\"#表格–鼠标悬浮高亮的表格\" class=\"headerlink\" title=\"表格–鼠标悬浮高亮的表格\"></a>表格–鼠标悬浮高亮的表格</h3><p>当鼠标悬停在表格的行上面有一个高亮的背景色, 这样的表格让人看起来就是舒服, 时刻告诉用户正在阅读表格哪一行的数据. Bootstrap的确没有让你失望, 他也考虑到这种效果, 其提供了一个“.table-hover”类名来实现这种表格效果. 鼠标悬停高亮的表格使用也简单, 仅需要&lt;table class=”table”&gt;元素上添加类名“table-hover”即可.</p>\n<h3 id=\"表格–紧凑型表格\"><a href=\"#表格–紧凑型表格\" class=\"headerlink\" title=\"表格–紧凑型表格\"></a>表格–紧凑型表格</h3><p>何谓紧凑型表格, 简单理解, 就是单元格没内距或者内距较其他表格的内距更小. 换句话说, 要实现紧凑型表格只需要重置表格单元格的内距padding的值. 那么在Bootstrap中, 通过类名“table-condensed”重置了单元格内距值. 紧凑型表格的运用, 也只是需要在&lt;table class=”table”&gt;基础上添加类名“table-condensed”.另外从上面的示例中大家可能也发现了, 不管制作哪种表格都离不开类名“table”. 所以大家在使用Bootstrap表格时, <strong>千万注意, 你的&lt;table&gt;元素中一定不能缺少类名“table”</strong>. </p>\n<h3 id=\"表格–响应式表格\"><a href=\"#表格–响应式表格\" class=\"headerlink\" title=\"表格–响应式表格\"></a>表格–响应式表格</h3><p>随着各种手持设备的出现, 要想让你的Web页面适合千罗万像的设备浏览, 响应式设计的呼声越来越高. 在Bootstrap中也为表格提供了响应式的效果, 将其称为响应式表格.<br>Bootstrap提供了一个容器, 并且此容器设置类名“.table-responsive”,此容器就具有响应式效果, 然后<strong>将&lt;table class=”table”&gt;置于这个容器当中(多一个容器)</strong>, 这样表格也就具有响应式效果. Bootstrap中响应式表格效果表现为：当你的浏览器可视区域小于768px时, 表格底部会出现水平滚动条. 当你的浏览器可视区域大于768px时, 表格底部水平滚动条就会消失. </p>\n<hr>\n<h1 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h1><h2 id=\"基础表单\"><a href=\"#基础表单\" class=\"headerlink\" title=\"基础表单\"></a>基础表单</h2><p>表单中常见的元素主要包括：文本输入框、下拉选择框、单选按钮、复选按钮、文本域和按钮等. 其中每个控件所起的作用都各不相同, 而且不同的浏览器对表单控件渲染的风格都各有不同. 对于基础表单, Bootstrap并未对其做太多的定制性效果设计, 仅仅对表单内的fieldset、legend、label标签进行了定制. 当然表单除了这几个元素之外, 还有input、select、textarea等元素, 在Bootstrap框架中, 通过定制了一个类名<code>form-control</code>, 也就是说, 如果这几个元素使用了类名<strong>“form-control”</strong>, 将会实现一些设计上的定制效果.<br>1、宽度变成了100%<br>2、设置了一个浅灰色(#ccc)的边框<br>3、具有4px的圆角<br>4、设置阴影效果, 并且元素得到焦点之时, 阴影和边框效果会有所变化<br>5、设置了placeholder的颜色为#999<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"form-group\"</span>&gt;</div><div class=\"line\">    &lt;label <span class=\"keyword\">for</span>=<span class=\"string\">\"exampleInputEmail1\"</span>&gt;邮箱：&lt;/label&gt;</div><div class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"email\"</span> class=<span class=\"string\">\"form-control\"</span> id=<span class=\"string\">\"exampleInputEmail1\"</span> </div><div class=\"line\">\t\t\tplaceholder=<span class=\"string\">\"请输入您的邮箱地址\"</span>&gt;</div><div class=\"line\">  &lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"checkbox\"</span>&gt;</div><div class=\"line\">    &lt;label&gt;</div><div class=\"line\">      &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"checkbox\"</span>&gt; 记住密码</div><div class=\"line\">    &lt;/label&gt;</div><div class=\"line\">  &lt;/div&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"水平表单\"><a href=\"#水平表单\" class=\"headerlink\" title=\"水平表单\"></a>水平表单</h2><p>在Bootstrap框架中要实现水平表单效果, 必须满足以下两个条件：<br>1、在&lt;form&gt;元素是使用类名“form-horizontal”.<br>2、配合Bootstrap框架的网格系统. (网格布局会在以后的章节中详细讲解)</p>\n<p>在&lt;form&gt;元素上使用类名“form-horizontal”主要有以下几个作用：<br>1、设置表单控件padding和margin值.<br>2、改变“form-group”的表现形式, 类似于网格系统的“row”.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"form-group\"</span>&gt;</div><div class=\"line\">    &lt;label <span class=\"keyword\">for</span>=<span class=\"string\">\"inputPassword3\"</span> class=<span class=\"string\">\"col-sm-2 control-label\"</span>&gt;密码&lt;/label&gt;</div><div class=\"line\">    &lt;div class=<span class=\"string\">\"col-sm-10\"</span>&gt;</div><div class=\"line\">      &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"password\"</span> class=<span class=\"string\">\"form-control\"</span> id=<span class=\"string\">\"inputPassword3\"</span></div><div class=\"line\">\t\t\t\tplaceholder=<span class=\"string\">\"请输入您的邮箱密码\"</span>&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"内联表单\"><a href=\"#内联表单\" class=\"headerlink\" title=\"内联表单\"></a>内联表单</h2><p>在Bootstrap框架中实现这样的表单效果是轻而易举的, 你只需要在&lt;form&gt;元素中添加类名“form-inline”即可. 内联表单实现原理非常简单, 欲将表单控件在一行显示, 就需要将表单控件设置成内联块元素(display:inline-block).如果你要在input前面添加一个label标签时, 会导致input换行显示. 如果你必须添加这样的一个label标签, 并且不想让input换行, 你需要将label标签也放在容器“form-group”中. 回过头来看示例, 你或许会问, 为什么添加了label标签, 而且没有放置在”form-group”这样的容器中, input也不会换行；还有label标签怎么没显示出来. 如果你仔细看, 在label标签运用了一个类名“sr-only”, 标签没显示就是这个样式将标签隐藏了.那么Bootstrap为什么要这么做呢？这样不是多此一举吗？其实不是的, 如果没有为输入控件设置label标签, 屏幕阅读器将无法正确识别. 这也是Bootstrap框架另一个优点之处, 为残障人员进行了一定的考虑. </p>\n<h2 id=\"表单控件-输入框input\"><a href=\"#表单控件-输入框input\" class=\"headerlink\" title=\"表单控件(输入框input)\"></a>表单控件(输入框input)</h2><p>单行输入框,常见的文本输入框, 也就是input的type属性值为text. 在Bootstrap中使用input时也必须添加type类型, 如果没有指定type类型, 将无法得到正确的样式, 因为Bootstrap框架都是通过input[type=“?”](其中?号代表type类型, 比如说text类型, 对应的是input[type=“text”])的形式来定义样式的.<br>为了让控件在各种表单风格中样式不出错, 需要添加类名“form-control”,<br><strong>全部input类型都在这了</strong><br>&lt;input type=”email” class=”form-control” placeholder=”Enter email”&gt;<br>text button checkbox date datetime datetime-local img file hidden month number password radio range reset search submit tel time url week hidden</p>\n<h2 id=\"表单控件-下拉选择框select\"><a href=\"#表单控件-下拉选择框select\" class=\"headerlink\" title=\"表单控件(下拉选择框select)\"></a>表单控件(下拉选择框select)</h2><p>Bootstrap框架中的下拉选择框使用和原始的一致, 多行选择设置multiple属性的值为multiple. Bootstrap框架会为这些元素提供统一的样式风格.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;select multiple class=<span class=\"string\">\"form-control\"</span>&gt; </div><div class=\"line\">  &lt;option&gt;1&lt;/option&gt; </div><div class=\"line\">  &lt;option&gt;2&lt;/option&gt; </div><div class=\"line\">  &lt;option&gt;3&lt;/option&gt; </div><div class=\"line\">  &lt;option&gt;4&lt;/option&gt; </div><div class=\"line\">  &lt;option&gt;5&lt;/option&gt; </div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"表单控件-文本域textarea\"><a href=\"#表单控件-文本域textarea\" class=\"headerlink\" title=\"表单控件(文本域textarea)\"></a>表单控件(文本域textarea)</h2><p>文本域和原始使用方法一样, 设置rows可定义其高度, 设置cols可以设置其宽度. 但如果textarea元素中添加了类名“form-control”类名, 则无需设置cols属性. 因为Bootstrap框架中的“form-control”样式的表单控件宽度为100%或auto.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;form role=<span class=\"string\">\"form\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"form-group\"</span>&gt;</div><div class=\"line\">    &lt;textarea class=<span class=\"string\">\"form-control\"</span> rows=<span class=\"string\">\"3\"</span>&gt;&lt;/textarea&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"表单控件-复选框checkbox和单选择按钮radio\"><a href=\"#表单控件-复选框checkbox和单选择按钮radio\" class=\"headerlink\" title=\"表单控件(复选框checkbox和单选择按钮radio)\"></a>表单控件(复选框checkbox和单选择按钮radio)</h2><p><span style=\"color:blue;\">Bootstrap框架中checkbox和radio有点特殊</span>, Bootstrap针对他们做了一些特殊化处理, 主要是checkbox和radio与label标签配合使用会出现一些小问题(最头痛的是对齐问题). 使用Bootstrap框架, 开发人员无需考虑太多, 只需要按照下面的方法使用即可.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"checkbox\"</span>&gt;</div><div class=\"line\">    &lt;label&gt;</div><div class=\"line\">      &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"checkbox\"</span> value=<span class=\"string\">\"\"</span>&gt;</div><div class=\"line\">      记住密码</div><div class=\"line\">    &lt;/label&gt;</div><div class=\"line\">  &lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"radio\"</span>&gt;</div><div class=\"line\">  &lt;label&gt;</div><div class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"radio\"</span> name=<span class=\"string\">\"optionsRadios\"</span> id=<span class=\"string\">\"optionsRadios1\"</span> value=<span class=\"string\">\"love\"</span> checked&gt;</div><div class=\"line\">      喜欢</div><div class=\"line\">  &lt;/label&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"radio\"</span>&gt;</div><div class=\"line\">\t&lt;label&gt;</div><div class=\"line\">\t\t&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"radio\"</span> name=<span class=\"string\">\"optionsRadios\"</span> id=<span class=\"string\">\"optionsRadios2\"</span> value=<span class=\"string\">\"hate\"</span>&gt;</div><div class=\"line\">\t\t不喜欢</div><div class=\"line\">\t&lt;/label&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>从上面的示例, 我们可以得知：<br>1、<strong>不管是checkbox还是radio都使用label包起来了</strong><br>2、checkbox连同label标签放置在一个名为“.checkbox”的容器内<br>3、radio连同label标签放置在一个名为“.radio”的容器内<br>在Bootstrap框架中, 主要借助“.checkbox”和“.radio”样式, 来处理复选框、单选按钮与标签的对齐方式. </p>\n<h2 id=\"表单控件-复选框和单选按钮水平排列\"><a href=\"#表单控件-复选框和单选按钮水平排列\" class=\"headerlink\" title=\"表单控件(复选框和单选按钮水平排列)\"></a>表单控件(复选框和单选按钮水平排列)</h2><p>有时候, 为了布局的需要, 将复选框和单选按钮需要水平排列. Bootstrap框架也做了这方面的考虑：<br>1、如果checkbox需要水平排列, 只需要在<strong>label标签上添加类名“checkbox-inline”</strong><br>2、如果radio需要水平排列, 只需要在<strong>label标签上添加类名“radio-inline”</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"form-group\"</span>&gt;</div><div class=\"line\">  &lt;label class=<span class=\"string\">\"checkbox-inline\"</span>&gt;</div><div class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"checkbox\"</span>  value=<span class=\"string\">\"option1\"</span>&gt;游戏</div><div class=\"line\">  &lt;/label&gt;</div><div class=\"line\">  &lt;label class=<span class=\"string\">\"checkbox-inline\"</span>&gt;</div><div class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"checkbox\"</span>  value=<span class=\"string\">\"option2\"</span>&gt;摄影</div><div class=\"line\">  &lt;/label&gt;</div><div class=\"line\">  &lt;label class=<span class=\"string\">\"checkbox-inline\"</span>&gt;</div><div class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"checkbox\"</span>  value=<span class=\"string\">\"option3\"</span>&gt;旅游</div><div class=\"line\">  &lt;/label&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"表单控件-按钮\"><a href=\"#表单控件-按钮\" class=\"headerlink\" title=\"表单控件(按钮)\"></a>表单控件(按钮)</h2><p>按钮也是表单重要控件之一,制作按钮通常使用下面代码来实现：<br>☑  input[type=“submit”]<br>☑  input[type=“button”]<br>☑  input[type=“reset”]<br>☑  &lt;button&gt;<br>在Bootstrap框架中的按钮都是采用&lt;button&gt;来实现. </p>\n<h2 id=\"表单控件大小\"><a href=\"#表单控件大小\" class=\"headerlink\" title=\"表单控件大小\"></a>表单控件大小</h2><p>前面看到的表单控件都正常的大小. 可以通过设置控件的height, line-height, padding和font-size等属性来实现控件的高度设置. 不过Bootstrap框架还提供了两个不同的类名, 用来控制表单控件的高度. 这两个类名是：<br>1、input-sm: 让控件比正常大小更小<br>2、input-lg: 让控件比正常大小更大<br><strong>这两个类适用于表单中的input, textarea和select控件.</strong> 不管是“input-sm”还是“input-lg”仅对控件高度做了处理. 但往往很多时候, 我们需要控件宽度也要做一定的变化处理. 这个时候就要借住Bootstrap框架的网格系统.<br>前面介绍水平表单时说过, <strong>如果表单使用了类名“form-horizontal”, 其中“form-group”就相当于网格系统中的“row”</strong>. 换句话说, 如果没有这样做, 要通过网格系统来控制表单控件宽度, 就需要这样使用：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"row\"</span>&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"col-xs-4\"</span>&gt;</div><div class=\"line\">\t\t&lt;input class=<span class=\"string\">\"form-control input-lg\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> placeholder=<span class=\"string\">\".col-xs-4\"</span>&gt;</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"表单控件状态-焦点状态\"><a href=\"#表单控件状态-焦点状态\" class=\"headerlink\" title=\"表单控件状态(焦点状态)\"></a>表单控件状态(焦点状态)</h2><p>每一种状态都能给用户传递不同的信息, 比如表单有焦点的状态可以告诉用户可以输入或选择东西, 禁用状态可以告诉用户不可以输入或选择东西, 还有就是表单控件验证状态, 可以告诉用户的操作是否正确等. 那么在Bootstrap框架中的表单控件也具备这些状态.  从源码中我们可以看出, 要让控件在焦点状态下有上面样式效果, 需要给控件添加类名“form-control”.在Bootstrap框架中, file、radio和checkbox控件在焦点状态下的效果也与普通的input控件不太一样, 主要是因为Bootstrap对他们做了一些特殊处理</p>\n<h2 id=\"表单控件状态-禁用状态\"><a href=\"#表单控件状态-禁用状态\" class=\"headerlink\" title=\"表单控件状态(禁用状态)\"></a>表单控件状态(禁用状态)</h2><p>Bootstrap框架的表单控件的禁用状态和普通的表单禁用状态实现方法是一样的, 在相应的表单控件上<strong>添加属性“disabled”</strong>(<strong>不是添加类</strong>). 和其他表单的禁用状态不同的是, Bootstrap框架做了一些样式风格的处理. 在使用了“form-control”的表单控件中, 样式设置了禁用表单背景色为灰色, 而且手型变成了不准输入的形状. 如果控件中不使用类名“form-control”, 禁用的控件只会有一个不准输入的手型出来. 在Bootstrap框架中, 如果fieldset设置了disabled属性, 整个域都将处于被禁用状态<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;form role=<span class=\"string\">\"form\"</span>&gt;</div><div class=\"line\">&lt;fieldset disabled&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"form-group\"</span>&gt;</div><div class=\"line\">  &lt;label <span class=\"keyword\">for</span>=<span class=\"string\">\"disabledTextInput\"</span>&gt;禁用的输入框&lt;/label&gt;</div><div class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> id=<span class=\"string\">\"disabledTextInput\"</span> class=<span class=\"string\">\"form-control\"</span> placeholder=<span class=\"string\">\"禁止输入\"</span>&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"form-group\"</span>&gt;</div><div class=\"line\">  &lt;label <span class=\"keyword\">for</span>=<span class=\"string\">\"disabledSelect\"</span>&gt;禁用的下拉框&lt;/label&gt;</div><div class=\"line\">    &lt;select id=<span class=\"string\">\"disabledSelect\"</span> class=<span class=\"string\">\"form-control\"</span>&gt;</div><div class=\"line\">  &lt;option&gt;不可选择&lt;/option&gt;</div><div class=\"line\">  &lt;/select&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"checkbox\"</span>&gt;</div><div class=\"line\">  &lt;label&gt;</div><div class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"checkbox\"</span>&gt;无法选择</div><div class=\"line\">  &lt;/label&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;button <span class=\"built_in\">type</span>=<span class=\"string\">\"submit\"</span> class=<span class=\"string\">\"btnbtn-primary\"</span>&gt;提交&lt;/button&gt;</div><div class=\"line\">&lt;/fieldset&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure></p>\n<p>据说对于整个禁用的域中, 如果legend中有输入框的话, 这个输入框是无法被禁用的. </p>\n<h2 id=\"表单控件状态-验证状态\"><a href=\"#表单控件状态-验证状态\" class=\"headerlink\" title=\"表单控件状态(验证状态)\"></a>表单控件状态(验证状态)</h2><p>在制作表单时, 不免要做表单验证. 同样也需要提供验证状态样式, 在Bootstrap框架中同样提供这几种效果.<br>1、.has-warning: 警告状态(黄色)<br>2、.has-error: 错误状态(红色)<br>3、.has-success: 成功状态(绿色)<br>使用的时候只需要在form-group容器上对应添加状态类名. 很多时候, 在表单验证的时候, 不同的状态会提供不同的icon, 比如成功是一个对号(√), 错误是一个叉号(×)等. 在Bootstrap框中也提供了这样的效果. 如果你想让表单在对应的状态下显示icon出来, 只需要在对应的状态下添加类名“has-feedback”. 请注意, 此类名要与“has-error”、“has-warning”和“has-success”在一起<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"form-group has-success has-feedback\"</span>&gt;</div><div class=\"line\">\t&lt;label class=<span class=\"string\">\"control-label\"</span> <span class=\"keyword\">for</span>=<span class=\"string\">\"inputSuccess1\"</span>&gt;成功状态&lt;/label&gt;</div><div class=\"line\">\t&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> class=<span class=\"string\">\"form-control\"</span> id=<span class=\"string\">\"inputSuccess1\"</span> placeholder=<span class=\"string\">\"成功状态\"</span> &gt;</div><div class=\"line\">\t&lt;span class=<span class=\"string\">\"glyphicon glyphicon-ok form-control-feedback\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">\t&lt;!-- 使用图标的话,必须加入之前的 成功状态 的 label --&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"表单提示信息\"><a href=\"#表单提示信息\" class=\"headerlink\" title=\"表单提示信息\"></a>表单提示信息</h2><p>平常在制作表单验证时, 要提供不同的提示信息. 在Bootstrap框架中也提供了这样的效果. 使用了一个”help-block”样式, 将提示信息以块状显示, 并且显示在控件底部.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"form-group has-success has-feedback\"</span>&gt;</div><div class=\"line\">  &lt;label class=<span class=\"string\">\"control-label\"</span> <span class=\"keyword\">for</span>=<span class=\"string\">\"inputSuccess1\"</span>&gt;成功状态&lt;/label&gt;</div><div class=\"line\">  &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> class=<span class=\"string\">\"form-control\"</span> id=<span class=\"string\">\"inputSuccess1\"</span> placeholder=<span class=\"string\">\"成功状态\"</span> &gt;</div><div class=\"line\">  &lt;span class=<span class=\"string\">\"help-block\"</span>&gt;你输入的信息是正确的&lt;/span&gt;</div><div class=\"line\">  &lt;span class=<span class=\"string\">\"glyphicon glyphicon-ok form-control-feedback\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"按钮\"><a href=\"#按钮\" class=\"headerlink\" title=\"按钮\"></a>按钮</h2><p><strong>请始终为按钮规定 type 属性</strong>. Internet Explorer 的默认类型是 “button”, 而其他浏览器中(包括 W3C 规范)的默认值是 “submit”.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;button class=<span class=\"string\">\"btn\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;基础按钮.btn&lt;/button&gt;  </div><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-default\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;默认按钮.btn-default&lt;/button&gt; </div><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-primary\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;主要按钮.btn-primary&lt;/button&gt; </div><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-success\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;成功按钮.btn-success&lt;/button&gt; </div><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-info\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;信息按钮.btn-info&lt;/button&gt; </div><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-warning\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;警告按钮.btn-warning&lt;/button&gt; </div><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-danger\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;危险按钮.btn-danger&lt;/button&gt; </div><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-link\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;链接按钮.btn-link&lt;/button&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"默认按钮\"><a href=\"#默认按钮\" class=\"headerlink\" title=\"默认按钮\"></a>默认按钮</h3><p>Bootstrap框架首先通过基础类名“.btn”定义了一个基础的按钮风格, 然后通过“.btn-default”定义了一个默认的按钮风格. 默认按钮的风格就是在基础按钮的风格的基础上修改了按钮的背景颜色、边框颜色和文本颜色. 使用默认按钮风格也非常的简单, 只需要在基础按钮“btn”的基础上增加类名“btn-default”即可</p>\n<h3 id=\"多标签支持\"><a href=\"#多标签支持\" class=\"headerlink\" title=\"多标签支持\"></a>多标签支持</h3><p>虽然在Bootstrap框架中使用任何标签元素都可以实现按钮风格, 但个人并不建议这样使用, 为了避免浏览器兼容性问题, 个人强烈建议使用button或a标签来制作按钮. </p>\n<h3 id=\"定制风格\"><a href=\"#定制风格\" class=\"headerlink\" title=\"定制风格\"></a>定制风格</h3><p>在介绍按钮开篇就说过, Web页面可能会有不同的按钮风格. 那么在Bootstrap框架也考虑了. 在Bootstrap框架中除了默认的按钮风格之外, 还有其他六种按钮风格, 每种风格的其实都一样, 不同之处就是按钮的背景颜色、边框颜色和文本颜色. </p>\n<h3 id=\"按钮大小\"><a href=\"#按钮大小\" class=\"headerlink\" title=\"按钮大小\"></a>按钮大小</h3><p>在Bootstrap框架中, 对于按钮的大小, 也是可以定制的. 类似于input一样, 通过在基础按钮“.btn”的基础上追加类名来控制按钮的大小.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-primary btn-lg\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;大型按钮.btn-lg&lt;/button&gt; </div><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-primary\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;正常按钮&lt;/button&gt;</div><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-primary btn-xs\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;小型按钮.btn-sm&lt;/button&gt;</div><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-primary btn-xs\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;小型按钮.btn-sm&lt;/button&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"块状按钮\"><a href=\"#块状按钮\" class=\"headerlink\" title=\"块状按钮\"></a>块状按钮</h3><p>Bootstrap框架中提供了一个类名“btn-block”. 按钮使用这个类名就可以让按钮充满整个容器, 并且这个按钮不会有任何的padding和margin值. 在实际当中, 常把这种按钮称为块状按钮. </p>\n<h3 id=\"按钮状态——活动状态\"><a href=\"#按钮状态——活动状态\" class=\"headerlink\" title=\"按钮状态——活动状态\"></a>按钮状态——活动状态</h3><p>Bootstrap框架针对按钮的状态做了一些特殊处理. 在Bootstrap框架中针对按钮的状态效果主要分为两种：活动状态和禁用状态. Bootstrap按钮的活动状态主要包括按钮的悬浮状态(:hover), 点击状态(:active)和焦点状态(:focus)几种. 而且不同风格下的按钮都具有这几种状态效果, 只是颜色做了一定的调整.当按钮处理正在点击状态(也就是鼠标按下的未松开的状态), <strong>对于&lt;button&gt;元素是通过“:active”伪类实现</strong>, <strong>而对于&lt;a&gt;这样的标签元素则是通过添加类名“.active”来实现</strong>. </p>\n<h3 id=\"按钮状态——禁用状态\"><a href=\"#按钮状态——禁用状态\" class=\"headerlink\" title=\"按钮状态——禁用状态\"></a>按钮状态——禁用状态</h3><p>和input等表单控件一样, 在Bootstrap框架的按钮中也具有禁用状态的设置. 禁用状态与其他状态按钮相比, 就是背景颜色的透明度做了一定的处理, opcity的值从100%调整为65%. 在Bootstrap框架中, 要禁用按钮有两种实现方式：<br>方法1: 在标签中添加disabled属性<br>方法2: 在元素标签中添加类名“disabled”</p>\n<h2 id=\"图像\"><a href=\"#图像\" class=\"headerlink\" title=\"图像\"></a>图像</h2><p>图像在网页制作中也是常要用到的元素, 在Bootstrap框架中对于图像的样式风格提供以下几种风格：<br>1、img-responsive：响应式图片, 主要针对于响应式设计<br>2、img-rounded: 圆角图片<br>3、img-circle: 圆形图片<br>4、img-thumbnail: 缩略图片<br>使用方法非常简单, 只需要在&lt;img&gt;标签上添加对应的类名.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;img  alt=<span class=\"string\">\"140x140\"</span> src=<span class=\"string\">\"http://placehold.it/140x140\"</span>&gt;</div><div class=\"line\">&lt;img  class=<span class=\"string\">\"img-rounded\"</span> alt=<span class=\"string\">\"140x140\"</span> src=<span class=\"string\">\"http://placehold.it/140x140\"</span>&gt;</div><div class=\"line\">&lt;img  class=<span class=\"string\">\"img-circle\"</span> alt=<span class=\"string\">\"140x140\"</span> src=<span class=\"string\">\"http://placehold.it/140x140\"</span>&gt;</div><div class=\"line\">&lt;img  class=<span class=\"string\">\"img-thumbnail\"</span> alt=<span class=\"string\">\"140x140\"</span> src=<span class=\"string\">\"http://placehold.it/140x140\"</span>&gt;</div><div class=\"line\">&lt;img  class=<span class=\"string\">\"img-responsive\"</span> alt=<span class=\"string\">\"140x140\"</span> src=<span class=\"string\">\"http://placehold.it/140x140\"</span>&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"图标\"><a href=\"#图标\" class=\"headerlink\" title=\"图标\"></a>图标</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;span class=<span class=\"string\">\"glyphicon glyphicon-search\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">&lt;span class=<span class=\"string\">\"glyphicon glyphicon-asterisk\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">&lt;span class=<span class=\"string\">\"glyphicon glyphicon-plus\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">&lt;span class=<span class=\"string\">\"glyphicon glyphicon-cloud\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">&lt;span class=<span class=\"string\">\"glyphicon glyphicon-phone\"</span>&gt;&lt;/span&gt;</div></pre></td></tr></table></figure>\n<p>在网页中使用图标也非常的简单, 在任何内联元素上应用所对应的样式即可.所有icon都是以”glyphicon-”前缀的类名开始, 然后后缀表示图标的名称. </p>\n<hr>\n<h1 id=\"网格系统\"><a href=\"#网格系统\" class=\"headerlink\" title=\"网格系统\"></a>网格系统</h1><p>网格系统的实现原理非常简单, 仅仅是通过定义容器大小, 平分12份(也有平分成24份或32份, 但12份是最常见的), 再调整内外边距, 最后结合媒体查询, 就制作出了强大的响应式网格系统. Bootstrap框架中的网格系统就是将容器平分成12份<br>Bootstrap框架的网格系统工作原理如下：<br>1、<strong>数据行(.row)</strong>必须包含在容器(.container)中, 以便为其赋予合适的对齐方式和内距(padding). 如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"container\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"row\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>2、在行(.row)中可以添加列(.column), 但列数之和不能超过平分的总列数, 比如12. 如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"container\"</span>&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"row\"</span>&gt;</div><div class=\"line\">\t\t&lt;div class=<span class=\"string\">\"col-md-4\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">\t\t&lt;div class=<span class=\"string\">\"col-md-8\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">\t&lt;div&gt;</div><div class=\"line\">&lt;div&gt;</div></pre></td></tr></table></figure></p>\n<p>3、具体内容应当放置在列容器(column)之内, 而且<strong>只有列(column)才可以作为行容器(.row)的直接子元素</strong><br>4、通过设置内距(padding)从而创建列与列之间的间距. 然后通过为第一列和最后一列设置负值的外距(margin)来抵消内距(padding)的影响</p>\n<h2 id=\"列偏移\"><a href=\"#列偏移\" class=\"headerlink\" title=\"列偏移\"></a>列偏移</h2><p>有的时候, 我们不希望相邻的两个列紧靠在一起, 但又不想使用margin或者其他的技术手段来. 这个时候就可以使用列偏移(offset)功能来实现. 使用列偏移也非常简单, 只需要在列元素上添加类名“col-md-offset-<em>” (其中星号代表要偏移的列组合数), 那么具有这个类名的列就会向右偏移. 例如, 你在列元素上添加“col-md-offset-4”, 表示该列向右移动4个列的宽度. 不过有一个细节需要注意, 使用 ”col-md-offset-</em>” 对列进行向右偏移时, 要保证列与偏移列的总数不超过12, 不然会致列断行显示.</p>\n<h2 id=\"列排序\"><a href=\"#列排序\" class=\"headerlink\" title=\"列排序\"></a>列排序</h2><p>列排序其实就是改变列的方向, 就是改变左右浮动, 并且设置浮动的距离. 在Bootstrap框架的网格系统中是通过添加类名“col-md-push-<em>”(向右)和“col-md-pull-</em>”(向左) (其中星号代表移动的列组合数). </p>\n<h2 id=\"列的嵌套\"><a href=\"#列的嵌套\" class=\"headerlink\" title=\"列的嵌套\"></a>列的嵌套</h2><p>Bootstrap框架的网格系统还支持列的嵌套. 你可以在一个列中添加一个或者多个行(row)容器, 然后在这个行容器中插入列(像前面介绍的一样使用列). 但在列容器中的行容器(row), 宽度为100%时, 就是当前外部列的宽度.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"row\"</span>&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"col-md-8\"</span>&gt;</div><div class=\"line\">\t我的里面嵌套了一个网格</div><div class=\"line\">\t\t&lt;div class=<span class=\"string\">\"row\"</span>&gt;</div><div class=\"line\">\t\t\t&lt;div class=<span class=\"string\">\"col-md-6\"</span>&gt;col-md-6&lt;/div&gt;</div><div class=\"line\">\t\t\t&lt;div class=<span class=\"string\">\"col-md-6\"</span>&gt;col-md-6&lt;/div&gt;</div><div class=\"line\">\t\t&lt;/div&gt;</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"菜单、按钮和导航\"><a href=\"#菜单、按钮和导航\" class=\"headerlink\" title=\"菜单、按钮和导航\"></a>菜单、按钮和导航</h1><p>在Bootstrap框架中的下拉菜单组件是一个独立的组件, 根据不同的版本, 它对应的文件. 在使用Bootstrap框架的下拉菜单时, 必须调用Bootstrap框架提供的bootstrap.js文件. 当然, 如果你使用的是未编译版本, 在js文件夹下你能找到一个名为“dropdown.js”的文件. 你也可以调用这个js文件.<br><span style=\"color:red;\">特别声明</span>：因为Bootstrap的组件交互效果都是依赖于jQuery库写的插件, 所以在使用bootstrap.min.js之前一定要先加载jquery.min.js才会生效果. </p>\n<h2 id=\"下拉菜单\"><a href=\"#下拉菜单\" class=\"headerlink\" title=\"下拉菜单\"></a>下拉菜单</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"dropdown\"</span>&gt;</div><div class=\"line\">\t&lt;button class=<span class=\"string\">\"btn btn-default dropdown-toggle\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span></div><div class=\"line\">\t\tid=<span class=\"string\">\"dropdownMenu1\"</span> data-toggle=<span class=\"string\">\"dropdown\"</span>&gt;</div><div class=\"line\">\t\t下拉菜单</div><div class=\"line\">\t\t&lt;span class=<span class=\"string\">\"caret\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">\t&lt;/button&gt;</div><div class=\"line\">\t&lt;ul class=<span class=\"string\">\"dropdown-menu\"</span> role=<span class=\"string\">\"menu\"</span> aria-labelledby=<span class=\"string\">\"dropdownMenu1\"</span>&gt;</div><div class=\"line\">\t\t&lt;li role=<span class=\"string\">\"presentation\"</span>&gt;&lt;a role=<span class=\"string\">\"menuitem\"</span> tabindex=<span class=\"string\">\"-1\"</span> href=<span class=\"string\">\"#\"</span>&gt;</div><div class=\"line\">\t\t\t下拉菜单项&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li role=<span class=\"string\">\"presentation\"</span> class=<span class=\"string\">\"divider\"</span>&gt;&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li role=<span class=\"string\">\"presentation\"</span>&gt;&lt;a role=<span class=\"string\">\"menuitem\"</span> tabindex=<span class=\"string\">\"-1\"</span> href=<span class=\"string\">\"#\"</span>&gt;</div><div class=\"line\">\t\t\t下拉菜单项&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t&lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>使用方法：在使用Bootstrap框架中的下拉菜单组件时, 其结构运用的正确与否非常的重要, 如果结构和类名未使用正确, 直接影响组件是否能正常运用. 我们来简单的看看：<br>1、使用一个名为“dropdown”的容器包裹了整个下拉菜单元素, 示例中为:&lt;div class=”dropdown”&gt;&lt;/div&gt;<br>2、使用了一个&lt;button&gt;按钮做为父菜单, 并且定义类名“dropdown-toggle”和自定义“data-toggle”属性, 属性指明触发后的动作：data-toggle=”dropdown”<br>3、下拉菜单项使用一个ul列表, 并且定义一个类名为“dropdown-menu”, 此示例为:<br>&lt;ul class=”dropdown-menu”&gt;</p>\n<h3 id=\"下拉菜单-下拉分隔线\"><a href=\"#下拉菜单-下拉分隔线\" class=\"headerlink\" title=\"下拉菜单(下拉分隔线)\"></a>下拉菜单(下拉分隔线)</h3><p>在Bootstrap框架中的下拉菜单还提供了下拉分隔线, 假设下拉菜单有两个组, 那么组与组之间可以通过添加一个空的&lt;li&gt;, 并且给这个&lt;li&gt;添加类名“divider”来实现添加下拉分隔线的功能. </p>\n<h3 id=\"下拉菜单-菜单标题\"><a href=\"#下拉菜单-菜单标题\" class=\"headerlink\" title=\"下拉菜单(菜单标题)\"></a>下拉菜单(菜单标题)</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;li role=<span class=\"string\">\"presentation\"</span> class=<span class=\"string\">\"dropdown-header\"</span>&gt;第一部分菜单头部&lt;/li&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"下拉菜单-对齐方式\"><a href=\"#下拉菜单-对齐方式\" class=\"headerlink\" title=\"下拉菜单(对齐方式)\"></a>下拉菜单(对齐方式)</h3><p>Bootstrap框架中下拉菜单默认是左对齐, 如果你想让下拉菜单相对于父容器右对齐时, 可以在“dropdown-menu”上添加一个“pull-right”或者“dropdown-menu-right”类名</p>\n<h3 id=\"下拉菜单-菜单项状态\"><a href=\"#下拉菜单-菜单项状态\" class=\"headerlink\" title=\"下拉菜单(菜单项状态)\"></a>下拉菜单(菜单项状态)</h3><p>下拉菜单项的默认的状态(不用设置)有悬浮状态(:hover)和焦点状态(:focus).下拉菜单项除了上面两种状态, 还有当前状态(.active)和禁用状态(.disabled). 这两种状态使用方法只需要在对应的菜单项上添加对应的类名</p>\n<h2 id=\"按钮-按钮组\"><a href=\"#按钮-按钮组\" class=\"headerlink\" title=\"按钮(按钮组)\"></a>按钮(按钮组)</h2><p>按钮组和下拉菜单组件一样, 需要依赖于button.js插件才能正常运行. 不过我们同样可以直接只调用bootstrap.js文件. 因为这个文件已集成了button.js插件功能. 对于结构方面, 非常的简单. 使用一个名为“btn-group”的容器, 把多个按钮放到这个容器中.btn-group 主要使自身容器为内联块, 使内部 .btn 左浮. 如下所示：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"btn-group\"</span>&gt;</div><div class=\"line\">  &lt;button <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> class=<span class=\"string\">\"btn btn-default\"</span>&gt;</div><div class=\"line\">    &lt;span class=<span class=\"string\">\"glyphicon glyphicon-step-backward\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">  &lt;/button&gt;</div><div class=\"line\">  &lt;button <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> class=<span class=\"string\">\"btn btn-default\"</span>&gt;</div><div class=\"line\">    &lt;span class=<span class=\"string\">\"glyphicon glyphicon-step-forward\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">  &lt;/button&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>除了可以使用&lt;button&gt;元素之外, 还可以使用其他标签元素, 比如&lt;a&gt;标签. 唯一要保证的是：不管使用什么标签, “.btn-group”容器里的标签元素需要带有类名“.btn”. </p>\n<h3 id=\"按钮-按钮工具栏\"><a href=\"#按钮-按钮工具栏\" class=\"headerlink\" title=\"按钮(按钮工具栏)\"></a>按钮(按钮工具栏)</h3><p>在富文本编辑器中, 将按钮组分组排列在一起,比如说复制、剪切和粘贴一组；左对齐、中间对齐、右对齐和两端对齐一组,那么Bootstrap框架按钮工具栏也提供了这样的制作方法,你只需要将按钮组“btn-group”按组放在一个大的容器“btn-toolbar”中, 如下所示：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"btn-toolbar\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"btn-group\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"btn-group\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"btn-group\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>实现原理主要是让容器的多个分组“btn-group”元素进行浮动, 并且组与组之前保持5px的左外距.</p>\n<h3 id=\"按钮组大小设置\"><a href=\"#按钮组大小设置\" class=\"headerlink\" title=\"按钮组大小设置\"></a>按钮组大小设置</h3><p>在介绍按钮一节中, 我们知道按钮是通过btn-lg、btn-sm和btn-xs三个类名来调整padding、font-size、line-height和border-radius属性值来改变按钮大小. 那么按钮组的大小, 我们也可以通过类似的方法：<br>☑  .btn-group-lg:大按钮组<br>☑  .btn-group-sm:小按钮组<br>☑  .btn-group-xs:超小按钮组<br>只需要在“.btn-group”类名上追加对应的类名, 就可以得到不同大小的按钮组. 如下所示：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"btn-toolbar\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"btn-group btn-group-lg\"</span>&gt;</div><div class=\"line\">    …</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"btn-group\"</span>&gt;</div><div class=\"line\">  …</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"btn-group btn-group-sm\"</span>&gt;</div><div class=\"line\">    …</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"btn-group btn-group-xs\"</span>&gt;</div><div class=\"line\">   …</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"按钮-嵌套分组\"><a href=\"#按钮-嵌套分组\" class=\"headerlink\" title=\"按钮(嵌套分组)\"></a>按钮(嵌套分组)</h3><p>很多时候, 我们常把下拉菜单和普通的按钮组排列在一起, 实现类似于导航菜单的效果. 使用的时候, 只需要把当初制作下拉菜单的“dropdown”的容器换成“btn-group”, 并且和普通的按钮放在同一级.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"btn-group\"</span>&gt;</div><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-default\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;首页&lt;/button&gt;</div><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-default\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;产品展示&lt;/button&gt;</div><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-default\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;案例分析&lt;/button&gt;</div><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-default\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;联系我们&lt;/button&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"btn-group\"</span>&gt;</div><div class=\"line\">  &lt;button class=<span class=\"string\">\"btn btn-default dropdown-toggle\"</span> data-toggle=<span class=\"string\">\"dropdown\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;关于我们&lt;span class=<span class=\"string\">\"caret\"</span>&gt;&lt;/span&gt;&lt;/button&gt;</div><div class=\"line\">  &lt;ul class=<span class=\"string\">\"dropdown-menu\"</span>&gt;</div><div class=\"line\">\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;公司简介&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;企业文化&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;组织结构&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;客服服务&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t&lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"按钮-等分按钮\"><a href=\"#按钮-等分按钮\" class=\"headerlink\" title=\"按钮(等分按钮)\"></a>按钮(等分按钮)</h3><p>等分按钮的效果在移动端上特别的实用. 整个按钮组宽度是容器的100%, 而按钮组里面的每个按钮平分整个容器宽度. 例如, 如果你按钮组里面有五个按钮, 那么每个按钮是20%的宽度, 如果有四个按钮, 那么每个按钮是25%宽度, 以此类推.等分按钮也常被称为是自适应分组按钮, 其实现方法也非常的简单, 只需要在按钮组“btn-group”上追加一个“btn-group-justified”类名, 如下所示：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"btn-group btn-group-justified\"</span>&gt;</div><div class=\"line\">  &lt;a class=<span class=\"string\">\"btnbtn-default\"</span> href=<span class=\"string\">\"#\"</span>&gt;首页&lt;/a&gt;</div><div class=\"line\">  &lt;a class=<span class=\"string\">\"btnbtn-default\"</span> href=<span class=\"string\">\"#\"</span>&gt;产品展示&lt;/a&gt;</div><div class=\"line\">  &lt;a class=<span class=\"string\">\"btnbtn-default\"</span> href=<span class=\"string\">\"#\"</span>&gt;案例分析&lt;/a&gt;</div><div class=\"line\">  &lt;a class=<span class=\"string\">\"btnbtn-default\"</span> href=<span class=\"string\">\"#\"</span>&gt;联系我们&lt;/a&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>在制作等分按钮组时, 请尽量使用&lt;a&gt;标签元素来制作按钮</strong>, 因为使用&lt;button&gt;标签元素时, 使用display:table在部分浏览器下支持并不友好. </p>\n<h3 id=\"按钮-垂直分组\"><a href=\"#按钮-垂直分组\" class=\"headerlink\" title=\"按钮(垂直分组)\"></a>按钮(垂直分组)</h3><p>前面看到的示例, 按钮组都是水平显示的. 但在实际运用当中, 总会碰到垂直显示的效果. 在Bootstrap框架中也提供了这样的风格. 我们只需要把水平分组的“btn-group”类名<strong>换成</strong>“btn-group-vertical”即可. </p>\n<h2 id=\"按钮下拉菜单\"><a href=\"#按钮下拉菜单\" class=\"headerlink\" title=\"按钮下拉菜单\"></a>按钮下拉菜单</h2><p>按钮下拉菜单仅从外观上看和上一节介绍的下拉菜单效果基本上是一样的. 不同的是在普通的下拉菜单的基础上<strong>封装了按钮(.btn)样式效果</strong>. 简单点说就是点击一个按钮, 会显示隐藏的下拉菜单. 按钮下拉菜单其实就是普通的下拉菜单, 只不过把“&lt;a&gt;”标签元素换成了“&lt;button&gt;”标签元素. 唯一不同的是外部容器“div.dropdown”换成了“div.btn-group”.<br>.btn-group 元素是内联元素 .dropdown 元素是块状元素<br>按钮的向下向上三角形:按钮的向下三角形, 我们是通过在&lt;button&gt;标签中添加一个“&lt;span&gt;”标签元素, 并且命名为“caret”:<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-default dropdown-toggle\"</span> data-toggle=<span class=\"string\">\"dropdown\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;</div><div class=\"line\">\t按钮下拉菜单&lt;span class=<span class=\"string\">\"caret\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">&lt;/button&gt;</div></pre></td></tr></table></figure></p>\n<p>有的时候我们的下拉菜单会向上弹起(接下来一个小节会介绍), 这个时候我们的三角方向需要朝上显示, 实现方法：需要在“.btn-group”类上<strong>追加</strong>“dropup”类名(这也是做向上弹起下拉菜单要用的类名). </p>\n<h2 id=\"向上弹起的下拉菜单\"><a href=\"#向上弹起的下拉菜单\" class=\"headerlink\" title=\"向上弹起的下拉菜单\"></a>向上弹起的下拉菜单</h2><p>有些菜单是需要向上弹出的, 比如说你的菜单在页面最底部, 而这个菜单正好有一个下拉菜单, 为了让用户有更好的体验, 不得不让下拉菜单向上弹出. 在Bootstrap框架中专门为这种效果提代了一个类名“dropup”. 使用方法正如前面所示, 只需要在“btn-group”上添加这个类名(当然, 如果是普通向上弹出下拉菜单, 你只需要在“dropdown”类名基础上追加“dropup”类名即可). </p>\n<p>小笔记:<br>1.实现普通下拉菜单：.dropdown&gt;button.dropdown-toggle[data-toggle=”dropdown”]+ul.dropdown-menu;<br>2.按钮下拉菜单：把.dropdown换成.btn-group即可.<br>3.下拉菜单变上拉菜单：.dropdown.dropup或.btn-group.dropup<br>4.下拉菜单通过绝对定位实现, 可通过设置top,bottom,left,right改变下拉菜单出现的位置.<br>5.dropdown-header,li.divider,li.active,li.disabled</p>\n<h2 id=\"导航-基础样式\"><a href=\"#导航-基础样式\" class=\"headerlink\" title=\"导航(基础样式)\"></a>导航(基础样式)</h2><p>Bootstrap框架中制作导航条主要通过“.nav”样式. 默认的“.nav”样式不提供默认的导航样式, 必须附加另外一个样式才会有效, 比如“nav-tabs”、“nav-pills”之类. 比如有一个tab导航条的例子, 他的实现方法就是为ul标签加入.nav和nav-tabs两个类样式.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;ul class=<span class=\"string\">\"nav nav-tabs\"</span>&gt;</div><div class=\"line\">  &lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;Home&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">  &lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;CSS3&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\"> \t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;Sass&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\"> \t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;jQuery&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\"> \t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;Responsive&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"导航-标签形tab导航\"><a href=\"#导航-标签形tab导航\" class=\"headerlink\" title=\"导航(标签形tab导航)\"></a>导航(标签形tab导航)</h3><p>标签形导航, 也称为选项卡导航. 特别是在很多内容分块显示的时, 使用这种选项卡来分组十分适合.标签形导航是通过“nav-tabs”样式来实现.在制作标签形导航时需要在原导航“nav”上追加此类名.其实上例的效果和我们平时看到的选项卡效果并不一致. 一般情况之下, 选项卡教会有一个当前选中项. 其实在Bootstrap框架也相应提供了. 假设我们想让“Home”项为当前选中项, 只需要在其标签上添加类名“active”即可; 除了当前项之外, 有的选项卡还带有禁用状态, 实现这样的效果, 只需要在标签项上添加“disabled”即可.</p>\n<h3 id=\"导航-胶囊形-pills-导航\"><a href=\"#导航-胶囊形-pills-导航\" class=\"headerlink\" title=\"导航(胶囊形(pills)导航)\"></a>导航(胶囊形(pills)导航)</h3><p>胶囊形(pills)导航听起来有点别扭, 因为其外形看起来有点像胶囊形状. 但其更像我们平时看到的大众形导航. 当前项高亮显示, 并带有圆角效果. 其实现方法和“nav-tabs”类似,同样的结构, 只需要把类名“nav-tabs”换成“nav-pills”即可.</p>\n<h3 id=\"导航-垂直堆叠的导航\"><a href=\"#导航-垂直堆叠的导航\" class=\"headerlink\" title=\"导航(垂直堆叠的导航)\"></a>导航(垂直堆叠的导航)</h3><p>在实际运用当中, 除了水平导航之外, 还有垂直导航, 就类似前面介绍的垂直排列按钮一样. 制作<strong>垂直堆叠导航只需要在“nav-pills”的基础上添加一个“nav-stacked”类名</strong>即可.<br>大家是否还记得, 在下拉菜单一节中, 下拉菜单组与组之间有一个分隔线. 其实在垂直堆叠导航也具有这样的效果, 只需要添加在导航项之间添加“&lt;li class=”nav-divider”&gt;&lt;/li&gt;”即可</p>\n<h3 id=\"自适应导航\"><a href=\"#自适应导航\" class=\"headerlink\" title=\"自适应导航\"></a>自适应导航</h3><p>自适应导航指的是导航占据容器全部宽度, 而且菜单项可以像表格的单元格一样自适应宽度. 自适应导航和前面使用“btn-group-justified”制作的自适应按钮组是一样的. 只不过在制作自适应导航时更换了另一个类名“nav-justified”. 当然他需要和“nav-tabs”或者“nav-pills”配合在一起使用. 如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;ul class=<span class=\"string\">\"nav nav-tabs nav-justified\"</span>&gt;</div><div class=\"line\">\t&lt;li class=<span class=\"string\">\"active\"</span>&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;Home&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;CSS3&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;Sass&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;jQuery&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;Responsive&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"导航加下拉菜单-二级导航\"><a href=\"#导航加下拉菜单-二级导航\" class=\"headerlink\" title=\"导航加下拉菜单(二级导航)\"></a>导航加下拉菜单(二级导航)</h2><p>在Bootstrap框架中制作二级导航就更容易了. 只需要将li当作父容器, 使用类名“dropdown”, 同时在li中嵌套另一个列表ul, 使用前面介绍下拉菜单的方法就可以：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;ul class=<span class=\"string\">\"nav nav-pills\"</span>&gt;</div><div class=\"line\">\t&lt;li class=<span class=\"string\">\"active\"</span>&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;首页&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t&lt;li class=<span class=\"string\">\"dropdown\"</span>&gt;</div><div class=\"line\">\t\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"dropdown-toggle\"</span> data-toggle=<span class=\"string\">\"dropdown\"</span>&gt;教程&lt;span class=<span class=\"string\">\"caret\"</span>&gt;&lt;/span&gt;&lt;/a&gt;</div><div class=\"line\">\t\t\t&lt;ul class=<span class=\"string\">\"dropdown-menu\"</span>&gt;</div><div class=\"line\">\t\t\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;CSS3&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">            …</div><div class=\"line\">\t\t\t&lt;/ul&gt;</div><div class=\"line\">\t&lt;/li&gt;</div><div class=\"line\">\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;关于我们&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"面包屑式导航\"><a href=\"#面包屑式导航\" class=\"headerlink\" title=\"面包屑式导航\"></a>面包屑式导航</h2><p>面包屑(Breadcrumb)一般用于导航, 主要是起的作用是告诉用户现在所处页面的位置(当前位置). 在Bootstrap框架中面包屑也是一个独立模块组件<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;ol class=<span class=\"string\">\"breadcrumb\"</span>&gt;</div><div class=\"line\">  &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;首页&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">  &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;我的书&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">  &lt;li class=<span class=\"string\">\"active\"</span>&gt;《图解CSS3》&lt;/li&gt;</div><div class=\"line\">&lt;/ol&gt;</div></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"导航条-分页导航\"><a href=\"#导航条-分页导航\" class=\"headerlink\" title=\"导航条,分页导航\"></a>导航条,分页导航</h1><h2 id=\"导航条基础\"><a href=\"#导航条基础\" class=\"headerlink\" title=\"导航条基础\"></a>导航条基础</h2><p>导航条(navbar)和上一节介绍的导航(nav), 就相差一个字, 多了一个“条”字. 其实在Bootstrap框架中他们还是明显的区别. 在导航条(navbar)中有一个<strong>背景色、而且导航条可以是纯链接(类似导航), 也可以是表单, 还有就是表单和导航一起结合等多种形式</strong>. 在这一节中将一起探讨Bootstrap框架中导航条的使用.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;!--基本导航条--&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"navbar navbar-default\"</span> role=<span class=\"string\">\"navigation\"</span>&gt;</div><div class=\"line\">\t&lt;ul class=<span class=\"string\">\"nav navbar-nav\"</span>&gt;</div><div class=\"line\">\t\t&lt;li class=<span class=\"string\">\"active\"</span>&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;网站首页&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;系列教程&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;名师介绍&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;成功案例&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;关于我们&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t&lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"navbar navbar-default\"</span> role=<span class=\"string\">\"navigation\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"navbar-header\"</span>&gt;</div><div class=\"line\">  　 &lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"navbar-brand\"</span>&gt;慕课网&lt;/a&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;ul class=<span class=\"string\">\"nav navbar-nav\"</span>&gt;</div><div class=\"line\">\t  &lt;li class=<span class=\"string\">\"active\"</span>&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;网站首页&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">      &lt;li class=<span class=\"string\">\"dropdown\"</span>&gt;</div><div class=\"line\">        &lt;a href=<span class=\"string\">\"##\"</span> data-toggle=<span class=\"string\">\"dropdown\"</span> class=<span class=\"string\">\" dropdown-toggle\"</span>&gt;系列教程&lt;span class=<span class=\"string\">\"caret\"</span>&gt;&lt;/span&gt;&lt;/a&gt;</div><div class=\"line\">        &lt;ul class=<span class=\"string\">\"dropdown-menu\"</span>&gt;</div><div class=\"line\">        \t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;CSS3&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">        \t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;JavaScript&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">        \t&lt;li class=<span class=\"string\">\"\"</span>&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;PHP&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">        &lt;/ul&gt;</div><div class=\"line\">     &lt;/li&gt;</div><div class=\"line\">      &lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;名师介绍&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">      &lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;成功案例&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">      &lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;关于我们&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t  &lt;/ul&gt;</div><div class=\"line\">  &lt;form action=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"navbar-form navbar-left\"</span> rol=<span class=\"string\">\"search\"</span>&gt;</div><div class=\"line\">   \t&lt;div class=<span class=\"string\">\"form-group\"</span>&gt;</div><div class=\"line\">   \t\t&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> class=<span class=\"string\">\"form-control\"</span> placeholder=<span class=\"string\">\"请输入关键词\"</span> /&gt;</div><div class=\"line\">   \t&lt;/div&gt;</div><div class=\"line\">      &lt;button <span class=\"built_in\">type</span>=<span class=\"string\">\"submit\"</span> class=<span class=\"string\">\"btn btn-default\"</span>&gt;搜索&lt;/button&gt;</div><div class=\"line\">    &lt;/form&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"基础导航条\"><a href=\"#基础导航条\" class=\"headerlink\" title=\"基础导航条\"></a>基础导航条</h2><p>在Bootstrap框中, 导航条和导航从外观上差别不是太多, 但在实际使用中导航条要比导航复杂得多. 我们先来看导航条中最基础的一个——基础导航条.<br>第一步：首先在制作导航的列表(&lt;ul class=”nav”&gt;)基础上添加类名“navbar-nav”<br>第二步：在列表外部添加一个容器(div), 并且使用类名“navbar”和“navbar-default”</p>\n<h2 id=\"为导航条添加标题、二级菜单及状态\"><a href=\"#为导航条添加标题、二级菜单及状态\" class=\"headerlink\" title=\"为导航条添加标题、二级菜单及状态\"></a>为导航条添加标题、二级菜单及状态</h2><h3 id=\"加入导航条标题\"><a href=\"#加入导航条标题\" class=\"headerlink\" title=\"加入导航条标题\"></a>加入导航条标题</h3><p>在Web页面制作中, 常常在菜单前面都会有一个标题(文字字号比其它文字稍大一些), 其实在Bootstrap框架也为大家做了这方面考虑, 其通过“navbar-header”和“navbar-brand”来实现.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"navbar-header\"</span>&gt;</div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"navbar-brand\"</span>&gt;慕课网&lt;/a&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"导航条状态、二级菜单\"><a href=\"#导航条状态、二级菜单\" class=\"headerlink\" title=\"导航条状态、二级菜单\"></a>导航条状态、二级菜单</h3><p>同样的, 在基础导航条中对菜单提供了当前状态, 禁用状态, 悬浮状态等效果, 而且也可以带有二级菜单的导航条<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;!--导航条状态及二级菜单--&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"navbar navbar-default\"</span> role=<span class=\"string\">\"navigation\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"navbar-header\"</span>&gt;</div><div class=\"line\">  　&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"navbar-brand\"</span>&gt;慕课网&lt;/a&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">\t&lt;ul class=<span class=\"string\">\"nav navbar-nav\"</span>&gt;</div><div class=\"line\">\t \t&lt;li class=<span class=\"string\">\"active\"</span>&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;网站首页&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">        &lt;li class=<span class=\"string\">\"dropdown\"</span>&gt;</div><div class=\"line\">          &lt;a href=<span class=\"string\">\"##\"</span> data-toggle=<span class=\"string\">\"dropdown\"</span> class=<span class=\"string\">\"dropdown-toggle\"</span>&gt;系列教程&lt;span class=<span class=\"string\">\"caret\"</span>&gt;&lt;/span&gt;&lt;/a&gt;</div><div class=\"line\">          &lt;ul class=<span class=\"string\">\"dropdown-menu\"</span>&gt;</div><div class=\"line\">\t\t\t\t\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;CSS3&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t\t\t\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;JavaScript&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t\t\t\t\t&lt;li class=<span class=\"string\">\"disabled\"</span>&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;PHP&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">          &lt;/ul&gt;</div><div class=\"line\">\t\t\t\t&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;名师介绍&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li class=<span class=\"string\">\"active\"</span>&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;成功案例&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;关于我们&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t&lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>注意: a 中类不要加 btn ,否则样式不一致.</strong></p>\n<h2 id=\"带表单的导航条\"><a href=\"#带表单的导航条\" class=\"headerlink\" title=\"带表单的导航条\"></a>带表单的导航条</h2><p>在Bootstrap框架中提供了一个“navbar-form”, 使用方法很简单, 在navbar容器中放置一个带有navbar-form类名的表单.大家看到了“navbar-left”让表单左浮动, 更好实现对齐. 在Bootstrap框架中, 还提供了“navbar-right”样式, 让元素在导航条靠右对齐. </p>\n<h2 id=\"导航条中的按钮、文本和链接\"><a href=\"#导航条中的按钮、文本和链接\" class=\"headerlink\" title=\"导航条中的按钮、文本和链接\"></a>导航条中的按钮、文本和链接</h2><p>Bootstrap框架的导航条中除了使用navbar-brand中的a元素和navbar-nav的ul和navbar-form之外, 还可以使用其他元素. 框架提供了三种其他样式<br>1、导航条中的按钮navbar-btn<br>2、导航条中的文本navbar-text<br>3、导航条中的普通链接navbar-link</p>\n<h2 id=\"固定导航条\"><a href=\"#固定导航条\" class=\"headerlink\" title=\"固定导航条\"></a>固定导航条</h2><p>使用方法很简单, 只需要在制作导航条最外部容器navbar上追加对应的类名即可：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"navbar navbar-default navbar-fixed-top\"</span> role=<span class=\"string\">\"navigation\"</span>&gt; 或</div><div class=\"line\">&lt;div class=<span class=\"string\">\"navbar navbar-default navbar-fixed-bottom\"</span> role=<span class=\"string\">\"navigation\"</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>从运行效果中大家不难发现, 页面主内容顶部和底部都被固定导航条给遮住了. <strong>为了避免固定导航条遮盖内容, 我们需要在body上做一些处理</strong></p>\n<h2 id=\"响应式导航条\"><a href=\"#响应式导航条\" class=\"headerlink\" title=\"响应式导航条\"></a>响应式导航条</h2><p>如今浏览Web页面的终端不在是一尘不变了, 前面示例实现的导航条仅能适配于大屏幕的浏览器, 但当浏览器屏幕变小的时候, 就不适合了. 因此响应式设计也就随之而来. 那么在一个响应式的Web页面中, 对于响应式的导航条也就非常的重要.<br>使用方法：<br>1、保证在窄屏时需要折叠的内容必须包裹在带一个div内, 并且为这个div加入collapse、navbar-collapse两个类名. 最后为这个div添加一个class类名或者id名.<br>2、保证在窄屏时要显示的图标样式(固定写法)：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;button class=<span class=\"string\">\"navbar-toggle\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> data-toggle=<span class=\"string\">\"collapse\"</span>&gt;</div><div class=\"line\">  &lt;span class=<span class=\"string\">\"sr-only\"</span>&gt;Toggle Navigation&lt;/span&gt;</div><div class=\"line\">  &lt;span class=<span class=\"string\">\"icon-bar\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">  &lt;span class=<span class=\"string\">\"icon-bar\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">  &lt;span class=<span class=\"string\">\"icon-bar\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">&lt;/button&gt;</div></pre></td></tr></table></figure></p>\n<p>3、并为button添加data-target=”.类名/#id名”, 究竞是类名还是id名呢？由需要折叠的div来决定. 如：<br>需要折叠的div代码段：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"collapse navbar-collapse\"</span> id=<span class=\"string\">\"example\"</span>&gt;</div><div class=\"line\">\t&lt;ul class=<span class=\"string\">\"nav navbar-nav\"</span>&gt;</div><div class=\"line\">\t…</div><div class=\"line\">\t&lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>窄屏时显示的图标代码段：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;button class=<span class=\"string\">\"navbar-toggle\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> data-toggle=<span class=\"string\">\"collapse\"</span> data-target=<span class=\"string\">\"#example\"</span>&gt;</div><div class=\"line\">  ...</div><div class=\"line\">&lt;/button&gt;</div></pre></td></tr></table></figure></p>\n<p>也可以这么写, 需要折叠的div代码段：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"collapse navbar-collapse example\"</span> &gt;</div><div class=\"line\">\t&lt;ul class=<span class=\"string\">\"nav navbar-nav\"</span>&gt;</div><div class=\"line\">\t…</div><div class=\"line\">\t&lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>窄屏时要显示的图标：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;button class=<span class=\"string\">\"navbar-toggle\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> data-toggle=<span class=\"string\">\"collapse\"</span> data-target=<span class=\"string\">\".example\"</span>&gt;</div><div class=\"line\">  ...</div><div class=\"line\">&lt;/button&gt;</div></pre></td></tr></table></figure></p>\n<p>完整:<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"navbar navbar-default\"</span> role=<span class=\"string\">\"navigation\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"navbar-header\"</span>&gt;</div><div class=\"line\">\t　&lt;!-- .navbar-toggle样式用于toggle收缩的内容, 即nav-collapse collapse样式所在元素 --&gt;</div><div class=\"line\">\t\t&lt;button class=<span class=\"string\">\"navbar-toggle\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> data-toggle=<span class=\"string\">\"collapse\"</span> data-target=<span class=\"string\">\"#ff\"</span>&gt;</div><div class=\"line\">\t\t&lt;!--&lt;span class=<span class=\"string\">\"sr-only\"</span>&gt;Toggle Navigation&lt;/span&gt;--&gt;</div><div class=\"line\">\t\t&lt;span class=<span class=\"string\">\"icon-bar\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">\t\t&lt;span class=<span class=\"string\">\"icon-bar\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">\t\t&lt;span class=<span class=\"string\">\"icon-bar\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">\t\t&lt;/button&gt;</div><div class=\"line\">\t\t&lt;!-- 确保无论是宽屏还是窄屏, navbar-brand都显示 --&gt;</div><div class=\"line\">\t\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"navbar-brand\"</span>&gt;慕课网&lt;/a&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;!-- 屏幕宽度小于768px时, div.navbar-responsive-collapse容器里的内容都会隐藏, </div><div class=\"line\">\t\t显示icon-bar图标, 当点击icon-bar图标时, 再展开. 屏幕大于768px时, 默认显示.  --&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"collapse navbar-collapse navbar-responsive-collapse\"</span> id=<span class=\"string\">\"ff\"</span>&gt;</div><div class=\"line\">\t\t&lt;ul class=<span class=\"string\">\"nav navbar-nav\"</span>&gt;</div><div class=\"line\">\t\t\t&lt;li class=<span class=\"string\">\"active\"</span>&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;网站首页&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;系列教程&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;名师介绍&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;成功案例&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;关于我们&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t \t&lt;/ul&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"反色导航条\"><a href=\"#反色导航条\" class=\"headerlink\" title=\"反色导航条\"></a>反色导航条</h2><p>反色导航条其实是Bootstrap框架为大家提供的第二种风格的导航条, 与默认的导航条相比, 使用方法并无区别, 只是将navbar-deafult类名换成navbar-inverse. 其变化只是导航条的背景色和文本做了修改. </p>\n<p>nav navbar-default默认导航条 nav-inverse反色导航条<br>navbar-fixed-top/bottom固定导航条<br>nav navbar-nav 导航条中的导航div类<br>navbar-form 导航表单<br>navbar-left左对齐<br>navbar-right右对齐</p>\n<h2 id=\"分页导航-带页码的分页导航\"><a href=\"#分页导航-带页码的分页导航\" class=\"headerlink\" title=\"分页导航(带页码的分页导航)\"></a>分页导航(带页码的分页导航)</h2><p>使用方法：<br>平时很多同学喜欢用div&gt;a和div&gt;span结构来制作带页码的分页导航. 不过, 在Bootstrap框架中使用的是ul&gt;li&gt;a这样的结构, 在ul标签上加入pagination方法：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;ul class=<span class=\"string\">\"pagination\"</span>&gt;</div><div class=\"line\">   &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&amp;laquo;&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">   &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;1&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">   &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;2&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">   &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;3&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">   &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;4&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">   &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;5&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">   &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&amp;raquo;&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>\n<p>注意：要禁用当前状态和禁用状态不能点击, 我们还要依靠js来实现, 或者将这两状态下的a标签换成span标签. </p>\n<p>大小设置：<br>在Bootstrap框架中, 也可以通过几个不同的情况来设置其大小. 类似于按钮一样：<br>1、通过“pagination-lg”让分页导航变大；<br>2、通过“pagination-sm”让分页导航变小：  没有xs 这一说.</p>\n<h3 id=\"分页导航-翻页分页导航\"><a href=\"#分页导航-翻页分页导航\" class=\"headerlink\" title=\"分页导航(翻页分页导航)\"></a>分页导航(翻页分页导航)</h3><p>Bootstrap框架除了提供带页码的分页导航之外还提供了翻页导航. 这种分页导航常常在一些简单的网站上看到, 比如说个人博客, 杂志网站等. 这种分页导航是看不到具体的页码, 只会提供一个“上一页”和“下一页”的按钮.<br>使用方法：<br>在实际使用中, 翻页分页导航和带页码的分页导航类似, 为ul标签加入pager类</p>\n<h4 id=\"对齐样式设置\"><a href=\"#对齐样式设置\" class=\"headerlink\" title=\"对齐样式设置\"></a>对齐样式设置</h4><p>默认情况之下, 翻页分页导航是居中显示, 但有的时候我们需要一个居左, 一个居右. Bootstrap框架提供了两个样式：<br>☑   previous: 让“上一步”按钮居左<br>☑   next: 让“下一步”按钮居右</p>\n<h4 id=\"状态样式设置：\"><a href=\"#状态样式设置：\" class=\"headerlink\" title=\"状态样式设置：\"></a>状态样式设置：</h4><p>和带页码分页导航一样, 如果在li标签上添加了disabled类名的时候, 分页按钮处于禁用状态, 但同样不能禁止其点击功能. 你可以通过js来处理, 或将a标签换成span标签. </p>\n<h2 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h2><p>使用方法很简单, 你可以在使用span这样的行内标签：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;span class=<span class=\"string\">\"label label-default\"</span>&gt;默认标签&lt;/span&gt;</div><div class=\"line\">&lt;span class=<span class=\"string\">\"label label-primary\"</span>&gt;主要标签&lt;/span&gt;</div><div class=\"line\">&lt;span class=<span class=\"string\">\"label label-success\"</span>&gt;成功标签&lt;/span&gt;</div><div class=\"line\">&lt;span class=<span class=\"string\">\"label label-info\"</span>&gt;信息标签&lt;/span&gt;</div><div class=\"line\">&lt;span class=<span class=\"string\">\"label label-warning\"</span>&gt;警告标签&lt;/span&gt;</div><div class=\"line\">&lt;span class=<span class=\"string\">\"label label-danger\"</span>&gt;错误标签&lt;/span&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"徽章\"><a href=\"#徽章\" class=\"headerlink\" title=\"徽章\"></a>徽章</h2><p>使用方法, 其实也没什么太多可说的, 你可以像标签一样, 使用span标签来制作, 然后为他加入badge类：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;a href=<span class=\"string\">\"#\"</span>&gt;Inbox &lt;span class=<span class=\"string\">\"badge\"</span>&gt;42&lt;/span&gt;&lt;/a&gt;</div><div class=\"line\">&lt;span class=<span class=\"string\">\"badge pull-right\"</span>&gt;42&lt;/span&gt;</div></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"其他内置组件\"><a href=\"#其他内置组件\" class=\"headerlink\" title=\"其他内置组件\"></a>其他内置组件</h1><h2 id=\"缩略图\"><a href=\"#缩略图\" class=\"headerlink\" title=\"缩略图\"></a>缩略图</h2><p>缩略图在网站中最常用的地方就是产品列表页面, 一行显示几张图片, 有的在图片底下(左侧或右侧)带有标题、描述等信息. Bootstrap框架将这一部独立成一个模块组件. 并通过“thumbnail”样式配合bootstrap的网格系统来实现. 可以将产品列表页变得更好看.<br>通过“thumbnail”样式配合bootstrap的网格系统来实现.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"container\"</span>&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"row\"</span>&gt;</div><div class=\"line\">\t\t&lt;div class=<span class=\"string\">\"col-xs-6 col-md-3\"</span>&gt;</div><div class=\"line\">\t\t\t&lt;a href=<span class=\"string\">\"#\"</span> class=<span class=\"string\">\"thumbnail\"</span>&gt;</div><div class=\"line\">\t\t\t\t&lt;img src=<span class=\"string\">\"http://img.mukewang.com/5434eba100014fe906000338.png\"</span> style=<span class=\"string\">\"height: 180px; width: 100%; display: block;\"</span> alt=<span class=\"string\">\"\"</span>&gt;</div><div class=\"line\">\t\t\t&lt;/a&gt;</div><div class=\"line\">\t\t&lt;/div&gt;</div><div class=\"line\">    …</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>上面的结构表示的是在宽屏幕(可视区域大于768px)的时候, 一行显示四个缩略图(单击全屏查看效果).<br>在窄屏(可视区域小于768px)的时候, 一行只显示两个缩略图.<br>上一小节, 展示的仅只有缩略图的一种使用方式, 除了这种方式之外, 还可以让缩略图配合标题、描述内容, 按钮等<br>在仅有缩略图的基础上, 添加了一个div名为“caption“的容器, 在这个容器中放置其他内容, 比如说标题, 文本描述, 按钮等：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"container\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"row\"</span>&gt;</div><div class=\"line\">    &lt;div class=<span class=\"string\">\"col-xs-6 col-md-3\"</span>&gt;</div><div class=\"line\">      &lt;a href=<span class=\"string\">\"#\"</span> class=<span class=\"string\">\"thumbnail\"</span>&gt;</div><div class=\"line\">        &lt;img src=<span class=\"string\">\"http://a.hiphotos.baidu.com/image/w%3D400/sign=c56d7638b0b7d0a27bc9059dfbee760d/3b292df5e0fe9925d46873da36a85edf8cb171d7.jpg\"</span> style=<span class=\"string\">\"height: 180px; width: 100%; display: block;\"</span> alt=<span class=\"string\">\"\"</span>&gt;</div><div class=\"line\">      &lt;/a&gt;</div><div class=\"line\">\t\t\t&lt;div class=<span class=\"string\">\"caption\"</span>&gt;</div><div class=\"line\">\t\t\t\t&lt;h3&gt;Bootstrap框架系列教程&lt;/h3&gt;</div><div class=\"line\">\t\t\t\t&lt;p&gt;Bootstrap框架是一个优秀的前端框, 就算您是一位后端程序员或者你是一位不懂设计的前端人员, 你也能依赖于Bootstrap制作做优美的网站...&lt;/p&gt;</div><div class=\"line\">\t\t\t\t&lt;p&gt;</div><div class=\"line\">\t\t\t\t\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"btn btn-primary\"</span>&gt;开始学习&lt;/a&gt;</div><div class=\"line\">\t\t\t\t\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"btn btn-info\"</span>&gt;正在学习&lt;/a&gt;</div><div class=\"line\">\t\t\t\t&lt;/p&gt;</div><div class=\"line\">\t\t\t&lt;/div&gt;</div><div class=\"line\">\t\t&lt;/div&gt;</div><div class=\"line\">    …</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"警示框\"><a href=\"#警示框\" class=\"headerlink\" title=\"警示框\"></a>警示框</h2><p>在网站中, 网页总是需要和用户一起做沟通与交流. 特别是当用户操作上下文为用户提供一些有效的警示框, 比如说告诉用户操作成功、操作错误、提示或者警告等.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h2&gt;默认警示框&lt;/h2&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"alert alert-success\"</span> role=<span class=\"string\">\"alert\"</span>&gt;恭喜您操作成功！&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h2&gt;可关闭的警示框&lt;/h2&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"alert alert-success alert-dismissable\"</span> role=<span class=\"string\">\"alert\"</span>&gt;</div><div class=\"line\">恭喜您操作成功！</div><div class=\"line\">    &lt;button class=<span class=\"string\">\"close\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> data-dismiss=<span class=\"string\">\"alert\"</span>&gt;&amp;<span class=\"built_in\">times</span>;&lt;/button&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p><strong>data-dismiss=”alert”</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h2&gt;警示框的链接&lt;/h2&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"alert alert-success\"</span> role=<span class=\"string\">\"alert\"</span>&gt;</div><div class=\"line\">    &lt;strong&gt;Well <span class=\"keyword\">done</span>!&lt;/strong&gt; </div><div class=\"line\">    You successfully <span class=\"built_in\">read</span> </div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"#\"</span> class=<span class=\"string\">\"alert-link\"</span>&gt;this important alert message&lt;/a&gt;</div><div class=\"line\">\t.</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"进度条\"><a href=\"#进度条\" class=\"headerlink\" title=\"进度条\"></a>进度条</h2><p>在网页中, 进度条的效果并不少见, 比如一个评分系统, 比如加载状态等.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h2&gt;基本进度条&lt;/h2&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"progress\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"progress-bar\"</span> style=<span class=\"string\">\"width:40%\"</span>&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h2&gt;彩色进度条&lt;/h2&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"progress\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"progress-bar progress-bar-success\"</span> style=<span class=\"string\">\"width:40%\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h2&gt;条纹进度条&lt;/h2&gt; // 把progress-striped active 加在最外层的div </div><div class=\"line\">//就不用一个个的来控制这个斑马纹了 可以全部控制</div><div class=\"line\">&lt;div class=<span class=\"string\">\"progress progress-striped\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"progress-bar progress-bar-success\"</span> style=<span class=\"string\">\"width:40%\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h2&gt;动态条纹进度条&lt;/h2&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"progress progress-striped active\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"progress-bar progress-bar-success\"</span> style=<span class=\"string\">\"width:40%\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h2&gt;层叠进度条&lt;/h2&gt;</div><div class=\"line\">&lt;h5&gt;正常层叠进度条&lt;/h5&gt;    // width 总和小于100%</div><div class=\"line\">&lt;div class=<span class=\"string\">\"progress\"</span>&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"progress-bar progress-bar-success\"</span> style=<span class=\"string\">\"width:20%\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"progress-bar progress-bar-info\"</span> style=<span class=\"string\">\"width:10%\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"progress-bar progress-bar-warning\"</span> style=<span class=\"string\">\"width:30%\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"progress-bar progress-bar-danger\"</span> style=<span class=\"string\">\"width:15%\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h2&gt;带Label的进度条&lt;/h2&gt;</div><div class=\"line\">&lt;h5&gt;进度条1&lt;/h5&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"progress\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"progress-bar progress-bar-success\"</span>  role=<span class=\"string\">\"progressbar\"</span> aria-valuenow=<span class=\"string\">\"20\"</span> aria-valuemin=<span class=\"string\">\"0\"</span> aria-valuemax=<span class=\"string\">\"100\"</span> style=<span class=\"string\">\"width:20%\"</span>&gt;20%&lt;/div&gt;  </div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"媒体对象\"><a href=\"#媒体对象\" class=\"headerlink\" title=\"媒体对象\"></a>媒体对象</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;默认媒体对象&lt;/h3&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"media\"</span>&gt;</div><div class=\"line\">  &lt;a class=<span class=\"string\">\"pull-left\"</span> href=<span class=\"string\">\"#\"</span>&gt;</div><div class=\"line\">    &lt;img class=<span class=\"string\">\"media-object\"</span> src=<span class=\"string\">\"http://img.mukewang.com/52e1d29d000161fe06000338-300-170.jpg\"</span> alt=<span class=\"string\">\"...\"</span>&gt;</div><div class=\"line\">  &lt;/a&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"media-body\"</span>&gt;</div><div class=\"line\">    &lt;h4 class=<span class=\"string\">\"media-heading\"</span>&gt;系列：十天精通CSS3&lt;/h4&gt;</div><div class=\"line\">    &lt;div&gt;全方位深刻详解CSS3模块知识, 经典案例分析, 代码同步调试, 让网页穿上绚丽装备！&lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;媒体对象的嵌套&lt;/h3&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"media\"</span>&gt;</div><div class=\"line\">  &lt;a class=<span class=\"string\">\"pull-left\"</span> href=<span class=\"string\">\"#\"</span>&gt;</div><div class=\"line\">    &lt;img class=<span class=\"string\">\"media-object\"</span> src=<span class=\"string\">\"http://a.disquscdn.com/uploads/users/3740/2069/avatar92.jpg?1406972031\"</span> alt=<span class=\"string\">\"...\"</span>&gt;</div><div class=\"line\">\t&lt;/a&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"media-body\"</span>&gt;</div><div class=\"line\">\t\t&lt;h4 class=<span class=\"string\">\"media-heading\"</span>&gt;我是大漠&lt;/h4&gt;</div><div class=\"line\">\t\t&lt;div&gt;我是W3cplus站长大漠, 我在写Bootstrap框中的媒体对象测试用例&lt;/div&gt;</div><div class=\"line\">\t\t&lt;div class=<span class=\"string\">\"media\"</span>&gt;</div><div class=\"line\">\t\t\t&lt;a class=<span class=\"string\">\"pull-left\"</span> href=<span class=\"string\">\"#\"</span>&gt;</div><div class=\"line\">\t\t\t\t&lt;img class=<span class=\"string\">\"media-object\"</span> src=<span class=\"string\">\"http://tp2.sinaimg.cn/3306361973/50/22875318196/0\"</span> alt=<span class=\"string\">\"...\"</span>&gt;</div><div class=\"line\">\t\t\t&lt;/a&gt;</div><div class=\"line\">\t\t\t&lt;div class=<span class=\"string\">\"media-body\"</span>&gt;</div><div class=\"line\">\t\t\t\t&lt;h4 class=<span class=\"string\">\"media-heading\"</span>&gt;慕课网&lt;/h4&gt;</div><div class=\"line\">\t\t\t\t&lt;div&gt;大漠写的《玩转Bootstrap》系列教程即将会在慕课网上发布&lt;/div&gt;</div><div class=\"line\">\t\t\t\t&lt;div class=<span class=\"string\">\"media\"</span>&gt;</div><div class=\"line\">\t\t\t\t\t&lt;a class=<span class=\"string\">\"pull-left\"</span> href=<span class=\"string\">\"#\"</span>&gt;</div><div class=\"line\">\t\t\t\t\t\t&lt;img class=<span class=\"string\">\"media-object\"</span> src=<span class=\"string\">\"http://tp4.sinaimg.cn/1167075935/50/22838101204/1\"</span> alt=<span class=\"string\">\"...\"</span>&gt;</div><div class=\"line\">\t\t\t\t\t&lt;/a&gt;</div><div class=\"line\">\t\t\t\t\t&lt;div class=<span class=\"string\">\"media-body\"</span>&gt;</div><div class=\"line\">\t\t\t\t\t\t&lt;h4 class=<span class=\"string\">\"media-heading\"</span>&gt;W3cplus&lt;/h4&gt;</div><div class=\"line\">\t\t\t\t\t\t&lt;div&gt;W3cplus站上还有很多教程....&lt;/div&gt;</div><div class=\"line\">\t\t\t\t\t&lt;/div&gt;</div><div class=\"line\">\t\t\t\t&lt;/div&gt;</div><div class=\"line\">\t\t\t&lt;/div&gt;</div><div class=\"line\">\t\t&lt;/div&gt;</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;媒体对象列表&lt;/h3&gt;</div><div class=\"line\">&lt;ul class=<span class=\"string\">\"media-list\"</span>&gt;</div><div class=\"line\">  &lt;li class=<span class=\"string\">\"media\"</span>&gt;</div><div class=\"line\">    &lt;a class=<span class=\"string\">\"pull-left\"</span> href=<span class=\"string\">\"#\"</span>&gt;</div><div class=\"line\">      &lt;img class=<span class=\"string\">\"media-object\"</span> src=<span class=\"string\">\"http://a.disquscdn.com/uploads/users/3740/2069/avatar92.jpg?1406972031\"</span> alt=<span class=\"string\">\"...\"</span>&gt;</div><div class=\"line\">    &lt;/a&gt;</div><div class=\"line\">\t\t&lt;div class=<span class=\"string\">\"media-body\"</span>&gt;</div><div class=\"line\">\t\t\t&lt;h4 class=<span class=\"string\">\"media-heading\"</span>&gt;我是大漠&lt;/h4&gt;</div><div class=\"line\">      &lt;div&gt;我是W3cplus站长大漠, 我在写Bootstrap框中的媒体对象测试用例&lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/li&gt;</div><div class=\"line\">  &lt;li class=<span class=\"string\">\"media\"</span>&gt;</div><div class=\"line\">\t\t&lt;a class=<span class=\"string\">\"pull-left\"</span> href=<span class=\"string\">\"#\"</span>&gt;</div><div class=\"line\">\t\t\t\t&lt;img class=<span class=\"string\">\"media-object\"</span> src=<span class=\"string\">\"http://tp2.sinaimg.cn/3306361973/50/22875318196/0\"</span> alt=<span class=\"string\">\"...\"</span>&gt;</div><div class=\"line\">\t\t&lt;/a&gt;</div><div class=\"line\">    &lt;div class=<span class=\"string\">\"media-body\"</span>&gt;</div><div class=\"line\">      &lt;h4 class=<span class=\"string\">\"media-heading\"</span>&gt;慕课网&lt;/h4&gt;</div><div class=\"line\">      &lt;div&gt;大漠写的《玩转Bootstrap》系列教程即将会在慕课网上发布&lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/li&gt;</div><div class=\"line\">  &lt;li class=<span class=\"string\">\"media\"</span>&gt;</div><div class=\"line\">\t\t&lt;a class=<span class=\"string\">\"pull-left\"</span> href=<span class=\"string\">\"#\"</span>&gt;</div><div class=\"line\">\t\t\t&lt;img class=<span class=\"string\">\"media-object\"</span> src=<span class=\"string\">\"http://tp4.sinaimg.cn/1167075935/50/22838101204/1\"</span> alt=<span class=\"string\">\"...\"</span>&gt;</div><div class=\"line\">\t\t&lt;/a&gt;</div><div class=\"line\">\t\t&lt;div class=<span class=\"string\">\"media-body\"</span>&gt;</div><div class=\"line\">\t\t\t&lt;h4 class=<span class=\"string\">\"media-heading\"</span>&gt;W3cplus&lt;/h4&gt;</div><div class=\"line\">\t\t\t&lt;div&gt;W3cplus站上还有很多教程....&lt;/div&gt;</div><div class=\"line\">\t\t&lt;/div&gt;</div><div class=\"line\">  &lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure>\n<p>默认:媒体对象一般是成组出现, 而一组媒体对象常常包括以下几个部分：<br>☑  媒体对像的容器：常使用“media”类名表示, 用来容纳媒体对象的所有内容<br>☑  媒体对像的对象：常使用“media-object”表示, 就是媒体对象中的对象, 常常是图片<br>☑  媒体对象的主体：常使用“media-body”表示, 就是媒体对像中的主体内容, 可以是任何元素, 常常是图片侧边内容<br>☑  媒体对象的标题：常使用“media-heading”表示, 就是用来描述对象的一个标题, 此部分可选<br>除了上面四个部分之外, 在Bootstrap框架中还常常使用“pull-left”或者“pull-right”来控制媒体对象中的对象浮动方式.<br>嵌套:从外往里看, 这里有三个媒体对象, 只不过是一个嵌套在另一个的里面. 那么在Bootstrap框架中的媒体对象也具备这样的功能, 只需要将另一个媒体对象结构放置在媒体对象的主体内“media-body”,<br>列表:针对上图的媒体对象列表效果, Bootstrap框架提供了一个列表展示的效果, 在写结构的时候可以使用ul, 并且在ul上添加类名“media-list”, 而在li上使用“media”.</p>\n<h2 id=\"列表组\"><a href=\"#列表组\" class=\"headerlink\" title=\"列表组\"></a>列表组</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;基础列表组&lt;/h3&gt;</div><div class=\"line\">&lt;ul class=<span class=\"string\">\"list-group\"</span>&gt;</div><div class=\"line\">  &lt;li class=<span class=\"string\">\"list-group-item\"</span>&gt;揭开CSS3的面纱&lt;/li&gt;</div><div class=\"line\">  &lt;li class=<span class=\"string\">\"list-group-item\"</span>&gt;CSS3选择器&lt;/li&gt;</div><div class=\"line\">\t&lt;li class=<span class=\"string\">\"list-group-item\"</span>&gt;CSS3边框&lt;/li&gt;</div><div class=\"line\">\t&lt;li class=<span class=\"string\">\"list-group-item\"</span>&gt;CSS3背景&lt;/li&gt;</div><div class=\"line\">\t&lt;li class=<span class=\"string\">\"list-group-item\"</span>&gt;CSS3文本&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;带徽章的列表组&lt;/h3&gt;</div><div class=\"line\">&lt;ul class=<span class=\"string\">\"list-group\"</span>&gt;</div><div class=\"line\">  &lt;li class=<span class=\"string\">\"list-group-item\"</span>&gt;</div><div class=\"line\">    &lt;span class=<span class=\"string\">\"badge\"</span>&gt;13&lt;/span&gt;揭开CSS3的面</div><div class=\"line\">\t&lt;/li&gt;</div><div class=\"line\">\t&lt;li class=<span class=\"string\">\"list-group-item\"</span>&gt;</div><div class=\"line\">\t\t&lt;span class=<span class=\"string\">\"badge\"</span>&gt;456&lt;/span&gt;CSS3选择器</div><div class=\"line\">\t&lt;/li&gt;</div><div class=\"line\">\t&lt;li class=<span class=\"string\">\"list-group-item\"</span>&gt;</div><div class=\"line\">\t\t&lt;span class=<span class=\"string\">\"badge\"</span>&gt;892&lt;/span&gt;CSS3边框</div><div class=\"line\">\t&lt;/li&gt;</div><div class=\"line\">\t&lt;li class=<span class=\"string\">\"list-group-item\"</span>&gt;</div><div class=\"line\">\t\t&lt;span class=<span class=\"string\">\"badge\"</span>&gt;90&lt;/span&gt;CSS3背景</div><div class=\"line\">\t&lt;/li&gt;</div><div class=\"line\">\t&lt;li class=<span class=\"string\">\"list-group-item\"</span>&gt;</div><div class=\"line\">\t\t&lt;span class=<span class=\"string\">\"badge\"</span>&gt;1290&lt;/span&gt;CSS3文本</div><div class=\"line\">\t&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;带链接的列表组&lt;/h3&gt;</div><div class=\"line\">&lt;ul class=<span class=\"string\">\"list-group\"</span>&gt;</div><div class=\"line\">    &lt;li class=<span class=\"string\">\"list-group-item\"</span>&gt;</div><div class=\"line\">    \t&lt;a href=<span class=\"string\">\"##\"</span>&gt;揭开CSS3的面&lt;/a&gt;</div><div class=\"line\">\t&lt;/li&gt;</div><div class=\"line\">\t&lt;li class=<span class=\"string\">\"list-group-item\"</span>&gt;</div><div class=\"line\">\t\t&lt;a href=<span class=\"string\">\"##\"</span>&gt;CSS3选择器&lt;/a&gt;</div><div class=\"line\">\t&lt;/li&gt;</div><div class=\"line\">\t&lt;li class=<span class=\"string\">\"list-group-item\"</span>&gt;</div><div class=\"line\">\t\t&lt;a href=<span class=\"string\">\"##\"</span>&gt;CSS3边框&lt;/a&gt;</div><div class=\"line\">\t&lt;/li&gt;</div><div class=\"line\">\t&lt;li class=<span class=\"string\">\"list-group-item\"</span>&gt;</div><div class=\"line\">\t\t&lt;a href=<span class=\"string\">\"##\"</span>&gt;CSS3背景&lt;/a&gt;</div><div class=\"line\">\t&lt;/li&gt;</div><div class=\"line\">\t&lt;li class=<span class=\"string\">\"list-group-item\"</span>&gt;</div><div class=\"line\">\t\t&lt;a href=<span class=\"string\">\"##\"</span>&gt;CSS3文本&lt;/a&gt;</div><div class=\"line\">\t&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;自定义列表组&lt;/h3&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"list-group\"</span>&gt;</div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"list-group-item\"</span>&gt;</div><div class=\"line\">\t\t&lt;h4 class=<span class=\"string\">\"list-group-item-heading\"</span>&gt;图解CSS3&lt;/h4&gt;</div><div class=\"line\">\t\t&lt;p class=<span class=\"string\">\"list-group-item-text\"</span>&gt;</div><div class=\"line\">\t\t\t详细讲解了选择器、边框、背景、文本、颜色、盒模型、伸缩布局盒模型、多列布局、渐变、过渡、动画、媒体、响应Web设计、Web字体等主题下涵盖的所有CSS3新特性...</div><div class=\"line\">\t\t&lt;/p&gt;</div><div class=\"line\">\t&lt;/a&gt;</div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"list-group-item\"</span>&gt;</div><div class=\"line\">\t\t&lt;h4 class=<span class=\"string\">\"list-group-item-heading\"</span>&gt;Sass中国&lt;/h4&gt;</div><div class=\"line\">\t\t&lt;p class=<span class=\"string\">\"list-group-item-text\"</span>&gt;致力于为中国开发者提供最全面, 最具影响力, 最前沿的Sass相关技术与教程...&lt;/p&gt;</div><div class=\"line\">\t&lt;/a&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;组合列表项的状态&lt;/h3&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"list-group\"</span>&gt;</div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"list-group-item active\"</span>&gt;&lt;span class=<span class=\"string\">\"badge\"</span>&gt;5902&lt;/span&gt;图解CSS3&lt;/a&gt;</div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"list-group-item\"</span>&gt;&lt;span class=<span class=\"string\">\"badge\"</span>&gt;15902&lt;/span&gt;W3cplus&lt;/a&gt;</div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"list-group-item\"</span>&gt;&lt;span class=<span class=\"string\">\"badge\"</span>&gt;59020&lt;/span&gt;慕课网&lt;/a&gt;</div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"list-group-item disabled\"</span>&gt;&lt;span class=<span class=\"string\">\"badge\"</span>&gt;0&lt;/span&gt;Sass中国&lt;/a&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;多彩列表组&lt;/h3&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"list-group\"</span>&gt;</div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"list-group-item active\"</span>&gt;&lt;span class=<span class=\"string\">\"badge\"</span>&gt;5902&lt;/span&gt;图解CSS3&lt;/a&gt;</div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"list-group-item list-group-item-success\"</span>&gt;&lt;span class=<span class=\"string\">\"badge\"</span>&gt;15902&lt;/span&gt;W3cplus&lt;/a&gt;</div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"list-group-item list-group-item-info\"</span>&gt;&lt;span class=<span class=\"string\">\"badge\"</span>&gt;59020&lt;/span&gt;慕课网&lt;/a&gt;</div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"list-group-item list-group-item-warning\"</span>&gt;&lt;span class=<span class=\"string\">\"badge\"</span>&gt;0&lt;/span&gt;Sass中国&lt;/a&gt;</div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"list-group-item list-group-item-danger\"</span>&gt;&lt;span class=<span class=\"string\">\"badge\"</span>&gt;10&lt;/span&gt;Mobile教程&lt;/a&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"面板\"><a href=\"#面板\" class=\"headerlink\" title=\"面板\"></a>面板</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;基础面板&lt;/h3&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"panel panel-default\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"panel-body\"</span>&gt;我是一个基础面板, 带有默认主题样式风格&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;带有头和尾的面板&lt;/h3&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"panel panel-default\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"panel-heading\"</span>&gt;图解CSS3&lt;/div&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"panel-body\"</span>&gt;</div><div class=\"line\">\t\t详细讲解了选择器、边框、背景、文本、颜色、盒模型、伸缩布局盒模型、多列布局、渐变、过渡、动画、媒体、响应Web设计、Web字体等主题下涵盖的所有CSS3新特性</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"panel-footer\"</span>&gt;作者：大漠&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;彩色面板&lt;/h3&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"panel panel-default\"</span>&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"panel-heading\"</span>&gt;图解CSS3&lt;/div&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"panel-body\"</span>&gt;\t\t\t详细讲解了选择器、边框、背景、文本、颜色、盒模型、伸缩布局盒模型、多列布局、渐变、过渡、动画、媒体、响应Web设计、Web字体等主题下涵盖的所有CSS3新特性</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"panel-footer\"</span>&gt;作者：大漠&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"panel panel-primary\"</span>&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"panel-heading\"</span>&gt;图解CSS3&lt;/div&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"panel-body\"</span>&gt;</div><div class=\"line\">\t详细讲解了选择器、边框、背景、文本、颜色、盒模型、伸缩布局盒模型、多列布局、渐变、过渡、动画、媒体、响应Web设计、Web字体等主题下涵盖的所有CSS3新特性</div><div class=\"line\">\t&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;面板中嵌套表格&lt;/h3&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"panel panel-default\"</span>&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"panel-heading\"</span>&gt;图解CSS3&lt;/div&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"panel-body\"</span>&gt;</div><div class=\"line\">\t\t&lt;p&gt;详细讲解了选择器、边框、背景、文本、颜色、盒模型、伸缩布局盒模型、多列布局、渐变、过渡、动画、媒体、响应Web设计、Web字体等主题下涵盖的所有CSS3新特性</div><div class=\"line\">\t\t&lt;/p&gt;</div><div class=\"line\">\t\t&lt;table class=<span class=\"string\">\"table table-bordered\"</span>&gt;</div><div class=\"line\">\t\t\t&lt;thead&gt;</div><div class=\"line\">\t\t\t\t&lt;tr&gt;</div><div class=\"line\">\t\t\t\t\t&lt;th&gt;＃&lt;/th&gt;</div><div class=\"line\">\t\t\t\t\t&lt;th&gt;我的书&lt;/th&gt;</div><div class=\"line\">\t\t\t\t\t&lt;th&gt;发布时间&lt;/th&gt;</div><div class=\"line\">\t\t\t\t&lt;/tr&gt;</div><div class=\"line\">\t\t\t&lt;/thead&gt;</div><div class=\"line\">\t\t\t&lt;tbody&gt;</div><div class=\"line\">\t\t\t\t&lt;tr&gt;</div><div class=\"line\">\t\t\t\t\t&lt;td&gt;1&lt;/td&gt;</div><div class=\"line\">\t\t\t\t\t&lt;td&gt;《图解CSS3》&lt;/td&gt;</div><div class=\"line\">\t\t\t\t\t&lt;td&gt;2014-07-10&lt;/td&gt;</div><div class=\"line\">\t\t\t\t&lt;/tr&gt;</div><div class=\"line\">\t\t\t&lt;/tbody&gt;</div><div class=\"line\">\t\t&lt;/table&gt;</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"panel-footer\"</span>&gt;作者：大漠&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>在实际应用运中, 你或许希望表格和面板边缘不需要有任何的间距. 但由于panel-body设置了一个padding：15px的值, 为了实现这样的效果. 我们在<strong>实际使用的时候需要把table提取到panel-body外面.</strong></p>\n<hr>\n<h1 id=\"js插件简介\"><a href=\"#js插件简介\" class=\"headerlink\" title=\"js插件简介\"></a>js插件简介</h1><h2 id=\"js库\"><a href=\"#js库\" class=\"headerlink\" title=\"js库\"></a>js库</h2><p>Bootstrap除了包含丰富的Web组件之外, 如前面介绍的下拉菜单、按钮组、导航、分页等. 他还包括一些JavaScript的插件.<br>Bootstrap的JavaScript插件可以单独导入到页面中, 也可以一次性导入到页面中. 因为在Bootstrap中的JavaScript插件都是依赖于jQuery库, 所以不论是单独导入还一次性导入之前必须先导入jQuery库.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;!—导入jQuery版本库, 因为Bootstrap的JavaScript插件依赖于jQuery --&gt;</div><div class=\"line\">&lt;script src=<span class=\"string\">\"http://libs.baidu.com/jquery/1.9.0/jquery.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;!—- 一次性导入所有Bootstrap的JavaScript插件(压缩版本) --&gt;</div><div class=\"line\">&lt;script src=<span class=\"string\">\"js/bootstrap.min.js\"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>特别声明：jQuery版本库也可以加载你本地的jQuery版本. </p>\n<h2 id=\"动画过渡-Transitions\"><a href=\"#动画过渡-Transitions\" class=\"headerlink\" title=\"动画过渡(Transitions)\"></a>动画过渡(Transitions)</h2><p>transition.js文件为Bootstrap具有过渡动画效果的组件提供了动画过渡效果. 不过需要注意的是, 这些过渡动画都是采用CSS3来实现的, 所以IE6-8浏览器是不具备这些过渡动画效果.<br>默认情况之下, Bootstrap框架中以下组件使用了过渡动画效果：<br>☑ 模态弹出窗(Modal)的滑动和渐变效果；<br>☑ 选项卡(Tab)的渐变效果；<br>☑ 警告框(Alert)的渐变效果；<br>☑ 图片轮播(Carousel)的滑动效果. </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-primary\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;点击我&lt;/button&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"modal fade\"</span> id=<span class=\"string\">\"mymodal\"</span>&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"modal-dialog\"</span>&gt;</div><div class=\"line\">\t\t&lt;div class=<span class=\"string\">\"modal-content\"</span>&gt;</div><div class=\"line\">\t\t\t&lt;div class=<span class=\"string\">\"modal-header\"</span>&gt;</div><div class=\"line\">\t\t\t\t&lt;button <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> class=<span class=\"string\">\"close\"</span> data-dismiss=<span class=\"string\">\"modal\"</span>&gt;&lt;span aria-hidden=<span class=\"string\">\"true\"</span>&gt;&amp;<span class=\"built_in\">times</span>;&lt;/span&gt;&lt;span class=<span class=\"string\">\"sr-only\"</span>&gt;Close&lt;/span&gt;&lt;/button&gt;</div><div class=\"line\">\t\t\t\t&lt;h4 class=<span class=\"string\">\"modal-title\"</span>&gt;模态弹出窗标题&lt;/h4&gt;</div><div class=\"line\">\t\t\t&lt;/div&gt;</div><div class=\"line\">\t\t\t&lt;div class=<span class=\"string\">\"modal-body\"</span>&gt;</div><div class=\"line\">\t\t\t\t&lt;p&gt;模态弹出窗主体内容&lt;/p&gt;</div><div class=\"line\">\t\t\t&lt;/div&gt;</div><div class=\"line\">\t\t\t&lt;div class=<span class=\"string\">\"modal-footer\"</span>&gt;</div><div class=\"line\">\t\t\t\t&lt;button <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> class=<span class=\"string\">\"btn btn-default\"</span> data-dismiss=<span class=\"string\">\"modal\"</span>&gt;关闭&lt;/button&gt;</div><div class=\"line\">\t\t\t\t&lt;button <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> class=<span class=\"string\">\"btn btn-primary\"</span>&gt;保存&lt;/button&gt;</div><div class=\"line\">\t\t\t&lt;/div&gt;</div><div class=\"line\">\t\t&lt;/div&gt;&lt;!-- /.modal-content --&gt;</div><div class=\"line\">\t&lt;/div&gt;&lt;!-- /.modal-dialog --&gt;</div><div class=\"line\">&lt;/div&gt;&lt;!-- /.modal --&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">  $(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">    $(<span class=\"string\">\".btn\"</span>).click(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">      $(<span class=\"string\">\"#mymodal\"</span>).modal(<span class=\"string\">\"toggle\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"模态弹出框-Modals\"><a href=\"#模态弹出框-Modals\" class=\"headerlink\" title=\"模态弹出框(Modals)\"></a>模态弹出框(Modals)</h2><p>在 Bootstrap 框架中把模态弹出框统一称为 Modal. 这种弹出框效果在大多数 Web 网站的交互中都可见. 比如点击一个按钮弹出一个框, 弹出的框可能是一段文件描述, 也可能带有按钮操作, 也有可能弹出的是一张图片. </p>\n<h2 id=\"模态弹出框–结构分析\"><a href=\"#模态弹出框–结构分析\" class=\"headerlink\" title=\"模态弹出框–结构分析\"></a>模态弹出框–结构分析</h2><p>Bootstrap框架中的模态弹出框, 分别运用了“modal”、“modal-dialog”和“modal-content”样式, 而弹出窗真正的内容都放置在“modal-content”中, 其主要又包括三个部分：<br>☑ 弹出框头部, 一般使用“modal-header”表示, 主要包括标题和关闭按钮<br>☑ 弹出框主体, 一般使用“modal-body”表示, 弹出框的主要内容<br>☑ 弹出框脚部, 一般使用“modal-footer”表示, 主要放置操作按钮</p>\n<h2 id=\"模态弹出框–实现原理解析\"><a href=\"#模态弹出框–实现原理解析\" class=\"headerlink\" title=\"模态弹出框–实现原理解析\"></a>模态弹出框–实现原理解析</h2><p>实现原理解析：<br>bootstrap中的“模态弹出框”有以下几个特点：<br>1、模态弹出窗是固定在浏览器中的.<br>2、单击右侧全屏按钮, 在全屏状态下, 模态弹出窗宽度是自适应的, 而且modal-dialog水平居中.<br>3、当浏览器视窗大于768px时, 模态弹出窗的宽度为600px. </p>\n<p>两种尺寸选择：<br>除此之外, Bootstrap框架还为模态弹出窗提供了不同尺寸, 一个是大尺寸样式“modal-lg”, 另一个是小尺寸样式“modal-sm”. 其结构上稍做调整<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"modal-dialog modal-lg\"</span>&gt;</div><div class=\"line\">       &lt;divclass=<span class=\"string\">\"modal-content\"</span>&gt; ... &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"模态弹出框–触发模态弹出窗2种方法\"><a href=\"#模态弹出框–触发模态弹出窗2种方法\" class=\"headerlink\" title=\"模态弹出框–触发模态弹出窗2种方法\"></a>模态弹出框–触发模态弹出窗2种方法</h2><p>声明式触发方法：<br>方法一：模态弹出窗声明, 只需要自定义两个必要的属性：data-toggle和data-target(bootstrap中声明式触发方法一般依赖于这些自定义的data-xxx 属性. 比如data-toggle=”” 或者 data-dismiss=””).<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;!-- 触发模态弹出窗的元素 --&gt;</div><div class=\"line\">&lt;button <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> data-toggle=<span class=\"string\">\"modal\"</span> data-target=<span class=\"string\">\"#mymodal\"</span> class=<span class=\"string\">\"btn btn-primary\"</span>&gt;点击我会弹出模态弹出窗&lt;/button&gt;</div><div class=\"line\">&lt;!-- 模态弹出窗 --&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"modal fade\"</span> id=<span class=\"string\">\"mymodal\"</span>&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"modal-dialog\"</span>&gt;</div><div class=\"line\">\t\t&lt;div class=<span class=\"string\">\"modal-content\"</span>&gt;</div><div class=\"line\">\t\t\t&lt;!-- 模态弹出窗内容 --&gt;</div><div class=\"line\">\t\t&lt;/div&gt;</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>注意以下事项：<br>1、data-toggle必须设置为modal(toggle中文翻译过来就是触发器)；<br>2、data-target可以设置为CSS的选择符, 也可以设置为模态弹出窗的ID值, 一般情况设置为模态弹出窗的ID值, 因为ID值是唯一的值. </p>\n<p>方法二：触发模态弹出窗也可以是一个链接&lt;a&gt;元素, 那么可以使用链接元素自带的href属性替代data-target属性, 如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;!-- 触发模态弹出窗的元素 --&gt;</div><div class=\"line\">&lt;a data-toggle=<span class=\"string\">\"modal\"</span> href=<span class=\"string\">\"#mymodal\"</span> class=<span class=\"string\">\" btn btn-primary\"</span> &gt;点击我会弹出模态弹出窗&lt;/a&gt;</div><div class=\"line\">&lt;!-- 模态弹出窗 --&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"modal fade\"</span>  id=<span class=\"string\">\"mymodal\"</span> &gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"modal-dialog\"</span> &gt;</div><div class=\"line\">    &lt;div class=<span class=\"string\">\"modal-content\"</span> &gt;</div><div class=\"line\">      &lt;!-- 模态弹出窗内容 --&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>不过建议还是使用统一使用data-target的方式来触发.</p>\n<h2 id=\"模态弹出框–为弹出框增加过度动画效果\"><a href=\"#模态弹出框–为弹出框增加过度动画效果\" class=\"headerlink\" title=\"模态弹出框–为弹出框增加过度动画效果\"></a>模态弹出框–为弹出框增加过度动画效果</h2><p>可通过给“.modal”增加类名“fade”为模态弹出框增加一个过渡动画效果. </p>\n<h2 id=\"模态弹出框–模态弹出窗的使用-data-参数说明\"><a href=\"#模态弹出框–模态弹出窗的使用-data-参数说明\" class=\"headerlink\" title=\"模态弹出框–模态弹出窗的使用(data-参数说明)\"></a>模态弹出框–模态弹出窗的使用(data-参数说明)</h2><p>除了通过data-toggle和data-target来控制模态弹出窗之外, Bootstrap框架针对模态弹出框还提供了其他自定义data-属性, 来控制模态弹出窗. 比如说:是否有灰色背景modal-backdrop, 是否可以按ESC键关闭模态弹出窗. 有关于Modal弹出窗自定义属性相关说明如下所示<br><img src=\"/images/modal-attr.png\" alt=\"modal-attr\"></p>\n<h2 id=\"模态弹出框–模态弹出窗的使用-JavaScript触发\"><a href=\"#模态弹出框–模态弹出窗的使用-JavaScript触发\" class=\"headerlink\" title=\"模态弹出框–模态弹出窗的使用(JavaScript触发)\"></a>模态弹出框–模态弹出窗的使用(JavaScript触发)</h2><p>JavaScript触发方法<br>除了使用自定义属性触发模态弹出框之外, 还可以通过JavaScript方法来触发模态弹出窗. 通过给一个元素一个事件, 来触发. 比如说给一个按钮一个单击事件, 然后触发模态弹出窗. </p>\n<h2 id=\"JavaScript触发时的参数设置\"><a href=\"#JavaScript触发时的参数设置\" class=\"headerlink\" title=\"JavaScript触发时的参数设置\"></a>JavaScript触发时的参数设置</h2><p>使用JavaScript触发模态弹出窗时, Bootstrap框架提供了一些设置, 主要包括属性设置、参数设置和事件设置. 比如你不想让用户按ESC键关闭模态弹出窗, 你就可以这样做：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">  $(<span class=\"string\">\".btn\"</span>).click(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">    $(<span class=\"string\">\"#mymodal\"</span>).modal(&#123;</div><div class=\"line\">      keyboard:<span class=\"literal\">false</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n","excerpt":"<hr>\n<h1 id=\"排版\"><a href=\"#排版\" class=\"headerlink\" title=\"排版\"></a>排版</h1><h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题:\"></a>标题:</h2><p>Bootstrap和普通的HTML页面一样, 定义标题都是使用标签&lt;h1&gt;到&lt;h6&gt;,只不过Bootstrap覆盖了其默认的样式, 使用其在所有浏览器下显示的效果一样.<br>除此之外, 我们在Web的制作中, 常常会碰到在一个标题后面紧跟着一行小的副标题. 在Bootstrap中他也考虑了这种排版效果, 使用了&lt;small&gt;标签来制作副标题. 这个副标题具有其自己的一些独特样式.<br>","more":"</p>\n<h2 id=\"段落-正文文本\"><a href=\"#段落-正文文本\" class=\"headerlink\" title=\"段落(正文文本)\"></a>段落(正文文本)</h2><p>全局文本字号为14px(font-size),行高为1.42857143(line-height), 大约是20px,深灰色(#333),字体为”Helvetica Neue”, Helvetica, Arial, sans-serif;(font-family)</p>\n<h2 id=\"强调内容\"><a href=\"#强调内容\" class=\"headerlink\" title=\"强调内容\"></a>强调内容</h2><p>如果想让一个段落p突出显示, 可以通过添加类名<strong>“.lead”</strong>实现, 其作用就是增大文本字号, 加粗文本, 而且对行高和margin也做相应的处理. 除此之外, Bootstrap还通过元素标签:&lt;small&gt;、&lt;strong&gt;、&lt;em&gt;和&lt;cite&gt;给文本做突出样式处理. </p>\n<h2 id=\"粗体\"><a href=\"#粗体\" class=\"headerlink\" title=\"粗体\"></a>粗体</h2><p>粗体就是给文本加粗, 在普通的元素中我们一般通过font-weight设置为bold关键词给文本加粗. 在Bootstrap中, 可以使用&lt;b&gt;和&lt;strong&gt;标签让文本直接加粗. </p>\n<h2 id=\"斜体\"><a href=\"#斜体\" class=\"headerlink\" title=\"斜体\"></a>斜体</h2><p>斜体类似于加粗一样, 除了可以给元素设置样式font-style值为italic实现之外, 在Bootstrap中还可以通过使用标签&lt;em&gt;或&lt;i&gt;来实现. </p>\n<h2 id=\"强调相关的类\"><a href=\"#强调相关的类\" class=\"headerlink\" title=\"强调相关的类\"></a>强调相关的类</h2><ol>\n<li>.text-muted：提示, 使用浅灰色(#999)</li>\n<li>.text-primary：主要, 使用蓝色(#428bca)</li>\n<li>.text-success：成功, 使用浅绿色(#3c763d)</li>\n<li>.text-info：通知信息, 使用浅蓝色(#31708f)</li>\n<li>.text-warning：警告, 使用黄色(#8a6d3b)</li>\n<li>.text-danger：危险, 使用褐色(#a94442)</li>\n</ol>\n<h2 id=\"文本对齐风格\"><a href=\"#文本对齐风格\" class=\"headerlink\" title=\"文本对齐风格\"></a>文本对齐风格</h2><p>为了简化操作, 方便使用, Bootstrap通过定义四个类名来控制文本的对齐风格：</p>\n<ol>\n<li>.text-left：左对齐</li>\n<li>.text-center：居中对齐</li>\n<li>.text-right：右对齐</li>\n<li>.text-justify：两端对齐</li>\n</ol>\n<h2 id=\"列表–简介\"><a href=\"#列表–简介\" class=\"headerlink\" title=\"列表–简介\"></a>列表–简介</h2><p>Bootstrap根据平时的使用情形提供了六种形式的列表：<br>☑  普通列表<br>☑  有序列表<br>☑  去点列表<br>☑  内联列表<br>☑  描述列表<br>☑  水平描述列表</p>\n<h3 id=\"无序列表和有序列表\"><a href=\"#无序列表和有序列表\" class=\"headerlink\" title=\"无序列表和有序列表\"></a>无序列表和有序列表</h3><p>使用方式和我们平时使用的一样(无序列表使用ul, 有序列表使用ol标签), 在样式方面, Bootstrap只是在此基础上做了一些细微的优化.</p>\n<h3 id=\"列表–去点列表\"><a href=\"#列表–去点列表\" class=\"headerlink\" title=\"列表–去点列表\"></a>列表–去点列表</h3><p>在Bootstrap中默认情况下无序列表和有序列表是带有项目符号的, 但在实际工作中很多时候, 我们的列表是不需要这个编号的, 比如说用无序列表做导航的时候. Bootstrap为众多开发者考虑的非常周道, 通过给无序列表添加一个类名“.list-unstyled”,这样就可以去除默认的列表样式的风格. (ul/ol中加入CSS类).</p>\n<h3 id=\"列表–内联列表\"><a href=\"#列表–内联列表\" class=\"headerlink\" title=\"列表–内联列表\"></a>列表–内联列表</h3><p>Bootstrap像去点列表一样, 通过添加类名“.list-inline”来实现内联列表, 简单点说就是把垂直列表换成水平列表, 而且去掉项目符号(编号), 保持水平显示. 也可以说内联列表就是为<strong>制作水平导航</strong>而生. </p>\n<h3 id=\"列表–定义列表\"><a href=\"#列表–定义列表\" class=\"headerlink\" title=\"列表–定义列表\"></a>列表–定义列表</h3><p>对于定义列表而言, Bootstrap并没有做太多的调整, 只是调整了行间距, 外边距和字体加粗效果. dl&gt;dt&gt;dd.</p>\n<h3 id=\"列表–水平定义列表\"><a href=\"#列表–水平定义列表\" class=\"headerlink\" title=\"列表–水平定义列表\"></a>列表–水平定义列表</h3><p>水平定义列表就像内联列表一样, Bootstrap可以给&lt;dl&gt;添加类名“.dl-horizontal”给定义列表实现水平显示效果. </p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>在Bootstrap主要提供了三种代码风格：<br>1、使用&lt;code&gt;来显示单行内联代码<br>2、使用&lt;pre&gt;来显示多行块代码<br>3、使用&lt;kbd&gt;来显示用户输入代码<br>在使用代码时, 用户可以根据具体的需求来使用不同的类型：<br>1、&lt;code&gt;: 一般是针对于单个单词或单个句子的代码<br>2、&lt;pre&gt;: 一般是针对于多行代码(也就是成块的代码)<br>3、&lt;kbd&gt;: 一般是表示用户要通过键盘输入的内容<br>正如前面所示, &lt;pre&gt;元素一般用于显示大块的代码, 并保证原有格式不变. 但有时候代码太多, 而且不想让其占有太大的页面篇幅, 就想控制代码块的大小. Bootstrap也考虑到这一点, 你只需要在&lt;pre&gt;标签上添加类名“.pre-scrollable”, 就可以控制代码块区域最大高度为340px, 一旦超出这个高度, 就会在Y轴出现滚动条. </p>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><p>Bootstrap为表格提供了1种基础样式和4种附加样式以及1个支持响应式的表格. Bootstrap为表格不同的样式风格提供了不同的类名, 主要包括：<br>☑  .table：基础表格<br>☑  .table-striped：斑马线表格<br>☑  .table-bordered：带边框的表格<br>☑  .table-hover：鼠标悬停高亮的表格<br>☑  .table-condensed：紧凑型表格<br>☑  .table-responsive：响应式表格<br>表格–表格行的类:Bootstrap还为表格的行元素&lt;tr&gt;提供了五种不同的类名, 每种类名控制了行的不同背景颜色, active, success, info, warning, danger</p>\n<h3 id=\"表格–基础表格\"><a href=\"#表格–基础表格\" class=\"headerlink\" title=\"表格–基础表格\"></a>表格–基础表格</h3><p>在Bootstrap中, 对于基础表格是通过类名“.table”来控制. 如果在&lt;table&gt;元素中不添加任何类名, 表格是无任何样式效果的. 想得到基础表格, 我们只需要在&lt;table&gt;元素上添加“.table”类名, 就可以得到Bootstrap的基础表格.</p>\n<h3 id=\"表格–斑马线表格\"><a href=\"#表格–斑马线表格\" class=\"headerlink\" title=\"表格–斑马线表格\"></a>表格–斑马线表格</h3><p>有时候为了让表格更具阅读性, 需要将表格制作成类似于斑马线的效果. 简单点说就是让表格带有背景条纹效果. 在Bootstrap中实现这种表格效果并不困难, 只需要在&lt;table class=”table”&gt;的基础上增加类名“.table-striped”即可.</p>\n<h3 id=\"表格–带边框的表格\"><a href=\"#表格–带边框的表格\" class=\"headerlink\" title=\"表格–带边框的表格\"></a>表格–带边框的表格</h3><p>基础表格仅让表格部分地方有边框, 但有时候需要整个表格具有边框效果. Bootstrap出于实际运用, 也考虑这种表格效果, 即所有单元格具有一条1px的边框.<br>Bootstrap中带边框的表格使用方法和斑马线表格的使用方法类似, 只需要在基础表格&lt;table class=”table”&gt;基础上添加一个“.table-bordered”类名即可.</p>\n<h3 id=\"表格–鼠标悬浮高亮的表格\"><a href=\"#表格–鼠标悬浮高亮的表格\" class=\"headerlink\" title=\"表格–鼠标悬浮高亮的表格\"></a>表格–鼠标悬浮高亮的表格</h3><p>当鼠标悬停在表格的行上面有一个高亮的背景色, 这样的表格让人看起来就是舒服, 时刻告诉用户正在阅读表格哪一行的数据. Bootstrap的确没有让你失望, 他也考虑到这种效果, 其提供了一个“.table-hover”类名来实现这种表格效果. 鼠标悬停高亮的表格使用也简单, 仅需要&lt;table class=”table”&gt;元素上添加类名“table-hover”即可.</p>\n<h3 id=\"表格–紧凑型表格\"><a href=\"#表格–紧凑型表格\" class=\"headerlink\" title=\"表格–紧凑型表格\"></a>表格–紧凑型表格</h3><p>何谓紧凑型表格, 简单理解, 就是单元格没内距或者内距较其他表格的内距更小. 换句话说, 要实现紧凑型表格只需要重置表格单元格的内距padding的值. 那么在Bootstrap中, 通过类名“table-condensed”重置了单元格内距值. 紧凑型表格的运用, 也只是需要在&lt;table class=”table”&gt;基础上添加类名“table-condensed”.另外从上面的示例中大家可能也发现了, 不管制作哪种表格都离不开类名“table”. 所以大家在使用Bootstrap表格时, <strong>千万注意, 你的&lt;table&gt;元素中一定不能缺少类名“table”</strong>. </p>\n<h3 id=\"表格–响应式表格\"><a href=\"#表格–响应式表格\" class=\"headerlink\" title=\"表格–响应式表格\"></a>表格–响应式表格</h3><p>随着各种手持设备的出现, 要想让你的Web页面适合千罗万像的设备浏览, 响应式设计的呼声越来越高. 在Bootstrap中也为表格提供了响应式的效果, 将其称为响应式表格.<br>Bootstrap提供了一个容器, 并且此容器设置类名“.table-responsive”,此容器就具有响应式效果, 然后<strong>将&lt;table class=”table”&gt;置于这个容器当中(多一个容器)</strong>, 这样表格也就具有响应式效果. Bootstrap中响应式表格效果表现为：当你的浏览器可视区域小于768px时, 表格底部会出现水平滚动条. 当你的浏览器可视区域大于768px时, 表格底部水平滚动条就会消失. </p>\n<hr>\n<h1 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h1><h2 id=\"基础表单\"><a href=\"#基础表单\" class=\"headerlink\" title=\"基础表单\"></a>基础表单</h2><p>表单中常见的元素主要包括：文本输入框、下拉选择框、单选按钮、复选按钮、文本域和按钮等. 其中每个控件所起的作用都各不相同, 而且不同的浏览器对表单控件渲染的风格都各有不同. 对于基础表单, Bootstrap并未对其做太多的定制性效果设计, 仅仅对表单内的fieldset、legend、label标签进行了定制. 当然表单除了这几个元素之外, 还有input、select、textarea等元素, 在Bootstrap框架中, 通过定制了一个类名<code>form-control</code>, 也就是说, 如果这几个元素使用了类名<strong>“form-control”</strong>, 将会实现一些设计上的定制效果.<br>1、宽度变成了100%<br>2、设置了一个浅灰色(#ccc)的边框<br>3、具有4px的圆角<br>4、设置阴影效果, 并且元素得到焦点之时, 阴影和边框效果会有所变化<br>5、设置了placeholder的颜色为#999<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"form-group\"</span>&gt;</div><div class=\"line\">    &lt;label <span class=\"keyword\">for</span>=<span class=\"string\">\"exampleInputEmail1\"</span>&gt;邮箱：&lt;/label&gt;</div><div class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"email\"</span> class=<span class=\"string\">\"form-control\"</span> id=<span class=\"string\">\"exampleInputEmail1\"</span> </div><div class=\"line\">\t\t\tplaceholder=<span class=\"string\">\"请输入您的邮箱地址\"</span>&gt;</div><div class=\"line\">  &lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"checkbox\"</span>&gt;</div><div class=\"line\">    &lt;label&gt;</div><div class=\"line\">      &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"checkbox\"</span>&gt; 记住密码</div><div class=\"line\">    &lt;/label&gt;</div><div class=\"line\">  &lt;/div&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"水平表单\"><a href=\"#水平表单\" class=\"headerlink\" title=\"水平表单\"></a>水平表单</h2><p>在Bootstrap框架中要实现水平表单效果, 必须满足以下两个条件：<br>1、在&lt;form&gt;元素是使用类名“form-horizontal”.<br>2、配合Bootstrap框架的网格系统. (网格布局会在以后的章节中详细讲解)</p>\n<p>在&lt;form&gt;元素上使用类名“form-horizontal”主要有以下几个作用：<br>1、设置表单控件padding和margin值.<br>2、改变“form-group”的表现形式, 类似于网格系统的“row”.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"form-group\"</span>&gt;</div><div class=\"line\">    &lt;label <span class=\"keyword\">for</span>=<span class=\"string\">\"inputPassword3\"</span> class=<span class=\"string\">\"col-sm-2 control-label\"</span>&gt;密码&lt;/label&gt;</div><div class=\"line\">    &lt;div class=<span class=\"string\">\"col-sm-10\"</span>&gt;</div><div class=\"line\">      &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"password\"</span> class=<span class=\"string\">\"form-control\"</span> id=<span class=\"string\">\"inputPassword3\"</span></div><div class=\"line\">\t\t\t\tplaceholder=<span class=\"string\">\"请输入您的邮箱密码\"</span>&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"内联表单\"><a href=\"#内联表单\" class=\"headerlink\" title=\"内联表单\"></a>内联表单</h2><p>在Bootstrap框架中实现这样的表单效果是轻而易举的, 你只需要在&lt;form&gt;元素中添加类名“form-inline”即可. 内联表单实现原理非常简单, 欲将表单控件在一行显示, 就需要将表单控件设置成内联块元素(display:inline-block).如果你要在input前面添加一个label标签时, 会导致input换行显示. 如果你必须添加这样的一个label标签, 并且不想让input换行, 你需要将label标签也放在容器“form-group”中. 回过头来看示例, 你或许会问, 为什么添加了label标签, 而且没有放置在”form-group”这样的容器中, input也不会换行；还有label标签怎么没显示出来. 如果你仔细看, 在label标签运用了一个类名“sr-only”, 标签没显示就是这个样式将标签隐藏了.那么Bootstrap为什么要这么做呢？这样不是多此一举吗？其实不是的, 如果没有为输入控件设置label标签, 屏幕阅读器将无法正确识别. 这也是Bootstrap框架另一个优点之处, 为残障人员进行了一定的考虑. </p>\n<h2 id=\"表单控件-输入框input\"><a href=\"#表单控件-输入框input\" class=\"headerlink\" title=\"表单控件(输入框input)\"></a>表单控件(输入框input)</h2><p>单行输入框,常见的文本输入框, 也就是input的type属性值为text. 在Bootstrap中使用input时也必须添加type类型, 如果没有指定type类型, 将无法得到正确的样式, 因为Bootstrap框架都是通过input[type=“?”](其中?号代表type类型, 比如说text类型, 对应的是input[type=“text”])的形式来定义样式的.<br>为了让控件在各种表单风格中样式不出错, 需要添加类名“form-control”,<br><strong>全部input类型都在这了</strong><br>&lt;input type=”email” class=”form-control” placeholder=”Enter email”&gt;<br>text button checkbox date datetime datetime-local img file hidden month number password radio range reset search submit tel time url week hidden</p>\n<h2 id=\"表单控件-下拉选择框select\"><a href=\"#表单控件-下拉选择框select\" class=\"headerlink\" title=\"表单控件(下拉选择框select)\"></a>表单控件(下拉选择框select)</h2><p>Bootstrap框架中的下拉选择框使用和原始的一致, 多行选择设置multiple属性的值为multiple. Bootstrap框架会为这些元素提供统一的样式风格.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;select multiple class=<span class=\"string\">\"form-control\"</span>&gt; </div><div class=\"line\">  &lt;option&gt;1&lt;/option&gt; </div><div class=\"line\">  &lt;option&gt;2&lt;/option&gt; </div><div class=\"line\">  &lt;option&gt;3&lt;/option&gt; </div><div class=\"line\">  &lt;option&gt;4&lt;/option&gt; </div><div class=\"line\">  &lt;option&gt;5&lt;/option&gt; </div><div class=\"line\">&lt;/select&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"表单控件-文本域textarea\"><a href=\"#表单控件-文本域textarea\" class=\"headerlink\" title=\"表单控件(文本域textarea)\"></a>表单控件(文本域textarea)</h2><p>文本域和原始使用方法一样, 设置rows可定义其高度, 设置cols可以设置其宽度. 但如果textarea元素中添加了类名“form-control”类名, 则无需设置cols属性. 因为Bootstrap框架中的“form-control”样式的表单控件宽度为100%或auto.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;form role=<span class=\"string\">\"form\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"form-group\"</span>&gt;</div><div class=\"line\">    &lt;textarea class=<span class=\"string\">\"form-control\"</span> rows=<span class=\"string\">\"3\"</span>&gt;&lt;/textarea&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"表单控件-复选框checkbox和单选择按钮radio\"><a href=\"#表单控件-复选框checkbox和单选择按钮radio\" class=\"headerlink\" title=\"表单控件(复选框checkbox和单选择按钮radio)\"></a>表单控件(复选框checkbox和单选择按钮radio)</h2><p><span style=\"color:blue;\">Bootstrap框架中checkbox和radio有点特殊</span>, Bootstrap针对他们做了一些特殊化处理, 主要是checkbox和radio与label标签配合使用会出现一些小问题(最头痛的是对齐问题). 使用Bootstrap框架, 开发人员无需考虑太多, 只需要按照下面的方法使用即可.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"checkbox\"</span>&gt;</div><div class=\"line\">    &lt;label&gt;</div><div class=\"line\">      &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"checkbox\"</span> value=<span class=\"string\">\"\"</span>&gt;</div><div class=\"line\">      记住密码</div><div class=\"line\">    &lt;/label&gt;</div><div class=\"line\">  &lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"radio\"</span>&gt;</div><div class=\"line\">  &lt;label&gt;</div><div class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"radio\"</span> name=<span class=\"string\">\"optionsRadios\"</span> id=<span class=\"string\">\"optionsRadios1\"</span> value=<span class=\"string\">\"love\"</span> checked&gt;</div><div class=\"line\">      喜欢</div><div class=\"line\">  &lt;/label&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"radio\"</span>&gt;</div><div class=\"line\">\t&lt;label&gt;</div><div class=\"line\">\t\t&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"radio\"</span> name=<span class=\"string\">\"optionsRadios\"</span> id=<span class=\"string\">\"optionsRadios2\"</span> value=<span class=\"string\">\"hate\"</span>&gt;</div><div class=\"line\">\t\t不喜欢</div><div class=\"line\">\t&lt;/label&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>从上面的示例, 我们可以得知：<br>1、<strong>不管是checkbox还是radio都使用label包起来了</strong><br>2、checkbox连同label标签放置在一个名为“.checkbox”的容器内<br>3、radio连同label标签放置在一个名为“.radio”的容器内<br>在Bootstrap框架中, 主要借助“.checkbox”和“.radio”样式, 来处理复选框、单选按钮与标签的对齐方式. </p>\n<h2 id=\"表单控件-复选框和单选按钮水平排列\"><a href=\"#表单控件-复选框和单选按钮水平排列\" class=\"headerlink\" title=\"表单控件(复选框和单选按钮水平排列)\"></a>表单控件(复选框和单选按钮水平排列)</h2><p>有时候, 为了布局的需要, 将复选框和单选按钮需要水平排列. Bootstrap框架也做了这方面的考虑：<br>1、如果checkbox需要水平排列, 只需要在<strong>label标签上添加类名“checkbox-inline”</strong><br>2、如果radio需要水平排列, 只需要在<strong>label标签上添加类名“radio-inline”</strong><br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"form-group\"</span>&gt;</div><div class=\"line\">  &lt;label class=<span class=\"string\">\"checkbox-inline\"</span>&gt;</div><div class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"checkbox\"</span>  value=<span class=\"string\">\"option1\"</span>&gt;游戏</div><div class=\"line\">  &lt;/label&gt;</div><div class=\"line\">  &lt;label class=<span class=\"string\">\"checkbox-inline\"</span>&gt;</div><div class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"checkbox\"</span>  value=<span class=\"string\">\"option2\"</span>&gt;摄影</div><div class=\"line\">  &lt;/label&gt;</div><div class=\"line\">  &lt;label class=<span class=\"string\">\"checkbox-inline\"</span>&gt;</div><div class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"checkbox\"</span>  value=<span class=\"string\">\"option3\"</span>&gt;旅游</div><div class=\"line\">  &lt;/label&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"表单控件-按钮\"><a href=\"#表单控件-按钮\" class=\"headerlink\" title=\"表单控件(按钮)\"></a>表单控件(按钮)</h2><p>按钮也是表单重要控件之一,制作按钮通常使用下面代码来实现：<br>☑  input[type=“submit”]<br>☑  input[type=“button”]<br>☑  input[type=“reset”]<br>☑  &lt;button&gt;<br>在Bootstrap框架中的按钮都是采用&lt;button&gt;来实现. </p>\n<h2 id=\"表单控件大小\"><a href=\"#表单控件大小\" class=\"headerlink\" title=\"表单控件大小\"></a>表单控件大小</h2><p>前面看到的表单控件都正常的大小. 可以通过设置控件的height, line-height, padding和font-size等属性来实现控件的高度设置. 不过Bootstrap框架还提供了两个不同的类名, 用来控制表单控件的高度. 这两个类名是：<br>1、input-sm: 让控件比正常大小更小<br>2、input-lg: 让控件比正常大小更大<br><strong>这两个类适用于表单中的input, textarea和select控件.</strong> 不管是“input-sm”还是“input-lg”仅对控件高度做了处理. 但往往很多时候, 我们需要控件宽度也要做一定的变化处理. 这个时候就要借住Bootstrap框架的网格系统.<br>前面介绍水平表单时说过, <strong>如果表单使用了类名“form-horizontal”, 其中“form-group”就相当于网格系统中的“row”</strong>. 换句话说, 如果没有这样做, 要通过网格系统来控制表单控件宽度, 就需要这样使用：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"row\"</span>&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"col-xs-4\"</span>&gt;</div><div class=\"line\">\t\t&lt;input class=<span class=\"string\">\"form-control input-lg\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> placeholder=<span class=\"string\">\".col-xs-4\"</span>&gt;</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"表单控件状态-焦点状态\"><a href=\"#表单控件状态-焦点状态\" class=\"headerlink\" title=\"表单控件状态(焦点状态)\"></a>表单控件状态(焦点状态)</h2><p>每一种状态都能给用户传递不同的信息, 比如表单有焦点的状态可以告诉用户可以输入或选择东西, 禁用状态可以告诉用户不可以输入或选择东西, 还有就是表单控件验证状态, 可以告诉用户的操作是否正确等. 那么在Bootstrap框架中的表单控件也具备这些状态.  从源码中我们可以看出, 要让控件在焦点状态下有上面样式效果, 需要给控件添加类名“form-control”.在Bootstrap框架中, file、radio和checkbox控件在焦点状态下的效果也与普通的input控件不太一样, 主要是因为Bootstrap对他们做了一些特殊处理</p>\n<h2 id=\"表单控件状态-禁用状态\"><a href=\"#表单控件状态-禁用状态\" class=\"headerlink\" title=\"表单控件状态(禁用状态)\"></a>表单控件状态(禁用状态)</h2><p>Bootstrap框架的表单控件的禁用状态和普通的表单禁用状态实现方法是一样的, 在相应的表单控件上<strong>添加属性“disabled”</strong>(<strong>不是添加类</strong>). 和其他表单的禁用状态不同的是, Bootstrap框架做了一些样式风格的处理. 在使用了“form-control”的表单控件中, 样式设置了禁用表单背景色为灰色, 而且手型变成了不准输入的形状. 如果控件中不使用类名“form-control”, 禁用的控件只会有一个不准输入的手型出来. 在Bootstrap框架中, 如果fieldset设置了disabled属性, 整个域都将处于被禁用状态<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;form role=<span class=\"string\">\"form\"</span>&gt;</div><div class=\"line\">&lt;fieldset disabled&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"form-group\"</span>&gt;</div><div class=\"line\">  &lt;label <span class=\"keyword\">for</span>=<span class=\"string\">\"disabledTextInput\"</span>&gt;禁用的输入框&lt;/label&gt;</div><div class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> id=<span class=\"string\">\"disabledTextInput\"</span> class=<span class=\"string\">\"form-control\"</span> placeholder=<span class=\"string\">\"禁止输入\"</span>&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"form-group\"</span>&gt;</div><div class=\"line\">  &lt;label <span class=\"keyword\">for</span>=<span class=\"string\">\"disabledSelect\"</span>&gt;禁用的下拉框&lt;/label&gt;</div><div class=\"line\">    &lt;select id=<span class=\"string\">\"disabledSelect\"</span> class=<span class=\"string\">\"form-control\"</span>&gt;</div><div class=\"line\">  &lt;option&gt;不可选择&lt;/option&gt;</div><div class=\"line\">  &lt;/select&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"checkbox\"</span>&gt;</div><div class=\"line\">  &lt;label&gt;</div><div class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"checkbox\"</span>&gt;无法选择</div><div class=\"line\">  &lt;/label&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;button <span class=\"built_in\">type</span>=<span class=\"string\">\"submit\"</span> class=<span class=\"string\">\"btnbtn-primary\"</span>&gt;提交&lt;/button&gt;</div><div class=\"line\">&lt;/fieldset&gt;</div><div class=\"line\">&lt;/form&gt;</div></pre></td></tr></table></figure></p>\n<p>据说对于整个禁用的域中, 如果legend中有输入框的话, 这个输入框是无法被禁用的. </p>\n<h2 id=\"表单控件状态-验证状态\"><a href=\"#表单控件状态-验证状态\" class=\"headerlink\" title=\"表单控件状态(验证状态)\"></a>表单控件状态(验证状态)</h2><p>在制作表单时, 不免要做表单验证. 同样也需要提供验证状态样式, 在Bootstrap框架中同样提供这几种效果.<br>1、.has-warning: 警告状态(黄色)<br>2、.has-error: 错误状态(红色)<br>3、.has-success: 成功状态(绿色)<br>使用的时候只需要在form-group容器上对应添加状态类名. 很多时候, 在表单验证的时候, 不同的状态会提供不同的icon, 比如成功是一个对号(√), 错误是一个叉号(×)等. 在Bootstrap框中也提供了这样的效果. 如果你想让表单在对应的状态下显示icon出来, 只需要在对应的状态下添加类名“has-feedback”. 请注意, 此类名要与“has-error”、“has-warning”和“has-success”在一起<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"form-group has-success has-feedback\"</span>&gt;</div><div class=\"line\">\t&lt;label class=<span class=\"string\">\"control-label\"</span> <span class=\"keyword\">for</span>=<span class=\"string\">\"inputSuccess1\"</span>&gt;成功状态&lt;/label&gt;</div><div class=\"line\">\t&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> class=<span class=\"string\">\"form-control\"</span> id=<span class=\"string\">\"inputSuccess1\"</span> placeholder=<span class=\"string\">\"成功状态\"</span> &gt;</div><div class=\"line\">\t&lt;span class=<span class=\"string\">\"glyphicon glyphicon-ok form-control-feedback\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">\t&lt;!-- 使用图标的话,必须加入之前的 成功状态 的 label --&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"表单提示信息\"><a href=\"#表单提示信息\" class=\"headerlink\" title=\"表单提示信息\"></a>表单提示信息</h2><p>平常在制作表单验证时, 要提供不同的提示信息. 在Bootstrap框架中也提供了这样的效果. 使用了一个”help-block”样式, 将提示信息以块状显示, 并且显示在控件底部.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"form-group has-success has-feedback\"</span>&gt;</div><div class=\"line\">  &lt;label class=<span class=\"string\">\"control-label\"</span> <span class=\"keyword\">for</span>=<span class=\"string\">\"inputSuccess1\"</span>&gt;成功状态&lt;/label&gt;</div><div class=\"line\">  &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> class=<span class=\"string\">\"form-control\"</span> id=<span class=\"string\">\"inputSuccess1\"</span> placeholder=<span class=\"string\">\"成功状态\"</span> &gt;</div><div class=\"line\">  &lt;span class=<span class=\"string\">\"help-block\"</span>&gt;你输入的信息是正确的&lt;/span&gt;</div><div class=\"line\">  &lt;span class=<span class=\"string\">\"glyphicon glyphicon-ok form-control-feedback\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"按钮\"><a href=\"#按钮\" class=\"headerlink\" title=\"按钮\"></a>按钮</h2><p><strong>请始终为按钮规定 type 属性</strong>. Internet Explorer 的默认类型是 “button”, 而其他浏览器中(包括 W3C 规范)的默认值是 “submit”.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;button class=<span class=\"string\">\"btn\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;基础按钮.btn&lt;/button&gt;  </div><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-default\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;默认按钮.btn-default&lt;/button&gt; </div><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-primary\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;主要按钮.btn-primary&lt;/button&gt; </div><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-success\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;成功按钮.btn-success&lt;/button&gt; </div><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-info\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;信息按钮.btn-info&lt;/button&gt; </div><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-warning\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;警告按钮.btn-warning&lt;/button&gt; </div><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-danger\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;危险按钮.btn-danger&lt;/button&gt; </div><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-link\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;链接按钮.btn-link&lt;/button&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"默认按钮\"><a href=\"#默认按钮\" class=\"headerlink\" title=\"默认按钮\"></a>默认按钮</h3><p>Bootstrap框架首先通过基础类名“.btn”定义了一个基础的按钮风格, 然后通过“.btn-default”定义了一个默认的按钮风格. 默认按钮的风格就是在基础按钮的风格的基础上修改了按钮的背景颜色、边框颜色和文本颜色. 使用默认按钮风格也非常的简单, 只需要在基础按钮“btn”的基础上增加类名“btn-default”即可</p>\n<h3 id=\"多标签支持\"><a href=\"#多标签支持\" class=\"headerlink\" title=\"多标签支持\"></a>多标签支持</h3><p>虽然在Bootstrap框架中使用任何标签元素都可以实现按钮风格, 但个人并不建议这样使用, 为了避免浏览器兼容性问题, 个人强烈建议使用button或a标签来制作按钮. </p>\n<h3 id=\"定制风格\"><a href=\"#定制风格\" class=\"headerlink\" title=\"定制风格\"></a>定制风格</h3><p>在介绍按钮开篇就说过, Web页面可能会有不同的按钮风格. 那么在Bootstrap框架也考虑了. 在Bootstrap框架中除了默认的按钮风格之外, 还有其他六种按钮风格, 每种风格的其实都一样, 不同之处就是按钮的背景颜色、边框颜色和文本颜色. </p>\n<h3 id=\"按钮大小\"><a href=\"#按钮大小\" class=\"headerlink\" title=\"按钮大小\"></a>按钮大小</h3><p>在Bootstrap框架中, 对于按钮的大小, 也是可以定制的. 类似于input一样, 通过在基础按钮“.btn”的基础上追加类名来控制按钮的大小.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-primary btn-lg\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;大型按钮.btn-lg&lt;/button&gt; </div><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-primary\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;正常按钮&lt;/button&gt;</div><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-primary btn-xs\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;小型按钮.btn-sm&lt;/button&gt;</div><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-primary btn-xs\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;小型按钮.btn-sm&lt;/button&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"块状按钮\"><a href=\"#块状按钮\" class=\"headerlink\" title=\"块状按钮\"></a>块状按钮</h3><p>Bootstrap框架中提供了一个类名“btn-block”. 按钮使用这个类名就可以让按钮充满整个容器, 并且这个按钮不会有任何的padding和margin值. 在实际当中, 常把这种按钮称为块状按钮. </p>\n<h3 id=\"按钮状态——活动状态\"><a href=\"#按钮状态——活动状态\" class=\"headerlink\" title=\"按钮状态——活动状态\"></a>按钮状态——活动状态</h3><p>Bootstrap框架针对按钮的状态做了一些特殊处理. 在Bootstrap框架中针对按钮的状态效果主要分为两种：活动状态和禁用状态. Bootstrap按钮的活动状态主要包括按钮的悬浮状态(:hover), 点击状态(:active)和焦点状态(:focus)几种. 而且不同风格下的按钮都具有这几种状态效果, 只是颜色做了一定的调整.当按钮处理正在点击状态(也就是鼠标按下的未松开的状态), <strong>对于&lt;button&gt;元素是通过“:active”伪类实现</strong>, <strong>而对于&lt;a&gt;这样的标签元素则是通过添加类名“.active”来实现</strong>. </p>\n<h3 id=\"按钮状态——禁用状态\"><a href=\"#按钮状态——禁用状态\" class=\"headerlink\" title=\"按钮状态——禁用状态\"></a>按钮状态——禁用状态</h3><p>和input等表单控件一样, 在Bootstrap框架的按钮中也具有禁用状态的设置. 禁用状态与其他状态按钮相比, 就是背景颜色的透明度做了一定的处理, opcity的值从100%调整为65%. 在Bootstrap框架中, 要禁用按钮有两种实现方式：<br>方法1: 在标签中添加disabled属性<br>方法2: 在元素标签中添加类名“disabled”</p>\n<h2 id=\"图像\"><a href=\"#图像\" class=\"headerlink\" title=\"图像\"></a>图像</h2><p>图像在网页制作中也是常要用到的元素, 在Bootstrap框架中对于图像的样式风格提供以下几种风格：<br>1、img-responsive：响应式图片, 主要针对于响应式设计<br>2、img-rounded: 圆角图片<br>3、img-circle: 圆形图片<br>4、img-thumbnail: 缩略图片<br>使用方法非常简单, 只需要在&lt;img&gt;标签上添加对应的类名.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;img  alt=<span class=\"string\">\"140x140\"</span> src=<span class=\"string\">\"http://placehold.it/140x140\"</span>&gt;</div><div class=\"line\">&lt;img  class=<span class=\"string\">\"img-rounded\"</span> alt=<span class=\"string\">\"140x140\"</span> src=<span class=\"string\">\"http://placehold.it/140x140\"</span>&gt;</div><div class=\"line\">&lt;img  class=<span class=\"string\">\"img-circle\"</span> alt=<span class=\"string\">\"140x140\"</span> src=<span class=\"string\">\"http://placehold.it/140x140\"</span>&gt;</div><div class=\"line\">&lt;img  class=<span class=\"string\">\"img-thumbnail\"</span> alt=<span class=\"string\">\"140x140\"</span> src=<span class=\"string\">\"http://placehold.it/140x140\"</span>&gt;</div><div class=\"line\">&lt;img  class=<span class=\"string\">\"img-responsive\"</span> alt=<span class=\"string\">\"140x140\"</span> src=<span class=\"string\">\"http://placehold.it/140x140\"</span>&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"图标\"><a href=\"#图标\" class=\"headerlink\" title=\"图标\"></a>图标</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;span class=<span class=\"string\">\"glyphicon glyphicon-search\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">&lt;span class=<span class=\"string\">\"glyphicon glyphicon-asterisk\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">&lt;span class=<span class=\"string\">\"glyphicon glyphicon-plus\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">&lt;span class=<span class=\"string\">\"glyphicon glyphicon-cloud\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">&lt;span class=<span class=\"string\">\"glyphicon glyphicon-phone\"</span>&gt;&lt;/span&gt;</div></pre></td></tr></table></figure>\n<p>在网页中使用图标也非常的简单, 在任何内联元素上应用所对应的样式即可.所有icon都是以”glyphicon-”前缀的类名开始, 然后后缀表示图标的名称. </p>\n<hr>\n<h1 id=\"网格系统\"><a href=\"#网格系统\" class=\"headerlink\" title=\"网格系统\"></a>网格系统</h1><p>网格系统的实现原理非常简单, 仅仅是通过定义容器大小, 平分12份(也有平分成24份或32份, 但12份是最常见的), 再调整内外边距, 最后结合媒体查询, 就制作出了强大的响应式网格系统. Bootstrap框架中的网格系统就是将容器平分成12份<br>Bootstrap框架的网格系统工作原理如下：<br>1、<strong>数据行(.row)</strong>必须包含在容器(.container)中, 以便为其赋予合适的对齐方式和内距(padding). 如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"container\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"row\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>2、在行(.row)中可以添加列(.column), 但列数之和不能超过平分的总列数, 比如12. 如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"container\"</span>&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"row\"</span>&gt;</div><div class=\"line\">\t\t&lt;div class=<span class=\"string\">\"col-md-4\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">\t\t&lt;div class=<span class=\"string\">\"col-md-8\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">\t&lt;div&gt;</div><div class=\"line\">&lt;div&gt;</div></pre></td></tr></table></figure></p>\n<p>3、具体内容应当放置在列容器(column)之内, 而且<strong>只有列(column)才可以作为行容器(.row)的直接子元素</strong><br>4、通过设置内距(padding)从而创建列与列之间的间距. 然后通过为第一列和最后一列设置负值的外距(margin)来抵消内距(padding)的影响</p>\n<h2 id=\"列偏移\"><a href=\"#列偏移\" class=\"headerlink\" title=\"列偏移\"></a>列偏移</h2><p>有的时候, 我们不希望相邻的两个列紧靠在一起, 但又不想使用margin或者其他的技术手段来. 这个时候就可以使用列偏移(offset)功能来实现. 使用列偏移也非常简单, 只需要在列元素上添加类名“col-md-offset-<em>” (其中星号代表要偏移的列组合数), 那么具有这个类名的列就会向右偏移. 例如, 你在列元素上添加“col-md-offset-4”, 表示该列向右移动4个列的宽度. 不过有一个细节需要注意, 使用 ”col-md-offset-</em>” 对列进行向右偏移时, 要保证列与偏移列的总数不超过12, 不然会致列断行显示.</p>\n<h2 id=\"列排序\"><a href=\"#列排序\" class=\"headerlink\" title=\"列排序\"></a>列排序</h2><p>列排序其实就是改变列的方向, 就是改变左右浮动, 并且设置浮动的距离. 在Bootstrap框架的网格系统中是通过添加类名“col-md-push-<em>”(向右)和“col-md-pull-</em>”(向左) (其中星号代表移动的列组合数). </p>\n<h2 id=\"列的嵌套\"><a href=\"#列的嵌套\" class=\"headerlink\" title=\"列的嵌套\"></a>列的嵌套</h2><p>Bootstrap框架的网格系统还支持列的嵌套. 你可以在一个列中添加一个或者多个行(row)容器, 然后在这个行容器中插入列(像前面介绍的一样使用列). 但在列容器中的行容器(row), 宽度为100%时, 就是当前外部列的宽度.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"row\"</span>&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"col-md-8\"</span>&gt;</div><div class=\"line\">\t我的里面嵌套了一个网格</div><div class=\"line\">\t\t&lt;div class=<span class=\"string\">\"row\"</span>&gt;</div><div class=\"line\">\t\t\t&lt;div class=<span class=\"string\">\"col-md-6\"</span>&gt;col-md-6&lt;/div&gt;</div><div class=\"line\">\t\t\t&lt;div class=<span class=\"string\">\"col-md-6\"</span>&gt;col-md-6&lt;/div&gt;</div><div class=\"line\">\t\t&lt;/div&gt;</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"菜单、按钮和导航\"><a href=\"#菜单、按钮和导航\" class=\"headerlink\" title=\"菜单、按钮和导航\"></a>菜单、按钮和导航</h1><p>在Bootstrap框架中的下拉菜单组件是一个独立的组件, 根据不同的版本, 它对应的文件. 在使用Bootstrap框架的下拉菜单时, 必须调用Bootstrap框架提供的bootstrap.js文件. 当然, 如果你使用的是未编译版本, 在js文件夹下你能找到一个名为“dropdown.js”的文件. 你也可以调用这个js文件.<br><span style=\"color:red;\">特别声明</span>：因为Bootstrap的组件交互效果都是依赖于jQuery库写的插件, 所以在使用bootstrap.min.js之前一定要先加载jquery.min.js才会生效果. </p>\n<h2 id=\"下拉菜单\"><a href=\"#下拉菜单\" class=\"headerlink\" title=\"下拉菜单\"></a>下拉菜单</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"dropdown\"</span>&gt;</div><div class=\"line\">\t&lt;button class=<span class=\"string\">\"btn btn-default dropdown-toggle\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span></div><div class=\"line\">\t\tid=<span class=\"string\">\"dropdownMenu1\"</span> data-toggle=<span class=\"string\">\"dropdown\"</span>&gt;</div><div class=\"line\">\t\t下拉菜单</div><div class=\"line\">\t\t&lt;span class=<span class=\"string\">\"caret\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">\t&lt;/button&gt;</div><div class=\"line\">\t&lt;ul class=<span class=\"string\">\"dropdown-menu\"</span> role=<span class=\"string\">\"menu\"</span> aria-labelledby=<span class=\"string\">\"dropdownMenu1\"</span>&gt;</div><div class=\"line\">\t\t&lt;li role=<span class=\"string\">\"presentation\"</span>&gt;&lt;a role=<span class=\"string\">\"menuitem\"</span> tabindex=<span class=\"string\">\"-1\"</span> href=<span class=\"string\">\"#\"</span>&gt;</div><div class=\"line\">\t\t\t下拉菜单项&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li role=<span class=\"string\">\"presentation\"</span> class=<span class=\"string\">\"divider\"</span>&gt;&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li role=<span class=\"string\">\"presentation\"</span>&gt;&lt;a role=<span class=\"string\">\"menuitem\"</span> tabindex=<span class=\"string\">\"-1\"</span> href=<span class=\"string\">\"#\"</span>&gt;</div><div class=\"line\">\t\t\t下拉菜单项&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t&lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>使用方法：在使用Bootstrap框架中的下拉菜单组件时, 其结构运用的正确与否非常的重要, 如果结构和类名未使用正确, 直接影响组件是否能正常运用. 我们来简单的看看：<br>1、使用一个名为“dropdown”的容器包裹了整个下拉菜单元素, 示例中为:&lt;div class=”dropdown”&gt;&lt;/div&gt;<br>2、使用了一个&lt;button&gt;按钮做为父菜单, 并且定义类名“dropdown-toggle”和自定义“data-toggle”属性, 属性指明触发后的动作：data-toggle=”dropdown”<br>3、下拉菜单项使用一个ul列表, 并且定义一个类名为“dropdown-menu”, 此示例为:<br>&lt;ul class=”dropdown-menu”&gt;</p>\n<h3 id=\"下拉菜单-下拉分隔线\"><a href=\"#下拉菜单-下拉分隔线\" class=\"headerlink\" title=\"下拉菜单(下拉分隔线)\"></a>下拉菜单(下拉分隔线)</h3><p>在Bootstrap框架中的下拉菜单还提供了下拉分隔线, 假设下拉菜单有两个组, 那么组与组之间可以通过添加一个空的&lt;li&gt;, 并且给这个&lt;li&gt;添加类名“divider”来实现添加下拉分隔线的功能. </p>\n<h3 id=\"下拉菜单-菜单标题\"><a href=\"#下拉菜单-菜单标题\" class=\"headerlink\" title=\"下拉菜单(菜单标题)\"></a>下拉菜单(菜单标题)</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;li role=<span class=\"string\">\"presentation\"</span> class=<span class=\"string\">\"dropdown-header\"</span>&gt;第一部分菜单头部&lt;/li&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"下拉菜单-对齐方式\"><a href=\"#下拉菜单-对齐方式\" class=\"headerlink\" title=\"下拉菜单(对齐方式)\"></a>下拉菜单(对齐方式)</h3><p>Bootstrap框架中下拉菜单默认是左对齐, 如果你想让下拉菜单相对于父容器右对齐时, 可以在“dropdown-menu”上添加一个“pull-right”或者“dropdown-menu-right”类名</p>\n<h3 id=\"下拉菜单-菜单项状态\"><a href=\"#下拉菜单-菜单项状态\" class=\"headerlink\" title=\"下拉菜单(菜单项状态)\"></a>下拉菜单(菜单项状态)</h3><p>下拉菜单项的默认的状态(不用设置)有悬浮状态(:hover)和焦点状态(:focus).下拉菜单项除了上面两种状态, 还有当前状态(.active)和禁用状态(.disabled). 这两种状态使用方法只需要在对应的菜单项上添加对应的类名</p>\n<h2 id=\"按钮-按钮组\"><a href=\"#按钮-按钮组\" class=\"headerlink\" title=\"按钮(按钮组)\"></a>按钮(按钮组)</h2><p>按钮组和下拉菜单组件一样, 需要依赖于button.js插件才能正常运行. 不过我们同样可以直接只调用bootstrap.js文件. 因为这个文件已集成了button.js插件功能. 对于结构方面, 非常的简单. 使用一个名为“btn-group”的容器, 把多个按钮放到这个容器中.btn-group 主要使自身容器为内联块, 使内部 .btn 左浮. 如下所示：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"btn-group\"</span>&gt;</div><div class=\"line\">  &lt;button <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> class=<span class=\"string\">\"btn btn-default\"</span>&gt;</div><div class=\"line\">    &lt;span class=<span class=\"string\">\"glyphicon glyphicon-step-backward\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">  &lt;/button&gt;</div><div class=\"line\">  &lt;button <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> class=<span class=\"string\">\"btn btn-default\"</span>&gt;</div><div class=\"line\">    &lt;span class=<span class=\"string\">\"glyphicon glyphicon-step-forward\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">  &lt;/button&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>除了可以使用&lt;button&gt;元素之外, 还可以使用其他标签元素, 比如&lt;a&gt;标签. 唯一要保证的是：不管使用什么标签, “.btn-group”容器里的标签元素需要带有类名“.btn”. </p>\n<h3 id=\"按钮-按钮工具栏\"><a href=\"#按钮-按钮工具栏\" class=\"headerlink\" title=\"按钮(按钮工具栏)\"></a>按钮(按钮工具栏)</h3><p>在富文本编辑器中, 将按钮组分组排列在一起,比如说复制、剪切和粘贴一组；左对齐、中间对齐、右对齐和两端对齐一组,那么Bootstrap框架按钮工具栏也提供了这样的制作方法,你只需要将按钮组“btn-group”按组放在一个大的容器“btn-toolbar”中, 如下所示：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"btn-toolbar\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"btn-group\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"btn-group\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"btn-group\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>实现原理主要是让容器的多个分组“btn-group”元素进行浮动, 并且组与组之前保持5px的左外距.</p>\n<h3 id=\"按钮组大小设置\"><a href=\"#按钮组大小设置\" class=\"headerlink\" title=\"按钮组大小设置\"></a>按钮组大小设置</h3><p>在介绍按钮一节中, 我们知道按钮是通过btn-lg、btn-sm和btn-xs三个类名来调整padding、font-size、line-height和border-radius属性值来改变按钮大小. 那么按钮组的大小, 我们也可以通过类似的方法：<br>☑  .btn-group-lg:大按钮组<br>☑  .btn-group-sm:小按钮组<br>☑  .btn-group-xs:超小按钮组<br>只需要在“.btn-group”类名上追加对应的类名, 就可以得到不同大小的按钮组. 如下所示：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"btn-toolbar\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"btn-group btn-group-lg\"</span>&gt;</div><div class=\"line\">    …</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"btn-group\"</span>&gt;</div><div class=\"line\">  …</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"btn-group btn-group-sm\"</span>&gt;</div><div class=\"line\">    …</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"btn-group btn-group-xs\"</span>&gt;</div><div class=\"line\">   …</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"按钮-嵌套分组\"><a href=\"#按钮-嵌套分组\" class=\"headerlink\" title=\"按钮(嵌套分组)\"></a>按钮(嵌套分组)</h3><p>很多时候, 我们常把下拉菜单和普通的按钮组排列在一起, 实现类似于导航菜单的效果. 使用的时候, 只需要把当初制作下拉菜单的“dropdown”的容器换成“btn-group”, 并且和普通的按钮放在同一级.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"btn-group\"</span>&gt;</div><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-default\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;首页&lt;/button&gt;</div><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-default\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;产品展示&lt;/button&gt;</div><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-default\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;案例分析&lt;/button&gt;</div><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-default\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;联系我们&lt;/button&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"btn-group\"</span>&gt;</div><div class=\"line\">  &lt;button class=<span class=\"string\">\"btn btn-default dropdown-toggle\"</span> data-toggle=<span class=\"string\">\"dropdown\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;关于我们&lt;span class=<span class=\"string\">\"caret\"</span>&gt;&lt;/span&gt;&lt;/button&gt;</div><div class=\"line\">  &lt;ul class=<span class=\"string\">\"dropdown-menu\"</span>&gt;</div><div class=\"line\">\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;公司简介&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;企业文化&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;组织结构&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;客服服务&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t&lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"按钮-等分按钮\"><a href=\"#按钮-等分按钮\" class=\"headerlink\" title=\"按钮(等分按钮)\"></a>按钮(等分按钮)</h3><p>等分按钮的效果在移动端上特别的实用. 整个按钮组宽度是容器的100%, 而按钮组里面的每个按钮平分整个容器宽度. 例如, 如果你按钮组里面有五个按钮, 那么每个按钮是20%的宽度, 如果有四个按钮, 那么每个按钮是25%宽度, 以此类推.等分按钮也常被称为是自适应分组按钮, 其实现方法也非常的简单, 只需要在按钮组“btn-group”上追加一个“btn-group-justified”类名, 如下所示：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"btn-group btn-group-justified\"</span>&gt;</div><div class=\"line\">  &lt;a class=<span class=\"string\">\"btnbtn-default\"</span> href=<span class=\"string\">\"#\"</span>&gt;首页&lt;/a&gt;</div><div class=\"line\">  &lt;a class=<span class=\"string\">\"btnbtn-default\"</span> href=<span class=\"string\">\"#\"</span>&gt;产品展示&lt;/a&gt;</div><div class=\"line\">  &lt;a class=<span class=\"string\">\"btnbtn-default\"</span> href=<span class=\"string\">\"#\"</span>&gt;案例分析&lt;/a&gt;</div><div class=\"line\">  &lt;a class=<span class=\"string\">\"btnbtn-default\"</span> href=<span class=\"string\">\"#\"</span>&gt;联系我们&lt;/a&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>在制作等分按钮组时, 请尽量使用&lt;a&gt;标签元素来制作按钮</strong>, 因为使用&lt;button&gt;标签元素时, 使用display:table在部分浏览器下支持并不友好. </p>\n<h3 id=\"按钮-垂直分组\"><a href=\"#按钮-垂直分组\" class=\"headerlink\" title=\"按钮(垂直分组)\"></a>按钮(垂直分组)</h3><p>前面看到的示例, 按钮组都是水平显示的. 但在实际运用当中, 总会碰到垂直显示的效果. 在Bootstrap框架中也提供了这样的风格. 我们只需要把水平分组的“btn-group”类名<strong>换成</strong>“btn-group-vertical”即可. </p>\n<h2 id=\"按钮下拉菜单\"><a href=\"#按钮下拉菜单\" class=\"headerlink\" title=\"按钮下拉菜单\"></a>按钮下拉菜单</h2><p>按钮下拉菜单仅从外观上看和上一节介绍的下拉菜单效果基本上是一样的. 不同的是在普通的下拉菜单的基础上<strong>封装了按钮(.btn)样式效果</strong>. 简单点说就是点击一个按钮, 会显示隐藏的下拉菜单. 按钮下拉菜单其实就是普通的下拉菜单, 只不过把“&lt;a&gt;”标签元素换成了“&lt;button&gt;”标签元素. 唯一不同的是外部容器“div.dropdown”换成了“div.btn-group”.<br>.btn-group 元素是内联元素 .dropdown 元素是块状元素<br>按钮的向下向上三角形:按钮的向下三角形, 我们是通过在&lt;button&gt;标签中添加一个“&lt;span&gt;”标签元素, 并且命名为“caret”:<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-default dropdown-toggle\"</span> data-toggle=<span class=\"string\">\"dropdown\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;</div><div class=\"line\">\t按钮下拉菜单&lt;span class=<span class=\"string\">\"caret\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">&lt;/button&gt;</div></pre></td></tr></table></figure></p>\n<p>有的时候我们的下拉菜单会向上弹起(接下来一个小节会介绍), 这个时候我们的三角方向需要朝上显示, 实现方法：需要在“.btn-group”类上<strong>追加</strong>“dropup”类名(这也是做向上弹起下拉菜单要用的类名). </p>\n<h2 id=\"向上弹起的下拉菜单\"><a href=\"#向上弹起的下拉菜单\" class=\"headerlink\" title=\"向上弹起的下拉菜单\"></a>向上弹起的下拉菜单</h2><p>有些菜单是需要向上弹出的, 比如说你的菜单在页面最底部, 而这个菜单正好有一个下拉菜单, 为了让用户有更好的体验, 不得不让下拉菜单向上弹出. 在Bootstrap框架中专门为这种效果提代了一个类名“dropup”. 使用方法正如前面所示, 只需要在“btn-group”上添加这个类名(当然, 如果是普通向上弹出下拉菜单, 你只需要在“dropdown”类名基础上追加“dropup”类名即可). </p>\n<p>小笔记:<br>1.实现普通下拉菜单：.dropdown&gt;button.dropdown-toggle[data-toggle=”dropdown”]+ul.dropdown-menu;<br>2.按钮下拉菜单：把.dropdown换成.btn-group即可.<br>3.下拉菜单变上拉菜单：.dropdown.dropup或.btn-group.dropup<br>4.下拉菜单通过绝对定位实现, 可通过设置top,bottom,left,right改变下拉菜单出现的位置.<br>5.dropdown-header,li.divider,li.active,li.disabled</p>\n<h2 id=\"导航-基础样式\"><a href=\"#导航-基础样式\" class=\"headerlink\" title=\"导航(基础样式)\"></a>导航(基础样式)</h2><p>Bootstrap框架中制作导航条主要通过“.nav”样式. 默认的“.nav”样式不提供默认的导航样式, 必须附加另外一个样式才会有效, 比如“nav-tabs”、“nav-pills”之类. 比如有一个tab导航条的例子, 他的实现方法就是为ul标签加入.nav和nav-tabs两个类样式.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;ul class=<span class=\"string\">\"nav nav-tabs\"</span>&gt;</div><div class=\"line\">  &lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;Home&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">  &lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;CSS3&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\"> \t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;Sass&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\"> \t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;jQuery&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\"> \t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;Responsive&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"导航-标签形tab导航\"><a href=\"#导航-标签形tab导航\" class=\"headerlink\" title=\"导航(标签形tab导航)\"></a>导航(标签形tab导航)</h3><p>标签形导航, 也称为选项卡导航. 特别是在很多内容分块显示的时, 使用这种选项卡来分组十分适合.标签形导航是通过“nav-tabs”样式来实现.在制作标签形导航时需要在原导航“nav”上追加此类名.其实上例的效果和我们平时看到的选项卡效果并不一致. 一般情况之下, 选项卡教会有一个当前选中项. 其实在Bootstrap框架也相应提供了. 假设我们想让“Home”项为当前选中项, 只需要在其标签上添加类名“active”即可; 除了当前项之外, 有的选项卡还带有禁用状态, 实现这样的效果, 只需要在标签项上添加“disabled”即可.</p>\n<h3 id=\"导航-胶囊形-pills-导航\"><a href=\"#导航-胶囊形-pills-导航\" class=\"headerlink\" title=\"导航(胶囊形(pills)导航)\"></a>导航(胶囊形(pills)导航)</h3><p>胶囊形(pills)导航听起来有点别扭, 因为其外形看起来有点像胶囊形状. 但其更像我们平时看到的大众形导航. 当前项高亮显示, 并带有圆角效果. 其实现方法和“nav-tabs”类似,同样的结构, 只需要把类名“nav-tabs”换成“nav-pills”即可.</p>\n<h3 id=\"导航-垂直堆叠的导航\"><a href=\"#导航-垂直堆叠的导航\" class=\"headerlink\" title=\"导航(垂直堆叠的导航)\"></a>导航(垂直堆叠的导航)</h3><p>在实际运用当中, 除了水平导航之外, 还有垂直导航, 就类似前面介绍的垂直排列按钮一样. 制作<strong>垂直堆叠导航只需要在“nav-pills”的基础上添加一个“nav-stacked”类名</strong>即可.<br>大家是否还记得, 在下拉菜单一节中, 下拉菜单组与组之间有一个分隔线. 其实在垂直堆叠导航也具有这样的效果, 只需要添加在导航项之间添加“&lt;li class=”nav-divider”&gt;&lt;/li&gt;”即可</p>\n<h3 id=\"自适应导航\"><a href=\"#自适应导航\" class=\"headerlink\" title=\"自适应导航\"></a>自适应导航</h3><p>自适应导航指的是导航占据容器全部宽度, 而且菜单项可以像表格的单元格一样自适应宽度. 自适应导航和前面使用“btn-group-justified”制作的自适应按钮组是一样的. 只不过在制作自适应导航时更换了另一个类名“nav-justified”. 当然他需要和“nav-tabs”或者“nav-pills”配合在一起使用. 如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;ul class=<span class=\"string\">\"nav nav-tabs nav-justified\"</span>&gt;</div><div class=\"line\">\t&lt;li class=<span class=\"string\">\"active\"</span>&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;Home&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;CSS3&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;Sass&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;jQuery&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;Responsive&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"导航加下拉菜单-二级导航\"><a href=\"#导航加下拉菜单-二级导航\" class=\"headerlink\" title=\"导航加下拉菜单(二级导航)\"></a>导航加下拉菜单(二级导航)</h2><p>在Bootstrap框架中制作二级导航就更容易了. 只需要将li当作父容器, 使用类名“dropdown”, 同时在li中嵌套另一个列表ul, 使用前面介绍下拉菜单的方法就可以：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;ul class=<span class=\"string\">\"nav nav-pills\"</span>&gt;</div><div class=\"line\">\t&lt;li class=<span class=\"string\">\"active\"</span>&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;首页&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t&lt;li class=<span class=\"string\">\"dropdown\"</span>&gt;</div><div class=\"line\">\t\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"dropdown-toggle\"</span> data-toggle=<span class=\"string\">\"dropdown\"</span>&gt;教程&lt;span class=<span class=\"string\">\"caret\"</span>&gt;&lt;/span&gt;&lt;/a&gt;</div><div class=\"line\">\t\t\t&lt;ul class=<span class=\"string\">\"dropdown-menu\"</span>&gt;</div><div class=\"line\">\t\t\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;CSS3&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">            …</div><div class=\"line\">\t\t\t&lt;/ul&gt;</div><div class=\"line\">\t&lt;/li&gt;</div><div class=\"line\">\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;关于我们&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"面包屑式导航\"><a href=\"#面包屑式导航\" class=\"headerlink\" title=\"面包屑式导航\"></a>面包屑式导航</h2><p>面包屑(Breadcrumb)一般用于导航, 主要是起的作用是告诉用户现在所处页面的位置(当前位置). 在Bootstrap框架中面包屑也是一个独立模块组件<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;ol class=<span class=\"string\">\"breadcrumb\"</span>&gt;</div><div class=\"line\">  &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;首页&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">  &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;我的书&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">  &lt;li class=<span class=\"string\">\"active\"</span>&gt;《图解CSS3》&lt;/li&gt;</div><div class=\"line\">&lt;/ol&gt;</div></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"导航条-分页导航\"><a href=\"#导航条-分页导航\" class=\"headerlink\" title=\"导航条,分页导航\"></a>导航条,分页导航</h1><h2 id=\"导航条基础\"><a href=\"#导航条基础\" class=\"headerlink\" title=\"导航条基础\"></a>导航条基础</h2><p>导航条(navbar)和上一节介绍的导航(nav), 就相差一个字, 多了一个“条”字. 其实在Bootstrap框架中他们还是明显的区别. 在导航条(navbar)中有一个<strong>背景色、而且导航条可以是纯链接(类似导航), 也可以是表单, 还有就是表单和导航一起结合等多种形式</strong>. 在这一节中将一起探讨Bootstrap框架中导航条的使用.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;!--基本导航条--&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"navbar navbar-default\"</span> role=<span class=\"string\">\"navigation\"</span>&gt;</div><div class=\"line\">\t&lt;ul class=<span class=\"string\">\"nav navbar-nav\"</span>&gt;</div><div class=\"line\">\t\t&lt;li class=<span class=\"string\">\"active\"</span>&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;网站首页&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;系列教程&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;名师介绍&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;成功案例&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;关于我们&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t&lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"navbar navbar-default\"</span> role=<span class=\"string\">\"navigation\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"navbar-header\"</span>&gt;</div><div class=\"line\">  　 &lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"navbar-brand\"</span>&gt;慕课网&lt;/a&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;ul class=<span class=\"string\">\"nav navbar-nav\"</span>&gt;</div><div class=\"line\">\t  &lt;li class=<span class=\"string\">\"active\"</span>&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;网站首页&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">      &lt;li class=<span class=\"string\">\"dropdown\"</span>&gt;</div><div class=\"line\">        &lt;a href=<span class=\"string\">\"##\"</span> data-toggle=<span class=\"string\">\"dropdown\"</span> class=<span class=\"string\">\" dropdown-toggle\"</span>&gt;系列教程&lt;span class=<span class=\"string\">\"caret\"</span>&gt;&lt;/span&gt;&lt;/a&gt;</div><div class=\"line\">        &lt;ul class=<span class=\"string\">\"dropdown-menu\"</span>&gt;</div><div class=\"line\">        \t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;CSS3&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">        \t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;JavaScript&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">        \t&lt;li class=<span class=\"string\">\"\"</span>&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;PHP&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">        &lt;/ul&gt;</div><div class=\"line\">     &lt;/li&gt;</div><div class=\"line\">      &lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;名师介绍&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">      &lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;成功案例&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">      &lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;关于我们&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t  &lt;/ul&gt;</div><div class=\"line\">  &lt;form action=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"navbar-form navbar-left\"</span> rol=<span class=\"string\">\"search\"</span>&gt;</div><div class=\"line\">   \t&lt;div class=<span class=\"string\">\"form-group\"</span>&gt;</div><div class=\"line\">   \t\t&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> class=<span class=\"string\">\"form-control\"</span> placeholder=<span class=\"string\">\"请输入关键词\"</span> /&gt;</div><div class=\"line\">   \t&lt;/div&gt;</div><div class=\"line\">      &lt;button <span class=\"built_in\">type</span>=<span class=\"string\">\"submit\"</span> class=<span class=\"string\">\"btn btn-default\"</span>&gt;搜索&lt;/button&gt;</div><div class=\"line\">    &lt;/form&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"基础导航条\"><a href=\"#基础导航条\" class=\"headerlink\" title=\"基础导航条\"></a>基础导航条</h2><p>在Bootstrap框中, 导航条和导航从外观上差别不是太多, 但在实际使用中导航条要比导航复杂得多. 我们先来看导航条中最基础的一个——基础导航条.<br>第一步：首先在制作导航的列表(&lt;ul class=”nav”&gt;)基础上添加类名“navbar-nav”<br>第二步：在列表外部添加一个容器(div), 并且使用类名“navbar”和“navbar-default”</p>\n<h2 id=\"为导航条添加标题、二级菜单及状态\"><a href=\"#为导航条添加标题、二级菜单及状态\" class=\"headerlink\" title=\"为导航条添加标题、二级菜单及状态\"></a>为导航条添加标题、二级菜单及状态</h2><h3 id=\"加入导航条标题\"><a href=\"#加入导航条标题\" class=\"headerlink\" title=\"加入导航条标题\"></a>加入导航条标题</h3><p>在Web页面制作中, 常常在菜单前面都会有一个标题(文字字号比其它文字稍大一些), 其实在Bootstrap框架也为大家做了这方面考虑, 其通过“navbar-header”和“navbar-brand”来实现.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"navbar-header\"</span>&gt;</div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"navbar-brand\"</span>&gt;慕课网&lt;/a&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"导航条状态、二级菜单\"><a href=\"#导航条状态、二级菜单\" class=\"headerlink\" title=\"导航条状态、二级菜单\"></a>导航条状态、二级菜单</h3><p>同样的, 在基础导航条中对菜单提供了当前状态, 禁用状态, 悬浮状态等效果, 而且也可以带有二级菜单的导航条<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;!--导航条状态及二级菜单--&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"navbar navbar-default\"</span> role=<span class=\"string\">\"navigation\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"navbar-header\"</span>&gt;</div><div class=\"line\">  　&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"navbar-brand\"</span>&gt;慕课网&lt;/a&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">\t&lt;ul class=<span class=\"string\">\"nav navbar-nav\"</span>&gt;</div><div class=\"line\">\t \t&lt;li class=<span class=\"string\">\"active\"</span>&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;网站首页&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">        &lt;li class=<span class=\"string\">\"dropdown\"</span>&gt;</div><div class=\"line\">          &lt;a href=<span class=\"string\">\"##\"</span> data-toggle=<span class=\"string\">\"dropdown\"</span> class=<span class=\"string\">\"dropdown-toggle\"</span>&gt;系列教程&lt;span class=<span class=\"string\">\"caret\"</span>&gt;&lt;/span&gt;&lt;/a&gt;</div><div class=\"line\">          &lt;ul class=<span class=\"string\">\"dropdown-menu\"</span>&gt;</div><div class=\"line\">\t\t\t\t\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;CSS3&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t\t\t\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;JavaScript&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t\t\t\t\t&lt;li class=<span class=\"string\">\"disabled\"</span>&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;PHP&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">          &lt;/ul&gt;</div><div class=\"line\">\t\t\t\t&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;名师介绍&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li class=<span class=\"string\">\"active\"</span>&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;成功案例&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;关于我们&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t&lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p><strong>注意: a 中类不要加 btn ,否则样式不一致.</strong></p>\n<h2 id=\"带表单的导航条\"><a href=\"#带表单的导航条\" class=\"headerlink\" title=\"带表单的导航条\"></a>带表单的导航条</h2><p>在Bootstrap框架中提供了一个“navbar-form”, 使用方法很简单, 在navbar容器中放置一个带有navbar-form类名的表单.大家看到了“navbar-left”让表单左浮动, 更好实现对齐. 在Bootstrap框架中, 还提供了“navbar-right”样式, 让元素在导航条靠右对齐. </p>\n<h2 id=\"导航条中的按钮、文本和链接\"><a href=\"#导航条中的按钮、文本和链接\" class=\"headerlink\" title=\"导航条中的按钮、文本和链接\"></a>导航条中的按钮、文本和链接</h2><p>Bootstrap框架的导航条中除了使用navbar-brand中的a元素和navbar-nav的ul和navbar-form之外, 还可以使用其他元素. 框架提供了三种其他样式<br>1、导航条中的按钮navbar-btn<br>2、导航条中的文本navbar-text<br>3、导航条中的普通链接navbar-link</p>\n<h2 id=\"固定导航条\"><a href=\"#固定导航条\" class=\"headerlink\" title=\"固定导航条\"></a>固定导航条</h2><p>使用方法很简单, 只需要在制作导航条最外部容器navbar上追加对应的类名即可：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"navbar navbar-default navbar-fixed-top\"</span> role=<span class=\"string\">\"navigation\"</span>&gt; 或</div><div class=\"line\">&lt;div class=<span class=\"string\">\"navbar navbar-default navbar-fixed-bottom\"</span> role=<span class=\"string\">\"navigation\"</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>从运行效果中大家不难发现, 页面主内容顶部和底部都被固定导航条给遮住了. <strong>为了避免固定导航条遮盖内容, 我们需要在body上做一些处理</strong></p>\n<h2 id=\"响应式导航条\"><a href=\"#响应式导航条\" class=\"headerlink\" title=\"响应式导航条\"></a>响应式导航条</h2><p>如今浏览Web页面的终端不在是一尘不变了, 前面示例实现的导航条仅能适配于大屏幕的浏览器, 但当浏览器屏幕变小的时候, 就不适合了. 因此响应式设计也就随之而来. 那么在一个响应式的Web页面中, 对于响应式的导航条也就非常的重要.<br>使用方法：<br>1、保证在窄屏时需要折叠的内容必须包裹在带一个div内, 并且为这个div加入collapse、navbar-collapse两个类名. 最后为这个div添加一个class类名或者id名.<br>2、保证在窄屏时要显示的图标样式(固定写法)：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;button class=<span class=\"string\">\"navbar-toggle\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> data-toggle=<span class=\"string\">\"collapse\"</span>&gt;</div><div class=\"line\">  &lt;span class=<span class=\"string\">\"sr-only\"</span>&gt;Toggle Navigation&lt;/span&gt;</div><div class=\"line\">  &lt;span class=<span class=\"string\">\"icon-bar\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">  &lt;span class=<span class=\"string\">\"icon-bar\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">  &lt;span class=<span class=\"string\">\"icon-bar\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">&lt;/button&gt;</div></pre></td></tr></table></figure></p>\n<p>3、并为button添加data-target=”.类名/#id名”, 究竞是类名还是id名呢？由需要折叠的div来决定. 如：<br>需要折叠的div代码段：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"collapse navbar-collapse\"</span> id=<span class=\"string\">\"example\"</span>&gt;</div><div class=\"line\">\t&lt;ul class=<span class=\"string\">\"nav navbar-nav\"</span>&gt;</div><div class=\"line\">\t…</div><div class=\"line\">\t&lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>窄屏时显示的图标代码段：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;button class=<span class=\"string\">\"navbar-toggle\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> data-toggle=<span class=\"string\">\"collapse\"</span> data-target=<span class=\"string\">\"#example\"</span>&gt;</div><div class=\"line\">  ...</div><div class=\"line\">&lt;/button&gt;</div></pre></td></tr></table></figure></p>\n<p>也可以这么写, 需要折叠的div代码段：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"collapse navbar-collapse example\"</span> &gt;</div><div class=\"line\">\t&lt;ul class=<span class=\"string\">\"nav navbar-nav\"</span>&gt;</div><div class=\"line\">\t…</div><div class=\"line\">\t&lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>窄屏时要显示的图标：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;button class=<span class=\"string\">\"navbar-toggle\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> data-toggle=<span class=\"string\">\"collapse\"</span> data-target=<span class=\"string\">\".example\"</span>&gt;</div><div class=\"line\">  ...</div><div class=\"line\">&lt;/button&gt;</div></pre></td></tr></table></figure></p>\n<p>完整:<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"navbar navbar-default\"</span> role=<span class=\"string\">\"navigation\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"navbar-header\"</span>&gt;</div><div class=\"line\">\t　&lt;!-- .navbar-toggle样式用于toggle收缩的内容, 即nav-collapse collapse样式所在元素 --&gt;</div><div class=\"line\">\t\t&lt;button class=<span class=\"string\">\"navbar-toggle\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> data-toggle=<span class=\"string\">\"collapse\"</span> data-target=<span class=\"string\">\"#ff\"</span>&gt;</div><div class=\"line\">\t\t&lt;!--&lt;span class=<span class=\"string\">\"sr-only\"</span>&gt;Toggle Navigation&lt;/span&gt;--&gt;</div><div class=\"line\">\t\t&lt;span class=<span class=\"string\">\"icon-bar\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">\t\t&lt;span class=<span class=\"string\">\"icon-bar\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">\t\t&lt;span class=<span class=\"string\">\"icon-bar\"</span>&gt;&lt;/span&gt;</div><div class=\"line\">\t\t&lt;/button&gt;</div><div class=\"line\">\t\t&lt;!-- 确保无论是宽屏还是窄屏, navbar-brand都显示 --&gt;</div><div class=\"line\">\t\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"navbar-brand\"</span>&gt;慕课网&lt;/a&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;!-- 屏幕宽度小于768px时, div.navbar-responsive-collapse容器里的内容都会隐藏, </div><div class=\"line\">\t\t显示icon-bar图标, 当点击icon-bar图标时, 再展开. 屏幕大于768px时, 默认显示.  --&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"collapse navbar-collapse navbar-responsive-collapse\"</span> id=<span class=\"string\">\"ff\"</span>&gt;</div><div class=\"line\">\t\t&lt;ul class=<span class=\"string\">\"nav navbar-nav\"</span>&gt;</div><div class=\"line\">\t\t\t&lt;li class=<span class=\"string\">\"active\"</span>&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;网站首页&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;系列教程&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;名师介绍&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;成功案例&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"##\"</span>&gt;关于我们&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">\t \t&lt;/ul&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"反色导航条\"><a href=\"#反色导航条\" class=\"headerlink\" title=\"反色导航条\"></a>反色导航条</h2><p>反色导航条其实是Bootstrap框架为大家提供的第二种风格的导航条, 与默认的导航条相比, 使用方法并无区别, 只是将navbar-deafult类名换成navbar-inverse. 其变化只是导航条的背景色和文本做了修改. </p>\n<p>nav navbar-default默认导航条 nav-inverse反色导航条<br>navbar-fixed-top/bottom固定导航条<br>nav navbar-nav 导航条中的导航div类<br>navbar-form 导航表单<br>navbar-left左对齐<br>navbar-right右对齐</p>\n<h2 id=\"分页导航-带页码的分页导航\"><a href=\"#分页导航-带页码的分页导航\" class=\"headerlink\" title=\"分页导航(带页码的分页导航)\"></a>分页导航(带页码的分页导航)</h2><p>使用方法：<br>平时很多同学喜欢用div&gt;a和div&gt;span结构来制作带页码的分页导航. 不过, 在Bootstrap框架中使用的是ul&gt;li&gt;a这样的结构, 在ul标签上加入pagination方法：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;ul class=<span class=\"string\">\"pagination\"</span>&gt;</div><div class=\"line\">   &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&amp;laquo;&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">   &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;1&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">   &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;2&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">   &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;3&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">   &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;4&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">   &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;5&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">   &lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&amp;raquo;&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>\n<p>注意：要禁用当前状态和禁用状态不能点击, 我们还要依靠js来实现, 或者将这两状态下的a标签换成span标签. </p>\n<p>大小设置：<br>在Bootstrap框架中, 也可以通过几个不同的情况来设置其大小. 类似于按钮一样：<br>1、通过“pagination-lg”让分页导航变大；<br>2、通过“pagination-sm”让分页导航变小：  没有xs 这一说.</p>\n<h3 id=\"分页导航-翻页分页导航\"><a href=\"#分页导航-翻页分页导航\" class=\"headerlink\" title=\"分页导航(翻页分页导航)\"></a>分页导航(翻页分页导航)</h3><p>Bootstrap框架除了提供带页码的分页导航之外还提供了翻页导航. 这种分页导航常常在一些简单的网站上看到, 比如说个人博客, 杂志网站等. 这种分页导航是看不到具体的页码, 只会提供一个“上一页”和“下一页”的按钮.<br>使用方法：<br>在实际使用中, 翻页分页导航和带页码的分页导航类似, 为ul标签加入pager类</p>\n<h4 id=\"对齐样式设置\"><a href=\"#对齐样式设置\" class=\"headerlink\" title=\"对齐样式设置\"></a>对齐样式设置</h4><p>默认情况之下, 翻页分页导航是居中显示, 但有的时候我们需要一个居左, 一个居右. Bootstrap框架提供了两个样式：<br>☑   previous: 让“上一步”按钮居左<br>☑   next: 让“下一步”按钮居右</p>\n<h4 id=\"状态样式设置：\"><a href=\"#状态样式设置：\" class=\"headerlink\" title=\"状态样式设置：\"></a>状态样式设置：</h4><p>和带页码分页导航一样, 如果在li标签上添加了disabled类名的时候, 分页按钮处于禁用状态, 但同样不能禁止其点击功能. 你可以通过js来处理, 或将a标签换成span标签. </p>\n<h2 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h2><p>使用方法很简单, 你可以在使用span这样的行内标签：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;span class=<span class=\"string\">\"label label-default\"</span>&gt;默认标签&lt;/span&gt;</div><div class=\"line\">&lt;span class=<span class=\"string\">\"label label-primary\"</span>&gt;主要标签&lt;/span&gt;</div><div class=\"line\">&lt;span class=<span class=\"string\">\"label label-success\"</span>&gt;成功标签&lt;/span&gt;</div><div class=\"line\">&lt;span class=<span class=\"string\">\"label label-info\"</span>&gt;信息标签&lt;/span&gt;</div><div class=\"line\">&lt;span class=<span class=\"string\">\"label label-warning\"</span>&gt;警告标签&lt;/span&gt;</div><div class=\"line\">&lt;span class=<span class=\"string\">\"label label-danger\"</span>&gt;错误标签&lt;/span&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"徽章\"><a href=\"#徽章\" class=\"headerlink\" title=\"徽章\"></a>徽章</h2><p>使用方法, 其实也没什么太多可说的, 你可以像标签一样, 使用span标签来制作, 然后为他加入badge类：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;a href=<span class=\"string\">\"#\"</span>&gt;Inbox &lt;span class=<span class=\"string\">\"badge\"</span>&gt;42&lt;/span&gt;&lt;/a&gt;</div><div class=\"line\">&lt;span class=<span class=\"string\">\"badge pull-right\"</span>&gt;42&lt;/span&gt;</div></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"其他内置组件\"><a href=\"#其他内置组件\" class=\"headerlink\" title=\"其他内置组件\"></a>其他内置组件</h1><h2 id=\"缩略图\"><a href=\"#缩略图\" class=\"headerlink\" title=\"缩略图\"></a>缩略图</h2><p>缩略图在网站中最常用的地方就是产品列表页面, 一行显示几张图片, 有的在图片底下(左侧或右侧)带有标题、描述等信息. Bootstrap框架将这一部独立成一个模块组件. 并通过“thumbnail”样式配合bootstrap的网格系统来实现. 可以将产品列表页变得更好看.<br>通过“thumbnail”样式配合bootstrap的网格系统来实现.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"container\"</span>&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"row\"</span>&gt;</div><div class=\"line\">\t\t&lt;div class=<span class=\"string\">\"col-xs-6 col-md-3\"</span>&gt;</div><div class=\"line\">\t\t\t&lt;a href=<span class=\"string\">\"#\"</span> class=<span class=\"string\">\"thumbnail\"</span>&gt;</div><div class=\"line\">\t\t\t\t&lt;img src=<span class=\"string\">\"http://img.mukewang.com/5434eba100014fe906000338.png\"</span> style=<span class=\"string\">\"height: 180px; width: 100%; display: block;\"</span> alt=<span class=\"string\">\"\"</span>&gt;</div><div class=\"line\">\t\t\t&lt;/a&gt;</div><div class=\"line\">\t\t&lt;/div&gt;</div><div class=\"line\">    …</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>上面的结构表示的是在宽屏幕(可视区域大于768px)的时候, 一行显示四个缩略图(单击全屏查看效果).<br>在窄屏(可视区域小于768px)的时候, 一行只显示两个缩略图.<br>上一小节, 展示的仅只有缩略图的一种使用方式, 除了这种方式之外, 还可以让缩略图配合标题、描述内容, 按钮等<br>在仅有缩略图的基础上, 添加了一个div名为“caption“的容器, 在这个容器中放置其他内容, 比如说标题, 文本描述, 按钮等：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"container\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"row\"</span>&gt;</div><div class=\"line\">    &lt;div class=<span class=\"string\">\"col-xs-6 col-md-3\"</span>&gt;</div><div class=\"line\">      &lt;a href=<span class=\"string\">\"#\"</span> class=<span class=\"string\">\"thumbnail\"</span>&gt;</div><div class=\"line\">        &lt;img src=<span class=\"string\">\"http://a.hiphotos.baidu.com/image/w%3D400/sign=c56d7638b0b7d0a27bc9059dfbee760d/3b292df5e0fe9925d46873da36a85edf8cb171d7.jpg\"</span> style=<span class=\"string\">\"height: 180px; width: 100%; display: block;\"</span> alt=<span class=\"string\">\"\"</span>&gt;</div><div class=\"line\">      &lt;/a&gt;</div><div class=\"line\">\t\t\t&lt;div class=<span class=\"string\">\"caption\"</span>&gt;</div><div class=\"line\">\t\t\t\t&lt;h3&gt;Bootstrap框架系列教程&lt;/h3&gt;</div><div class=\"line\">\t\t\t\t&lt;p&gt;Bootstrap框架是一个优秀的前端框, 就算您是一位后端程序员或者你是一位不懂设计的前端人员, 你也能依赖于Bootstrap制作做优美的网站...&lt;/p&gt;</div><div class=\"line\">\t\t\t\t&lt;p&gt;</div><div class=\"line\">\t\t\t\t\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"btn btn-primary\"</span>&gt;开始学习&lt;/a&gt;</div><div class=\"line\">\t\t\t\t\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"btn btn-info\"</span>&gt;正在学习&lt;/a&gt;</div><div class=\"line\">\t\t\t\t&lt;/p&gt;</div><div class=\"line\">\t\t\t&lt;/div&gt;</div><div class=\"line\">\t\t&lt;/div&gt;</div><div class=\"line\">    …</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"警示框\"><a href=\"#警示框\" class=\"headerlink\" title=\"警示框\"></a>警示框</h2><p>在网站中, 网页总是需要和用户一起做沟通与交流. 特别是当用户操作上下文为用户提供一些有效的警示框, 比如说告诉用户操作成功、操作错误、提示或者警告等.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h2&gt;默认警示框&lt;/h2&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"alert alert-success\"</span> role=<span class=\"string\">\"alert\"</span>&gt;恭喜您操作成功！&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h2&gt;可关闭的警示框&lt;/h2&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"alert alert-success alert-dismissable\"</span> role=<span class=\"string\">\"alert\"</span>&gt;</div><div class=\"line\">恭喜您操作成功！</div><div class=\"line\">    &lt;button class=<span class=\"string\">\"close\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> data-dismiss=<span class=\"string\">\"alert\"</span>&gt;&amp;<span class=\"built_in\">times</span>;&lt;/button&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p><strong>data-dismiss=”alert”</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h2&gt;警示框的链接&lt;/h2&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"alert alert-success\"</span> role=<span class=\"string\">\"alert\"</span>&gt;</div><div class=\"line\">    &lt;strong&gt;Well <span class=\"keyword\">done</span>!&lt;/strong&gt; </div><div class=\"line\">    You successfully <span class=\"built_in\">read</span> </div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"#\"</span> class=<span class=\"string\">\"alert-link\"</span>&gt;this important alert message&lt;/a&gt;</div><div class=\"line\">\t.</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"进度条\"><a href=\"#进度条\" class=\"headerlink\" title=\"进度条\"></a>进度条</h2><p>在网页中, 进度条的效果并不少见, 比如一个评分系统, 比如加载状态等.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h2&gt;基本进度条&lt;/h2&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"progress\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"progress-bar\"</span> style=<span class=\"string\">\"width:40%\"</span>&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h2&gt;彩色进度条&lt;/h2&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"progress\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"progress-bar progress-bar-success\"</span> style=<span class=\"string\">\"width:40%\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h2&gt;条纹进度条&lt;/h2&gt; // 把progress-striped active 加在最外层的div </div><div class=\"line\">//就不用一个个的来控制这个斑马纹了 可以全部控制</div><div class=\"line\">&lt;div class=<span class=\"string\">\"progress progress-striped\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"progress-bar progress-bar-success\"</span> style=<span class=\"string\">\"width:40%\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h2&gt;动态条纹进度条&lt;/h2&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"progress progress-striped active\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"progress-bar progress-bar-success\"</span> style=<span class=\"string\">\"width:40%\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h2&gt;层叠进度条&lt;/h2&gt;</div><div class=\"line\">&lt;h5&gt;正常层叠进度条&lt;/h5&gt;    // width 总和小于100%</div><div class=\"line\">&lt;div class=<span class=\"string\">\"progress\"</span>&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"progress-bar progress-bar-success\"</span> style=<span class=\"string\">\"width:20%\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"progress-bar progress-bar-info\"</span> style=<span class=\"string\">\"width:10%\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"progress-bar progress-bar-warning\"</span> style=<span class=\"string\">\"width:30%\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"progress-bar progress-bar-danger\"</span> style=<span class=\"string\">\"width:15%\"</span>&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h2&gt;带Label的进度条&lt;/h2&gt;</div><div class=\"line\">&lt;h5&gt;进度条1&lt;/h5&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"progress\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"progress-bar progress-bar-success\"</span>  role=<span class=\"string\">\"progressbar\"</span> aria-valuenow=<span class=\"string\">\"20\"</span> aria-valuemin=<span class=\"string\">\"0\"</span> aria-valuemax=<span class=\"string\">\"100\"</span> style=<span class=\"string\">\"width:20%\"</span>&gt;20%&lt;/div&gt;  </div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"媒体对象\"><a href=\"#媒体对象\" class=\"headerlink\" title=\"媒体对象\"></a>媒体对象</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;默认媒体对象&lt;/h3&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"media\"</span>&gt;</div><div class=\"line\">  &lt;a class=<span class=\"string\">\"pull-left\"</span> href=<span class=\"string\">\"#\"</span>&gt;</div><div class=\"line\">    &lt;img class=<span class=\"string\">\"media-object\"</span> src=<span class=\"string\">\"http://img.mukewang.com/52e1d29d000161fe06000338-300-170.jpg\"</span> alt=<span class=\"string\">\"...\"</span>&gt;</div><div class=\"line\">  &lt;/a&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"media-body\"</span>&gt;</div><div class=\"line\">    &lt;h4 class=<span class=\"string\">\"media-heading\"</span>&gt;系列：十天精通CSS3&lt;/h4&gt;</div><div class=\"line\">    &lt;div&gt;全方位深刻详解CSS3模块知识, 经典案例分析, 代码同步调试, 让网页穿上绚丽装备！&lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;媒体对象的嵌套&lt;/h3&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"media\"</span>&gt;</div><div class=\"line\">  &lt;a class=<span class=\"string\">\"pull-left\"</span> href=<span class=\"string\">\"#\"</span>&gt;</div><div class=\"line\">    &lt;img class=<span class=\"string\">\"media-object\"</span> src=<span class=\"string\">\"http://a.disquscdn.com/uploads/users/3740/2069/avatar92.jpg?1406972031\"</span> alt=<span class=\"string\">\"...\"</span>&gt;</div><div class=\"line\">\t&lt;/a&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"media-body\"</span>&gt;</div><div class=\"line\">\t\t&lt;h4 class=<span class=\"string\">\"media-heading\"</span>&gt;我是大漠&lt;/h4&gt;</div><div class=\"line\">\t\t&lt;div&gt;我是W3cplus站长大漠, 我在写Bootstrap框中的媒体对象测试用例&lt;/div&gt;</div><div class=\"line\">\t\t&lt;div class=<span class=\"string\">\"media\"</span>&gt;</div><div class=\"line\">\t\t\t&lt;a class=<span class=\"string\">\"pull-left\"</span> href=<span class=\"string\">\"#\"</span>&gt;</div><div class=\"line\">\t\t\t\t&lt;img class=<span class=\"string\">\"media-object\"</span> src=<span class=\"string\">\"http://tp2.sinaimg.cn/3306361973/50/22875318196/0\"</span> alt=<span class=\"string\">\"...\"</span>&gt;</div><div class=\"line\">\t\t\t&lt;/a&gt;</div><div class=\"line\">\t\t\t&lt;div class=<span class=\"string\">\"media-body\"</span>&gt;</div><div class=\"line\">\t\t\t\t&lt;h4 class=<span class=\"string\">\"media-heading\"</span>&gt;慕课网&lt;/h4&gt;</div><div class=\"line\">\t\t\t\t&lt;div&gt;大漠写的《玩转Bootstrap》系列教程即将会在慕课网上发布&lt;/div&gt;</div><div class=\"line\">\t\t\t\t&lt;div class=<span class=\"string\">\"media\"</span>&gt;</div><div class=\"line\">\t\t\t\t\t&lt;a class=<span class=\"string\">\"pull-left\"</span> href=<span class=\"string\">\"#\"</span>&gt;</div><div class=\"line\">\t\t\t\t\t\t&lt;img class=<span class=\"string\">\"media-object\"</span> src=<span class=\"string\">\"http://tp4.sinaimg.cn/1167075935/50/22838101204/1\"</span> alt=<span class=\"string\">\"...\"</span>&gt;</div><div class=\"line\">\t\t\t\t\t&lt;/a&gt;</div><div class=\"line\">\t\t\t\t\t&lt;div class=<span class=\"string\">\"media-body\"</span>&gt;</div><div class=\"line\">\t\t\t\t\t\t&lt;h4 class=<span class=\"string\">\"media-heading\"</span>&gt;W3cplus&lt;/h4&gt;</div><div class=\"line\">\t\t\t\t\t\t&lt;div&gt;W3cplus站上还有很多教程....&lt;/div&gt;</div><div class=\"line\">\t\t\t\t\t&lt;/div&gt;</div><div class=\"line\">\t\t\t\t&lt;/div&gt;</div><div class=\"line\">\t\t\t&lt;/div&gt;</div><div class=\"line\">\t\t&lt;/div&gt;</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;媒体对象列表&lt;/h3&gt;</div><div class=\"line\">&lt;ul class=<span class=\"string\">\"media-list\"</span>&gt;</div><div class=\"line\">  &lt;li class=<span class=\"string\">\"media\"</span>&gt;</div><div class=\"line\">    &lt;a class=<span class=\"string\">\"pull-left\"</span> href=<span class=\"string\">\"#\"</span>&gt;</div><div class=\"line\">      &lt;img class=<span class=\"string\">\"media-object\"</span> src=<span class=\"string\">\"http://a.disquscdn.com/uploads/users/3740/2069/avatar92.jpg?1406972031\"</span> alt=<span class=\"string\">\"...\"</span>&gt;</div><div class=\"line\">    &lt;/a&gt;</div><div class=\"line\">\t\t&lt;div class=<span class=\"string\">\"media-body\"</span>&gt;</div><div class=\"line\">\t\t\t&lt;h4 class=<span class=\"string\">\"media-heading\"</span>&gt;我是大漠&lt;/h4&gt;</div><div class=\"line\">      &lt;div&gt;我是W3cplus站长大漠, 我在写Bootstrap框中的媒体对象测试用例&lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/li&gt;</div><div class=\"line\">  &lt;li class=<span class=\"string\">\"media\"</span>&gt;</div><div class=\"line\">\t\t&lt;a class=<span class=\"string\">\"pull-left\"</span> href=<span class=\"string\">\"#\"</span>&gt;</div><div class=\"line\">\t\t\t\t&lt;img class=<span class=\"string\">\"media-object\"</span> src=<span class=\"string\">\"http://tp2.sinaimg.cn/3306361973/50/22875318196/0\"</span> alt=<span class=\"string\">\"...\"</span>&gt;</div><div class=\"line\">\t\t&lt;/a&gt;</div><div class=\"line\">    &lt;div class=<span class=\"string\">\"media-body\"</span>&gt;</div><div class=\"line\">      &lt;h4 class=<span class=\"string\">\"media-heading\"</span>&gt;慕课网&lt;/h4&gt;</div><div class=\"line\">      &lt;div&gt;大漠写的《玩转Bootstrap》系列教程即将会在慕课网上发布&lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/li&gt;</div><div class=\"line\">  &lt;li class=<span class=\"string\">\"media\"</span>&gt;</div><div class=\"line\">\t\t&lt;a class=<span class=\"string\">\"pull-left\"</span> href=<span class=\"string\">\"#\"</span>&gt;</div><div class=\"line\">\t\t\t&lt;img class=<span class=\"string\">\"media-object\"</span> src=<span class=\"string\">\"http://tp4.sinaimg.cn/1167075935/50/22838101204/1\"</span> alt=<span class=\"string\">\"...\"</span>&gt;</div><div class=\"line\">\t\t&lt;/a&gt;</div><div class=\"line\">\t\t&lt;div class=<span class=\"string\">\"media-body\"</span>&gt;</div><div class=\"line\">\t\t\t&lt;h4 class=<span class=\"string\">\"media-heading\"</span>&gt;W3cplus&lt;/h4&gt;</div><div class=\"line\">\t\t\t&lt;div&gt;W3cplus站上还有很多教程....&lt;/div&gt;</div><div class=\"line\">\t\t&lt;/div&gt;</div><div class=\"line\">  &lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure>\n<p>默认:媒体对象一般是成组出现, 而一组媒体对象常常包括以下几个部分：<br>☑  媒体对像的容器：常使用“media”类名表示, 用来容纳媒体对象的所有内容<br>☑  媒体对像的对象：常使用“media-object”表示, 就是媒体对象中的对象, 常常是图片<br>☑  媒体对象的主体：常使用“media-body”表示, 就是媒体对像中的主体内容, 可以是任何元素, 常常是图片侧边内容<br>☑  媒体对象的标题：常使用“media-heading”表示, 就是用来描述对象的一个标题, 此部分可选<br>除了上面四个部分之外, 在Bootstrap框架中还常常使用“pull-left”或者“pull-right”来控制媒体对象中的对象浮动方式.<br>嵌套:从外往里看, 这里有三个媒体对象, 只不过是一个嵌套在另一个的里面. 那么在Bootstrap框架中的媒体对象也具备这样的功能, 只需要将另一个媒体对象结构放置在媒体对象的主体内“media-body”,<br>列表:针对上图的媒体对象列表效果, Bootstrap框架提供了一个列表展示的效果, 在写结构的时候可以使用ul, 并且在ul上添加类名“media-list”, 而在li上使用“media”.</p>\n<h2 id=\"列表组\"><a href=\"#列表组\" class=\"headerlink\" title=\"列表组\"></a>列表组</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;基础列表组&lt;/h3&gt;</div><div class=\"line\">&lt;ul class=<span class=\"string\">\"list-group\"</span>&gt;</div><div class=\"line\">  &lt;li class=<span class=\"string\">\"list-group-item\"</span>&gt;揭开CSS3的面纱&lt;/li&gt;</div><div class=\"line\">  &lt;li class=<span class=\"string\">\"list-group-item\"</span>&gt;CSS3选择器&lt;/li&gt;</div><div class=\"line\">\t&lt;li class=<span class=\"string\">\"list-group-item\"</span>&gt;CSS3边框&lt;/li&gt;</div><div class=\"line\">\t&lt;li class=<span class=\"string\">\"list-group-item\"</span>&gt;CSS3背景&lt;/li&gt;</div><div class=\"line\">\t&lt;li class=<span class=\"string\">\"list-group-item\"</span>&gt;CSS3文本&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;带徽章的列表组&lt;/h3&gt;</div><div class=\"line\">&lt;ul class=<span class=\"string\">\"list-group\"</span>&gt;</div><div class=\"line\">  &lt;li class=<span class=\"string\">\"list-group-item\"</span>&gt;</div><div class=\"line\">    &lt;span class=<span class=\"string\">\"badge\"</span>&gt;13&lt;/span&gt;揭开CSS3的面</div><div class=\"line\">\t&lt;/li&gt;</div><div class=\"line\">\t&lt;li class=<span class=\"string\">\"list-group-item\"</span>&gt;</div><div class=\"line\">\t\t&lt;span class=<span class=\"string\">\"badge\"</span>&gt;456&lt;/span&gt;CSS3选择器</div><div class=\"line\">\t&lt;/li&gt;</div><div class=\"line\">\t&lt;li class=<span class=\"string\">\"list-group-item\"</span>&gt;</div><div class=\"line\">\t\t&lt;span class=<span class=\"string\">\"badge\"</span>&gt;892&lt;/span&gt;CSS3边框</div><div class=\"line\">\t&lt;/li&gt;</div><div class=\"line\">\t&lt;li class=<span class=\"string\">\"list-group-item\"</span>&gt;</div><div class=\"line\">\t\t&lt;span class=<span class=\"string\">\"badge\"</span>&gt;90&lt;/span&gt;CSS3背景</div><div class=\"line\">\t&lt;/li&gt;</div><div class=\"line\">\t&lt;li class=<span class=\"string\">\"list-group-item\"</span>&gt;</div><div class=\"line\">\t\t&lt;span class=<span class=\"string\">\"badge\"</span>&gt;1290&lt;/span&gt;CSS3文本</div><div class=\"line\">\t&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;带链接的列表组&lt;/h3&gt;</div><div class=\"line\">&lt;ul class=<span class=\"string\">\"list-group\"</span>&gt;</div><div class=\"line\">    &lt;li class=<span class=\"string\">\"list-group-item\"</span>&gt;</div><div class=\"line\">    \t&lt;a href=<span class=\"string\">\"##\"</span>&gt;揭开CSS3的面&lt;/a&gt;</div><div class=\"line\">\t&lt;/li&gt;</div><div class=\"line\">\t&lt;li class=<span class=\"string\">\"list-group-item\"</span>&gt;</div><div class=\"line\">\t\t&lt;a href=<span class=\"string\">\"##\"</span>&gt;CSS3选择器&lt;/a&gt;</div><div class=\"line\">\t&lt;/li&gt;</div><div class=\"line\">\t&lt;li class=<span class=\"string\">\"list-group-item\"</span>&gt;</div><div class=\"line\">\t\t&lt;a href=<span class=\"string\">\"##\"</span>&gt;CSS3边框&lt;/a&gt;</div><div class=\"line\">\t&lt;/li&gt;</div><div class=\"line\">\t&lt;li class=<span class=\"string\">\"list-group-item\"</span>&gt;</div><div class=\"line\">\t\t&lt;a href=<span class=\"string\">\"##\"</span>&gt;CSS3背景&lt;/a&gt;</div><div class=\"line\">\t&lt;/li&gt;</div><div class=\"line\">\t&lt;li class=<span class=\"string\">\"list-group-item\"</span>&gt;</div><div class=\"line\">\t\t&lt;a href=<span class=\"string\">\"##\"</span>&gt;CSS3文本&lt;/a&gt;</div><div class=\"line\">\t&lt;/li&gt;</div><div class=\"line\">&lt;/ul&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;自定义列表组&lt;/h3&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"list-group\"</span>&gt;</div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"list-group-item\"</span>&gt;</div><div class=\"line\">\t\t&lt;h4 class=<span class=\"string\">\"list-group-item-heading\"</span>&gt;图解CSS3&lt;/h4&gt;</div><div class=\"line\">\t\t&lt;p class=<span class=\"string\">\"list-group-item-text\"</span>&gt;</div><div class=\"line\">\t\t\t详细讲解了选择器、边框、背景、文本、颜色、盒模型、伸缩布局盒模型、多列布局、渐变、过渡、动画、媒体、响应Web设计、Web字体等主题下涵盖的所有CSS3新特性...</div><div class=\"line\">\t\t&lt;/p&gt;</div><div class=\"line\">\t&lt;/a&gt;</div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"list-group-item\"</span>&gt;</div><div class=\"line\">\t\t&lt;h4 class=<span class=\"string\">\"list-group-item-heading\"</span>&gt;Sass中国&lt;/h4&gt;</div><div class=\"line\">\t\t&lt;p class=<span class=\"string\">\"list-group-item-text\"</span>&gt;致力于为中国开发者提供最全面, 最具影响力, 最前沿的Sass相关技术与教程...&lt;/p&gt;</div><div class=\"line\">\t&lt;/a&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;组合列表项的状态&lt;/h3&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"list-group\"</span>&gt;</div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"list-group-item active\"</span>&gt;&lt;span class=<span class=\"string\">\"badge\"</span>&gt;5902&lt;/span&gt;图解CSS3&lt;/a&gt;</div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"list-group-item\"</span>&gt;&lt;span class=<span class=\"string\">\"badge\"</span>&gt;15902&lt;/span&gt;W3cplus&lt;/a&gt;</div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"list-group-item\"</span>&gt;&lt;span class=<span class=\"string\">\"badge\"</span>&gt;59020&lt;/span&gt;慕课网&lt;/a&gt;</div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"list-group-item disabled\"</span>&gt;&lt;span class=<span class=\"string\">\"badge\"</span>&gt;0&lt;/span&gt;Sass中国&lt;/a&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;多彩列表组&lt;/h3&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"list-group\"</span>&gt;</div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"list-group-item active\"</span>&gt;&lt;span class=<span class=\"string\">\"badge\"</span>&gt;5902&lt;/span&gt;图解CSS3&lt;/a&gt;</div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"list-group-item list-group-item-success\"</span>&gt;&lt;span class=<span class=\"string\">\"badge\"</span>&gt;15902&lt;/span&gt;W3cplus&lt;/a&gt;</div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"list-group-item list-group-item-info\"</span>&gt;&lt;span class=<span class=\"string\">\"badge\"</span>&gt;59020&lt;/span&gt;慕课网&lt;/a&gt;</div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"list-group-item list-group-item-warning\"</span>&gt;&lt;span class=<span class=\"string\">\"badge\"</span>&gt;0&lt;/span&gt;Sass中国&lt;/a&gt;</div><div class=\"line\">\t&lt;a href=<span class=\"string\">\"##\"</span> class=<span class=\"string\">\"list-group-item list-group-item-danger\"</span>&gt;&lt;span class=<span class=\"string\">\"badge\"</span>&gt;10&lt;/span&gt;Mobile教程&lt;/a&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"面板\"><a href=\"#面板\" class=\"headerlink\" title=\"面板\"></a>面板</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;基础面板&lt;/h3&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"panel panel-default\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"panel-body\"</span>&gt;我是一个基础面板, 带有默认主题样式风格&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;带有头和尾的面板&lt;/h3&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"panel panel-default\"</span>&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"panel-heading\"</span>&gt;图解CSS3&lt;/div&gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"panel-body\"</span>&gt;</div><div class=\"line\">\t\t详细讲解了选择器、边框、背景、文本、颜色、盒模型、伸缩布局盒模型、多列布局、渐变、过渡、动画、媒体、响应Web设计、Web字体等主题下涵盖的所有CSS3新特性</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"panel-footer\"</span>&gt;作者：大漠&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;彩色面板&lt;/h3&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"panel panel-default\"</span>&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"panel-heading\"</span>&gt;图解CSS3&lt;/div&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"panel-body\"</span>&gt;\t\t\t详细讲解了选择器、边框、背景、文本、颜色、盒模型、伸缩布局盒模型、多列布局、渐变、过渡、动画、媒体、响应Web设计、Web字体等主题下涵盖的所有CSS3新特性</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"panel-footer\"</span>&gt;作者：大漠&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"panel panel-primary\"</span>&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"panel-heading\"</span>&gt;图解CSS3&lt;/div&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"panel-body\"</span>&gt;</div><div class=\"line\">\t详细讲解了选择器、边框、背景、文本、颜色、盒模型、伸缩布局盒模型、多列布局、渐变、过渡、动画、媒体、响应Web设计、Web字体等主题下涵盖的所有CSS3新特性</div><div class=\"line\">\t&lt;/div&gt;</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;h3&gt;面板中嵌套表格&lt;/h3&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"panel panel-default\"</span>&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"panel-heading\"</span>&gt;图解CSS3&lt;/div&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"panel-body\"</span>&gt;</div><div class=\"line\">\t\t&lt;p&gt;详细讲解了选择器、边框、背景、文本、颜色、盒模型、伸缩布局盒模型、多列布局、渐变、过渡、动画、媒体、响应Web设计、Web字体等主题下涵盖的所有CSS3新特性</div><div class=\"line\">\t\t&lt;/p&gt;</div><div class=\"line\">\t\t&lt;table class=<span class=\"string\">\"table table-bordered\"</span>&gt;</div><div class=\"line\">\t\t\t&lt;thead&gt;</div><div class=\"line\">\t\t\t\t&lt;tr&gt;</div><div class=\"line\">\t\t\t\t\t&lt;th&gt;＃&lt;/th&gt;</div><div class=\"line\">\t\t\t\t\t&lt;th&gt;我的书&lt;/th&gt;</div><div class=\"line\">\t\t\t\t\t&lt;th&gt;发布时间&lt;/th&gt;</div><div class=\"line\">\t\t\t\t&lt;/tr&gt;</div><div class=\"line\">\t\t\t&lt;/thead&gt;</div><div class=\"line\">\t\t\t&lt;tbody&gt;</div><div class=\"line\">\t\t\t\t&lt;tr&gt;</div><div class=\"line\">\t\t\t\t\t&lt;td&gt;1&lt;/td&gt;</div><div class=\"line\">\t\t\t\t\t&lt;td&gt;《图解CSS3》&lt;/td&gt;</div><div class=\"line\">\t\t\t\t\t&lt;td&gt;2014-07-10&lt;/td&gt;</div><div class=\"line\">\t\t\t\t&lt;/tr&gt;</div><div class=\"line\">\t\t\t&lt;/tbody&gt;</div><div class=\"line\">\t\t&lt;/table&gt;</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"panel-footer\"</span>&gt;作者：大漠&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>在实际应用运中, 你或许希望表格和面板边缘不需要有任何的间距. 但由于panel-body设置了一个padding：15px的值, 为了实现这样的效果. 我们在<strong>实际使用的时候需要把table提取到panel-body外面.</strong></p>\n<hr>\n<h1 id=\"js插件简介\"><a href=\"#js插件简介\" class=\"headerlink\" title=\"js插件简介\"></a>js插件简介</h1><h2 id=\"js库\"><a href=\"#js库\" class=\"headerlink\" title=\"js库\"></a>js库</h2><p>Bootstrap除了包含丰富的Web组件之外, 如前面介绍的下拉菜单、按钮组、导航、分页等. 他还包括一些JavaScript的插件.<br>Bootstrap的JavaScript插件可以单独导入到页面中, 也可以一次性导入到页面中. 因为在Bootstrap中的JavaScript插件都是依赖于jQuery库, 所以不论是单独导入还一次性导入之前必须先导入jQuery库.<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;!—导入jQuery版本库, 因为Bootstrap的JavaScript插件依赖于jQuery --&gt;</div><div class=\"line\">&lt;script src=<span class=\"string\">\"http://libs.baidu.com/jquery/1.9.0/jquery.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;!—- 一次性导入所有Bootstrap的JavaScript插件(压缩版本) --&gt;</div><div class=\"line\">&lt;script src=<span class=\"string\">\"js/bootstrap.min.js\"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>特别声明：jQuery版本库也可以加载你本地的jQuery版本. </p>\n<h2 id=\"动画过渡-Transitions\"><a href=\"#动画过渡-Transitions\" class=\"headerlink\" title=\"动画过渡(Transitions)\"></a>动画过渡(Transitions)</h2><p>transition.js文件为Bootstrap具有过渡动画效果的组件提供了动画过渡效果. 不过需要注意的是, 这些过渡动画都是采用CSS3来实现的, 所以IE6-8浏览器是不具备这些过渡动画效果.<br>默认情况之下, Bootstrap框架中以下组件使用了过渡动画效果：<br>☑ 模态弹出窗(Modal)的滑动和渐变效果；<br>☑ 选项卡(Tab)的渐变效果；<br>☑ 警告框(Alert)的渐变效果；<br>☑ 图片轮播(Carousel)的滑动效果. </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;button class=<span class=\"string\">\"btn btn-primary\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span>&gt;点击我&lt;/button&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"modal fade\"</span> id=<span class=\"string\">\"mymodal\"</span>&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"modal-dialog\"</span>&gt;</div><div class=\"line\">\t\t&lt;div class=<span class=\"string\">\"modal-content\"</span>&gt;</div><div class=\"line\">\t\t\t&lt;div class=<span class=\"string\">\"modal-header\"</span>&gt;</div><div class=\"line\">\t\t\t\t&lt;button <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> class=<span class=\"string\">\"close\"</span> data-dismiss=<span class=\"string\">\"modal\"</span>&gt;&lt;span aria-hidden=<span class=\"string\">\"true\"</span>&gt;&amp;<span class=\"built_in\">times</span>;&lt;/span&gt;&lt;span class=<span class=\"string\">\"sr-only\"</span>&gt;Close&lt;/span&gt;&lt;/button&gt;</div><div class=\"line\">\t\t\t\t&lt;h4 class=<span class=\"string\">\"modal-title\"</span>&gt;模态弹出窗标题&lt;/h4&gt;</div><div class=\"line\">\t\t\t&lt;/div&gt;</div><div class=\"line\">\t\t\t&lt;div class=<span class=\"string\">\"modal-body\"</span>&gt;</div><div class=\"line\">\t\t\t\t&lt;p&gt;模态弹出窗主体内容&lt;/p&gt;</div><div class=\"line\">\t\t\t&lt;/div&gt;</div><div class=\"line\">\t\t\t&lt;div class=<span class=\"string\">\"modal-footer\"</span>&gt;</div><div class=\"line\">\t\t\t\t&lt;button <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> class=<span class=\"string\">\"btn btn-default\"</span> data-dismiss=<span class=\"string\">\"modal\"</span>&gt;关闭&lt;/button&gt;</div><div class=\"line\">\t\t\t\t&lt;button <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> class=<span class=\"string\">\"btn btn-primary\"</span>&gt;保存&lt;/button&gt;</div><div class=\"line\">\t\t\t&lt;/div&gt;</div><div class=\"line\">\t\t&lt;/div&gt;&lt;!-- /.modal-content --&gt;</div><div class=\"line\">\t&lt;/div&gt;&lt;!-- /.modal-dialog --&gt;</div><div class=\"line\">&lt;/div&gt;&lt;!-- /.modal --&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">  $(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">    $(<span class=\"string\">\".btn\"</span>).click(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">      $(<span class=\"string\">\"#mymodal\"</span>).modal(<span class=\"string\">\"toggle\"</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"模态弹出框-Modals\"><a href=\"#模态弹出框-Modals\" class=\"headerlink\" title=\"模态弹出框(Modals)\"></a>模态弹出框(Modals)</h2><p>在 Bootstrap 框架中把模态弹出框统一称为 Modal. 这种弹出框效果在大多数 Web 网站的交互中都可见. 比如点击一个按钮弹出一个框, 弹出的框可能是一段文件描述, 也可能带有按钮操作, 也有可能弹出的是一张图片. </p>\n<h2 id=\"模态弹出框–结构分析\"><a href=\"#模态弹出框–结构分析\" class=\"headerlink\" title=\"模态弹出框–结构分析\"></a>模态弹出框–结构分析</h2><p>Bootstrap框架中的模态弹出框, 分别运用了“modal”、“modal-dialog”和“modal-content”样式, 而弹出窗真正的内容都放置在“modal-content”中, 其主要又包括三个部分：<br>☑ 弹出框头部, 一般使用“modal-header”表示, 主要包括标题和关闭按钮<br>☑ 弹出框主体, 一般使用“modal-body”表示, 弹出框的主要内容<br>☑ 弹出框脚部, 一般使用“modal-footer”表示, 主要放置操作按钮</p>\n<h2 id=\"模态弹出框–实现原理解析\"><a href=\"#模态弹出框–实现原理解析\" class=\"headerlink\" title=\"模态弹出框–实现原理解析\"></a>模态弹出框–实现原理解析</h2><p>实现原理解析：<br>bootstrap中的“模态弹出框”有以下几个特点：<br>1、模态弹出窗是固定在浏览器中的.<br>2、单击右侧全屏按钮, 在全屏状态下, 模态弹出窗宽度是自适应的, 而且modal-dialog水平居中.<br>3、当浏览器视窗大于768px时, 模态弹出窗的宽度为600px. </p>\n<p>两种尺寸选择：<br>除此之外, Bootstrap框架还为模态弹出窗提供了不同尺寸, 一个是大尺寸样式“modal-lg”, 另一个是小尺寸样式“modal-sm”. 其结构上稍做调整<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;div class=<span class=\"string\">\"modal-dialog modal-lg\"</span>&gt;</div><div class=\"line\">       &lt;divclass=<span class=\"string\">\"modal-content\"</span>&gt; ... &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"模态弹出框–触发模态弹出窗2种方法\"><a href=\"#模态弹出框–触发模态弹出窗2种方法\" class=\"headerlink\" title=\"模态弹出框–触发模态弹出窗2种方法\"></a>模态弹出框–触发模态弹出窗2种方法</h2><p>声明式触发方法：<br>方法一：模态弹出窗声明, 只需要自定义两个必要的属性：data-toggle和data-target(bootstrap中声明式触发方法一般依赖于这些自定义的data-xxx 属性. 比如data-toggle=”” 或者 data-dismiss=””).<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;!-- 触发模态弹出窗的元素 --&gt;</div><div class=\"line\">&lt;button <span class=\"built_in\">type</span>=<span class=\"string\">\"button\"</span> data-toggle=<span class=\"string\">\"modal\"</span> data-target=<span class=\"string\">\"#mymodal\"</span> class=<span class=\"string\">\"btn btn-primary\"</span>&gt;点击我会弹出模态弹出窗&lt;/button&gt;</div><div class=\"line\">&lt;!-- 模态弹出窗 --&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"modal fade\"</span> id=<span class=\"string\">\"mymodal\"</span>&gt;</div><div class=\"line\">\t&lt;div class=<span class=\"string\">\"modal-dialog\"</span>&gt;</div><div class=\"line\">\t\t&lt;div class=<span class=\"string\">\"modal-content\"</span>&gt;</div><div class=\"line\">\t\t\t&lt;!-- 模态弹出窗内容 --&gt;</div><div class=\"line\">\t\t&lt;/div&gt;</div><div class=\"line\">\t&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>注意以下事项：<br>1、data-toggle必须设置为modal(toggle中文翻译过来就是触发器)；<br>2、data-target可以设置为CSS的选择符, 也可以设置为模态弹出窗的ID值, 一般情况设置为模态弹出窗的ID值, 因为ID值是唯一的值. </p>\n<p>方法二：触发模态弹出窗也可以是一个链接&lt;a&gt;元素, 那么可以使用链接元素自带的href属性替代data-target属性, 如：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;!-- 触发模态弹出窗的元素 --&gt;</div><div class=\"line\">&lt;a data-toggle=<span class=\"string\">\"modal\"</span> href=<span class=\"string\">\"#mymodal\"</span> class=<span class=\"string\">\" btn btn-primary\"</span> &gt;点击我会弹出模态弹出窗&lt;/a&gt;</div><div class=\"line\">&lt;!-- 模态弹出窗 --&gt;</div><div class=\"line\">&lt;div class=<span class=\"string\">\"modal fade\"</span>  id=<span class=\"string\">\"mymodal\"</span> &gt;</div><div class=\"line\">  &lt;div class=<span class=\"string\">\"modal-dialog\"</span> &gt;</div><div class=\"line\">    &lt;div class=<span class=\"string\">\"modal-content\"</span> &gt;</div><div class=\"line\">      &lt;!-- 模态弹出窗内容 --&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>不过建议还是使用统一使用data-target的方式来触发.</p>\n<h2 id=\"模态弹出框–为弹出框增加过度动画效果\"><a href=\"#模态弹出框–为弹出框增加过度动画效果\" class=\"headerlink\" title=\"模态弹出框–为弹出框增加过度动画效果\"></a>模态弹出框–为弹出框增加过度动画效果</h2><p>可通过给“.modal”增加类名“fade”为模态弹出框增加一个过渡动画效果. </p>\n<h2 id=\"模态弹出框–模态弹出窗的使用-data-参数说明\"><a href=\"#模态弹出框–模态弹出窗的使用-data-参数说明\" class=\"headerlink\" title=\"模态弹出框–模态弹出窗的使用(data-参数说明)\"></a>模态弹出框–模态弹出窗的使用(data-参数说明)</h2><p>除了通过data-toggle和data-target来控制模态弹出窗之外, Bootstrap框架针对模态弹出框还提供了其他自定义data-属性, 来控制模态弹出窗. 比如说:是否有灰色背景modal-backdrop, 是否可以按ESC键关闭模态弹出窗. 有关于Modal弹出窗自定义属性相关说明如下所示<br><img src=\"/images/modal-attr.png\" alt=\"modal-attr\"></p>\n<h2 id=\"模态弹出框–模态弹出窗的使用-JavaScript触发\"><a href=\"#模态弹出框–模态弹出窗的使用-JavaScript触发\" class=\"headerlink\" title=\"模态弹出框–模态弹出窗的使用(JavaScript触发)\"></a>模态弹出框–模态弹出窗的使用(JavaScript触发)</h2><p>JavaScript触发方法<br>除了使用自定义属性触发模态弹出框之外, 还可以通过JavaScript方法来触发模态弹出窗. 通过给一个元素一个事件, 来触发. 比如说给一个按钮一个单击事件, 然后触发模态弹出窗. </p>\n<h2 id=\"JavaScript触发时的参数设置\"><a href=\"#JavaScript触发时的参数设置\" class=\"headerlink\" title=\"JavaScript触发时的参数设置\"></a>JavaScript触发时的参数设置</h2><p>使用JavaScript触发模态弹出窗时, Bootstrap框架提供了一些设置, 主要包括属性设置、参数设置和事件设置. 比如你不想让用户按ESC键关闭模态弹出窗, 你就可以这样做：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">  $(<span class=\"string\">\".btn\"</span>).click(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">    $(<span class=\"string\">\"#mymodal\"</span>).modal(&#123;</div><div class=\"line\">      keyboard:<span class=\"literal\">false</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciuy6rzit0000msq41bc2u58r","tag_id":"ciuy6rzj80002msq47ho500h0","_id":"ciuy6rzjv0007msq4eu1t1lt7"},{"post_id":"ciuy6rzjl0004msq42wkexm0v","tag_id":"ciuy6rzju0006msq4vihafc3o","_id":"ciuy6rzk7000cmsq4xgdwaonv"},{"post_id":"ciuy6rzjv0008msq4xkg9kxf2","tag_id":"ciuy6rzk7000bmsq4jel238xz","_id":"ciuy6rzkd000hmsq4dvy47jl8"},{"post_id":"ciuy6rzk5000amsq4doevy96e","tag_id":"ciuy6rzkb000fmsq4m77be00f","_id":"ciuy6rzkl000lmsq4lffitfis"},{"post_id":"ciuy6rzk7000dmsq4kktektga","tag_id":"ciuy6rzkg000jmsq4lkmod9ce","_id":"ciuy6rzkp000pmsq4817y7hha"},{"post_id":"ciuy6rzke000imsq4d7d3dgai","tag_id":"ciuy6rzkn000nmsq4hvamdqxe","_id":"ciuy6rzkq000rmsq4xgudzbnr"}],"Tag":[{"name":"Git 笔记","_id":"ciuy6rzj80002msq47ho500h0"},{"name":"git笔记","_id":"ciuy6rzju0006msq4vihafc3o"},{"name":"js 笔记","_id":"ciuy6rzk7000bmsq4jel238xz"},{"name":"教程 markdown语法","_id":"ciuy6rzkb000fmsq4m77be00f"},{"name":"笔记 git","_id":"ciuy6rzkg000jmsq4lkmod9ce"},{"name":"教程 Hexo next git","_id":"ciuy6rzkn000nmsq4hvamdqxe"}]}}